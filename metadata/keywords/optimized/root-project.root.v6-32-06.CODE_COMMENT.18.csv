quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,// Extend to 32-bits,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// Extend to 64-bits, then perform a 64-bit multiply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,// Extend to f32 as there is no bf16 libcall.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['Extend'],['Extend']
Modifiability,// Extend to f32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['Extend'],['Extend']
Modifiability,// Extend to natively supported kshift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['Extend'],['Extend']
Modifiability,"// Extend to the left '[[' or '__attribute((' if we saw the attribute,; // unless it is not a valid location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp:3,Extend,Extend,3,interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp,1,['Extend'],['Extend']
Modifiability,"// Extend to the next pow-2. If this store was itself the result of lowering,; // e.g. an s56 store being broken into s32 + s24, we might have a stored type; // that's wider than the stored size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['Extend'],['Extend']
Modifiability,// Extend to the original VT if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['Extend'],['Extend']
Modifiability,// Extend to the original type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['Extend'],['Extend']
Modifiability,"// Extend v4i8/v8i8 vector to v16i8, with undef upper 64-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// Extend value to i64, if required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SelectionDAGInfo.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SelectionDAGInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SelectionDAGInfo.cpp,1,['Extend'],['Extend']
Modifiability,"// Extend vars with elements of other dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:3,Extend,Extend,3,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['Extend'],['Extend']
Modifiability,// Extend with UNDEFs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['Extend'],['Extend']
Modifiability,"// Extend with null values in the ""most significant bits"" by adding elements; // in front of the src vector for big endian, and at the back for little; // endian.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['Extend'],['Extend']
Modifiability,// Extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['Extend'],['Extend']
Modifiability,// Extend: Clearly extending first and adding later is different; // to adding first and extending later in all extended bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:3,Extend,Extend,3,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,4,"['Extend', 'extend']","['Extend', 'extended', 'extending']"
Modifiability,"// ExtendUsesToFormExtLoad - Trying to extend uses of a load to enable this:; // ""fold ({s|z|a}ext (load x)) -> ({s|z|a}ext (truncate ({s|z|a}extload x)))""; // transformation. Returns true if extension are possible and the above; // mentioned transformation is profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Extend,ExtendUsesToFormExtLoad,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,"['Extend', 'extend']","['ExtendUsesToFormExtLoad', 'extend']"
Modifiability,// Extendable insns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:3,Extend,Extendable,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['Extend'],['Extendable']
Modifiability,"// Extended Code Words, Extended Epilog Count",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,4,['Extend'],['Extended']
Modifiability,// Extended Opcodes always start with a zero opcode followed by; // a uleb128 length so you can skip ones you don't know about,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['Extend'],['Extended']
Modifiability,// Extended Traceback table flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h:3,Extend,Extended,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,1,['Extend'],['Extended']
Modifiability,// Extended basic block entries; // Flags to indicate if each PGO related info was enabled in this function,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Extend,Extended,3,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['Extend'],['Extended']
Modifiability,"// Extended columns can only be part of the header extension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx:3,Extend,Extended,3,tree/ntuple/v7/src/RNTupleDescriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx,1,['Extend'],['Extended']
Modifiability,// Extended linear address,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,1,['Extend'],['Extended']
Modifiability,// Extended load operations for i1 types must be promoted,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,2,['Extend'],['Extended']
Modifiability,"// Extended maximum likelihood fit with alternate range definition; // for observed number of events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:3,Extend,Extended,3,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['Extend'],['Extended']
Modifiability,"// Extended mode, set contents to Poisson(pdf*nEvents)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Extend,Extended,3,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,['Extend'],['Extended']
Modifiability,"// Extended mode: Read multiple tokens on a single line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:3,Extend,Extended,3,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['Extend'],['Extended']
Modifiability,// Extended opcode - its value is Opcode itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugFrame.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugFrame.cpp,1,['Extend'],['Extended']
Modifiability,// Extended register without VLX. Use a larger XOR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['Extend'],['Extended']
Modifiability,// Extended source must be a simple vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['Extend'],['Extended']
Modifiability,// Extended table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,1,['Extend'],['Extended']
Modifiability,"// Extended the source vector to the same length and then shuffle it; // into the destination.; // FIXME: since we're shuffling with undef, can we just use the indices; // into that? This could be simpler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Extend,Extended,3,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['Extend'],['Extended']
Modifiability,// Extended type encoding,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Extend,Extended,3,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['Extend'],['Extended']
Modifiability,"// Extended url to be passed to base call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:3,Extend,Extended,3,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['Extend'],['Extended']
Modifiability,// Extended vector element access is an lvalue unless there are duplicates; // in the shuffle expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:3,Extend,Extended,3,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,1,['Extend'],['Extended']
Modifiability,// Extended vector element extraction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h:3,Extend,Extended,3,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,2,['Extend'],['Extended']
Modifiability,// Extended vector type with bool element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:3,Extend,Extended,3,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Extend'],['Extended']
Modifiability,// Extended vector type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:3,Extend,Extended,3,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Extend'],['Extended']
Modifiability,"// Extending -fuse-ld= to an absolute or relative path is unexpected. Checking; // for the linker flavor is brittle. In addition, prepending ""ld."" or ""ld64.""; // to a relative path is surprising. This is more complex due to priorities; // among -B, COMPILER_PATH and PATH. --ld-path= should be used instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:3,Extend,Extending,3,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,1,['Extend'],['Extending']
Modifiability,"// Extending a range of a virtual register can be dangerous,; // since the scavenger will need to find a physical register; // for it. Avoid extending the range past a function call,; // and avoid overlapping it with another virtual register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp,2,"['Extend', 'extend']","['Extending', 'extending']"
Modifiability,// Extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['Extend'],['Extending']
Modifiability,// Extending loads from (native) vectors of i8 into (native) vectors of i16; // are legal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['Extend'],['Extending']
Modifiability,// Extending masked load/Truncating masked stores is expensive because we; // currently don't split them. This means that we'll likely end up; // loading/storing each element individually (hence the high cost).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['Extend'],['Extending']
Modifiability,"// Extending the code in issue 7182, we also want to make sure that the; // integration also works if the bin scaling parameters are not just one,; // which would be equivalent to RooHistFunc.; //; // Let's scale each bin content by the bin index:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx:3,Extend,Extending,3,roofit/roofit/test/testRooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx,1,['Extend'],['Extending']
Modifiability,// Extending to a scalar s128 needs narrowing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['Extend'],['Extending']
Modifiability,// Extending to float128 is not free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Extend'],['Extending']
Modifiability,// Extending v8i1/v16i1 to 512-bit get better performance on KNL; // than extending to 128/256bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extending,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['Extend', 'extend']","['Extending', 'extending']"
Modifiability,"// Extends a pointer to the size of an _Unwind_Word, which is; // uint64_t on all platforms. Generally this gets poked into a; // register and eventually used as an address, so if the; // addressing registers are wider than pointers and the platform; // doesn't implicitly ignore high-order bits when doing; // addressing, we need to make sure we zext / sext based on; // the platform's expectations.; //; // See: http://gcc.gnu.org/ml/gcc-bugs/2002-02/msg00237.html; // Cast the pointer to intptr_t.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Extend,Extends,3,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['Extend'],['Extends']
Modifiability,// Extends from v32i1 masks to 256-bit vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extends,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extends']
Modifiability,// Extends from v64i1 masks to 512-bit vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extends,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extends']
Modifiability,// Extends have to be extending-loads,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:3,Extend,Extends,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,2,"['Extend', 'extend']","['Extends', 'extending-loads']"
Modifiability,// Extends of v16i1/v8i1/v4i1/v2i1 to 128-bit vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Extend,Extends,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extends']
Modifiability,"// Extends on PySequence_Check() to determine whether an object can be iterated; // over (technically, all objects can b/c of C++ pointer arithmetic, hence this; // check isn't 100% accurate, but neither is PySequence_Check()).; // Note: simply having the iterator protocol does not constitute a sequence, bc; // PySequence_GetItem() would fail.; // default to PySequence_Check() if called with a non-C++ object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Extend,Extends,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Extend'],['Extends']
Modifiability,// Extends the set of modeled field declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h:3,Extend,Extends,3,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,1,['Extend'],['Extends']
Modifiability,"// Extensions from GPR to i128 (in VR) typically costs two instructions,; // but a zero-extending load would be just one extra instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:88,extend,extending,88,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,// External HIP managed variables needed to be recorded for transformation; // in both device and host compilations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// External scripting control; // void Configure(Double_t left, Double_t right, Double_t top, Double_t bottom);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLOrthoCamera.h:39,Config,Configure,39,graf3d/gl/inc/TGLOrthoCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLOrthoCamera.h,1,['Config'],['Configure']
Modifiability,// External variable reference. Try to use the dynamic loader to; // get a pointer to it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['variab'],['variable']
Modifiability,"// External viewers need to be created via plugin manager via interface...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:43,plugin,plugin,43,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['plugin'],['plugin']
Modifiability,// Externally visible variables have to be numbered in Sema to properly; // handle unreachable VarDecls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,variab,variables,22,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variables']
Modifiability,"// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To be able start web browser for such windows, one can provide real URL of the; /// web server which will connect with that FastCGI instance:; ///; /// WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; ///; /// For some custom applications one requires to load JavaScript modules or other files.; /// For such applications one may require to load files from other locations which can be configured; /// with AddServerLocation() method or directly via:; ///; /// WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:3161,config,configure,3161,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,2,['config'],"['configure', 'configured']"
Modifiability,// Extra users must have exactly the same cast we are about to create.; // TODO: This restriction could be eased if ExtendUsesToFormExtLoad(); // is enhanced similarly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Extend,ExtendUsesToFormExtLoad,116,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,"['Extend', 'enhance']","['ExtendUsesToFormExtLoad', 'enhanced']"
Modifiability,// Extract a subvector of the first NumDstElts lanes and sign/zero extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp:67,extend,extend,67,interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AutoUpgrade.cpp,1,['extend'],['extend']
Modifiability,// Extract global variables from llvm.used array,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variables']
Modifiability,"// Extract parameters from config object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:27,config,config,27,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,2,['config'],['config']
Modifiability,"// Extract projection configuration from command list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:22,config,configuration,22,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['config'],['configuration']
Modifiability,"// Extract the common elements of ForStmt and CXXForRangeStmt:; // Loop variable, repeat condition, increment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:72,variab,variable,72,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Extract the identity of this server and compare it to the; // identify of the servers known to support multi-range requests.; // The list of server identities is expected to be found in ROOT; // configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:198,config,configuration,198,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['config'],['configuration']
Modifiability,"// Extract the lo/hi parts to any extend to i16.; // We're going to mask off the low byte of each result element of the; // pmullw, so it doesn't matter what's in the high byte of each 16-bit; // element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Extract the top and bottom lanes, then extend the result. Possibly extend; // the result then extract the lanes if the two operands match as it produces; // slightly smaller code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:42,extend,extend,42,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// Extraction should extract high NBits bits, with shift amount calculated as:; // low bits to skip = shift bitwidth - high bits to extract; // The shift amount itself may be extended, and we need to look past zero-ext; // when matching NBits, that will matter for matching later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:175,extend,extended,175,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['extend'],['extended']
Modifiability,"// FIXME (Alex L): First selected SwitchCase means that first case statement.; // is selected actually; // (See https://github.com/apple/swift-clang & CompoundStmtRange).; // FIXME (Alex L): Tweak selection rules for compound statements, see:; // https://github.com/apple/swift-clang/blob/swift-4.1-branch/lib/Tooling/; // Refactor/ASTSlice.cpp#L513; // The user selected multiple statements in a compound statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp:323,Refactor,Refactor,323,interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME Later this checker should be extended to handle constructors; // with multiple arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdVariantChecker.cpp:38,extend,extended,38,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdVariantChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdVariantChecker.cpp,1,['extend'],['extended']
Modifiability,"// FIXME This is not guaranteed, but in practice, in static linking,; // if present, __tls_base's index is 1. This doesn't hold for dynamic; // linking, so TLS variables used in dynamic linking won't have; // correct debug info for now. See; // https://github.com/llvm/llvm-project/blob/19afbfe33156d211fa959dadeea46cd17b9c723c/lld/wasm/Driver.cpp#L786-L823",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:160,variab,variables,160,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['variab'],['variables']
Modifiability,// FIXME need to be more flexible about rounding mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:25,flexible,flexible,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['flexible'],['flexible']
Modifiability,// FIXME(llvm-project/issues/57323): Refactor Diagnostic classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnostic.cpp:37,Refactor,Refactor,37,interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnostic.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME. Consolidate this routine with RewriteBlockPointerType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:40,Rewrite,RewriteBlockPointerType,40,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['RewriteBlockPointerType']
Modifiability,// FIXME. Handle __weak variable (BLOCK_FIELD_IS_WEAK) as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variable']
Modifiability,// FIXME. This duplicates one in RewriteObjCFoundationAPI.cpp,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:33,Rewrite,RewriteObjCFoundationAPI,33,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['Rewrite'],['RewriteObjCFoundationAPI']
Modifiability,// FIXME. rewriter does not support __block c++ objects which; // require construction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:10,rewrite,rewriter,10,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['rewrite'],['rewriter']
Modifiability,"// FIXME: 64-bit operands can zero extend, sign extend, or pad zeroes for FP; // types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,2,['extend'],['extend']
Modifiability,"// FIXME: A variable template is a dependent context, but is not a; // DeclContext. A context within it (such as a lambda-expression); // should be considered dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Add a new kind of DeclarationName for an inherited constructor.; // For now we use the name of the base class constructor as a member of the; // derived class to indicate a (fake) inherited constructor name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:51,inherit,inherited,51,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['inherit'],['inherited']
Modifiability,"// FIXME: Add a way to query the inner data; /// Merge with other RHistDataMomentUncert data, assuming same bin configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:112,config,configuration,112,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,"// FIXME: Add support for VLA type arguments and VLA expressions.; // When that happens, we should probably refactor VLASizeChecker's code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:108,refactor,refactor,108,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: Add the extended attributes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:18,extend,extended,18,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['extend'],['extended']
Modifiability,// FIXME: Adding this to every 'CallStackFrame' may have a nontrivial impact; // on the overall stack usage of deeply-recursing constexpr evaluations.; // (We should cache this map rather than recomputing it repeatedly.); // But let's try this and see how it goes; we can look into caching the map; // as a later change.; /// LambdaCaptureFields - Mapping from captured variables/this to; /// corresponding data members in the closure class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:370,variab,variables,370,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,// FIXME: All of this out-of-bounds checking should eventually be refactored; // into a common place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnPointerRangeChecker.cpp:66,refactor,refactored,66,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnPointerRangeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnPointerRangeChecker.cpp,1,['refactor'],['refactored']
Modifiability,// FIXME: Apparently we create inreg operations that could be regular; // extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:74,extend,extends,74,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,// FIXME: Apply AtomicChanges directly once the refactoring APIs are; // ready.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/RenamingAction.cpp:48,refactor,refactoring,48,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/RenamingAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/RenamingAction.cpp,1,['refactor'],['refactoring']
Modifiability,// FIXME: ArgLocs[++i] may extend beyond ArgLocs.size(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:27,extend,extend,27,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,1,['extend'],['extend']
Modifiability,"// FIXME: CXX17: Use init-statement in if to declare `error` variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TParallelMergingFile.cxx:61,variab,variable,61,net/net/src/TParallelMergingFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TParallelMergingFile.cxx,1,['variab'],['variable']
Modifiability,// FIXME: Capture used variables.; // Compute the return type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: Check visibility. New is hidden but has a complete type. If New; // has no array bound, it should not inherit one from Old, if Old is not; // visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:112,inherit,inherit,112,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherit']
Modifiability,"// FIXME: Checking both values should be unnecessary, since they should have; // a consistent shape. However, right now we can end up with BoolValue's in; // integer-typed variables due to our incorrect handling of; // boolean-to-integer casts (we just propagate the BoolValue to the result; // of the cast). So, a join can encounter an integer in one branch but a; // bool in the other.; // For example:; // ```; // std::optional<bool> o;; // int x;; // if (o.has_value()); // x = o.value();; // ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:172,variab,variables,172,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['variab'],['variables']
Modifiability,// FIXME: Closure-library specific stuff should not be hard-coded but be; // configurable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:77,config,configurable,77,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,2,['config'],['configurable']
Modifiability,"// FIXME: Current only handle those Comdat groups that only containing one; // function.; // (1) For a Comdat group containing multiple functions, we need to have a; // unique postfix based on the hashes for each function. There is a; // non-trivial code refactoring to do this efficiently.; // (2) Variables can not be renamed, so we can not rename Comdat function in a; // group including global vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:255,refactor,refactoring,255,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,2,"['Variab', 'refactor']","['Variables', 'refactoring']"
Modifiability,"// FIXME: Do something a bit more intelligent inside constructor and; // destructor code. Constructors and destructors must assume unique access; // to 'this', so checks on member variable access is disabled, but we should; // still enable checks on other objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:180,variab,variable,180,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Does not precisely handle non-virtual diamond inheritance. A single; // field decl will be modeled for all instances of the inherited field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:56,inherit,inheritance,56,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,2,['inherit'],"['inheritance', 'inherited']"
Modifiability,"// FIXME: Does the addition of const really only apply in; // potentially-evaluated contexts? Since the variable isn't actually; // captured in an unevaluated context, it seems that the answer is no.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Enhance this expansion to use the .lit4 & .lit8 sections; // where appropriate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:10,Enhance,Enhance,10,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,2,['Enhance'],['Enhance']
Modifiability,// FIXME: Enumerated types are variable width in straight AAPCS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Eventually we should handle arbitrary locations. We can do this; // by having an enhanced memory model that does low-level typing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp:91,enhance,enhanced,91,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp,1,['enhance'],['enhanced']
Modifiability,"// FIXME: ExtendedBinding needs the obs list passing to it ... should be fixed in RooFit; // until then, this will return ""1"" and so the pdf's histograms wont be normalized properly in relation; // to stacks of its comps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:10,Extend,ExtendedBinding,10,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Extend'],['ExtendedBinding']
Modifiability,"// FIXME: Find a way to represent constant variables, since they are; // relatively common.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: For a specialization of a variable template, we don't; // distinguish between ""declaration and type implicitly instantiated""; // and ""implicit instantiation of definition requested"", so we have; // no direct way to avoid enqueueing the pending instantiation; // multiple times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: For any other kind of variable, we should build a CFG for its; // initializer and check whether the context in question is reachable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: For mips32r2, the sequence of (BuildPairF64 (ins (ExtractElementF64; // Op 1), $zero, 31 1) (ExtractElementF64 Op 0)) and the Op has one use, we; // should be able to drop the usage of mfc1/mtc1 and rewrite the register in; // place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:209,rewrite,rewrite,209,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// FIXME: For now we invalidate the tracking of all symbols passed to blocks; // via captured variables, even though captured variables result in a copy; // and in implicit increment/decrement of a retain count.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:94,variab,variables,94,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,2,['variab'],['variables']
Modifiability,"// FIXME: GetAbsDifference tries to compute the length of the function; // immediately, before the whole file is emitted, but in general; // that's impossible: the size in bytes of certain assembler directives; // like .align and .fill is not known until the whole file is parsed and; // relaxations are applied. Currently, GetAbsDifference fails with a fatal; // error in that case. (We mostly don't hit this because inline assembly; // specifying those directives is rare, and we don't normally try to; // align loops on AArch64.); //; // There are two potential approaches to delaying the computation. One,; // we could emit something like "".word (endfunc-beginfunc)/4+0x10800000"",; // as long as we have some conservative estimate we could use to prove; // that we don't need to split the unwind data. Emitting the constant; // is straightforward, but there's no existing code for estimating the; // size of the function.; //; // The other approach would be to use a dedicated, relaxable fragment,; // which could grow to accommodate splitting the unwind data if; // necessary. This is more straightforward, since it automatically works; // without any new infrastructure, and it's consistent with how we handle; // relaxation in other contexts. But it would require some refactoring; // to move parts of the pdata/xdata emission into the implementation of; // a fragment. We could probably continue to encode the unwind codes; // here, but we'd have to emit the pdata, the xdata header, and the; // epilogue scopes later, since they depend on whether the we need to; // split the unwind data.; //; // If this is fixed, remove code in AArch64ISelLowering.cpp that; // disables loop alignment on Windows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:1276,refactor,refactoring,1276,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,1,['refactor'],['refactoring']
Modifiability,"// FIXME: HTML is currently our default output type, but if the output; // directory isn't specified, it acts like if it was in the minimal text; // output mode. This doesn't make much sense, we should have the minimal text; // as our default. In the case of backward compatibility concerns, this could; // be preserved with -analyzer-config-compatibility-mode=true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:335,config,config-compatibility-mode,335,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['config'],['config-compatibility-mode']
Modifiability,// FIXME: Handle other kinds of non-odr-use DeclRefExprs.; // Check for captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:81,variab,variables,81,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: Here we actually perform an implicit conversion from the loaded; // value to the variable type. What we should model is stores to variables; // that blow past the extent of the variable. If the address of the; // variable is reinterpretted, it is possible we stored a different value; // that could fit within the variable. Either we need to cast these when; // storing them or reinterpret them lazily (as we do here).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:91,variab,variable,91,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// FIXME: Here, the offset of the start of the line is supposed to be; // expressed in terms of the original input not the ""real"" rewrite; // buffer. How do we compute that reliably? It might be tempting to use; // curLineStartOffs + OrigOffset - RealOffset, but that assumes the; // difference between the original and real offset is the same at the; // removed text and at the start of the line, but that's not true if; // edits were previously made earlier on the line. This bug is also; // documented by a FIXME on the definition of; // clang::Rewriter::RewriteOptions::RemoveLineIfEmpty. A reproducer for; // the implementation below is the test RemoveLineIfEmpty in; // clang/unittests/Rewrite/RewriteBufferTest.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp:130,rewrite,rewrite,130,interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,5,"['Rewrite', 'rewrite']","['Rewrite', 'RewriteBufferTest', 'RewriteOptions', 'Rewriter', 'rewrite']"
Modifiability,// FIXME: I believe that this could use copy_if if the Inst reference could; // be adapted into a pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:83,adapt,adapted,83,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['adapt'],['adapted']
Modifiability,"// FIXME: Ideally this would be the same as above using i1 types, however; // for the moment we can't deal with fixed i1 vector types properly, so; // instead extend the predicate to a result type sized integer vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:159,extend,extend,159,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// FIXME: If DiagDecl is an implicitly-declared special member function; // or an inheriting constructor, we should be much more explicit about why; // it's not constexpr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:82,inherit,inheriting,82,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['inherit'],['inheriting']
Modifiability,"// FIXME: If VD is captured by copy or is an escaping __block variable,; // use the alignment of VD's type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: If an externally-visible declaration extends multiple temporaries,; // we need to give each temporary the same name in every translation unit (and; // we also need to make the temporaries externally-visible).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:47,extend,extends,47,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['extend'],['extends']
Modifiability,"// FIXME: If only referring to a part of the variable described by the; // dbg.declare, then we want to insert a DPValue for the corresponding; // fragment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,"// FIXME: If only referring to a part of the variable described by the; // dbg.declare, then we want to insert a dbg.value for the corresponding; // fragment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,"// FIXME: If storing to a part of the variable described by the dbg.declare,; // then we want to insert a dbg.value for the corresponding fragment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,"// FIXME: If the offset won't fit in 24-bits, compute the offset into a; // scratch register. If DestReg is a virtual register, use it as the; // scratch register; otherwise, create a new virtual register (to be; // replaced by the scavenger at the end of PEI). That case can be optimized; // slightly if DestReg is SP which is always 16-byte aligned, so the scratch; // register can be loaded with offset%8 and the add/sub can use an extending; // instruction with LSL#3.; // Currently the function handles any offsets but generates a poor sequence; // of code.; // assert(Offset < (1 << 24) && ""unimplemented reg plus immediate"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:435,extend,extending,435,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['extend'],['extending']
Modifiability,"// FIXME: If the variable has initialization that can't be jumped; // over, bail out of any immediately-surrounding compound-statement; // too. There can't be any case labels here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: If there's already a constraint tracker for this variable,; // we shouldn't emit anything here (c.f. the double note in; // test/Analysis/inlining/path-notes.c)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: If this is a redeclaration of a function from another module, handle; // inheritance of default arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:83,inherit,inheritance,83,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['inherit'],['inheritance']
Modifiability,"// FIXME: If we error out because an outer lambda can not implicitly; // capture a variable that an inner lambda explicitly captures, we; // should have the inner lambda do the explicit capture - because; // it makes for cleaner diagnostics later. This would purely be done; // so that the diagnostic does not misleadingly claim that a variable; // can not be captured by a lambda implicitly even though it is captured; // explicitly. Suggestion:; // - create const bool VariableCaptureWasInitiallyExplicit = Explicit; // at the function head; // - cache the StartingDeclContext - this must be a lambda; // - captureInLambda in the innermost lambda the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,4,"['Variab', 'variab']","['VariableCaptureWasInitiallyExplicit', 'variable']"
Modifiability,"// FIXME: If we have any other entity with this name in global scope,; // the declaration is ill-formed, but that is a defect: it breaks the; // 'stat' hack, for instance. Only variables can have mangled name; // clashes with extern ""C"" declarations, so only they deserve a; // diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:177,variab,variables,177,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: In a modules build, do we need the entire path to be visible for us; // to be able to use the inheritance relationship?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:104,inherit,inheritance,104,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheritance']
Modifiability,"// FIXME: In the current state, the IsAlignas member variable is only true; // with the C++ `alignas` keyword but not `_Alignas`. The following; // expression works around the otherwise lost information so it will return; // true for `alignas` or `_Alignas` while still returning false for things; // like `__attribute__((aligned))`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h:53,variab,variable,53,interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h,1,['variab'],['variable']
Modifiability,"// FIXME: Indirect doesn't need extending, but fast-isel doesn't fully; // support this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:32,extend,extending,32,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extending']
Modifiability,"// FIXME: It doesn't make sense to me that DiagID is an incoming argument here; // and yet we also use the current diag ID on the DiagnosticsEngine. This has; // been made more painfully obvious by the refactor that introduced this; // function, but it is possible that the incoming argument can be; // eliminated. If it truly cannot be (for example, there is some reentrancy; // issue I am not seeing yet), then there should at least be a clarifying; // comment somewhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:202,refactor,refactor,202,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['refactor'],['refactor']
Modifiability,"// FIXME: Locals can be backed by caller allocas (sret, byval).; // Note: trackAssignments doesn't respect dbg.declare's IR positions (as it; // doesn't ""understand"" dbg.declares). However, this doesn't appear to break; // any rules given this description of dbg.declare from; // llvm/docs/SourceLevelDebugging.rst:; //; // It is not control-dependent, meaning that if a call to llvm.dbg.declare; // exists and has a valid location argument, that address is considered to; // be the true home of the variable across its entire lifetime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:500,variab,variable,500,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Make this configurable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:20,config,configurable,20,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['config'],['configurable']
Modifiability,// FIXME: Move FixItRewriteInPlace from lib/Rewrite/Frontend/FrontendActions.cpp; // into a header file and reuse that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp:44,Rewrite,Rewrite,44,interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-check/ClangCheck.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// FIXME: Much of this is copy-paste from ParsePrintfSpecifier.; // We can possibly refactor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:84,refactor,refactor,84,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,1,['refactor'],['refactor']
Modifiability,"// FIXME: Multiple variables declared in a single declaration; // currently lack the information needed to correctly determine their; // ranges when accounting for the type-specifier. We use context; // stored in the CXCursor to determine if the VarDecl is in a DeclGroup,; // and if so, whether it is the first decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:19,variab,variables,19,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,3,['variab'],['variables']
Modifiability,"// FIXME: Need to add support for variable length array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:34,variab,variable,34,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['variab'],['variable']
Modifiability,// FIXME: Needs a better variable than TargetTriple,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Offsets greater than 16 bits are not yet implemented.; // FIXME: The correct range is a 32-bit sign-extended number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:110,extend,extended,110,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: On most platforms, `Target`'s component symbols are labels from; // having been simplified during evaluation, but on Mach-O they can be; // variables due to PR19203. This, and the line below for `B` can be; // restored to call `getLabelOffset` when PR19203 is fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp:150,variab,variables,150,interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: Only extend SETCC N, N and SETCC N, c for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// FIXME: Only store metadata for declarations here, and move data for global; // variable definitions to a separate block (PR28134).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: OpenCL doesn't define the exact compile time semantics for a block; // assignment.; // The current behavior is similar to C++ lambdas. A block might be; // assigned to a variable iff its return type and parameters are compatible; // (C99 6.2.7) with the corresponding return type and parameters of the LHS of; // an assignment. Presumably it should behave in way that a function pointer; // assignment does in C, so for each parameter and return type:; // * CVR and address space of LHS should be a superset of CVR and address; // space of RHS.; // * unqualified types should be compatible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:180,variab,variable,180,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// FIXME: Overaligned static allocas should be grouped into; // a single dynamic allocation instead of using a separate; // stack allocation for each one.; // Inform the Frame Information that we have variable-sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:201,variab,variable-sized,201,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,1,['variab'],['variable-sized']
Modifiability,// FIXME: Pass GV to EnumerateMetadata and arrange for the bitcode writer; // to write metadata to the global variable's own metadata block; // (PR28134).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp,2,['variab'],['variable']
Modifiability,// FIXME: Portability.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:10,Portab,Portability,10,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,1,['Portab'],['Portability']
Modifiability,// FIXME: Properly determine whether a variably-modified type can throw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:39,variab,variably-modified,39,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,5,['variab'],['variably-modified']
Modifiability,"// FIXME: Proposed fix to core wording issue: if a class inherits; // a default constructor and doesn't explicitly declare one, one; // is declared implicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:57,inherit,inherits,57,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherits']
Modifiability,// FIXME: Refactor error handling in MachOReader and report an error; // if we encounter an invalid relocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Refactor this and the account subcommand to reduce code; // duplication,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,1,['Refactor'],['Refactor']
Modifiability,"// FIXME: Refactor this code to an accessor on the AST node which returns the; // ""type"" of component access, and share with code below and in Sema.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Refactor this code; this duplicates logic in LibCallsShrinkWrap; // (and to some extent ConstantFoldScalarCall).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Refactor this into a checker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Refactor with EmitExprAsInit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Refactor with mergeHeaderFileInfo in HeaderSearch.cpp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:10,Refactor,Refactor,10,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['Refactor'],['Refactor']
Modifiability,"// FIXME: Remove this flag when it is no longer necessary to convert; // llvm.dbg.declare to avoid inaccurate debug info. Setting this to false; // increases variable availability at the cost of accuracy. Variables that; // cannot be promoted by mem2reg or SROA will be described as living in memory; // for their entire lifetime. However, passes like DSE and instcombine can; // delete stores to the alloca, leading to misleading and inaccurate debug; // information. This flag can be removed when those passes are fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:158,variab,variable,158,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,// FIXME: Rewrite the Actions to avoid duplication of descriptions/names with; // rules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/RefactoringActions.cpp:10,Rewrite,Rewrite,10,interpreter/llvm-project/clang/lib/Tooling/Refactoring/RefactoringActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/RefactoringActions.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// FIXME: Rewrite the extracted code performing any required adjustments.; // FIXME: Capture any field if necessary (method -> function extraction).; // FIXME: Sort captured variables by name.; // FIXME: Capture 'this' / 'self' if necessary.; // FIXME: Compute the actual parameter types.; // Compute the location of the extracted declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp:10,Rewrite,Rewrite,10,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variables']"
Modifiability,// FIXME: See CFGBuilder::addLocalScopeForVarDecl.; //; // Lifetime-extending constructs are handled here. This works for a single; // temporary in an initializer expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:68,extend,extending,68,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['extend'],['extending']
Modifiability,"// FIXME: Setting IsMultiVariableDeclStmt for the whole line is error-prone,; // because it does not take into account nested scopes like lambdas.; // In multi-variable declaration statements, attach */& to the variable; // independently of the style. However, avoid doing it if we are in a nested; // scope, e.g. lambda. We still need to special-case statements with; // initializers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:160,variab,variable,160,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,2,['variab'],['variable']
Modifiability,// FIXME: Should we lifetime-extend through the result of a statement; // expression?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:29,extend,extend,29,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,// FIXME: Skip VLAs for now (let these variables use dbg.declares).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:39,variab,variables,39,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: Switch to generic polymorphic when we make c++14 default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:28,polymorphi,polymorphic,28,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['polymorphi'],['polymorphic']
Modifiability,"// FIXME: The Clang version string is not particularly granular;; // the analyzer infrastructure can change a lot between releases.; // Unfortunately, this string has to be statically embedded in each plugin,; // so we can't just use the functions defined in Version.h.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:201,plugin,plugin,201,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,1,['plugin'],['plugin']
Modifiability,"// FIXME: The arglist was already parsed by the lookup, we should; // enhance the lookup to return the resulting expression; // list so we do not need to parse it again here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx:70,enhance,enhance,70,core/metacling/src/TClingCallFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx,1,['enhance'],['enhance']
Modifiability,"// FIXME: The current implementation of; // AsmParser::parseRegisterOrRegisterNumber in MC implies we either emit this; // as an integer or we provide a name which represents a physical register.; // For CFI instructions we really want to emit a name for the DWARF register; // instead, because there may be multiple DWARF registers corresponding to a; // single physical register. One case where this problem manifests is with; // wave32/wave64 where using the physical register name is ambiguous: if we; // write e.g. `.cfi_undefined v0` we lose information about the wavefront; // size which we need to encode the register in the final DWARF. Ideally we; // would extend MC to support parsing DWARF register names so we could do; // something like `.cfi_undefined dwarf_wave32_v0`. For now we just live with; // non-pretty DWARF register names in assembly text.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp:667,extend,extend,667,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp,1,['extend'],['extend']
Modifiability,"// FIXME: The order of evaluation of these 'getResult' calls is very; // significant! Re-ordering these variables will cause GVN when run alone to; // be less effective! We should fix memdep and basic-aa to not exhibit this; // behavior, but until then don't change the order here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:104,variab,variables,104,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: These should almost certainly not be handled here, and instead; // handled with the help of TLI or the target itself. This was largely; // ported from existing analysis heuristics here so that such refactorings; // can take place in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h:208,refactor,refactorings,208,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,1,['refactor'],['refactorings']
Modifiability,"// FIXME: This assertion cannot be enabled (yet) because the ObjC rewriter; // functionality creates a function without a prototype regardless of; // language mode (so it makes them even in C++). Once the rewriter has been; // fixed, this assertion can be enabled again.; //assert(!LangOpts.requiresStrictPrototypes() &&; // ""strict prototypes are disabled"");; // Unique functions, to guarantee there is only one function of a particular; // structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:66,rewrite,rewriter,66,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,['rewrite'],['rewriter']
Modifiability,"// FIXME: This assumes that all values are signed integers which may; // be incorrect in unusual codes and incorrectly use sext instead of zext.; // for (uint32_t i = 0; i < 512; ++i) {; // uint8_t trunc = i;; // A[trunc] = 42;; // }; // This consecutively iterates twice over A. If `trunc` is sign-extended,; // we would conclude that this may iterate backwards over the array.; // However, LoopCacheAnalysis is heuristic anyway and transformations must; // not result in wrong optimizations if the heuristic was incorrect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:299,extend,extended,299,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: This can trigger the instantiation of the initializer of a; // variable, which can cause the expression to become value-dependent; // or error-dependent. Do we need to propagate the new dependence bits?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:73,variab,variable,73,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// FIXME: This causes each file to be re-parsed and syntax-highlighted; // and macro-expanded separately for each report. We could cache such rewrites; // across all reports and only re-do the part that's actually different:; // the warning/note bubbles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:142,rewrite,rewrites,142,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['rewrite'],['rewrites']
Modifiability,// FIXME: This check should be for a variable template instantiation only.; // Check that this is a valid instantiation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['variab'],['variable']
Modifiability,// FIXME: This code is nearly duplicated in InstSimplify. Using/refactoring; // decomposeBitTestICmp() might help.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:64,refactor,refactoring,64,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['refactor'],['refactoring']
Modifiability,"// FIXME: This could just be RegistersByName[name] = register, except that; // causes some failures in MIPS - perhaps they have duplicate register name; // entries? (or maybe there's a reason for it - I don't know much about this; // code, just drive-by refactoring)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:254,refactor,refactoring,254,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['refactor'],['refactoring']
Modifiability,"// FIXME: This does not work for vectors on most targets. Sign-; // and zero-extend operations are currently folded into extending; // loads, whether they are legal or not, and then we end up here; // without any support for legalizing them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,// FIXME: This entire function is a giant hack to provide us with decent; // operand range validation/diagnostics until TableGen/MC can be extended; // to support autogeneration of this kind of validation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:139,extend,extended,139,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: This file contains structural duplication with other parts of the; // code that sets up a compiler to run tools on it, and we should refactor; // it to be based on the same framework.; /// Builds a clang driver initialized for running clang tools.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp:143,refactor,refactor,143,interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: This is a bit conservative/simple - it emits negative values always; // sign extended to 64 bits rather than minimizing the number of bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp:87,extend,extended,87,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: This is a hack to deal with RegionStore's inability to distinguish a; // default value for /part/ of an aggregate from a default value for the; // /entire/ aggregate. The most common case of this is when struct Outer; // has as its first member a struct Inner, which is copied in from a stack; // variable. In this case, even if the Outer's default value is symbolic, 0,; // or unknown, it gets overridden by the Inner's default value of undefined.; //; // This is a general problem -- if the Inner is zero-initialized, the Outer; // will now look zero-initialized. The proper way to solve this is with a; // new version of RegionStore that tracks the extent of a binding as well; // as the offset.; //; // This hack only takes care of the undefined case because that can very; // quickly result in a warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:307,variab,variable,307,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,2,['variab'],['variable']
Modifiability,"// FIXME: This is a hack. We need a better way to communicate the; // AST file, compiler instance, and file name than member variables; // of FrontendAction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTMerge.cpp:125,variab,variables,125,interpreter/llvm-project/clang/lib/Frontend/ASTMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTMerge.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: This is a simplified version of what's in CFRefCount.cpp -- it makes; // some assumptions about the value that CFRefCount can't. Even so, it should; // probably be refactored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:174,refactor,refactored,174,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['refactor'],['refactored']
Modifiability,"// FIXME: This is necessary because DAGISel uses ""Subtarget->"" and GlobalISel; // uses ""STI."" in the code generated by TableGen. We need to unify the name of; // Subtarget variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp:172,variab,variable,172,interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp,1,['variab'],['variable']
Modifiability,// FIXME: This is not enough to unambiguously identify the member in a; // multiple-inheritance scenario.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/APValue.cpp:84,inherit,inheritance,84,interpreter/llvm-project/clang/lib/AST/APValue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/APValue.cpp,1,['inherit'],['inheritance']
Modifiability,"// FIXME: This is technically correct but gives a different result to gas,; // but gas is incomplete there (it has a fixme noting it doesn't work with; // 64-bit addresses).; // FIXME: With -msym32 option, the address expansion for N64 should probably; // use the O32 / N32 case. It's safe to use the 64 address expansion as the; // symbol's value is considered sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:367,extend,extended,367,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: This is wrong!!! TVirtualStreamerInfo::kBits is a variable length type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:60,variab,variable,60,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['variab'],['variable']
Modifiability,"// FIXME: This message sounds scary, should be scary, but incorrectly states; // that all configs are super dangerous. In reality, many of them should be; // accessible to the user. We should create a user-facing subset of config; // options under a different frontend flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp:90,config,configs,90,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp,2,['config'],"['config', 'configs']"
Modifiability,// FIXME: This method shares a lot of code with; // MCExternalSymbolizer::tryAddingSymbolicOperand. It may be possible; // refactor the MCExternalSymbolizer interface to allow more of this; // implementation to be shared.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp:123,refactor,refactor,123,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:95,variab,variables,95,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,3,['variab'],['variables']
Modifiability,// FIXME: This needs to be refactored; some other isInMainFile users want; // these semantics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:27,refactor,refactored,27,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['refactor'],['refactored']
Modifiability,"// FIXME: This really, really shouldn't use TargetMachine. We don't want; // coupling between MC and TM anywhere we can help it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:77,coupling,coupling,77,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['coupling'],['coupling']
Modifiability,"// FIXME: This should be a cast from a 1-bit integer type to a boolean type,; // but the former is not available in Clang. Instead, extend the APSInt; // directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:132,extend,extend,132,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['extend'],['extend']
Modifiability,"// FIXME: This should go into the Lexer, but we need to figure out how; // to handle ranges for refactoring in general first - there is no obvious; // good way how to integrate this into the Lexer yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp:96,refactor,refactoring,96,interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp,1,['refactor'],['refactoring']
Modifiability,"// FIXME: This should not happen. The language guarantees a presence; // of a valid initializer here, so the reference shall not be undefined.; // It seems that we're calling destructors over variables that; // were not initialized yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:192,variab,variables,192,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: This utility is currently required because the Rewriter currently; // does not rewrite this expression:; // {0, +, (sext ix (trunc iy to ix) to iy)}; // into {0, +, %step},; // even when the following Equal predicate exists:; // ""%step == (sext ix (trunc iy to ix) to iy)"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:57,Rewrite,Rewriter,57,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,"['Rewrite', 'rewrite']","['Rewriter', 'rewrite']"
Modifiability,// FIXME: This was originally copied from ArrayBoundChecker.cpp. Refactor?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:65,Refactor,Refactor,65,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['Refactor'],['Refactor']
Modifiability,// FIXME: Unify the parsing codepaths for condition variables and; // simple-declarations so that we don't need to eagerly figure out which; // kind we have here. (Just parse init-declarators until we reach a; // semicolon or right paren.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:52,variab,variables,52,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['variab'],['variables']
Modifiability,"// FIXME: We can meaningfully extend this to cover non-const objects, but; // we will need special handling: we should be able to access only; // subobjects of such objects that are themselves declared const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:30,extend,extend,30,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['extend'],['extend']
Modifiability,"// FIXME: We can promote this to an error. The function or variable can't; // be defined anywhere else, so the program must necessarily violate the; // one definition rule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: We can use sign extended 64-bit literals, but only for signed; // operands. At the moment we do not know if an operand is signed.; // Such operand will be encoded as its low 32 bits and then either; // correctly sign extended or incorrectly zero extended by HW.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,3,['extend'],['extended']
Modifiability,// FIXME: We could probably handle weird extending loads better.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:41,extend,extending,41,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['extend'],['extending']
Modifiability,"// FIXME: We could use a placeholder here, however NamedMDNode are; // taking MDNode as operand and not using the Metadata infrastructure.; // It is acknowledged by 'TODO: Inherit from Metadata' in the; // NamedMDNode class definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:172,Inherit,Inherit,172,interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,1,['Inherit'],['Inherit']
Modifiability,"// FIXME: We currently cannot assert that temporaries are clear, because; // lifetime extended temporaries are not always modelled correctly. In some; // cases when we materialize the temporary, we do; // createTemporaryRegionIfNeeded(), and the region changes, and also the; // respective destructor becomes automatic from temporary. So for now clean up; // the state manually before asserting. Ideally, this braced block of code; // should go away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:86,extend,extended,86,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['extend'],['extended']
Modifiability,"// FIXME: We don't currently support constants from the RHS of subs,; // when we are zero-extended, because we need a way to zero-extended; // them before they are negated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:90,extend,extended,90,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,2,['extend'],['extended']
Modifiability,"// FIXME: We have no way of representing inherited dependent alignments; // in a case like:; // template<int A, int B> struct alignas(A) X;; // template<int A, int B> struct alignas(B) X {};; // For now, we just ignore any alignas attributes which are not on the; // definition in such a case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:41,inherit,inherited,41,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherited']
Modifiability,"// FIXME: We ignore attributes for now.; // For an inheriting constructor declaration, the name of the using; // declaration is the name of a constructor in this class, not in the; // base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:51,inherit,inheriting,51,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,"// FIXME: We inherit EnableImplicitIMT from TBufferMerger tests (we are sharing the same executable) where we call; // EnableThreadSafety(). Here, we hit a race condition in TBranch::FlushBaskets. Once we get that fixed we probably; // should re-enable implicit MT.; //; // In general, we should probably have a way to conditionally enable/disable thread safety.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileMergerTests.cxx:13,inherit,inherit,13,io/io/test/TFileMergerTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileMergerTests.cxx,1,['inherit'],['inherit']
Modifiability,// FIXME: We need something similar to CXXRecordDecl::DefinitionData.; /// Whether this variable is a definition which was demoted due to; /// module merge.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:88,variab,variable,88,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,// FIXME: We need to force the emission/use of a guard variable for; // some variables even if we can constant-evaluate them because; // we can't guarantee every translation unit will constant-evaluate them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// FIXME: We should filter out all non-type templates here, particularly; // variable templates and concepts. But the exclusion of alias templates; // and template template parameters is a wording defect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:77,variab,variable,77,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,// FIXME: We should use a much lighter weight system than the usual; // polymorphic pattern because we don't own AAResult. It should; // ideally involve two pointers and no separate allocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:72,polymorphi,polymorphic,72,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['polymorphi'],['polymorphic']
Modifiability,// FIXME: We should use the variables actual alignment as an argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,// FIXME: What about layers of ElementRegions?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:21,layers,layers,21,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['layers'],['layers']
Modifiability,// FIXME: What if ad-hoc aliasing introduces overlaps that aren't represented; // by the sub-register graph? This doesn't occur in any known targets.; // Inherit lanes from composites.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:154,Inherit,Inherit,154,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['Inherit'],['Inherit']
Modifiability,// FIXME: What we're doing here is modifying the type-specifier that; // precedes the first Decl. In the future the DeclGroup should have; // a separate type-specifier that we can rewrite.; // NOTE: We need to avoid rewriting the DeclStmt if it is within; // the context of an ObjCForCollectionStmt. For example:; // NSArray *someArray;; // for (id <FooProtocol> index in someArray) ;; // This is because RewriteObjCForCollectionStmt() does textual rewriting; // and it depends on the original text locations/positions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:180,rewrite,rewrite,180,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,"['Rewrite', 'rewrite']","['RewriteObjCForCollectionStmt', 'rewrite']"
Modifiability,"// FIXME: Without optimizations, the temporary result from `await_suspend()`; // may be put on the coroutine frame since the coroutine frame constructor; // will think the temporary variable will escape from the; // `coroutine_handle<>::address()` call. This is problematic since the; // coroutine should be considered to be suspended after it enters; // `await_suspend` so it shouldn't access/update the coroutine frame after; // that.; //; // See https://github.com/llvm/llvm-project/issues/65054 for the report.; //; // The long term solution may wrap the whole logic about `await-suspend`; // into a standalone function. This is similar to the proposed solution; // in tryMarkAwaitSuspendNoInline. See the comments there for details.; //; // The short term solution here is to mark `coroutine_handle<>::address()`; // function as always-inline so that the coroutine frame constructor won't; // think the temporary result is escaped incorrectly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:182,variab,variable,182,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: also track:; // - kind of entity (function/variable/type), to expose structured results; // - template args kinds/types, as a proxy for template params; // For now we simply return these results as ""pattern"" strings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: does not suport multiple inheritance for counter in base class.; // This is wrong in case counter is not in the same class or one of; // the left most (non virtual) base classes. For the other we would; // really need to use the object coming from the list of real data.; // (and even that need analysis for virtual base class).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx:35,inherit,inheritance,35,core/meta/src/TStreamerElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx,1,['inherit'],['inheritance']
Modifiability,// FIXME: enhance track back for uninitialized value for arbitrary; // memregions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CallAndMessageChecker.cpp:10,enhance,enhance,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CallAndMessageChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CallAndMessageChecker.cpp,1,['enhance'],['enhance']
Modifiability,// FIXME: extend this to post-ra. Need to do some change in getForwardingDefMI; // for post-ra.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extend']
Modifiability,// FIXME: handle extends from half precision float vectors on P9.; // We only want to custom lower an extend from v2f32 to v2f64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:17,extend,extends,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,// FIXME: handling of macros should be configurable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp:39,config,configurable,39,interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,1,['config'],['configurable']
Modifiability,"// FIXME: if:; // - evaluation triggered other FP exception, and; // - exception mode is not ""ignore"", and; // - the expression being evaluated is not a part of global variable; // initializer,; // the evaluation probably need to be rejected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:168,variab,variable,168,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// FIXME: move this information to an HTML file in docs/.; // At the very least, a checker plugin is a dynamic library that exports; // clang_analyzerAPIVersionString. This should be defined as follows:; //; // extern ""C""; // const char clang_analyzerAPIVersionString[] =; // CLANG_ANALYZER_API_VERSION_STRING;; //; // This is used to check whether the current version of the analyzer is known to; // be incompatible with a plugin. Plugins with incompatible version strings,; // or without a version string at all, will not be loaded.; //; // To add a custom checker to the analyzer, the plugin must also define the; // function clang_registerCheckers. For example:; //; // extern ""C""; // void clang_registerCheckers (CheckerRegistry &registry) {; // registry.addChecker<MainCallChecker>(""example.MainCallChecker"",; // ""Disallows calls to functions called main"");; // }; //; // The first method argument is the full name of the checker, including its; // enclosing package. By convention, the registered name of a checker is the; // name of the associated class (the template argument).; // The second method argument is a short human-readable description of the; // checker.; //; // The clang_registerCheckers function may add any number of checkers to the; // registry. If any checkers require additional initialization, use the three-; // argument form of CheckerRegistry::addChecker.; //; // To load a checker plugin, specify the full path to the dynamic library as; // the argument to the -load option in the cc1 frontend. You can then enable; // your custom checker using the -analyzer-checker:; //; // clang -cc1 -load </path/to/plugin.dylib> -analyze; // -analyzer-checker=<example.MainCallChecker>; //; // For a complete working example, see examples/analyzer-plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:91,plugin,plugin,91,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,7,"['Plugin', 'plugin']","['Plugins', 'plugin']"
Modifiability,// FIXME: need to deal with global variables later,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:35,variab,variables,35,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,// FIXME: need to go through this whole constant islands port and check; // the math for branch ranges and clean this up and make some functions; // to calculate things that are done many times identically.; // Need to refactor some of the code to call this routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:219,refactor,refactor,219,interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: possibly refactor with logic in CXStoredDiagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:19,refactor,refactor,19,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: refactor this to use the same code that inliner is using.; // Don't try to import functions with noinline attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:10,refactor,refactor,10,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: refactor/share with ActOnMemberReference().; // Check if we can reference this property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:10,refactor,refactor,10,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['refactor'],['refactor']
Modifiability,// FIXME: store AccessSpecifier given by inheritance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:41,inherit,inheritance,41,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,1,['inherit'],['inheritance']
Modifiability,// FIXME: this code should move when a planned refactoring around statement; // attributes lands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:47,refactor,refactoring,47,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['refactor'],['refactoring']
Modifiability,"// FIXME: trackAssignments doesn't let you specify any modifiers to the; // variable (e.g. fragment) or location (e.g. offset), so we have to; // leave dbg.declares with non-empty expressions in place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:76,variab,variable,76,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variable']
Modifiability,// FIXME: we don't always have a self-variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,1,['variab'],['variable']
Modifiability,"// FIXME: wrong in case called derives via multiple inheritance from this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx:52,inherit,inheritance,52,core/meta/src/TDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx,1,['inherit'],['inheritance']
Modifiability,"// FIXME:; // C++2a [basic.stc.dynamic.allocation]p3:; // For an allocation function [...], the pointer returned on a successful; // call shall represent the address of storage that is aligned as follows:; // (3.2) Otherwise, if the allocation function is named operator new[],; // the storage is aligned for any object that does not have; // new-extended alignment ([basic.align]) and is no larger than the; // requested size.; // (3.3) Otherwise, the storage is aligned for any object that does not; // have new-extended alignment and is of the requested size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:347,extend,extended,347,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['extend'],['extended']
Modifiability,"// FIXME:; // We can never form an lvalue with an implicit value initialization as its; // base through expression evaluation, so these only appear in one case: the; // implicit variable declaration we invent when checking whether a constexpr; // constructor can produce a constant expression. We must assume that such; // an expression might be a global lvalue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:178,variab,variable,178,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// FIXME:this doesn't work straightforward; // test_(datasetinfo->GetDataSet() == 0);; // note: the ""constructor""-like call is different from the /standard/ VariableInfo constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:157,Variab,VariableInfo,157,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Variab'],['VariableInfo']
Modifiability,// FORTRAN COMMON or C external global variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:39,variab,variables,39,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['variab'],['variables']
Modifiability,// FP to 32 bit int conversions for RV64. These are used to keep track of the; // result being sign extended to 64 bit. These saturate out of range inputs.; // Used for FP_TO_S/UINT and FP_TO_S/UINT_SAT lowering. Rounding mode; // is passed as a TargetConstant operand using the RISCVFPRndMode enum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:100,extend,extended,100,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['extend'],['extended']
Modifiability,"// FP values need to be bitcast, then extended if they are being put; // into a larger container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extended']
Modifiability,"// FP will be used to restore the frame in the epilogue, so we need; // another base register BP to record SP after re-alignment. SP will; // track the current stack after allocating variable sized objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp:183,variab,variable,183,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,3,['variab'],['variable']
Modifiability,"// FPR<->GPR transfer operations when the FPR is smaller than XLEN, needed as; // XLEN is the only legal integer width.; //; // FMV_H_X matches the semantics of the FMV.H.X.; // FMV_X_ANYEXTH is similar to FMV.X.H but has an any-extended result.; // FMV_X_SIGNEXTH is similar to FMV.X.H and has a sign-extended result.; // FMV_W_X_RV64 matches the semantics of the FMV.W.X.; // FMV_X_ANYEXTW_RV64 is similar to FMV.X.W but has an any-extended result.; //; // This is a more convenient semantic for producing dagcombines that remove; // unnecessary GPR->FPR->GPR moves.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:229,extend,extended,229,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,3,['extend'],['extended']
Modifiability,"// Factor which can be used to tune the smoothing.; // It is used as multiplicative factor for the fixed and adaptive bandwidth.; // A value < 1 will reproduce better the tails but oversmooth the peak; // while a factor > 1 will overestimate the tail",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:109,adapt,adaptive,109,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// Fails because LookupHelper doesn't know how to instantiate function templates,; // even though at least the function template is made available to the derived; // class as per using decl. This is issue #6481.; //TFunction *funInhCtor = clInhTemplateFun->GetMethodWithPrototype(""InheritTemplateFun"", ""int, int"");; //ASSERT_NE(funInhCtor, nullptr);; //EXPECT_EQ(funInhCtor->ExtraProperty() & kIsTemplateSpec, kIsTemplateSpec);; //EXPECT_EQ(funInhCtor->Property() & kIsPrivate, kIsPrivate);; // Doesn't work either, as GetListOfFunctionTemplates() ignores using decls.; // Issue #6482; // clInhTemplateFun->GetListOfFunctionTemplates(true)->ls(); // FindObject(""InheritTemplateFun"")-",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx:281,Inherit,InheritTemplateFun,281,core/metacling/test/TClingMethodInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx,2,['Inherit'],['InheritTemplateFun']
Modifiability,// Fake up a new variable so that EmitScalarInit doesn't think; // we're referring to the variable in its own initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,2,['variab'],['variable']
Modifiability,"// Fake up parameter variables if we have a typedef, like; // ^ fntype { ... }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,// Fake up parameter variables; they are declared as if this were; // a typedef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variables']
Modifiability,"// Fall back to global config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:23,config,config,23,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,1,['config'],['config']
Modifiability,// Fallback for splats + all supported variable shifts.; // Fallback for non-constants AVX2 vXi16 as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Fallback to sign/zero extending the requested half and pack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,extend,extending,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Fallback to slow path with type conversion for arguments.; // The fCallEnv object is shared, since the PluginHandler is a global; // resource ... and both SetParams and Execute ends up taking the lock; // individually anyway ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h:106,Plugin,PluginHandler,106,core/base/inc/TPluginManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TPluginManager.h,1,['Plugin'],['PluginHandler']
Modifiability,"// Fallback, for i8/i16 sitofp/uitofp cases we need to extend to i32 for; // sitofp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:55,extend,extend,55,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// Feature ELPM is needed for loading from extended program memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// Feed defVar the new variable location, or if this is a DBG_VALUE $noreg,; // feed defVar None.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Fewer users makes module scope variable less attractive,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,// Field value -1 implies a non-empty set of variable instructions.; // See also recurse().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['variab'],['variable']
Modifiability,// Fields and static variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variables']
Modifiability,// Fields are not shadowed by variables in C++ static methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:30,variab,variables,30,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// Figure out if this is a truncate, extend or noop cast.; // If the input is signed, do a sign extend, noop, or truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:37,extend,extend,37,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['extend'],['extend']
Modifiability,// Figure out if we need float point based on the function parameters.; // We need to move variables in and/or out of floating point; // registers because of the ABI,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp:91,variab,variables,91,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,1,['variab'],['variables']
Modifiability,// Figure out if we need float point based on the function signature.; // We need to move variables in and/or out of floating point; // registers because of the ABI; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOs16.cpp:90,variab,variables,90,interpreter/llvm-project/llvm/lib/Target/Mips/MipsOs16.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOs16.cpp,1,['variab'],['variables']
Modifiability,"// Figure out the datatype of the vector operand. The UMINV instruction; // will zero extend the result, so we can mark as known zero all the; // bits larger than the element datatype. 32-bit or larget doesn't need; // this as those are legal types and will be handled by isel directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:86,extend,extend,86,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Figure out the interval that is being checked. For example, a comparison; // like ""X /u 5 == 0"" is really checking that X is in the interval [0, 5).; // Compute this interval based on the constants involved and the signedness of; // the compare/divide. This computes a half-open interval, keeping track of; // whether either value in the interval overflows. After analysis each; // overflow variable is set to 0 if it's corresponding bound variable is valid; // -1 if overflowed off the bottom end, or +1 if overflowed off the top end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:394,variab,variable,394,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['variab'],['variable']
Modifiability,// Figure out where to insert this variable template partial specialization; // in the member template's set of variable template partial specializations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,2,['variab'],['variable']
Modifiability,"// Figure out which action is specified by the user. The user must specify the; // action using a command-line subcommand, e.g. the invocation `clang-refactor; // local-rename` corresponds to the `LocalRename` refactoring action. All; // subcommands must have a unique names. This allows us to figure out which; // refactoring action should be invoked by looking at the first subcommand; // that's enabled by LLVM's command-line parser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:150,refactor,refactor,150,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,3,['refactor'],"['refactor', 'refactoring']"
Modifiability,"// File Browser plugin ... we have to process it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBrowser.cxx:16,plugin,plugin,16,graf3d/eve/src/TEveBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBrowser.cxx,1,['plugin'],['plugin']
Modifiability,"// File-scope lambda can only do init captures for global variables, which; // results in passing by value for these global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:58,variab,variables,58,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,2,['variab'],['variables']
Modifiability,"// Fill array of LValue pointers to variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:36,variab,variables,36,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,2,['variab'],['variables']
Modifiability,"// Fill histograms of normalised independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:45,variab,variables,45,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Fill histograms of original independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:43,variab,variables,43,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Fill in this variable's value and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,variab,variable,16,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['variab'],['variable']
Modifiability,"// Fill object build config with object split rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:21,config,config,21,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['config'],['config']
Modifiability,"// Fill relevant variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSender.cxx:17,variab,variables,17,proof/proofplayer/src/TProofMonSender.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSender.cxx,1,['variab'],['variables']
Modifiability,"// Fill some variables; in the CPU time we do not include anymore the time; // used on the master for preparing and merging, because we want to measure; // the efficiency or farction of time useful for work doen by workers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx:13,variab,variables,13,proof/proof/src/TQueryResultManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx,1,['variab'],['variables']
Modifiability,"// Fill the integration variable with dummy value for now. This will then; // be reset in the sampling loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:24,variab,variable,24,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['variab'],['variable']
Modifiability,"// Fill the internal variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:21,variab,variables,21,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['variab'],['variables']
Modifiability,// Fill up the arrays with all the captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:44,variab,variables,44,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// Fill up the arrays with all the mapped variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,variab,variables,42,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variables']
Modifiability,"// Fill variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:8,variab,variables,8,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,4,['variab'],['variables']
Modifiability,"// Finalize; ////////////////////////////////////////////////////////////////////////////////; /// This can be called before Initialize, after setting kDim; /// It defines which variables are excluded in the process of the cell division.; /// For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable.; /// The resulting map of cells in 2-dim. case will look as follows:; ///; /// \image html foam_Map2.png width=400",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:178,variab,variables,178,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,// Finally rewrite virtual registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:11,rewrite,rewrite,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,2,['rewrite'],['rewrite']
Modifiability,"// Finally, add them to a llvm[.compiler].used variable in DestM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:47,variab,variable,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,1,['variab'],['variable']
Modifiability,"// Finally, check if all extenders have the same value as the initializer.; // Make sure that extenders that are a part of a stack address are not; // merged with those that aren't. Stack addresses need an offset field; // (to be used by frame index elimination), while non-stack expressions; // can be replaced with forms (such as rr) that do not have such a field.; // Example:; //; // Collected 3 extenders; // =2. imm:0 off:32968 bb#2: %7 = ## + __ << 0, def; // 0. imm:0 off:267 bb#0: __ = ## + SS#1 << 0; // 1. imm:0 off:267 bb#1: __ = ## + SS#1 << 0; // Ranges; // 0. [-756,267]a1+0; // 1. [-756,267]a1+0; // 2. [201,65735]a1+0; // RangeMap; // [-756,267]a1+0 -> 0 1; // [201,65735]a1+0 -> 2; // IMap (before fixup) = {; // [imm:0 off:267, ## + __ << 0] -> { 2 }; // [imm:0 off:267, ## + SS#1 << 0] -> { 0 1 }; // }; // IMap (after fixup) = {; // [imm:0 off:267, ## + __ << 0] -> { 2 0 1 }; // [imm:0 off:267, ## + SS#1 << 0] -> { }; // }; // Inserted def in bb#0 for initializer: [imm:0 off:267, ## + __ << 0]; // %12:intregs = A2_tfrsi 267; //; // The result was; // %12:intregs = A2_tfrsi 267; // S4_pstorerbt_rr %3, %12, %stack.1, 0, killed %4; // Which became; // r0 = #267; // if (p0.new) memb(r0+r29<<#4) = r2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:25,extend,extenders,25,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,3,['extend'],['extenders']
Modifiability,"// Finally, configure that workspace based on; // properties of the measurement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:12,config,configure,12,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['config'],['configure']
Modifiability,"// Finally, honor the user's choice by setting an environment variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:62,variab,variable,62,interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,1,['variab'],['variable']
Modifiability,"// Finally, our modifications to the cfg can break dominance of SSA variables.; // For example, in this code,; // if (x()) { .. setjmp() .. }; // if (y()) { .. longjmp() .. }; // We must split the longjmp block, and it can jump into the block splitted; // from setjmp one. But that means that when we split the setjmp block, it's; // first part no longer dominates its second part - there is a theoretically; // possible control flow path where x() is false, then y() is true and we; // reach the second part of the setjmp block, without ever reaching the first; // part. So, we rebuild SSA form here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:68,variab,variables,68,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variables']
Modifiability,"// Finally, remove OldLocNo unless it is still used by some interval in the; // locInts map. One case when OldLocNo still is in use is when the register; // has been spilled. In such situations the spilled register is kept as a; // location until rewriteLocations is called (VirtRegMap is mapping the old; // register to the spill slot). So for a while we can have locations that map; // to virtual registers that have been removed from both the MachineFunction; // and from LiveIntervals.; //; // We may also just be using the location for a value with a different; // expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:247,rewrite,rewriteLocations,247,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['rewrite'],['rewriteLocations']
Modifiability,"// Finally, rewrite values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Endian.h:12,rewrite,rewrite,12,interpreter/llvm-project/llvm/include/llvm/Support/Endian.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Endian.h,1,['rewrite'],['rewrite']
Modifiability,"// Finally, see if we can rewrite our exit conditions into a loop invariant; // form. If we have a read-only loop, and we can tell that we must exit down; // a path which does not need any of the values computed within the loop, we; // can rewrite the loop to exit on the first iteration. Note that this; // doesn't either a) tell us the loop exits on the first iteration (unless; // *all* exits are predicateable) or b) tell us *which* exit might be taken.; // This transformation looks a lot like a restricted form of dead loop; // elimination, but restricted to read-only loops and without neccesssarily; // needing to kill the loop entirely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:26,rewrite,rewrite,26,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Finally, we can make the call. This is just a degenerate version of a; // normal AArch64 call node: r0 takes the address of the descriptor, and; // returns the address of the variable in this thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:178,variab,variable,178,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Finally, we can make the call. This is just a degenerate version of a; // normal AArch64 call node: x0 takes the address of the descriptor, and; // returns the address of the variable in this thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:178,variab,variable,178,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Finally, we check if this is allocating a variable with user-defined type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['variab'],['variable']
Modifiability,// Find DIE for the given subprogram and attach appropriate DW_AT_low_pc; // and DW_AT_high_pc attributes. If there are global variables in this; // scope then create and insert DIEs for these variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:127,variab,variables,127,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,2,['variab'],['variables']
Modifiability,"// Find V in Dest. This is N^2, but pointer indices almost never have more; // than a few variable indexes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Find a register matching \p RC from \p LiveUnits which is unused and; // available throughout the function. On failure, returns AMDGPU::NoRegister.; // TODO: Rewrite the loop here to iterate over MCRegUnits instead of; // MCRegisters. This should reduce the number of iterations and avoid redundant; // checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:161,Rewrite,Rewrite,161,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Find a struct's flexible array member. It may be embedded inside multiple; // sub-structs, but must still be the last field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:19,flexible,flexible,19,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['flexible'],['flexible']
Modifiability,// Find a suitable local variable for the DBG_VALUE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,1,['variab'],['variable']
Modifiability,// Find a zero extended value and its type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Find all local variables associated with the backing storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['variab'],['variables']
Modifiability,// Find all of the definitions that inherit from MutualExclusions and include; // the given attribute in the list of exclusions to generate the; // diagMutualExclusion() check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:36,inherit,inherit,36,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['inherit'],['inherit']
Modifiability,// Find all stores to invariant variables. Since they are going to sink; // outside the loop we do not need calculate cost for them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,// Find all the inheritance paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:16,inherit,inheritance,16,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// Find all uses of induction variables in this loop, and categorize; // them by stride. Start by finding all of the PHI nodes in the header for; // this loop. If they are induction variables, inspect their uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVUsers.cpp,2,['variab'],['variables']
Modifiability,"// Find any cast instructions that participate in the def-use chain of; // PhiScev in the loop.; // FORNOW/TODO: We currently expect the def-use chain to include only; // two-operand instructions, where one of the operands is an invariant.; // createAddRecFromPHIWithCasts() currently does not support anything more; // involved than that, so we keep the search simple. This can be; // extended/generalized as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:386,extend,extended,386,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['extend'],['extended']
Modifiability,"// Find convolution variable in input and output sets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:20,variab,variable,20,roofit/roofitcore/src/RooConvGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx,2,['variab'],['variable']
Modifiability,"// Find exit values which are induction variables in the loop, and are; // unused in the loop, with the only use being the exit block PhiNode,; // and the induction variable update binary operator.; // The exit value can be replaced with the final value when it is cheap; // to do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:40,variab,variables,40,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Find factors that are multiplied with an expression that (possibly as a; // subexpression) contains an AddRecExpr. In the expression:; //; // 8 * (100 + %p * %q * (%a + {0, +, 1}_loop)); //; // ""%p * %q"" are factors multiplied by the expression ""(%a + {0, +, 1}_loop)""; // that contains the AddRec {0, +, 1}_loop. %p * %q are likely to be array size; // parameters as they form a product with an induction variable.; //; // This collector expects all array size parameters to be in the same MulExpr.; // It might be necessary to later add support for collecting parameters that are; // spread over different nested MulExpr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:409,variab,variable,409,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,1,['variab'],['variable']
Modifiability,// Find if Ptr is a known variable we can give more information on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp,1,['variab'],['variable']
Modifiability,// Find increment and trip count.; // There are exactly 2 incoming values to the induction phi; one from the; // pre-header and one from the latch. The incoming latch value is the; // increment variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:194,variab,variable,194,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variable']
Modifiability,"// Find local variables defined by debugify. No attempt is made to match up; // MIR-level regs to the 'correct' IR-level variables: there isn't a simple; // way to do that, and it isn't necessary to find interesting CodeGen bugs.; // Instead, simply keep track of one variable per line. Later, we can insert; // DBG_VALUE insts that point to these local variables. Emitting DBG_VALUEs; // which cover a wide range of lines can help stress the debug info passes:; // if we can't do that, fall back to using the local variable which precedes; // all the others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp:14,variab,variables,14,interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// Find method defined configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx:23,config,configuration,23,roofit/roofitcore/src/RooNumGenFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx,2,['config'],['configuration']
Modifiability,// Find missing variables and mis-sized debug values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:16,variab,variables,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variables']
Modifiability,// Find missing variables.; // TODO: Handle DBG_INSTR_REF which is under an experimental option now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp:16,variab,variables,16,interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,1,['variab'],['variables']
Modifiability,// Find non-clobbered value for Loc memory location in extended basic block; // (chain of basic blocks with single predecessors) starting From instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:55,extend,extended,55,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['extend'],['extended']
Modifiability,// Find the best candidate with respect to the number of extenders covered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:57,extend,extenders,57,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extenders']
Modifiability,"// Find the column number for this cell. Be careful to skip; // columns which extend down to this row from prior rows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx:78,extend,extend,78,gui/guihtml/src/TGHtmlTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx,1,['extend'],['extend']
Modifiability,// Find the expression whose lifetime needs to be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:50,extend,extended,50,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['extend'],['extended']
Modifiability,// Find the extended backedge taken count and extended trip count using; // SCEV. One of these should now match the RHS of the compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:12,extend,extended,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,2,['extend'],['extended']
Modifiability,"// Find the first flexible-offset field, tracking MaxAlign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:18,flexible,flexible-offset,18,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible-offset']
Modifiability,// Find the global variable with the most indirect uses from kernels,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// Find the induction PHI. If there is no induction PHI, we can't do the; // transformation. TODO: could other variables trigger this? Do we have to; // search for the best one?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:111,variab,variables,111,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variables']
Modifiability,"// Find the llvm.global_ctors variable, as the first step in; // identifying the global constructors. In theory, unnecessary autorelease; // pools could occur anywhere, but in practice it's pretty rare. Global; // ctors are a place where autorelease pools get inserted automatically,; // so it's pretty common for them to be unnecessary, and it's pretty; // profitable to eliminate them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp,1,['variab'],['variable']
Modifiability,"// Find the nearest non-record decl context. Variables declared in a; // statement expression behave as if they were declared in the enclosing; // function, block, or other code construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:45,Variab,Variables,45,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['Variab'],['Variables']
Modifiability,// Find the new source to use in the COPY rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:42,rewrite,rewrite,42,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// Find the offset along this inheritance step.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:30,inherit,inheritance,30,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,// Find the pointer type we need to extend to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:36,extend,extend,36,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['extend'],['extend']
Modifiability,"// Find the preferred type aside from the any-extends (unless it's the only; // one) and non-extending ops. We'll emit an extending load to that type and; // and emit a variant of (extend (trunc X)) for the others according to the; // relative type sizes. At the same time, pick an extend to use based on the; // extend involved in the chosen type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:46,extend,extends,46,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,6,['extend'],"['extend', 'extending', 'extends']"
Modifiability,// Find the property backing the instance variable that M; // is dealloc'ing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,// Find the property in the extended class's primary class or; // extensions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:28,extend,extended,28,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,1,['extend'],['extended']
Modifiability,// Find the referenced global/static variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp:37,variab,variables,37,interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp,1,['variab'],['variables']
Modifiability,// Find the s_mul_u64 instructions where the higher bits are either; // zero-extended or sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp:77,extend,extended,77,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp,2,['extend'],['extended']
Modifiability,"// Find the target indices killed by MI, and delete those variable locations; // from the open range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Find the values in the loop that can be replaced with the linearized; // induction variable, and check that there are no other uses of the inner; // or outer induction variable. If there were, we could still do this; // transformation, but we'd have to insert a div/mod to calculate the; // original IVs, so it wouldn't be profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:86,variab,variable,86,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,2,['variab'],['variable']
Modifiability,// Find the variable template (partial) specialization declaration that; // corresponds to these arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,// Find the variable template specialization declaration that; // corresponds to these arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// Find the variable that we need values from.; // That's either the variable directly from the external coordinates; // or we find the external one that has the same name as ""internalVar"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:12,variab,variable,12,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,2,['variab'],['variable']
Modifiability,// Find variables for each lexical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:8,variab,variables,8,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['variab'],['variables']
Modifiability,// Find which operand is extendable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:25,extend,extendable,25,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,"// Finds the induction variable, increment and trip count for a simple loop that; // we can flatten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variable']
Modifiability,// Finds the start location of the previous token of kind \p TK.; // FIXME: handling of macros should be configurable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp:105,config,configurable,105,interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,1,['config'],['configurable']
Modifiability,// Finish extending if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:10,extend,extending,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Finish the sandboxing sequence by emitting branch delay.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:14,sandbox,sandboxing,14,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Modifiability,// First build an any-extend node which can be legalized above when we; // recurse through it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['extend'],['extend']
Modifiability,// First check if this is permanently extended op code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// First check if variable already exists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:18,variab,variable,18,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['variab'],['variable']
Modifiability,// First check if we already reference this variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['variab'],['variable']
Modifiability,"// First check if we're extending the result of a load which has a dest type; // smaller than 32 bits, then this zext is redundant. GPR32 is the smallest; // GPR register on AArch64 and all loads which are smaller automatically; // zero-extend the upper bits. E.g.; // %v(s8) = G_LOAD %p, :: (load 1); // %v2(s32) = G_ZEXT %v(s8)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:24,extend,extending,24,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// First check that the G_TRUNC feeding the G_UADDO are no-ops, because the; // inputs have been zero-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp:102,extend,extended,102,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,1,['extend'],['extended']
Modifiability,"// First check that the real class inherits from the; // casted class; // First assume TObject ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:35,inherit,inherits,35,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,1,['inherit'],['inherits']
Modifiability,// First element comes from the first element of second source.; // Remaining elements: Load zero extends / Move copies from first source.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp:98,extend,extends,98,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,1,['extend'],['extends']
Modifiability,// First extend the input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:9,extend,extend,9,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// First handle load and store instructions with postinc or predec; // of the form ""ld reg, X+"".; // TODO: We should be able to rewrite this using TableGen data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp:128,rewrite,rewrite,128,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp,1,['rewrite'],['rewrite']
Modifiability,"// First make a multibuild config from the master index cat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:27,config,config,27,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['config'],['config']
Modifiability,"// First preference should be given to Hexagon::A2_combineii instruction; // as it can include U6 (in Hexagon::A4_combineii) as well.; // In this instruction, HiOperand is const extended, if required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:178,extend,extended,178,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// First register which could possibly hold a variable argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h,1,['variab'],['variable']
Modifiability,// First try assuming that any undefined bits above the highest set bit; // and below the lowest set bit are 1s. This increases the likelihood of; // being able to use a sign-extended element value in VECTOR REPLICATE; // IMMEDIATE or a wraparound mask in VECTOR GENERATE MASK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:175,extend,extended,175,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extended']
Modifiability,// First try to get the name of the variable from the region,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ContainerModeling.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ContainerModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ContainerModeling.cpp,1,['variab'],['variable']
Modifiability,"// First try to load configuration from the default files, return on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,config,configuration,21,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configuration']
Modifiability,"// First update the result variable of params in the compute graph to in[<position>].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFuncWrapper.cxx:27,variab,variable,27,roofit/roofitcore/src/RooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFuncWrapper.cxx,1,['variab'],['variable']
Modifiability,"// First, check variables which have already been assigned a column, so; // that we don't change their order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:16,variab,variables,16,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,1,['variab'],['variables']
Modifiability,"// First, determine where the build vector is not undef.; // TODO: We could extend this to handle zero elements as well as undefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:76,extend,extend,76,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// First, either remove the variable in place if it is 0 or add the row to; // RemainingRows and remove it from the system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,1,['variab'],['variable']
Modifiability,"// First, examine the IF candidates for register VR whose removable-regis-; // ter sets are empty. This means that a given candidate will not help eli-; // minate any registers, but since ""insert"" is not a constant-extendable; // instruction, using such a candidate may reduce code size if the defini-; // tion of VR is constant-extended.; // If there exists a candidate with a non-empty set, the ones with empty; // sets will not be used and can be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:215,extend,extendable,215,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,2,['extend'],"['extendable', 'extended']"
Modifiability,"// First, if there are any DBG_VALUEs pointing at a spill slot that is; // written to, terminate that variable location. The value in memory; // will have changed. DbgEntityHistoryCalculator doesn't try to detect this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:102,variab,variable,102,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// First, if there are any DBG_VALUEs pointing at a spill slot that is; // written to, then close the variable location. The value in memory; // will have changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:102,variab,variable,102,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// First, quickly check if there is TLS Variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:40,Variab,Variable,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,1,['Variab'],['Variable']
Modifiability,"// First, try to extend live range within individual basic blocks. This; // will leave us only with dead defs that do not reach any predicated; // defs in the same block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,1,['extend'],['extend']
Modifiability,"// First, we need to find the induction variable with respect to which we can; // reroll (there may be several possible options).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,"// First, we search in local variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:29,variab,variables,29,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variables']
Modifiability,"// First, zero extend to 32 bits, then use a truncating store to 8 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Firstly, exclude all scalable vector extending loads/truncating stores,; // include both integer and floating scalable vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:40,extend,extending,40,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Fisher = Sum { [coeff]*[variables] }; //; // let Xs be the array of the mean values of variables for signal evts; // let Xb be the array of the mean values of variables for backgd evts; // let InvWith be the inverse matrix of the 'within class' correlation matrix; //; // then the array of Fisher coefficients is; // [coeff] =TMath::Sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:27,variab,variables,27,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,3,['variab'],['variables']
Modifiability,"// Fit classifier; // NOTE: We dump the output to a variable so that the call does not pollute stdout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:52,variab,variable,52,tmva/pymva/src/MethodPyAdaBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx,3,['variab'],['variable']
Modifiability,"// Fit model to data, extended ML term automatically included",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:22,extend,extended,22,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['extend'],['extended']
Modifiability,"// Fit yields to the data with all other variables held constant; // This is necessary because SPlot assumes the yields minimise -Log(likelihood)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:41,variab,variables,41,roofit/roostats/src/SPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx,1,['variab'],['variables']
Modifiability,"// Fix an existing variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:19,variab,variable,19,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,3,['variab'],['variable']
Modifiability,"// Fix up external users of the induction variable. At this point, we are; // in LCSSA form, with all external PHIs that use the IV having one input value,; // coming from the remainder loop. We need those PHIs to also have a correct; // value for the IV when arriving directly from the middle block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// Fix up hardware that does not sign-extend the 48-bit PC value by; // inserting: s_sext_i32_i16 dsthi, dsthi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['extend'],['extend']
Modifiability,"// Fix up hardware that does not sign-extend the 48-bit PC value by; // inserting: s_sext_i32_i16 reghi, reghi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['extend'],['extend']
Modifiability,"// Fixing <dead> flags may extend live ranges, so reset <kill> flags; // after that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp:27,extend,extend,27,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,1,['extend'],['extend']
Modifiability,"// Fixup the RColumnRange and RPageRange in deferred columns. We know what the first element index and; // number of elements should have been if the column was not deferred; fix those and let; // `ExtendToFitColumnRange()` synthesize RPageInfos accordingly.; // Note that a deferred column (i.e, whose first element index is > 0) already met the criteria of; // `RFieldBase::EntryToColumnElementIndex()`, i.e. it is a principal column reachable from the field zero; // excluding subfields of collection and variant fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx:198,Extend,ExtendToFitColumnRange,198,tree/ntuple/v7/src/RNTupleDescriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx,1,['Extend'],['ExtendToFitColumnRange']
Modifiability,"// Flagged after all passes are configured.; // Target Pass Options; // Targets provide a default setting, user flags override.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:32,config,configured,32,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,1,['config'],['configured']
Modifiability,// Flags stored in __block variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:27,variab,variables,27,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,1,['variab'],['variables']
Modifiability,// Flexible array member.; // Microsoft and g++ is more permissive regarding flexible array.; // It will accept flexible array in union and also; // as the sole element of a struct/class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:3,Flexible,Flexible,3,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,3,"['Flexible', 'flexible']","['Flexible', 'flexible']"
Modifiability,"// Flexible array members don't have any size, but they have to be; // aligned appropriately for their element type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Flexible,Flexible,3,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['Flexible'],['Flexible']
Modifiability,"// Flip low/high ops and zero-extend amount to matching type.; // shiftleft128(Low, High, Amt) -> fshl(High, Low, Amt); // shiftright128(Low, High, Amt) -> fshr(High, Low, Amt)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:30,extend,extend,30,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['extend'],['extend']
Modifiability,// Float truncs need to extended with VCVTB's into their floating point types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Flow conditions are tracked symbolically: each unique flow condition is; // associated with a fresh symbolic variable (token), bound to the clause that; // defines the flow condition. Conceptually, each binding corresponds to an; // ""iff"" of the form `FC <=> (C1 ^ C2 ^ ...)` where `FC` is a flow condition; // token (an atomic boolean) and `Ci`s are the set of constraints in the flow; // flow condition clause. The set of constraints (C1 ^ C2 ^ ...) are stored in; // the `FlowConditionConstraints` map, keyed by the token of the flow; // condition.; //; // Flow conditions depend on other flow conditions if they are created using; // `forkFlowCondition` or `joinFlowConditions`. The graph of flow condition; // dependencies is stored in the `FlowConditionDeps` map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h:112,variab,variable,112,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,1,['variab'],['variable']
Modifiability,"// Fold (un)ordered comparison if we can determine there are no NaNs.; //; // This catches the 2 variable input case, constants are handled below as a; // class-like compare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['variab'],['variable']
Modifiability,"// Fold 64 bit expression such as add(add(mul(x,y),a),b) ->; // lmul(x, y, a, b) if all operands are zero-extended. We do this; // before type legalization as it is messy to match the operands after; // that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp:106,extend,extended,106,interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Fold AND(SRL(X,Y),1) -> SETCC(BT(X,Y), COND_B) iff Y is not a constant; // avoids slow variable shift (moving shift amount to ECX etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Fold EXTEND_VECTOR_INREG(EXTRACT_SUBVECTOR(EXTEND(X),0)); // -> EXTEND_VECTOR_INREG(X).; // TODO: Handle non-zero subvector indices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,EXTEND,EXTEND,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['EXTEND'],['EXTEND']
Modifiability,"// Fold loads into extends when possible.; // FIXME: We can have multiple redundant extend/trunc instructions; // following a load. The folding only picks up one. Extend this; // to check subsequent instructions for the same pattern and remove; // them. Thus ResultReg should be the def reg for the last redundant; // instruction in a chain, and all intervening instructions can be; // removed from parent. Change test/CodeGen/PowerPC/fast-isel-fold.ll; // to add ELF64-NOT: rldicl to the appropriate tests when this works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:19,extend,extends,19,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,3,"['Extend', 'extend']","['Extend', 'extend', 'extends']"
Modifiability,// Fold the following sign-/zero-extend into the load instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:33,extend,extend,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,"// Following variables are derived from MathTime Professional II's; // mt2exa.tfm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h:13,variab,variables,13,graf2d/mathtext/src/table/mathfontparam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h,1,['variab'],['variables']
Modifiability,"// Following variables are derived from plain.tex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h:13,variab,variables,13,graf2d/mathtext/src/table/mathfontparam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h,1,['variab'],['variables']
Modifiability,"// Following variables are derived from the STIX fonts. Axis; // height is defined by the horizontal axis of the minus sign; // (U+2212), the default rule thickness is the thickness of the em; // dash (U+2014).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h:13,variab,variables,13,graf2d/mathtext/src/table/mathfontparam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h,1,['variab'],['variables']
Modifiability,"// For --only-keep-debug, the sections that did not preserve contents were; // changed to SHT_NOBITS. We now rewrite sh_offset fields of sections, and; // then rewrite p_offset/p_filesz of program headers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:109,rewrite,rewrite,109,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,2,['rewrite'],['rewrite']
Modifiability,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:90,variab,variables,90,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,3,['variab'],['variables']
Modifiability,"// For 32-bit values, we need to add an FP_ROUND node (if we made it; // here, we know that all inputs are extending loads so this is safe).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:107,extend,extending,107,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// For 64 bit mode, in addition to the usual promotable integer types, we also; // need to extend all 32-bit types, since the ABI requires promotion to 64; // bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:91,extend,extend,91,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['extend'],['extend']
Modifiability,"// For ANDI and ANDIS, the higher-order bits are zero if either that is true; // of the first operand, or if the second operand is positive (so that it is; // not sign extended).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:168,extend,extended,168,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:163,variab,variables,163,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:85,variab,variables,85,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,7,['variab'],"['variable', 'variables']"
Modifiability,"// For Arch >= ARMv8.0 && A or R profile: crypto = sha2 + aes; // Rather than replace within the feature vector, determine whether each; // algorithm is enabled and append this to the end of the vector.; // The algorithms can be controlled by their specific feature or the crypto; // feature, so their status can be determined by the last occurance of; // either in the vector. This allows one to supercede the other.; // e.g. +crypto+noaes in -march/-mcpu should enable sha2, but not aes; // FIXME: this needs reimplementation after the TargetParser rewrite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp:551,rewrite,rewrite,551,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,1,['rewrite'],['rewrite']
Modifiability,"// For AsynchEH, insert a Nop if followed by a trap inst; // Or the exception won't be caught.; // (see MCConstantExpr::create(1,..) in WinException.cpp); // Ignore SDiv/UDiv because a DIV with Const-0 divisor; // must have being turned into an UndefValue.; // Div with variable opnds won't be the first instruction in; // an EH region as it must be led by at least a Load",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:270,variab,variable,270,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// For C code, don't diagnose about capture if we're not actually in code; // right now; it's impossible to write a non-constant expression outside of; // function context, so we'll get other (more useful) diagnostics later.; //; // For C++, things get a bit more nasty... it would be nice to suppress this; // diagnostic for certain cases like using a local variable in an array bound; // for a member of a local class, but the correct predicate is not obvious.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:359,variab,variable,359,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// For C++11 Lambdas a Field will be the same as a Capture, but the Capture; // has the name and the location of the variable so we should iterate over; // both concurrently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:117,variab,variable,117,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,"// For CMOV groups which we can rewrite and which contain a memory load,; // always rewrite them. On x86, a CMOV will dramatically amplify any; // memory latency by blocking speculative execution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp:32,rewrite,rewrite,32,interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,2,['rewrite'],['rewrite']
Modifiability,"// For CSPGO+LTO, this variable might be marked as non-prevailing and we only; // have the decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,1,['variab'],['variable']
Modifiability,// For DSO-local TLS variables we use offset from __tls_base,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['variab'],['variables']
Modifiability,"// For GD TLS access on AIX, we have two TOC entries for the symbol (one for; // the variable offset and the other for the region handle). They are; // differentiated by MO_TLSGD_FLAG and MO_TLSGDM_FLAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:85,variab,variable,85,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// For HIP or CUDA 9.0+, device variable size is type of `size_t`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variable']
Modifiability,"// For IsBottomUp, the first SchedGroup in SyncPipeline contains the; // instructions that are the ultimate successors in the resultant mutation.; // Therefore, in such a configuration, the SchedGroups occurring before the; // candidate SGID are successors of the candidate SchedGroup, thus the current; // SU should be linked as a predecessor to SUs in those SchedGroups. The; // opposite is true if !IsBottomUp. IsBottomUp occurs in the case of multiple; // SCHED_GROUP_BARRIERS, or if a user specifies IGLP_OPT SchedGroups using; // IsBottomUp (in reverse).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:171,config,configuration,171,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,1,['config'],['configuration']
Modifiability,"// For LI and LIS, we need the immediate to be positive (so that it is not; // sign extended).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:84,extend,extended,84,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// For MIPS64, madd / msub instructions are inefficent to use with 64 bit; // arithmetic. E.g.; // (add (mul a b) c) =>; // let res = (madd (mthi (drotr c 32))x(mtlo c) a b) in; // MIPS64: (or (dsll (mfhi res) 32) (dsrl (dsll (mflo res) 32) 32); // or; // MIPS64R2: (dins (mflo res) (mfhi res) 32 32); //; // The overhead of setting up the Hi/Lo registers and reassembling the; // result makes this a dubious optimzation for MIPS64. The core of the; // problem is that Hi/Lo contain the upper and lower 32 bits of the; // operand and result.; //; // It requires a chain of 4 add/mul for MIPS64R2 to get better code; // density than doing it naively, 5 for MIPS64. Additionally, using; // madd/msub on MIPS64 requires the operands actually be 32 bit sign; // extended operands, not true 64 bit values.; //; // FIXME: For the moment, disable this completely for MIPS64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:758,extend,extended,758,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// For MSVC compatibility, check if Derived directly inherits from Base. Clang; // warns about this hierarchy under -Winaccessible-base, but MSVC allows the; // user to access such bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:53,inherit,inherits,53,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherits']
Modifiability,"// For MinGW environments, manually export the __chkstk function from the lli; // executable.; //; // Normally, this function is provided by compiler-rt builtins or libgcc.; // It is named ""_alloca"" on i386, ""___chkstk_ms"" on x86_64, and ""__chkstk"" on; // arm/aarch64. In MSVC configurations, it's named ""__chkstk"" in all; // configurations.; //; // When Orc tries to resolve symbols at runtime, this succeeds in MSVC; // configurations, somewhat by accident/luck; kernelbase.dll does export a; // symbol named ""__chkstk"" which gets found by Orc, even if regular applications; // never link against that function from that DLL (it's linked in statically; // from a compiler support library).; //; // The MinGW specific symbol names aren't available in that DLL though.; // Therefore, manually export the relevant symbol from lli, to let it be; // found at runtime during tests.; //; // For real JIT uses, the real compiler support libraries should be linked; // in, somehow; this is a workaround to let tests pass.; //; // We need to make sure that this symbol actually is linked in when we; // try to export it; if no functions allocate a large enough stack area,; // nothing would reference it. Therefore, manually declare it and add a; // reference to it. (Note, the declarations of _alloca/___chkstk_ms/__chkstk; // are somewhat bogus, these functions use a different custom calling; // convention.); //; // TODO: Move this into libORC at some point, see; // https://github.com/llvm/llvm-project/issues/56603.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:277,config,configurations,277,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,3,['config'],['configurations']
Modifiability,"// For ORI and ORIS, we need the higher-order bits of the first operand to be; // zero, and also for the constant to be positive (so that it is not sign; // extended).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:157,extend,extended,157,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// For OpenCL passed block pointer can be private AS local variable or; // global AS program scope variable (for the case with and without captures).; // Generic AS is used therefore to be able to accommodate both private and; // generic AS in one implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,2,['variab'],['variable']
Modifiability,"// For Proof-Lite this variable is the number of workers and is set by the player",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:23,variab,variable,23,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['variab'],['variable']
Modifiability,"// For Proof-Lite this variable is the number of workers and is set; // by the player",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:23,variab,variable,23,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['variab'],['variable']
Modifiability,"// For R_RISCV_ALIGN, we will place Offset in a location (among NOPs) to; // satisfy the alignment requirement. If both Remove and E->getAddend(); // are multiples of 4, it is as if we have skipped some NOPs. Otherwise we; // are in the middle of a 4-byte NOP, and we need to rewrite the NOP; // sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp:276,rewrite,rewrite,276,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp,1,['rewrite'],['rewrite']
Modifiability,// For SRA we need to unpack each byte to the higher byte of a i16 vector; // so we can correctly sign extend. We don't care what happens to the; // lower byte.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:103,extend,extend,103,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For TLS initial-exec and local-exec accesses on AIX, we have one TOC; // entry for the symbol (with the variable offset), which is differentiated; // by MO_TPREL_FLAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:107,variab,variable,107,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// For a TClass object, InheritsFrom does not check the inheritance of; // the object but the inheritance of the class described by the object,; // so we need to explicitly call IsA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:24,Inherit,InheritsFrom,24,core/base/src/TFolder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx,3,"['Inherit', 'inherit']","['InheritsFrom', 'inheritance']"
Modifiability,"// For a `VarDecl` of the form `T * var (= Init)?`, this; // function generates fix-its that; // 1) replace `T * var` with `std::span<T> var`; and; // 2) change `Init` accordingly to a span constructor, if it exists.; //; // FIXME: support Multi-level pointers; //; // Parameters:; // `D` a pointer the variable declaration node; // `Ctx` a reference to the ASTContext; // `UserFillPlaceHolder` the user-input placeholder text; // Returns:; // the non-empty fix-it list, if fix-its are successfuly generated; empty; // list otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:303,variab,variable,303,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// For a declaration with parameters, eg. ""T var(T());"", suggest adding; // parens around the first parameter to turn the declaration into a; // variable declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:145,variab,variable,145,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,"// For a declaration without parameters, eg. ""T var();"", suggest replacing; // the parens with an initializer to turn the declaration into a variable; // declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:141,variab,variable,141,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,"// For a decomposition declaration, warn if none of the bindings are; // referenced, instead of if the variable itself is referenced (which; // it is, by the bindings' expressions).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:103,variab,variable,103,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// For a function, this will validate a compound Swift name, e.g.; // <code>init(foo:bar:baz:)</code> or <code>controllerForName(_:)</code>, and; // the function will output the number of parameter names, and whether this is a; // single-arg initializer.; //; // For a type, enum constant, property, or variable declaration, this will; // validate either a simple identifier, or a qualified; // <code>context.identifier</code> name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:303,variab,variable,303,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,"// For a global variable with one store, if the store dominates any loads,; // those loads will always load the stored value (as opposed to the; // initializer), even in the presence of recursion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"// For a negative step, we can extend the operands iff doing so only; // traverses values in the range zext([0,UINT_MAX]).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,"// For a non-negative NarrowDef, we can choose either type of; // extension. We want to use the current extend kind if legal; // (see above), and we only hit this code if we need to check; // the opposite case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:104,extend,extend,104,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extend']
Modifiability,"// For a non-null initializer `Init` of `T *` type, this function returns; // `FixItHint`s producing a list initializer `{Init, S}` as a part of a fix-it; // to output stream.; // In many cases, this function cannot figure out the actual extent `S`. It; // then will use a place holder to replace `S` to ask users to fill `S` in. The; // initializer shall be used to initialize a variable of type `std::span<T>`.; //; // FIXME: Support multi-level pointers; //; // Parameters:; // `Init` a pointer to the initializer expression; // `Ctx` a reference to the ASTContext",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:380,variab,variable,380,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// For a normal instance message, we should extend unless the; // receiver is loaded from a variable with precise lifetime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:44,extend,extend,44,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"// For a rewritten candidate, we've already reversed the arguments; // if needed. Perform the rest of the rewrite now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:106,rewrite,rewrite,106,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rewrite'],['rewrite']
Modifiability,"// For a synthesized class, inherit missing properties from the nearest; // super-class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:28,inherit,inherit,28,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,1,['inherit'],['inherit']
Modifiability,"// For a variable declared in an enclosing scope, do not emit a spurious; // reference even if we have a capture, as that will emit an unwarranted; // reference to our capture state, and will likely generate worse code than; // emitting a local copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"// For a variable in a comdat nodeduplicate, its initializer should be; // preserved (its content may be implicitly used by other members) even if; // symbol resolution does not pick it. Clone it into an unnamed private; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp:9,variab,variable,9,interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/LinkModules.cpp,2,['variab'],['variable']
Modifiability,"// For a variable of (array of) class type declared without an; // initializer, we will have call-style initialization and the initializer; // will be the CXXConstructExpr with no intervening nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,1,['variab'],['variable']
Modifiability,"// For a variable-length array, this is going to be non-constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:9,variab,variable-length,9,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['variab'],['variable-length']
Modifiability,"// For a variably modified type we can't just use the expression within; // the array bounds, since we don't want that to be re-evaluated here.; // Rather, we need to determine what it was when the array was first; // created - so we resort to using sizeof(vla)/sizeof(element).; // For e.g.; // void f(int b) {; // int vla[b];; // b = -1; <-- This should not affect the num of iterations below; // for (int &c : vla) { .. }; // }; // FIXME: This results in codegen generating IR that recalculates the; // run-time number of elements (as opposed to just using the IR Value; // that corresponds to the run-time value of each bound that was; // generated when the array was created.) If this proves too embarrassing; // even for unoptimized IR, consider passing a magic-value/cookie to; // codegen that then knows to simply use that initial llvm::Value (that; // corresponds to the bound at time of array creation) within; // getelementptr. But be prepared to pay the price of increasing a; // customized form of coupling between the two components - which could; // be hard to maintain as the codebase evolves.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:9,variab,variably,9,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,3,"['coupling', 'evolve', 'variab']","['coupling', 'evolves', 'variably']"
Modifiability,"// For a vmla we are trying to match a larger pattern:; // ExtA = sext/zext A; // ExtB = sext/zext B; // Mul = mul ExtA, ExtB; // vecreduce.add Mul; // There might also be en extra extend between the mul and the addreduce, so; // long as the bitwidth is high enough to make them equivalent (for example; // original v8i16 might be mul at v8i32 and the reduce happens at v8i64).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:181,extend,extend,181,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For activation layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:18,layers,layers,18,tmva/pymva/src/RModelParser_Keras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx,1,['layers'],['layers']
Modifiability,"// For adds only count the second operand as free if both operands are; // extends but not the same operation. (i.e both operands are not free in; // add(sext, zext)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:75,extend,extends,75,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,"// For all configurations, the bin offset should have the effect of bringing; // the NLL to zero, modulo some numerical imprecisions:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:11,config,configurations,11,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['config'],['configurations']
Modifiability,"// For allocating variable amounts of stack space when using; // segmented stacks. Check if the current stacklet has enough space, and; // falls back to heap allocation if not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,2,['variab'],['variable']
Modifiability,"// For an __auto_type variable, we may not have seen the initializer yet; // and so have no idea whether the underlying type is a pointer type or; // not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,"// For an argument attribute to transfer from a callsite to the parent, the; // call must be guaranteed to execute every time the parent is called.; // Conservatively, just check for calls in the entry block that are guaranteed; // to execute.; // TODO: This could be enhanced by testing if the callsite post-dominates the; // entry block or by doing simple forward walks or backward walks to the; // callsite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:268,enhance,enhanced,268,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['enhance'],['enhanced']
Modifiability,"// For an enclosing lambda to be capture ready for an entity, all; // intervening lambda's have to be able to capture that entity. If even; // one of the intervening lambda's is not capable of capturing the entity; // then no enclosing lambda can ever capture that entity.; // For e.g.; // const int x = 10;; // [=](auto a) { #1; // [](auto b) { #2 <-- an intervening lambda that can never capture 'x'; // [=](auto c) { #3; // f(x, c); <-- can not lead to x's speculative capture by #1 or #2; // }; }; };; // If they do not have a default implicit capture, check to see; // if the entity has already been explicitly captured.; // If even a single dependent enclosing lambda lacks the capability; // to ever capture this variable, there is no further enclosing; // non-dependent lambda that can capture this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:720,variab,variable,720,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,2,['variab'],['variable']
Modifiability,"// For an inheriting constructor declaration, the name of the using; // declaration is the name of a constructor in this class, not in the; // base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:10,inherit,inheriting,10,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['inherit'],['inheriting']
Modifiability,"// For an instruction to be added into Worklist above, all its users inside; // the loop should also be in Worklist. However, this condition cannot be; // true for phi nodes that form a cyclic dependence. We must process phi; // nodes separately. An induction variable will remain uniform if all users; // of the induction variable and induction variable update remain uniform.; // The code below handles both pointer and non-pointer induction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:260,variab,variable,260,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// For any DoubleWidthResultInstrs we found whilst scanning instructions, they; // need to compute an output size that is smaller than the VCTP mask operates; // on. The VecSize of the DoubleWidthResult is the larger vector size - the; // size it extends into, so any VCTP VecSize <= is valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp:247,extend,extends,247,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,1,['extend'],['extends']
Modifiability,"// For any constants that differ by 1, we can transform the select into; // an extend and add.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,extend,extend,79,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,// For any extends we can cheat for larger element sizes and use shuffle; // instructions that can fold with a load and/or copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,extend,extends,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// For any loaded plugins, let them register pass builder callbacks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:18,plugin,plugins,18,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,1,['plugin'],['plugins']
Modifiability,"// For any original GEP Call and Base %2 like; // %4 = bitcast %struct.net_device** %dev1 to i64*; // it is transformed to:; // %6 = load llvm.sk_buff:0:50$0:0:0:2:0; // %7 = bitcast %struct.sk_buff* %2 to i8*; // %8 = getelementptr i8, i8* %7, %6; // %9 = bitcast i8* %8 to i64*; // using %9 instead of %4; // The original Call inst is removed.; // Load the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:366,variab,variable,366,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['variab'],['variable']
Modifiability,"// For any other object IsA is called by InheritsFrom",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:41,Inherit,InheritsFrom,41,core/base/src/TFolder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,// For arrays/array sections only:; // Create pseudo array type for private copy. The size for this array will; // be generated during codegen.; // For array subscripts or single variables Private Ty is the same as Type; // (type of the variable or single array element).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:179,variab,variables,179,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// For automatic generation of LDG (through SelectLoad[Vector], not the; // intrinsics), we may have an extending load like:; //; // i32,ch = load<LD1[%data1(addrspace=1)], zext from i8> t0, t7, undef:i64; //; // In this case, the matching logic above will select a load for the original; // memory type (in this case, i8) and our types will not match (the node needs; // to return an i32 in this case). Our LDG/LDU nodes do not support the; // concept of sign-/zero-extension, so emulate it here by adding an explicit; // CVT instruction. Ptxas should clean up any redundancies here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:104,extend,extending,104,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// For blocks we only emit something if it is enclosed in a function; // For top-level block we'd like to include the name of variable, but we; // don't have it at this point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:126,variab,variable,126,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['variab'],['variable']
Modifiability,"// For cases such as (i4 bitcast (v4i1 setcc v4i64 v1, v2)); // sign-extend to a 256-bit operation to avoid truncation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:69,extend,extend,69,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For cases such as (i8 bitcast (v8i1 setcc v8i32 v1, v2)),; // sign-extend to a 256-bit operation to match the compare.; // If the setcc operand is 128-bit, prefer sign-extending to 128-bit over; // 256-bit because the shuffle is cheaper than sign extending the result of; // the compare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,extend,extend,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],"['extend', 'extending']"
Modifiability,"// For compatibility with existing code, we treat arrays of length 0 or; // 1 as flexible array members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:81,flexible,flexible,81,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['flexible'],['flexible']
Modifiability,"// For declrefs and variable length array need to load the pointer for; // correct mapping, since the pointer to the data was passed to the runtime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// For each compile unit, find the live set of global variables/functions and; // replace the current list of potentially dead global variables/functions; // with the live list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp:54,variab,variables,54,interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,2,['variab'],['variables']
Modifiability,"// For each extended integer type, g++ defines a macro mapping the; // index of the type (0 in this case) in some list of extended types; // to the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp:12,extend,extended,12,interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,2,['extend'],['extended']
Modifiability,"// For each extender that is a def, visit all uses of the defined register,; // and produce an offset range that works for all uses. The def doesn't; // have to be checked, because it can become dead if all uses can be updated; // to use a different reg/offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:12,extend,extender,12,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,"// For each symbol, we want to check its address and size; // if it's a function and write the information to the perf; // map file, otherwise we just ignore the symbol and any; // related errors. This implementation is adapted from LLVM:; // llvm/src/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp:220,adapt,adapted,220,interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/PerfJITEventListener.cpp,1,['adapt'],['adapted']
Modifiability,"// For each variable accessed through callees, which kernels access it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,// For each variable based on Src; create a location at Dst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// For every incoming edge we will create a block holding all; // incoming values in a single PHI nodes.; //; // loop:; // %n.val = phi i32[%n, %entry], [%inc, %loop]; //; // It will create:; //; // loop.from.entry:; // %n.loop.pre = phi i32 [%n, %entry]; // br %label loop; // loop.from.loop:; // %inc.loop.pre = phi i32 [%inc, %loop]; // br %label loop; //; // After this rewrite, further analysis will ignore any phi nodes with more; // than one incoming edge.; // TODO: Simplify PHINodes in the basic block to remove duplicate; // predecessors.; // Special case for CleanupPad: all EH blocks must have the same unwind edge; // so we need to create an additional ""dispatcher"" block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:374,rewrite,rewrite,374,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['rewrite'],['rewrite']
Modifiability,"// For every variable in C, create a new variable that refers to the; // definition in C. Return a new context that contains these new variables.; // (We use this for a naive implementation of SSA on loop back-edges.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// For everyhing else, use local variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variables']
Modifiability,"// For expressions like .set y, x+1, if y's size is unset, inherit from x.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp:59,inherit,inherit,59,interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/ELFObjectWriter.cpp,1,['inherit'],['inherit']
Modifiability,"// For extended class, unimplemented methods in its protocols will; // be reported in the primary class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:7,extend,extended,7,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['extend'],['extended']
Modifiability,"// For extension loads, it may not be more efficient to chop up the vector; // and then extend it. Instead, we unroll the load and build a new vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:88,extend,extend,88,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extend']
Modifiability,"// For function or variable declarations, defer reading the type in case the; // declaration has a deduced type that references an entity declared within; // the function definition or variable initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,2,['variab'],['variable']
Modifiability,"// For i32 intermediate values, unfortunately, the conversion functions; // leave the upper 32 bits of the value are undefined. Within the set of; // scalar instructions, we have no method for zero- or sign-extending the; // value. Thus, we cannot handle i32 intermediate values here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:207,extend,extending,207,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// For i64 source, we need to add the appropriate power of 2 if the input; // was negative. We must be careful to do the computation in x87 extended; // precision, not in SSE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:140,extend,extended,140,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// For i8 remainder, we can't reference ah directly, as we'll end; // up with bogus copies like %r9b = COPY %ah. Reference ax; // instead to prevent ah references in a rex instruction.; //; // The current assumption of the fast register allocator is that isel; // won't generate explicit references to the GR8_NOREX registers. If; // the allocator and/or the backend get enhanced to be more robust in; // that regard, this can be, and should be, removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:371,enhance,enhanced,371,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,2,['enhance'],['enhanced']
Modifiability,"// For if-then-else blocks, we lower to a foreach loop whose list is a; // ternary selection between lists of different length. Since we don't; // have a means to track variable length record lists, we *must* resolve; // the condition here. We want to defer final resolution of the arms; // until the resulting records are finalized.; // e.g. !if(!exists<SchedWrite>(""__does_not_exist__""), [1], [])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:169,variab,variable,169,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,"// For in-loop reductions, no element types are added to ElementTypesInLoop; // if there are no loads/stores in the loop. In this case, check through the; // reduction variables to determine the maximum width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:168,variab,variables,168,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,"// For init-capture, it is possible that the variable belongs to the; // template pattern of the current context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// For instantiating ROperator for Keras Identity Layer; // Declaring Internal function for Keras layers which have additional activation attribute",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:98,layers,layers,98,tmva/pymva/src/RModelParser_Keras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx,1,['layers'],['layers']
Modifiability,"// For instructions with variable uops, use uops as latency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['variab'],['variable']
Modifiability,"// For internal linkage variables, we don't need an external or weak wrapper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variables']
Modifiability,"// For kernel addresses, bits 56-63 need to be set, so we sign extend bit 55; // into bits 56-63 instead of masking them out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/SymbolizableObjectFile.cpp:63,extend,extend,63,interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/SymbolizableObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/Symbolize/SymbolizableObjectFile.cpp,1,['extend'],['extend']
Modifiability,"// For layers with activation attributes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:7,layers,layers,7,tmva/pymva/src/RModelParser_Keras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx,1,['layers'],['layers']
Modifiability,"// For leaves containing fixed-size objects (no; // polymorphism!), this will generate an appropriate; // offset array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h:52,polymorphi,polymorphism,52,tree/tree/inc/TLeaf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h,1,['polymorphi'],['polymorphism']
Modifiability,// For loads setting SLC configures L0 and L1 cache policy to HIT_EVICT; // and L2 cache policy to STREAM.; // For stores setting both GLC and SLC configures L0 and L1 cache policy; // to MISS_EVICT and the L2 cache policy to STREAM.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:25,config,configures,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,4,['config'],['configures']
Modifiability,"// For local TFiles, TDavixFile, and TNetXNGFile, we want to open a new RRawFile to take advantage of the faster; // reading. We check the exact class name to avoid classes inheriting in ROOT (for example TMemFile) or in; // experiment frameworks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageFile.cxx:173,inherit,inheriting,173,tree/ntuple/v7/src/RPageStorageFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageFile.cxx,1,['inherit'],['inheriting']
Modifiability,"// For local variables, store 1 into the first byte of the guard variable; // after the object initialization completes so that initialization is; // retried if initialization is interrupted by an exception.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:13,variab,variables,13,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// For local-exec and initial-exec on AIX (32-bit), the sequence generated; // involves loading the variable offset from the TOC, generating a call to; // .__get_tpointer to get the thread pointer (which will be in R3), and; // adding the two together:; // lwz reg1,var[TC](2); // bla .__get_tpointer; // add reg2, reg1, r3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:100,variab,variable,100,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// For local-exec and initial-exec on AIX (64-bit), the sequence generated; // involves a load of the variable offset (from the TOC), followed by an; // add of the loaded variable offset to R13 (the thread pointer).; // This code sequence looks like:; // ld reg1,var[TC](2); // add reg2, reg1, r13 // r13 contains the thread pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:102,variab,variable,102,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// For loop with multiple induction variables, remember the ones used only to; // control the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:36,variab,variables,36,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variables']
Modifiability,"// For masked shuffles, we're trying to match the root width for better; // writemask folding, attempt to scale the mask.; // TODO - variable shuffles might need this to be widened again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:133,variab,variable,133,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// For memory instructions, there is an asymmetry in the addressing; // modes. Addressing modes allowing extenders can be replaced with; // addressing modes that use registers, but the order of operands; // (or even their number) may be different.; // Replacements:; // BaseImmOffset (io) -> BaseRegOffset (rr); // BaseLongOffset (ur) -> BaseRegOffset (rr)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:105,extend,extenders,105,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extenders']
Modifiability,"// For most operations returning SDValue() will result in the node being; // expanded by the DAG Legalizer. This is not the case for ISD::LOAD, so we; // need to manually expand loads that may be legal in some address spaces and; // illegal in others. SEXT loads from CONSTANT_BUFFER_0 are supported for; // compute shaders, since the data is sign extended when it is uploaded to the; // buffer. However SEXT loads from other address spaces are not supported, so; // we need to expand them here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp:348,extend,extended,348,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// For multi-pdf configurations, check that the master index state name associated with this p.d.f exists as a state in the master category",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:17,config,configurations,17,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['config'],['configurations']
Modifiability,"// For non power-of-2 types, they will very likely be legalized into multiple; // loads. Don't bother trying to match them into extending loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:128,extend,extending,128,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extending']
Modifiability,"// For non-local variables, don't apply any weighting for now. Due to our; // use of COMDATs, we expect there to be at most one initialization of the; // variable per DSO, but we have no way to know how many DSOs will try to; // initialize the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// For non-local variables, store 1 into the first byte of the guard; // variable before the object initialization begins so that references; // to the variable during initialization don't restart initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// For non-local variables, treat it as a reference to a named object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variables']
Modifiability,// For non-mla reductions B can be set to 1. For MLA we take the operand of; // the extend B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:84,extend,extend,84,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For normal local variable, we will try to find out whether 'VD' is the; // copy parameter of coroutine.; // If yes, we are going to use DIVariable of the origin parameter instead; // of creating the new one.; // If no, it might be a normal alloc, we just create a new one for it.; // Check whether the VD is move parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,// For now just keep one store per pointer object per lane.; // TODO: Extend this to support multiple stores per pointer per lane,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:70,Extend,Extend,70,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Extend'],['Extend']
Modifiability,"// For now, all the operands must have the same type (if they aren't; // immediates). Note that this causes us to reject variable sized shifts; // on X86.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:121,variab,variable,121,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,1,['variab'],['variable']
Modifiability,"// For now, ignore blocks that belong to a SISE region that is a; // candidate for outlining. In the future, we may want to look; // at inner regions because the outer region may have live-exit; // variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp:198,variab,variables,198,interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,1,['variab'],['variables']
Modifiability,"// For now, only performCSELCombine and performBRCONDCombine call this; // function. And both of them pass 2 for CCIndex, 3 for CmpIndex with 4; // operands. So just init the ops direct to simplify the code. If we have some; // other case with different CCIndex, CmpIndex, we need to use for loop to; // rewrite the code here.; // TODO: Do we need to assert number of operand is 4 here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:304,rewrite,rewrite,304,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// For now, only support unnamed variables V0, V1 etc.; // FIXME: parse e.g. ""X"" by allocating an atom and storing a name somewhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Arena.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Arena.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Arena.cpp,1,['variab'],['variables']
Modifiability,"// For now, we only report clones which break the variable pattern just; // once because multiple differences in a pattern are an indicator that; // those differences are maybe intended (e.g. because it's actually a; // different algorithm).; // FIXME: In very big clones even multiple variables can be unintended,; // so replacing this number with a percentage could better handle such; // cases. On the other hand it could increase the false-positive rate; // for all clones if the percentage is too high.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// For now, we only support constant integers while folding the; // ICMP(SELECT)) pattern. We can extend this to support vector of integers; // similar to the cases handled by binary ops above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:98,extend,extend,98,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extend']
Modifiability,"// For now, we only synthesize getters.; // Synthesizing setters would cause false negatives in the; // RetainCountChecker because the method body would bind the parameter; // to an instance variable, causing it to escape. This would prevent; // warning in the following common scenario:; //; // id foo = [[NSObject alloc] init];; // self.foo = foo; // We should warn that foo leaks here.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:191,variab,variable,191,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['variab'],['variable']
Modifiability,"// For now, when there is a store to parts of the variable (but we do not; // know which part) we insert an dbg.value intrinsic to indicate that we; // know nothing about the variable's content.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,4,['variab'],['variable']
Modifiability,"// For one of each variable encountered, preserve a debug intrinsic (set; // to Poison) and transfer it to the loop exit. This terminates any; // variable locations that were set during the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,2,['variab'],['variable']
Modifiability,"// For operands whose TypeAction is to promote, extend the promoted node; // appropriately (ZERO_EXTEND or SIGN_EXTEND) from the original pre-promotion; // type, and then construct a new *_EXTEND_VECTOR_INREG node to the promote-to; // type..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// For other empty lines, if we do have a decoration, adapt it to not; // contain a trailing whitespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp:54,adapt,adapt,54,interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,1,['adapt'],['adapt']
Modifiability,"// For physregs, we only mark the start slot idx. DwarfDebug will see it; // as if the DBG_VALUE is valid up until the end of the basic block, or; // the next def of the physical register. So we do not need to extend the; // range. It might actually happen that the DBG_VALUE is the last use of; // the physical register (e.g. if this is an unused input argument to a; // function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:210,extend,extend,210,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['extend'],['extend']
Modifiability,"// For polymorphic intrinsics, FullName is the explicit name that uniquely; // identifies this variant of the intrinsic, and ShortName is the name it; // shares with at least one other intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:7,polymorphi,polymorphic,7,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['polymorphi'],['polymorphic']
Modifiability,"// For prefix ASTs, start with whatever the user configured on the; // command line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:49,config,configured,49,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['config'],['configured']
Modifiability,// For range-based for-loops convert the loop counter value to a concrete; // loop variable value by dereferencing the iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// For scalar loads the extend would be free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:24,extend,extend,24,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// For shifts of i8, extend the inputs to i16, then truncate back to i8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:21,extend,extend,21,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For sign-extends, we only need a smov, which performs the extension; // automatically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:12,extend,extends,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,"// For signed conversion, we need to sign-extend the value in the VSR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:42,extend,extend,42,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For signed, overflow occurred when the high part does not sign-extend; // the low part.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:66,extend,extend,66,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,// For simplicity we only chain together sequences of MULs/MLAs where the; // accumulator register is killed on each instruction. This means we don't; // need to track other uses of the registers we want to rewrite.; //; // FIXME: We could extend to handle the non-kill cases for more coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:207,rewrite,rewrite,207,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,2,"['extend', 'rewrite']","['extend', 'rewrite']"
Modifiability,"// For simplicity, we put the data on both host and device for; // now. This could be optimized by inspecting the clients of the; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:133,variab,variable,133,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['variab'],['variable']
Modifiability,"// For smaller scalar integers, we can simply any-extend it to the vector; // element size (we don't care about the upper bits) and broadcast it to all; // elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For smaller types, we need to ensure that the gep's inputs are correctly; // extended from a small enough value. Other sizes (including i64) are; // scalarized for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:80,extend,extended,80,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,"// For standard syntax attributes, which would normally appertain to the; // declaration here, suggest moving them to the type instead. But only; // do this for our own vendor attributes; moving other vendors'; // attributes might hurt portability.; // There's one special case that we need to deal with here: The; // `MatrixType` attribute may only be used in a typedef declaration. If; // it's being used anywhere else, don't output the warning as; // ProcessDeclAttributes() will output an error anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:236,portab,portability,236,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['portab'],['portability']
Modifiability,// For statement declares loop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// For statement reuses variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// For static local variables and Fortran, the scoping portion is elided; // in its name so that we can reference the variable in the command line; // of the VS debugger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// For static variables, we need to create a branch to track; // whether or not they are initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:14,variab,variables,14,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"// For subtract, we don't need to sext the constant. We only put it in; // SafeWrap because SafeWrap.size() is used elsewhere.; // For cmp, we need to sign extend a constant appearing in either; // operand. For add, we should only sign extend the RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:156,extend,extend,156,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,2,['extend'],['extend']
Modifiability,"// For symbols representing the inlined function parameters and its; // variables, get the outer most parent that contains their location; // lower address.; // The symbol can have a set of non-contiguous locations. We are using; // only the first location entry to get the outermost parent.; // If no scope contains the location, assume its enclosing parent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp:72,variab,variables,72,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp,1,['variab'],['variables']
Modifiability,"// For target-based directives skip 4 firstprivate arrays BasePointersArray,; // PointersArray, SizesArray, and MappersArray. The original variables for; // these arrays are not captured and we get their addresses explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:139,variab,variables,139,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"// For the 32 bit form of instruction, the upper 32 bits of the destination; // register are set to zero. If there is SUBREG_TO_REG, set the upper 32 bits; // of Imm to zero. This is essential if the Immediate value was a negative; // number since it was sign extended when we assign to the 64-bit Imm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp:260,extend,extended,260,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,1,['extend'],['extended']
Modifiability,// For the MS ABI we need to know whether the copy ctor is deleted. A; // prerequisite for deleting the implicit copy ctor is that the class has; // a move ctor or move assignment that is either user-declared or whose; // semantics are inherited from a subobject. FIXME: We should provide a; // more direct way for CodeGen to ask whether the constructor was deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:236,inherit,inherited,236,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// For the X86 DIV/IDIV instruction, in most cases the dividend; // (numerator) must be in a specific register pair highreg:lowreg,; // producing the quotient in lowreg and the remainder in highreg.; // For most data types, to set up the instruction, the dividend is; // copied into lowreg, and lowreg is sign-extended or zero-extended; // into highreg. The exception is i8, where the dividend is defined; // as a single register rather than a register pair, and we; // therefore directly sign-extend or zero-extend the dividend into; // lowreg, instead of copying, and ignore the highreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:310,extend,extended,310,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,4,['extend'],"['extend', 'extended']"
Modifiability,"// For the X86 IDIV instruction, in most cases the dividend; // (numerator) must be in a specific register pair highreg:lowreg,; // producing the quotient in lowreg and the remainder in highreg.; // For most data types, to set up the instruction, the dividend is; // copied into lowreg, and lowreg is sign-extended into highreg. The; // exception is i8, where the dividend is defined as a single register rather; // than a register pair, and we therefore directly sign-extend the dividend; // into lowreg, instead of copying, and ignore the highreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp:306,extend,extended,306,interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// For the case (i16 bitcast (v16i1 setcc v16i16 v1, v2)),; // it is not profitable to sign-extend to 256-bit because this will; // require an extra cross-lane shuffle which is more expensive than; // truncating the result of the compare to 128-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:92,extend,extend,92,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For the context-sensitve instrumentation, we should have a separated pass; // (before LTO/ThinLTO linking) to create these variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:126,variab,variables,126,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['variab'],['variables']
Modifiability,"// For the following checks, we rely on the base declaration which is; // expected to be associated with the last component. The declaration is; // expected to be a variable or a field (if 'this' is being mapped).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:165,variab,variable,165,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// For the given explicit prefix-definition of a namespace, travel downwards; // from a node recursively, and for every implicit, inherited default usage of; // that namespace replace it with that explicit prefix use. This is important; // when namespace overriding occurs when merging, so that elements unique to a; // namespace will still stay in that namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:130,inherit,inherited,130,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,1,['inherit'],['inherited']
Modifiability,"// For the given variable declaration with a pointer-to-T type, returns the text; // `std::span<T>`. If it is unable to generate the text, returns; // `std::nullopt`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// For the purposes of these comparisons sign extending the type is; // equivalent to zero extending the add and displacing it by half the integer; // width. Provided we are careful and make sure our equations are valid over; // the whole range we can just adjust the input and avoid writing equations; // for sign extended inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:46,extend,extending,46,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,3,['extend'],"['extended', 'extending']"
Modifiability,"// For the sake of this example GC, we arbitrarily pick addrspace(1) as; // our GC managed heap. This must match the same check in; // RewriteStatepointsForGC (and probably needs better factored.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:135,Rewrite,RewriteStatepointsForGC,135,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,"// For the scalar case extend to a 128-bit vector, perform the logic op,; // and extract the scalar result back out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For these, we just need to check if the 1st operand is sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:63,extend,extended,63,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,// For this AND to be a zero extension of the masked load the elements; // of the BuildVec must mask the bottom bits of the extended element; // type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:124,extend,extended,124,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// For this test, use a uniform non-unity weight of 1.5. It was set to 0.1; // in the past, but then there were fourth-digit differences between the; // scalar mode and the batch mode. However, this is most likeliy not; // pointing towards a flaw in the batch mode, which is why a value was; // handpicked for which the differences disappear. Any residual problems are; // most likely caused by the unnecessarily complicated implementation of the; // RooAddPdf extended term in the scalar mode: the coefficients are; // projected to the subrange by cached scale factors, while the batch mode; // just uses the same scaling factor as for the full likelihood.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:461,extend,extended,461,roofit/roofitcore/test/testSumW2Error.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx,1,['extend'],['extended']
Modifiability,"// For thunk outlining, rewrite the last instruction from a call to a; // tail-call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:24,rewrite,rewrite,24,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,2,['rewrite'],['rewrite']
Modifiability,// For types smaller than legal vectors extend to be legal and only use needed; // lanes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For unsigned comparisons, we can directly compare the shifted values.; // For signed comparisons we shift and sign extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:118,extend,extend,118,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For unsplit intrinsics, we simply modify the source and destination; // pointers in place. This isn't just an optimization, it is a matter of; // correctness. With unsplit intrinsics we may be dealing with transfers; // within a single alloca before SROA ran, or with transfers that have; // a variable length. We may also be dealing with memmove instead of; // memcpy, and so simply updating the pointers is the necessary for us to; // update both source and dest of a single call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:297,variab,variable,297,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// For v2f64, v4f32 and v4i32 types, we require the load to be non-extending; // as we cannot handle extending loads for these types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:67,extend,extending,67,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],['extending']
Modifiability,"// For v8i16 and v16i8 types, extending loads can be handled as long as the; // memory VT is the same vector element VT type.; // The loads feeding into the v8i16 and v16i8 types will be extending because; // scalar i8/i16 are not legal types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:30,extend,extending,30,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],['extending']
Modifiability,"// For vXi8 we will unpack the low and high half of each 128 bit lane to widen; // to a vXi16 type. Do the multiplies, shift the results and pack the half; // lane results back together.; // We'll take different approaches for signed and unsigned.; // For unsigned we'll use punpcklbw/punpckhbw to put zero extend the bytes; // and use pmullw to calculate the full 16-bit product.; // For signed we'll use punpcklbw/punpckbw to extend the bytes to words and; // shift them left into the upper byte of each word. This allows us to use; // pmulhw to calculate the full 16-bit product. This trick means we don't; // need to sign extend the bytes to use pmullw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:307,extend,extend,307,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],['extend']
Modifiability,"// For values that have a single use, the caller should obviously already have; // checked if that use is an extending use. We check the other uses here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:109,extend,extending,109,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// For varargs, we always want to extend them to 8 bytes, in which case; // we disable setting a max.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extend']
Modifiability,"// For variable definitions causing var/function ambiguity such as:; // MyClass my();, C++ standard says it shall be resolved as a function; //; // In the particular context this definition is inside a function; // already, but clang thinks it as a lambda, so we need to ignore the; // check decl context vs lexical decl context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclExtractor.cpp:7,variab,variable,7,interpreter/cling/lib/Interpreter/DeclExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclExtractor.cpp,1,['variab'],['variable']
Modifiability,"// For variable instruction, we emit a instruction length table; // to let the decoder know how long the instructions are.; // You can see example usage in M68k's disassembler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['variab'],['variable']
Modifiability,"// For variable templates, Transform() is invoked with a VarDecl; get the; // corresponding VarTemplateDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DefinitionShadower.cpp:7,variab,variable,7,interpreter/cling/lib/Interpreter/DefinitionShadower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DefinitionShadower.cpp,1,['variab'],['variable']
Modifiability,"// For vector types, we assume that the best way to adapt the number; // of elements is to the next larger number of elements type for which; // the vector type is legal, unless there is no such type. In that case,; // legalize towards a vector type with a smaller number of elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp:52,adapt,adapt,52,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp,1,['adapt'],['adapt']
Modifiability,"// For vectors - if we have a constant, then try to sign extend.; // TODO: Handle AND cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:57,extend,extend,57,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// For writes, handle extended mask bits if the DSP extension is present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMInstPrinter.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMInstPrinter.cpp,1,['extend'],['extended']
Modifiability,"// For x87 extended precision, we want to make a NaN, not a special NaN if; // the input wasn't special either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['extend'],['extended']
Modifiability,"// For x87 extended precision, we want to make a NaN, not a; // pseudo-NaN. Maybe we should expose the ability to make; // pseudo-NaNs?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['extend'],['extended']
Modifiability,// For zero covered inlined variables the locstats will be; // calculated later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:28,variab,variables,28,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,// For zero-extending loads to 64bit we emit a 32bit load and then convert; // the 32bit reg to a 64bit reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:12,extend,extending,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extending']
Modifiability,"// For zero-extends, the extend is performed automatically by a umov unless; // the destination type is i64 and the element type is i8 or i16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:12,extend,extends,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,// Forbid the block-capture of autoreleasing variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:45,variab,variables,45,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,// Forbid the call site to cast the function return type. If we need to; // rewrite these functions we need to re-create a cast for the new call site; // (if the old had uses).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:76,rewrite,rewrite,76,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['rewrite'],['rewrite']
Modifiability,// Forbid the lambda copy-capture of autoreleasing variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:51,variab,variables,51,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,// Force declaration of implicit members so they can inherit the attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:53,inherit,inherit,53,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherit']
Modifiability,"// Force the serialization of a page list which will not know about the extended columns coming later.; // `RClusterDescriptorBuilder::AddExtendedColumnRanges()` should thus make up page ranges for the missing columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx:72,extend,extended,72,tree/ntuple/v7/test/ntuple_modelext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx,1,['extend'],['extended']
Modifiability,// Force the signatures to match. We can't rely on the overrides; // list here because there isn't necessarily an inheritance; // relationship between the two methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:114,inherit,inheritance,114,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['inherit'],['inheritance']
Modifiability,// Form a simple per-variable cache of these values in case we find we; // want to reuse them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,// Forward -fpass-plugin=name.so to -cc1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:18,plugin,plugin,18,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['plugin'],['plugin']
Modifiability,// ForwardingMM - Adapter to connect MCJIT to Orc's Remote; // memory manager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/ForwardingMemoryManager.h:18,Adapt,Adapter,18,interpreter/llvm-project/llvm/tools/lli/ForwardingMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/ForwardingMemoryManager.h,1,['Adapt'],['Adapter']
Modifiability,"// Found a phi taking undef as input, so rewrite it to take InitReg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:41,rewrite,rewrite,41,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Found the index reg, now try to rewrite it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:35,rewrite,rewrite,35,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['rewrite'],['rewrite']
Modifiability,"// FragInfo from calculateFragmentIntersect is nullopt if the; // resultant fragment matches DAI's fragment or entire variable - in; // which case copy the fragment info from DAI. If FragInfo is still; // nullopt after the copy it means ""no fragment info"" instead, which; // is how it is usually interpreted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:118,variab,variable,118,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Frames that have variable sized objects and scalable SVE objects,; // should always use a basepointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,1,['variab'],['variable']
Modifiability,// Freescale Extended Time Processing Unit,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:13,Extend,Extended,13,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['Extend'],['Extended']
Modifiability,"// Friendship lookup is a redeclaration lookup, so there's never an; // inheritance path modifying access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:72,inherit,inheritance,72,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['inherit'],['inheritance']
Modifiability,"// From here on out, conservatively report to the pass manager that we've; // changed the IR, even if we later clean up these added instructions. There; // may be structural differences e.g. in the order of use lists not accounted; // for in just a textual dump of the IR. This is written as a variable, even; // though statically all the places this dominates could be replaced with; // 'true', with the hope that anyone trying to be clever / ""more precise"" with; // the return value will read this comment, and leave them alone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:294,variab,variable,294,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,2,['variab'],['variable']
Modifiability,"// From https://developer.arm.com/documentation/dui0801/b/BABBGCAC; //; // When you use the 32-bit form of an instruction, the upper 32 bits of the; // source registers are ignored and the upper 32 bits of the destination; // register are set to zero.; //; // If AArch64's 32-bit form of instruction defines the source operand of; // zero-extend, we do not need the zero-extend. Let's check the MI's opcode is; // real AArch64 instruction and if it is not, do not process the opcode; // conservatively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp:339,extend,extend,339,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,4,['extend'],['extend']
Modifiability,"// From the MS_Symbol_Type.pdf documentation (S_BPREL32):; // This symbol specifies symbols that are allocated on the stack for a; // procedure. For C and C++, these include the actual function parameters; // and the local non-static variables of functions.; // However, the offset for 'this' comes as a negative value.; // Symbol was created as 'variable'; determine its real kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:234,variab,variables,234,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// From the cancellation block we finalize all variables and go to the; // post finalization block that is known to the FiniCB callback.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:160,inherit,inheritance,160,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['inherit'],['inheritance']
Modifiability,"// From this point on, rely on UseGPRForF16_F32, UseGPRForF64 and; // similar local variables rather than directly checking against the target; // ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:84,variab,variables,84,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['variab'],['variables']
Modifiability,// Fully covered variable within its scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,"// Function parameters are stored in some caller's frame. (Usually the; // immediate caller, but for an inherited constructor they may be more; // distant.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:104,inherit,inherited,104,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['inherit'],['inherited']
Modifiability,"// Function selection rules are the same as Variable selection rules",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h:44,Variab,Variable,44,core/dictgen/res/VariableSelectionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/VariableSelectionRule.h,1,['Variab'],['Variable']
Modifiability,// Function-scope static variable without explicit device or constant; // attribute are emitted; // - on both sides in host device functions; // - on device side in device or global functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['variab'],['variable']
Modifiability,"// Function-scoped static variables are default-initialized to 0; if they; // have an initializer, it would have been processed by now.; // FIXME: This is only true when we're starting analysis from main().; // We're losing a lot of coverage here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:26,variab,variables,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['variab'],['variables']
Modifiability,"// Functions could be referenced by global vars - e.g. a vtable; but we; // don't currently imagine a reason those would be imported here, rather; // than as part of the logic deciding which functions to import (i.e.; // based on profile information). Should we decide to handle them here,; // we can refactor accordingly at that time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:301,refactor,refactor,301,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['refactor'],['refactor']
Modifiability,"// Functions defined outside the class need to be 'inline'; // if CDT is configured to be used as header-only library:; // single-definition rule is violated otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:73,config,configured,73,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['config'],['configured']
Modifiability,"// Functions for marking a declaration referenced. These functions also; // contain the relevant logic for marking if a reference to a function or; // variable is an odr-use (in the C++11 sense). There are separate variants; // for expressions referring to a decl; these exist because odr-use marking; // needs to be delayed for some constant variables when we build one of the; // named expressions.; //; // MightBeOdrUse indicates whether the use could possibly be an odr-use, and; // should usually be true. This only needs to be set to false if the lack of; // odr-use cannot be determined from the current context (for instance,; // because the name denotes a virtual function and was written without an; // explicit nested-name-specifier).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:151,variab,variable,151,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['variab'],"['variable', 'variables']"
Modifiability,// Functions returning a variably modified type violate C99 6.7.5.2p2; // because all functions have linkage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:25,variab,variably,25,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variably']
Modifiability,"// Furthermore, shuffles require a constant mask, whereas extractelts; // accept variable indices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Fuse this rewrite with a rewrite of the offset name, if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:13,rewrite,rewrite,13,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,4,['rewrite'],['rewrite']
Modifiability,"// G.Q. added m variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:16,variab,variable,16,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// GCC applies the following optimization to variables and static; // data members, but not to functions:; //; // Modify the variable's LV by the LV of its type unless this is; // C or extern ""C"". This follows from [basic.link]p9:; // A type without linkage shall not be used as the type of a; // variable or function with external linkage unless; // - the entity has C language linkage, or; // - the entity is declared within an unnamed namespace, or; // - the entity is not used or is defined in the same; // translation unit.; // and [basic.link]p10:; // ...the types specified by all declarations referring to a; // given variable or function shall be identical...; // C does not have an equivalent rule.; //; // Ignore this if we've got an explicit attribute; the user; // probably knows what they're doing.; //; // Note that we don't want to make the variable non-external; // because of this, but unique-external linkage suits us.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:45,variab,variables,45,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// GCC's logic around choosing a default `-mabi=` is complex. If GCC is not; // configured using `--with-abi=`, then the logic for the default choice is; // defined in config.gcc. This function is based on the logic in GCC 9.2.0.; //; // The logic used in GCC 9.2.0 is the following, in order:; // 1. Explicit choices using `--with-abi=`; // 2. A default based on `--with-arch=`, if provided; // 3. A default based on the target triple's arch; //; // The logic in config.gcc is a little circular but it is not inconsistent.; //; // Clang does not have `--with-arch=` or `--with-abi=`, so we use `-march=`; // and `-mabi=` respectively instead.; //; // In order to make chosing logic more clear, Clang uses the following logic,; // in order:; // 1. Explicit choices using `-mabi=`; // 2. A default based on the architecture as determined by getRISCVArch; // 3. Choose a default based on the triple; // 1. If `-mabi=` is specified, use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp:80,config,configured,80,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,3,['config'],"['config', 'configured']"
Modifiability,"// GCC's logic around choosing a default `-march=` is complex. If GCC is not; // configured using `--with-arch=`, then the logic for the default choice is; // defined in config.gcc. This function is based on the logic in GCC 9.2.0. We; // deviate from GCC's default on additional `-mcpu` option (GCC does not; // support `-mcpu`) and baremetal targets (UnknownOS) where neither `-march`; // nor `-mabi` is specified.; //; // The logic used in GCC 9.2.0 is the following, in order:; // 1. Explicit choices using `--with-arch=`; // 2. A default based on `--with-abi=`, if provided; // 3. A default based on the target triple's arch; //; // The logic in config.gcc is a little circular but it is not inconsistent.; //; // Clang does not have `--with-arch=` or `--with-abi=`, so we use `-march=`; // and `-mabi=` respectively instead.; //; // Clang uses the following logic, in order:; // 1. Explicit choices using `-march=`; // 2. Based on `-mcpu` if the target CPU has a default ISA string; // 3. A default based on `-mabi`, if provided; // 4. A default based on the target triple's arch; //; // Clang does not yet support MULTILIB_REUSE, so we use `rv{XLEN}imafdc`; // instead of `rv{XLEN}gc` though they are (currently) equivalent.; // 1. If `-march=` is specified, use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp:81,config,configured,81,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,3,['config'],"['config', 'configured']"
Modifiability,"// GDB has trouble finding local variables in anonymous unions, so we emit; // artificial local variables for each of the members.; //; // FIXME: Remove this code as soon as GDB supports this.; // The debug info verifier in LLVM operates based on the assumption that a; // variable has the same size as its storage and we had to disable the; // check for artificial variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// GLViewer plugin...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx:12,plugin,plugin,12,gui/gui/src/TRootBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx,1,['plugin'],['plugin']
Modifiability,// GNU extension: vector types; // <type> ::= <vector-type>; // <vector-type> ::= Dv <positive dimension number> _; // <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel; // ::= b # Altivec vector bool,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:120,extend,extended,120,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,2,['extend'],['extended']
Modifiability,"// GNU-style __attribute__((""example"")) and C++/C23-style [[example]] and; // [[plugin::example]] supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp:80,plugin,plugin,80,interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/Attribute/Attribute.cpp,1,['plugin'],['plugin']
Modifiability,// GV <object name> # Guard variable for one-time initialization,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:28,variab,variable,28,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,1,['variab'],['variable']
Modifiability,// G_LOAD is used for both non-extending and any-extending loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:31,extend,extending,31,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,2,['extend'],['extending']
Modifiability,"// G_UNMERGE_VALUES has variable number of operands, but there is only; // one source type and one destination type as all destinations must be the; // same type. So, get the last operand if TypeIdx == 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:24,variab,variable,24,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp,1,['variab'],['variable']
Modifiability,"// Gadgets ""claim"" variables they're responsible for. Once this loop; // finishes, the tracker will only track DREs that weren't claimed by any; // gadgets, i.e. not understood by the analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:19,variab,variables,19,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,"// Gather / Scatter for vector 2 is not profitable on KNL / SKX; // Vector-4 of gather/scatter instruction does not exist on KNL. We can extend; // it to 8 elements, but zeroing upper bits of the mask vector will add more; // instructions. Right now we give the scalar cost of vector-4 for KNL. TODO:; // Check, maybe the gather/scatter instruction is better in the VariableMask; // case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:137,extend,extend,137,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,"['Variab', 'extend']","['VariableMask', 'extend']"
Modifiability,"// Gather all imported weighted datasets to infer the weight variable name; // and whether we need weight errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:61,variab,variable,61,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,"// Gather information about the lexical scope including local variables,; // global variables, and address ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:62,variab,variables,62,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['variab'],['variables']
Modifiability,// Gather the currently-selected variable choices into a vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,1,['variab'],['variable']
Modifiability,"// General configuration parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h:11,config,configuration,11,proof/proof/inc/TVirtualPacketizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h,2,['config'],['configuration']
Modifiability,"// General extends failed, but 128-bit vectors may be able to use MOVQ.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,extend,extends,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// General purpose self-adapting Monte Carlo event generator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/inc/TFoam.h:24,adapt,adapting,24,math/foam/inc/TFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/inc/TFoam.h,1,['adapt'],['adapting']
Modifiability,"// Generally inherit NoLineBreak from the current scope to nested scope.; // However, don't do this for non-empty nested blocks, dict literals and; // array literals as these follow different indentation rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:13,inherit,inherit,13,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['inherit'],['inherit']
Modifiability,// Generate a SUBREG_TO_REG to extend it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extend']
Modifiability,// Generate correct mapping for variables captured by reference in; // lambdas.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:32,variab,variables,32,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// Generate debug info for variables present in shared clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,variab,variables,27,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Generate function that emits destructor call for the threadprivate copy; // of the variable VD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,variab,variable,86,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,// Generate function that re-emits the declaration's initializer into the; // threadprivate copy of the variable VD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// Generate helper private variable and initialize it with the value of the; // original variable. The address of the original variable is replaced by; // the address of the new private variable in the CodeGen. This new variable; // is not added to IdResolver, so the code in the OpenMP region uses; // original variable for proper diagnostics and variable capturing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,7,['variab'],['variable']
Modifiability,"// Generate helper private variable and initialize it with the; // default value. The address of the original variable is replaced; // by the address of the new private variable in CodeGen. This new; // variable is not added to IdResolver, so the code in the OpenMP; // region uses original variable for proper diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,5,['variab'],['variable']
Modifiability,"// Generate induction resume values. These variables save the new starting; // indexes for the scalar loop. They are used to test if there are any tail; // iterations left once the vector loop has completed.; // Note that when the vectorized epilogue is skipped due to iteration count; // check, then the resume value for the induction variable comes from; // the trip count of the main vector loop, hence passing the AdditionalBypass; // argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Generate list of implicitly defined firstprivate variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variables,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Generate metadata for global variables. Each entry of this metadata; // contains:; // - Entry 0 -> Kind of this type of metadata (1).; // - Entry 1 -> Mangled name of the variable.; // - Entry 2 -> Declare target kind.; // - Entry 3 -> Order the entry was created.; // The first element of the metadata node is the kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Generate the induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,// Generate the method and instance variable lists,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variable']
Modifiability,"// Generate uniform variables (non-dependents)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:20,variab,variables,20,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,2,['variab'],['variables']
Modifiability,// Generates the necessary ioctl system calls to configure the perf counters.; // The code generated by this function preserves all registers if the; // parameter SaveRegisters is set to true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:49,config,configure,49,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['config'],['configure']
Modifiability,"// Generation _with_ prototype variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:31,variab,variable,31,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variable']
Modifiability,"// Generic PDF defined by string expression and list of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEfficiency.h:56,variab,variables,56,roofit/roofitcore/inc/RooEfficiency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEfficiency.h,2,['variab'],['variables']
Modifiability,"// Generic configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/LinkDef1.h:11,config,configuration,11,graf3d/eve/inc/LinkDef1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/LinkDef1.h,1,['config'],['configuration']
Modifiability,// Generic expansion in terms of other atomic operations.; // Rewrite to a non-atomic form for use in a known non-preemptible; // environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:62,Rewrite,Rewrite,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Rewrite'],['Rewrite']
Modifiability,"// Generic test that an N-dimensional histogram with a certain axis; // configuration is binned correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/binning.cxx:72,config,configuration,72,hist/histv7/test/binning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/binning.cxx,1,['config'],['configuration']
Modifiability,// Gentoo-specific toolchain configurations are stored here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h:29,config,configurations,29,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,1,['config'],['configurations']
Modifiability,"// Get BitMode from enviorment variable ""OBJECT_MODE"" for AIX OS, if; // specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,1,['variab'],['variable']
Modifiability,"// Get BitMode from enviornment variable ""OBJECT_MODE"" for AIX OS, if; // specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,1,['variab'],['variable']
Modifiability,// Get Imm operand and Sign-extend to 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:28,extend,extend,28,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extend']
Modifiability,"// Get Session dir (sandbox)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:20,sandbox,sandbox,20,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['sandbox'],['sandbox']
Modifiability,// Get a pointer to the variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"// Get a promoted operand and sign or zero extend it to the final size; // (depending on TargetLoweringInfo::isSExtCheaperThanZExt). For a given; // subtarget and type, the choice of sign or zero-extension will be; // consistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:43,extend,extend,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['extend'],['extend']
Modifiability,"// Get a thread-local global variable with the given name. If it doesn't exist; // declare it, which will generate an import and assume that it will exist at; // link time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variable']
Modifiability,// Get access to the plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:21,plugin,plugin,21,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['plugin'],['plugin']
Modifiability,// Get and set the number of fixed (as opposed to variable) arguments; // that are passed in GPRs to this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineFunctionInfo.h:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineFunctionInfo.h,1,['variab'],['variable']
Modifiability,// Get assigned variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp,1,['variab'],['variable']
Modifiability,// Get build system configuration settings,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:20,config,configuration,20,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,1,['config'],['configuration']
Modifiability,// Get common subset of variables in given scope,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,// Get dead variables list now because the MI pointer may be deleted as part; // of processing!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:12,variab,variables,12,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['variab'],['variables']
Modifiability,"// Get feature importance from classifier as an array with length equal; // number of variables, higher value signals a higher importance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:86,variab,variables,86,tmva/pymva/src/MethodPyAdaBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx,3,['variab'],['variables']
Modifiability,// Get first lane of vector induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variable']
Modifiability,"// Get fit range limits; /// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:46,config,configuration,46,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['config'],['configuration']
Modifiability,// Get its reduction variable descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variable']
Modifiability,// Get list of firstprivate variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],['variables']
Modifiability,// Get list of lastprivate variables (for taskloops).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,variab,variables,27,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Get list of private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Get map clause information. Fill up the arrays with all mapped variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:66,variab,variables,66,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// Get mask/evl value handles for the current configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:46,config,configuration,46,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,1,['config'],['configuration']
Modifiability,"// Get monitor object from the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx:31,plugin,plugin,31,proof/proofplayer/src/TPerfStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx,1,['plugin'],['plugin']
Modifiability,"// Get new name (for either variable or parameter)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,variab,variable,28,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// Get or create the UserValue for (variable,offset) here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['variab'],['variable']
Modifiability,"// Get plugin manager to load appropriate TProof from",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:7,plugin,plugin,7,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['plugin'],['plugin']
Modifiability,"// Get plugin manager to load the appropriate TDataSetManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:7,plugin,plugin,7,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['plugin'],['plugin']
Modifiability,// Get pointer to Communications Vector Table (CVT).; // The pointer is located at offset 16 of the Prefixed Save Area (PSA).; // It is stored as 31 bit pointer and will be zero-extended to 64 bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:178,extend,extended,178,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,1,['extend'],['extended']
Modifiability,"// Get pointer to user variable; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:23,variab,variable,23,tmva/tmva/inc/TMVA/PDEFoamCell.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h,1,['variab'],['variable']
Modifiability,// Get relocation adjustment value for the current variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp,1,['variab'],['variable']
Modifiability,"// Get some useful info about the cluster (the sandbox dir ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:47,sandbox,sandbox,47,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['sandbox'],['sandbox']
Modifiability,// Get tags from variable type that are not present in its name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,// Get the 21 bit addend encoded in the adrp instruction and sign-extend; // to 64 bit. The lower 12 bits (4096 byte page) are always zeros and are; // therefore implicit (<< 12).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h:66,extend,extend,66,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,1,['extend'],['extend']
Modifiability,// Get the 26 bit addend encoded in the branch instruction and sign-extend; // to 64 bit. The lower 2 bits are always zeros and are therefore implicit; // (<< 2).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h:68,extend,extend,68,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,1,['extend'],['extend']
Modifiability,"// Get the address of the master variable. If we are emitting code with; // TLS support, the address is passed from the master as field in the; // captured declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Get the address of the original variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Get the address of the private variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Get the address of the threadprivate variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Get the backedge taken count and truncate or extended to the AR type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['extend'],['extended']
Modifiability,// Get the block literal from an expression derived from the block expression.; // OpenCL v2.0 s6.12.5:; // Block variable declarations are implicitly qualified with const. Therefore; // all block variables must be initialized at declaration time and may not be; // reassigned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:114,variab,variable,114,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Get the category; /// Get the RooWorkspace containing the models and variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:72,variab,variables,72,roofit/roostats/inc/RooStats/HLFactory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h,1,['variab'],['variables']
Modifiability,// Get the column number (in characters) at which the first live variable; // line should be printed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:65,variab,variable,65,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,2,['variab'],['variable']
Modifiability,// Get the correct pointer to load the variable argument; // Implement the ContBlock,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,1,['variab'],['variable']
Modifiability,// Get the cost for the extract. We compute the cost (if any) for the extend; // below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:70,extend,extend,70,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// Get the cost of converting a boolean vector to a vector with same width; // and element size as Dst, plus the cost of zero extending if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:126,extend,extending,126,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,// Get the definition. Leaves the variable unchanged if undefined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"// Get the dependence distance, stride, type size in whether i is a write for; // the dependence between A and B. Returns a DepType, if we can prove there's; // no dependence or the analysis fails. Outlined to lambda to limit he scope; // of various temporary variables, like A/BPtr, StrideA/BPtr and others.; // Returns either the dependence result, if it could already be determined, or a; // tuple with (Distance, Stride, TypeSize, AIsWrite, BIsWrite).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:260,variab,variables,260,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// Get the existing variable, if one exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variable']
Modifiability,// Get the expanded definition prototypes and teach them about; // the record values the current class to inherit has,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:106,inherit,inherit,106,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['inherit'],['inherit']
Modifiability,// Get the extended container type manually to ensure the same number of; // vector elements between source and dest.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Get the extended size of the argument type in stack,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Get the flexible array member Decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:11,flexible,flexible,11,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['flexible'],['flexible']
Modifiability,"// Get the fragment or variable size, or zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,3,['variab'],['variable']
Modifiability,"// Get the function / variable pointer referenced by name.; // We don't care whether something was unresolved before.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:22,variab,variable,22,interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,1,['variab'],['variable']
Modifiability,// Get the guard variable for this function if we have one already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,// Get the index of the program memory bank.; // -1: not program memory; // 0: ordinary program memory; // 1~5: extended program memory,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVR.h:112,extend,extended,112,interpreter/llvm-project/llvm/lib/Target/AVR/AVR.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVR.h,1,['extend'],['extended']
Modifiability,// Get the local allocation of a firstprivate variable before sharing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,"// Get the location of the error. If a block literal has been passed; // (BlockExpr) then we can point straight to the offending argument,; // else we just point to the variable reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:169,variab,variable,169,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// Get the low and high halves of the new, extended one step, vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,2,['extend'],['extended']
Modifiability,// Get the name of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,1,['variab'],['variable']
Modifiability,// Get the new source to rewrite. TODO: Only enable handling of multiple; // sources (PHIs) once we have a motivating example and testcases for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:25,rewrite,rewrite,25,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// Get the normalized zero or sign extended expression for this AddRec's Start.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extended']
Modifiability,"// Get the plot variable and remember its original value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:16,variab,variable,16,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// Get the plugin for the passwd dialog box, if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:11,plugin,plugin,11,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['plugin'],['plugin']
Modifiability,// Get the right rewriter for the current copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:17,rewrite,rewriter,17,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewriter']
Modifiability,"// Get the size of the global variable. If all else fails (i.e. the global has; // no type), then we use a size of one to still allow symbolization of the; // exact address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,1,['variab'],['variable']
Modifiability,"// Get the smaller of the legalized or original pow2-extended number of; // vector elements, which represents the number of unpacks we'll end up; // performing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:53,extend,extended,53,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,"// Get the start location of the load. NumBytes is basically the; // offset from the stack pointer of previous function, which would be; // the caller in this case, as this function has variable argument; // list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:186,variab,variable,186,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Get the success boolean and zero extend it to i8.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:36,extend,extend,36,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['extend'],['extend']
Modifiability,"// Get the terminating condition for the loop if possible. If we; // can, we want to change it to use a post-incremented version of its; // induction variable, to allow coalescing the live ranges for the IV into; // one register value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:150,variab,variable,150,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variable']
Modifiability,"// Get the variables selected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:11,variab,variables,11,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['variab'],['variables']
Modifiability,// Get through the Instruction:; // 1. Update its type.; // 2. Replace the uses of Ext by Inst.; // 3. Extend each operand that needs to be extended.; // Remember the original type of the instruction before promotion.; // This is useful to know that the high bits are sign extended bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:103,Extend,Extend,103,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,3,"['Extend', 'extend']","['Extend', 'extended']"
Modifiability,// Get types from global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/TypeFinder.cpp:25,variab,variables,25,interpreter/llvm-project/llvm/lib/IR/TypeFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/TypeFinder.cpp,1,['variab'],['variables']
Modifiability,"// Get uses from the current function, excluding uses by called functions; // Two output variables to avoid walking the globals list twice",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:89,variab,variables,89,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// Get variable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,1,['variab'],['variable']
Modifiability,"// GetElementPtrInst implicitly sign-extends an index if the index is shorter; // than the pointer size. This function returns whether Index is shorter than; // GEP's pointer size, i.e., whether Index needs to be sign-extended in order; // to be an index of GEP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:37,extend,extends,37,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,2,['extend'],"['extended', 'extends']"
Modifiability,"// GetNullModel()->Print();; // printf(""ASymptotic calc: null snapshot\n"");; // nullSnapshot->Print(""v"");; // printf(""PDF variables "" );; // nullPdf->getVariables()->Print(""v"");; // keep snapshot for the initial parameter values (need for nominal Asimov)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:122,variab,variables,122,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['variab'],['variables']
Modifiability,// Gets all the type constraint expressions that might apply to the type; // variables associated with DC (as returned by getTemplatedEntity()).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:77,variab,variables,77,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variables']
Modifiability,"// Gets the adaptive weights (bandwidths) for TKernel internal computation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:12,adapt,adaptive,12,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// Getters and Setters for variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:27,variab,variable,27,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['variab'],['variable']
Modifiability,"// Getting the block size:; // - approximate the size of an instruction by 4 bytes, and; // - ignore debug instructions.; // Note: getting the exact size of each block is target-dependent and can be; // done by extending the interface of MCCodeEmitter. Experimentally we do; // not see a perf improvement with the exact block sizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:211,extend,extending,211,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['extend'],['extending']
Modifiability,// Give extra weight to what looks like a loop induction variable update.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CalcSpillWeights.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/CodeGen/CalcSpillWeights.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CalcSpillWeights.cpp,1,['variab'],['variable']
Modifiability,// Give static local variables in inline functions hidden visibility when; // -fvisibility-inlines-hidden is enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['variab'],['variables']
Modifiability,// Give us extra room for the ellipses; // and any of the caret line that extends past the source,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp:74,extend,extends,74,interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,1,['extend'],['extends']
Modifiability,"// Given GEP's I-th index = LHS + RHS, see whether &Base[..][LHS][..] or; // &Base[..][RHS][..] can be CSE'ed and rewrite GEP accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:114,rewrite,rewrite,114,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,1,['rewrite'],['rewrite']
Modifiability,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,EXTEND,EXTEND,67,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,4,['EXTEND'],['EXTEND']
Modifiability,"// Given a set of entries to a single loop, create a single entry for that; // loop by creating a dispatch block for them, routing control flow using; // a helper variable. Also updates Blocks with any new blocks created, so; // that we properly track all the blocks in the region. But this does not update; // ReachabilityGraph; this will be updated in the caller of this function as; // needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp:163,variab,variable,163,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,1,['variab'],['variable']
Modifiability,"// Given an instruction Opcode and Config, in which clusters do benchmarks of; // this instruction lie? Normally, they all should be in the same cluster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:35,Config,Config,35,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['Config'],['Config']
Modifiability,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:305,variab,variable,305,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['variab'],['variable']
Modifiability,"// Given pattern:; // (x shiftopcode Q) shiftopcode K; // we should rewrite it as; // x shiftopcode (Q+K) iff (Q+K) u< bitwidth(x) and; //; // This is valid for any shift, but they must be identical, and we must be; // careful in case we have (zext(Q)+zext(K)) and look past extensions,; // (Q+K) must not overflow or else (Q+K) u< bitwidth(x) is bogus.; //; // AnalyzeForSignBitExtraction indicates that we will only analyze whether this; // pattern has any 2 right-shifts that sum to 1 less than original bit width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:68,rewrite,rewrite,68,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Given pattern:; // icmp eq/ne (and ((x shift Q), (y oppositeshift K))), 0; // we should move shifts to the same hand of 'and', i.e. rewrite as; // icmp eq/ne (and (x shift (Q+K)), y), 0 iff (Q+K) u< bitwidth(x); // We are only interested in opposite logical shifts here.; // One of the shifts can be truncated.; // If we can, we want to end up creating 'lshr' shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:135,rewrite,rewrite,135,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Given the opcode of a memory load/store instruction, return the opcode of an; // instruction performing the same operation, but using; // the [Reg, Reg, {s,u}xtw #N] addressing mode with sign-/zero-extend of the; // offset register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:201,extend,extend,201,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['extend'],['extend']
Modifiability,// Given:; // ExtendedExpr = (Ext ix (Trunc iy (Expr) to ix) to iy; // = getExtendedExpr(Expr); // Determine whether the predicate P: Expr == ExtendedExpr; // is known to be false at compile time,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:14,Extend,ExtendedExpr,14,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['Extend'],['ExtendedExpr']
Modifiability,"// Given; // R = X u% Y; // We can represent the modulo operation as a loop/self-recursion:; // urem_rec(X, Y):; // Z = X - Y; // if X u< Y; // ret X; // else; // ret urem_rec(Z, Y); // which isn't better, but if we only need a single iteration; // to compute the answer, this becomes quite good:; // R = X < Y ? X : X - Y iff X u< 2*Y (w/ unsigned saturation); // Now, we do not care about all full multiples of Y in X, they do not change; // the answer, thus we could rewrite the expression as:; // X* = X - (Y * |_ X / Y _|); // R = X* % Y; // so we don't need the *first* iteration to return, we just need to; // know *which* iteration will always return, so we could also rewrite it as:; // X* = X - (Y * |_ X / Y _|); // R = X* % Y iff X* u< 2*Y (w/ unsigned saturation); // but that does not seem profitable here.; // Even if we don't know X's range, the divisor may be so large, X can't ever; // be 2x larger than that. I.e. if divisor is always negative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:470,rewrite,rewrite,470,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,2,['rewrite'],['rewrite']
Modifiability,// Global Register variables always invoke intrinsics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,variab,variables,19,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variables']
Modifiability,// Global Variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:10,Variab,Variables,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['Variab'],['Variables']
Modifiability,"// Global debug flag (set to > 0 to get debug output).; // Can be set either via the interpreter (gDebug is exported to CINT),; // via the rootrc resource ""Root.Debug"", via the shell environment variable; // ROOTDEBUG, or via the debugger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:195,variab,variable,195,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['variab'],['variable']
Modifiability,// Global named register variables (GNU extension) are never emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:25,variab,variables,25,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variables']
Modifiability,// Global thread-local variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,1,['variab'],['variable']
Modifiability,// Global variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h:10,variab,variable,10,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,1,['variab'],['variable']
Modifiability,// Global variable and offset for each constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h,1,['variab'],['variable']
Modifiability,// Global variable can not be aliased with locals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['variab'],['variable']
Modifiability,"// Global variable can't be marked read/writeonly if it is not eligible; // to import since we need to ensure that all external references get; // a local (imported) copy. It also can't be marked read/writeonly if; // it or any alias (since alias points to the same memory) are preserved; // or notEligibleToImport, since either of those means there could be; // writes (or reads in case of writeonly) that are not visible (because; // preserved means it could have external to DSO writes or reads, and; // notEligibleToImport means it could have writes or reads via inline; // assembly leading it to be in the @llvm.*used).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['variab'],['variable']
Modifiability,// Global variable might have been added since interpreter started.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['variab'],['variable']
Modifiability,// Global variable properties that must be passed to CUDA runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['variab'],['variable']
Modifiability,"// Global variable with non-trivial initializer can be imported; // if it's readonly. This gives us extra opportunities for constant; // folding and converting indirect calls to direct calls. We don't; // analyze GV references during attribute propagation, because we; // don't know yet if it is readonly or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['variab'],['variable']
Modifiability,"// Global variables always exist, so they always exist during the lifetime; // of each other and all allocas. Global variables themselves usually have; // non-overlapping storage, but since their addresses are constants, the; // case involving two globals does not reach here and is instead handled in; // constant folding.; //; // Two different allocas usually have different addresses...; //; // However, if there's an @llvm.stackrestore dynamically in between two; // allocas, they may have the same address. It's tempting to reduce the; // scope of the problem by only looking at *static* allocas here. That would; // cover the majority of allocas while significantly reducing the likelihood; // of having an @llvm.stackrestore pop up in the middle. However, it's not; // actually impossible for an @llvm.stackrestore to pop up in the middle of; // an entry block. Also, if we have a block that's not attached to a; // function, we can't tell if it's ""static"" under the current definition.; // Theoretically, this problem could be fixed by creating a new kind of; // instruction kind specifically for static allocas. Such a new instruction; // could be required to be at the top of the entry block, thus preventing it; // from being subject to a @llvm.stackrestore. Instcombine could even; // convert regular allocas into these special allocas. It'd be nifty.; // However, until then, this problem remains open.; //; // So, we'll assume that two non-empty allocas have different addresses; // for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['variab'],['variables']
Modifiability,// Global variables are always in scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variables']
Modifiability,// Global variables are fine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,1,['variab'],['variables']
Modifiability,"// Global variables are often missed by the above search, for one of two; // reasons:; // 1. .debug_aranges may not include global variables. On clang, it seems we; // put the globals in the aranges, but this isn't true for gcc.; // 2. Even if the global variable is in a .debug_arange, global variables; // may not be captured in the [start, end) addresses described by the; // parent compile unit.; //; // So, we walk the CU's and their child DI's manually, looking for the; // specific global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// Global variables attached to symbols are memory locations.; // It would be better if this were unconditional, but malformed input that; // mixes non-fragments and fragments for the same variable is too expensive; // to detect in the verifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Global variables can only be aligned if they are defined in this; // object (i.e. they are uniquely initialized in this object), and; // over-aligning global variables that have an explicit section is; // forbidden.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['variab'],['variables']
Modifiability,// Global variables only have one attribute set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,1,['variab'],['variables']
Modifiability,// Global variables representing structure offset or type id.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,1,['variab'],['variables']
Modifiability,// Global variables require more detailed analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,1,['variab'],['variables']
Modifiability,"// Global variables which are vtables, and which we have enough information; // about to safely do dead virtual function elimination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h:10,variab,variables,10,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,1,['variab'],['variables']
Modifiability,// Global variables with '!exclude' should get the exclude section kind if; // they have an explicit section and no other metadata.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,1,['variab'],['variables']
Modifiability,// Global variables with constant value can always be kept.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,2,['variab'],['variables']
Modifiability,// Global variables without names cannot be referenced outside this module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variables']
Modifiability,"// Global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/filter.cxx:10,variab,variables,10,documentation/doxygen/filter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/filter.cxx,3,['variab'],['variables']
Modifiability,// Globalize team reductions variable unconditionally in all modes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:29,variab,variable,29,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,"// Globals can be placed implicitly or explicitly in sections. There's two; // different types of globals that meet this criteria that cause problems:; // 1. Function pointers that are going into various init arrays (either; // explicitly through `__attribute__((section(<foo>)))` or implicitly; // through `__attribute__((constructor)))`, such as "".(pre)init(_array)"",; // "".fini(_array)"", "".ctors"", and "".dtors"". These function pointers end up; // overaligned and overpadded, making iterating over them problematic, and; // each function pointer is individually tagged (so the iteration over; // them causes SIGSEGV/MTE[AS]ERR).; // 2. Global variables put into an explicit section, where the section's name; // is a valid C-style identifier. The linker emits a `__start_<name>` and; // `__stop_<na,e>` symbol for the section, so that you can iterate over; // globals within this section. Unfortunately, again, these globals would; // be tagged and so iteration causes SIGSEGV/MTE[AS]ERR.; //; // To mitigate both these cases, and because specifying a section is rare; // outside of these two cases, disable MTE protection for globals in any; // section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:645,variab,variables,645,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,1,['variab'],['variables']
Modifiability,// Go ahead and configure all the inline capacity. This is just a memset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp:16,config,configure,16,interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp,1,['config'],['configure']
Modifiability,"// Go over all used observables and check if any of them have parameterized; // ranges in terms of pruned observables. If so, remove those observable; // from the pruning list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:62,parameteriz,parameterized,62,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['parameteriz'],['parameterized']
Modifiability,// Go through each pair and find the widest bit to which we need; // to extend all of them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:72,extend,extend,72,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['extend'],['extend']
Modifiability,"// Go through every block, translating debug intrinsics for fully promoted; // variables into FnVarLocs location defs. No analysis required for these.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:79,variab,variables,79,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// Go through implicit defs of CSMI and MI, and clear the kill flags on; // their uses in all the instructions between CSMI and MI.; // We might have made some of the kill flags redundant, consider:; // subs ... implicit-def %nzcv <- CSMI; // csinc ... implicit killed %nzcv <- this kill flag isn't valid anymore; // subs ... implicit-def %nzcv <- MI, to be eliminated; // csinc ... implicit killed %nzcv; // Since we eliminated MI, and reused a register imp-def'd by CSMI; // (here %nzcv), that register, if it was killed before MI, should have; // that kill flag removed, because it's lifetime was extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:600,extend,extended,600,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,1,['extend'],['extended']
Modifiability,// Go through the analyzer configuration options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:27,config,configuration,27,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['config'],['configuration']
Modifiability,// Grab 8 bytes below FP for the extended asynchronous frame info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['extend'],['extended']
Modifiability,"// Grab the canonical container type for the extended type. Infer the smaller; // type from that to ensure the same number of vector elements, as we know; // the LMUL will be sufficient to hold the smaller type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Grab the variable info that was squirreled away in the MMI side-table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['variab'],['variable']
Modifiability,// GraphTraits - This class should be specialized by different graph types...; // which is why the default version is empty.; //; // This template evolved from supporting `BasicBlock` to also later supporting; // more complex types (e.g. CFG and DomTree).; //; // GraphTraits can be used to create a view over a graph interpreting it; // differently without requiring a copy of the original graph. This could; // be achieved by carrying more data in NodeRef. See LoopBodyTraits for one; // example.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h:147,evolve,evolved,147,interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GraphTraits.h,1,['evolve'],['evolved']
Modifiability,"// Group quotas (read from config file)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:27,config,config,27,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['config'],['config']
Modifiability,// Group variables of the previous type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variables']
Modifiability,// Group variables of the same type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variables']
Modifiability,"// Grow; ////////////////////////////////////////////////////////////////////////////////; /// This can be called before Create, after setting kDim; /// It defines which variables are excluded in the process of the cell division.; /// For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:170,variab,variables,170,tmva/tmva/src/PDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,// Guard variable to avoid recursively redoing the process of passing; // decls to consumer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['variab'],['variable']
Modifiability,"// Guard variables are 64 bits in the generic ABI and size width on ARM; // (i.e. 32-bit on AArch32, 64-bit on AArch64).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variables']
Modifiability,"// H1 analysis over HTTP: adaptive packetizer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:26,adapt,adaptive,26,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['adapt'],['adaptive']
Modifiability,"// HACK: Disable this check for variables declared with 'field'. This is; // done merely because existing targets have legitimate cases of; // non-concrete variables in helper defs. Ideally, we'd introduce a; // 'maybe' or 'optional' modifier instead of this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,2,['variab'],['variables']
Modifiability,"// HHV (it's been here since looong but I really don't know why we cannot handle; // normalized variables in BDTs... todo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:96,variab,variables,96,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['variab'],['variables']
Modifiability,"// HMOTF_ConstExtended; // Addendum to above, indicates a const extended op; // Can be used as a mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:64,extend,extended,64,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['extend'],['extended']
Modifiability,"// HTML plugin...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx:8,plugin,plugin,8,gui/gui/src/TRootBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx,1,['plugin'],['plugin']
Modifiability,"// Handle ""parameterized"" attributes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:11,parameteriz,parameterized,11,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['parameteriz'],['parameterized']
Modifiability,// Handle (arch-dependent) fp16fml/fullfp16 relationship.; // Must happen before any features are disabled due to soft-float.; // FIXME: this fp16fml option handling will be reimplemented after the; // TargetParser rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp:215,rewrite,rewrite,215,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,1,['rewrite'],['rewrite']
Modifiability,// Handle Extended Scalar Types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:10,Extend,Extended,10,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['Extend'],['Extended']
Modifiability,// Handle GNU flexible array initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:14,flexible,flexible,14,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,// Handle PIC mode first. SPARC needs a got load for every variable!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Handle PIC mode first. VE needs a got load for every variable!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Handle Variables and Typedefs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:10,Variab,Variables,10,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Variab'],['Variables']
Modifiability,"// Handle any --wrap options passed to gold, which are than passed; // along to the plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:84,plugin,plugin,84,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['plugin'],['plugin']
Modifiability,"// Handle any_extend (not (truncate X)) pattern, where Mask only sets; // bits in the non-extended part.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,extend,extended,90,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extended']
Modifiability,"// Handle case of projecting an Extended pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:32,Extend,Extended,32,roofit/roofitcore/inc/RooProjectedPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h,1,['Extend'],['Extended']
Modifiability,// Handle cases where the expression is a variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,1,['variab'],['variable']
Modifiability,"// Handle constructors, including those inherited from base classes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:40,inherit,inherited,40,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,// Handle explicit extend instructions first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:19,extend,extend,19,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extend']
Modifiability,// Handle extended instruction sets from extensions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.cpp:10,extend,extended,10,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.cpp,1,['extend'],['extended']
Modifiability,// Handle extended parameter information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:10,extend,extended,10,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['extend'],['extended']
Modifiability,// Handle extended tables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h:10,extend,extended,10,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELFLinkGraphBuilder.h,1,['extend'],['extended']
Modifiability,// Handle fixed and variable vector arguments differently.; // Fixed vector arguments go into registers as long as registers are; // available. Variable vector arguments always go into memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,// Handle initialization of captured loop iterator variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:51,variab,variables,51,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Handle integer and pointer inductions variables.; // Now we handle also FP induction but not trying to make a; // recurrent expression from the PHI node in-place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,// Handle multiple DBG_VALUE instructions describing one variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['variab'],['variable']
Modifiability,// Handle regular struct fields / member variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:41,variab,variables,41,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['variab'],['variables']
Modifiability,"// Handle simple calls for now, with legal return types and; // those that can be extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:82,extend,extended,82,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['extend'],['extended']
Modifiability,// Handle static member variables and enum constants accessed via; // member syntax.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['variab'],['variables']
Modifiability,"// Handle substitution of string variables ([[<var>]]) defined in; // previous CHECK patterns, and substitution of expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variables']
Modifiability,// Handle substitution of string variables that were defined earlier on; // the same line by emitting a backreference. Expressions do not; // support substituting a numeric variable defined on the same line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Handle substitutions (MacOS):; // @rpath - This function does not substitute @rpath, becouse; // this variable is already handled by lookupLibrary where; // @rpath is replaced with all paths from RPATH one by one.; // @executable_path - Main program path.; // @loader_path - Loader library (or main program) path.; //; // Handle substitutions (Linux):; // https://man7.org/linux/man-pages/man8/ld.so.8.html; // $origin - Loader library (or main program) path.; // $lib - lib lib64; // $platform - x86_64 AT_PLATFORM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp:105,variab,variable,105,interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,1,['variab'],['variable']
Modifiability,// Handle the XCOFF case.; // Variable `Name` is the function descriptor symbol (see above). Get the; // function entry point symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:30,Variab,Variable,30,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['Variab'],['Variable']
Modifiability,// Handle the special case of a variable length memset of 0 with XC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp,1,['variab'],['variable']
Modifiability,"// Handle the special case of fp16 extloads. EXTLOAD doesn't have the; // normal undefined upper bits behavior to allow using an in-reg extend; // with the illegal FP type, so load as an integer and do the; // from-integer conversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:136,extend,extend,136,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,// Handle the variable sgpr + vgpr case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['variab'],['variable']
Modifiability,// Handle these two compare instructions that are not extendable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:54,extend,extendable,54,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,// Handle trivially true compares directly to avoid adding V UGE 0 constraints; // for all variables in the unsigned system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:91,variab,variables,91,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variables']
Modifiability,// Handle variable definition: [[<def>:(...)]] and [[#(...)<def>:(...)]].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// Handle variables and function arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,// Handled by doing nothing. This variable is never in scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Handling llvm.lifetime intrinsics for a given %alloca:; // (1) collect all llvm.lifetime.xxx(%size, %value) describing the alloca.; // (2) if %size is constant, poison memory for llvm.lifetime.end (to detect; // invalid accesses) and unpoison it for llvm.lifetime.start (the memory; // could be poisoned by previous llvm.lifetime.end instruction, as the; // variable may go in and out of scope several times, e.g. in loops).; // (3) if we poisoned at least one %alloca in a function,; // unpoison the whole stack frame at function exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:361,variab,variable,361,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// HasShareds is true if any variables are captured in the outlined region,; // false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:29,variab,variables,29,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:471,extend,extended,471,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['extend'],['extended']
Modifiability,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:21,extend,extended,21,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['extend'],['extended']
Modifiability,// Have we been asked to track variable locations using instruction; // referencing?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['variab'],['variable']
Modifiability,// Having a constant operand to the 'add' ensures that we are not increasing; // the instruction count because the constant is extended for free below.; // A constant operand can also become the displacement field of an LEA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:127,extend,extended,127,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Having the top bits zero doesn't help when sign extending.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:51,extend,extending,51,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extending']
Modifiability,// Helper for getting a function parameter name. Name is composed from; // its index and the function name. Negative index corresponds to special; // parameter (unsized array) used for passing variable arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:193,variab,variable,193,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,2,['variab'],['variable']
Modifiability,// Helper function that extends a non-512-bit vector op to 512-bits on non-VLX; // targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,extend,extends,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// Helper function to create a new configuration that is just like the one; // associated to this integrator, but with a different summation rule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:35,config,configuration,35,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['config'],['configuration']
Modifiability,"// Helper function to find the ""best"" flexible-offset field according; // to the criteria described above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:38,flexible,flexible-offset,38,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible-offset']
Modifiability,// Helper function to inherit the calling convention of the function callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:22,inherit,inherit,22,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['inherit'],['inherit']
Modifiability,"// Helper lambda for ejecting a block -- if nothing is going to use the block,; // we can translate the variable location information into DBG_VALUEs and then; // free all of InstrRefBasedLDV's data structures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:104,variab,variable,104,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Helper to emit pseudo sign/zero extend instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['extend'],['extend']
Modifiability,// Helper to extract and decode the next ULEB128 value as unsigned int.; // Returns zero and sets ULEBSizeErr if the ULEB128 value exceeds the unsigned; // int limit.; // Also returns zero if ULEBSizeErr is already in an error state.; // ULEBSizeErr is an out variable if an error occurs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:260,variab,variable,260,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp,1,['variab'],['variable']
Modifiability,// Helper to get immediate/variable SSE shift opcode from other shift opcodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Helper to split and extend a v16i1 mask to v16i8 or v16i16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Here is the data format for the tile config.; // 0 palette; // 1 start_row; // 2-15 reserved, must be zero; // 16-17 tile0.colsb Tile 0 bytes per row.; // 18-19 tile1.colsb Tile 1 bytes per row.; // 20-21 tile2.colsb Tile 2 bytes per row.; // ... (sequence continues); // 30-31 tile7.colsb Tile 7 bytes per row.; // 32-47 reserved, must be zero; // 48 tile0.rows Tile 0 rows.; // 49 tile1.rows Tile 1 rows.; // 50 tile2.rows Tile 2 rows.; // ... (sequence continues); // 55 tile7.rows Tile 7 rows.; // 56-63 reserved, must be zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp:40,config,config,40,interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,2,['config'],['config']
Modifiability,"// Here is where we set the values, and constantness; // of all parameters in the workspace before creating; // an asimov dataset; /*; // Okay, y'all, first we're going to create a snapshot; // of the current state of the variables in the workspace. std::string ListOfVariableNames = """";; for( std::map< std::string, double >::iterator itr = fParamValsToSet.begin();; itr != fParamValsToSet.end(); ++itr) {; // Extend the Variable Name list; ListOfVariableNames += "","" + itr->first;; }; for( std::map< std::string, bool >::iterator itr = fParamsToFix.begin();; itr != fParamsToFix.end(); ++itr) {; // Extend the Variable Name list; ListOfVariableNames += "","" + itr->first;; }. // Save a snapshot; std::string SnapShotName = ""NominalParamValues"";; wspace->saveSnapshot(SnapShotName.c_str(), ListOfVariableNames.c_str());; */; //; // First we set all parameters to their given values; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Asimov.cxx:222,variab,variables,222,roofit/histfactory/src/Asimov.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Asimov.cxx,5,"['Extend', 'Variab', 'variab']","['Extend', 'Variable', 'variables']"
Modifiability,"// Here the local variable is created but the value is removed from the stack,; // so we put it back, because the caller might need it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"// Here we comply to ""PEP 587 – Python Initialization Configuration"" to avoid; // deprecation warnings at compile time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:54,Config,Configuration,54,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Config'],['Configuration']
Modifiability,"// Here we have a single object that contains a variable size C-style array.; // Since info is not null, fReadActionSequence is not null either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:48,variab,variable,48,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['variab'],['variable']
Modifiability,"// Here we have the following case:; //; // %cond = cmp iN %x, CmpConst; // %tr = trunc iN %x to iK; // %narrowsel = select i1 %cond, iK %t, iK C; //; // We can always move trunc after select operation:; //; // %cond = cmp iN %x, CmpConst; // %widesel = select i1 %cond, iN %x, iN CmpConst; // %tr = trunc iN %widesel to iK; //; // Note that C could be extended in any way because we don't care about; // upper bits after truncation. It can't be abs pattern, because it would; // look like:; //; // select i1 %cond, x, -x.; //; // So only min/max pattern could be matched. Such match requires widened C; // == CmpConst. That is why set widened C = CmpConst, condition trunc; // CmpConst == C is checked below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:353,extend,extended,353,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extended']
Modifiability,"// Here we need to add the code to take in consideration the; // double variable length; // We fill up the array of sizes in the TLeafInfo:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:72,variab,variable,72,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// Here we need to add the code to take in consideration the; // double variable length; // We fill up the array of sizes in the TLeafInfo:; // here we can assume that branch is a TBranch element because the other style does NOT support this type; // of complexity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:72,variab,variable,72,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,// Here we only handle FP induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:36,variab,variables,36,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,"// Here we save the number of lines and variables into ""llvm.mir.debugify"".; // It is useful for mir-check-debugify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp:40,variab,variables,40,interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,1,['variab'],['variables']
Modifiability,"// Heuristically, Windows cannot handle cross-library variables; they; // must be library-local.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:54,variab,variables,54,interpreter/cling/lib/Interpreter/BackendPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp,1,['variab'],['variables']
Modifiability,"// Hexagon stack frame layout as defined by the ABI:; //; // Incoming arguments; // passed via stack; // |; // |; // SP during function's FP during function's |; // +-- runtime (top of stack) runtime (bottom) --+ |; // | | |; // --++---------------------+------------------+-----------------++-+-------; // | parameter area for | variable-size | fixed-size |LR| arg; // | called functions | local objects | local objects |FP|; // --+----------------------+------------------+-----------------+--+-------; // <- size known -> <- size unknown -> <- size known ->; //; // Low address High address; //; // <--- stack growth; //; //; // - In any circumstances, the outgoing function arguments are always accessi-; // ble using the SP, and the incoming arguments are accessible using the FP.; // - If the local objects are not aligned, they can always be accessed using; // the FP.; // - If there are no variable-sized objects, the local objects can always be; // accessed using the SP, regardless whether they are aligned or not. (The; // alignment padding will be at the bottom of the stack (highest address),; // and so the offset with respect to the SP will be known at the compile-; // -time.); //; // The only complication occurs if there are both, local aligned objects, and; // dynamically allocated (variable-sized) objects. The alignment pad will be; // placed between the FP and the local objects, thus preventing the use of the; // FP to access the local objects. At the same time, the variable-sized objects; // will be between the SP and the local objects, thus introducing an unknown; // distance from the SP to the locals.; //; // To avoid this problem, a new register is created that holds the aligned; // address of the bottom of the stack, referred in the sources as AP (aligned; // pointer). The AP will be equal to ""FP-p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All lo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:330,variab,variable-size,330,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,2,['variab'],"['variable-size', 'variable-sized']"
Modifiability,// HexagonInstrInfo::isPredicable will consider these stores are non-; // -predicable if the offset would become constant-extended after; // predication.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp:122,extend,extended,122,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,1,['extend'],['extended']
Modifiability,// Hi = uunpkhi(splat(X)) --> Hi = splat(extend(X)); // Lo = uunpklo(splat(X)) --> Lo = splat(extend(X)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// Hidden or internal symbols on the device are not externally visible.; // We should not attempt to register them by creating an offloading; // entry. Indirect variables are handled separately on the device.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:161,variab,variables,161,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,"// Histogram of original dependent variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:35,variab,variable,35,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// Histogram of original variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:25,variab,variables,25,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Histogram of shifted dependent variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:34,variab,variable,34,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// Histograms of normalized variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:28,variab,variables,28,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,// Holds the end values for each induction variable. We save the end values; // so we can later fix-up the external users of the induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Homogeneous aggregates passed in registers will have their elements split; // and stored 16-bytes apart regardless of size (they're notionally in qN,; // qN+1, ...). We reload and store into a temporary local variable; // contiguously.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:212,variab,variable,212,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,1,['variab'],['variable']
Modifiability,// Honor -analyzer-config-help.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp:19,config,config-help,19,interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,1,['config'],['config-help']
Modifiability,"// Honor -mllvm.; //; // FIXME: Remove this, one day.; // This should happen AFTER plugins have been loaded!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp:83,plugin,plugins,83,interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,1,['plugin'],['plugins']
Modifiability,"// Honor environment variable `ROOT_MAX_THREADS` if set.; // Also honor cgroup quotas if set: see https://github.com/oneapi-src/oneTBB/issues/190",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx:21,variab,variable,21,core/imt/src/RTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx,1,['variab'],['variable']
Modifiability,"// Honor set of `-mllvm` options. This should happen AFTER plugins have been; // loaded!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:59,plugin,plugins,59,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['plugin'],['plugins']
Modifiability,"// Hook to the constructor. This is needed to avoid using the plugin manager; // which may create problems in multi-threaded environments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:62,plugin,plugin,62,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,2,['plugin'],['plugin']
Modifiability,"// How far image extends above ""y""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:17,extend,extends,17,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['extend'],['extends']
Modifiability,"// How far image extends below ""y""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:17,extend,extends,17,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['extend'],['extends']
Modifiability,// However if the input is already sign extended we expect the sign; // extension to be dropped altogether later and do not simplify.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,"// However we allow several dimensions that virtually vary via the size of their; // index variables. So we have code to recalculate fCumulUsedSizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:91,variab,variables,91,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variables']
Modifiability,// I'm not sure I like this. The implicit coordination is a bit; // gross. We should solve this in a reasonable fashion because this; // is a pretty common task (match some runtime data structure with; // an LLVM data structure).; // FIXME: This is leaked.; // FIXME: Merge with rewriter code?; // struct _objc_super {; // id self;; // Class cls;; // },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:279,rewrite,rewriter,279,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['rewrite'],['rewriter']
Modifiability,"// IF we have climbed down to an intervening enclosing lambda that contains; // the variable declaration - it obviously can/must not capture the; // variable.; // Since its enclosing DC is dependent, all the lambdas between it and the; // innermost nested lambda are dependent (otherwise we wouldn't have; // arrived here) - so we don't yet have a lambda that can capture the; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,3,['variab'],['variable']
Modifiability,"// II is now a non-debug instruction either with no attached DPValues, or; // with attached processed DPValues. II has not been processed, and all; // debug instructions or DPValues in the frame preceding II have been; // processed.; // We've processed everything in the ""frame"". Now determine which variables; // cannot be represented by a dbg.declare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:300,variab,variables,300,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,// INCLUDED BELOW #include <gsl/gsl_integration.h>; /* Workspace for adaptive integrators */; // WVE MOVED TO HEAD OF FILE; /* Definition of an integration rule */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:69,adapt,adaptive,69,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['adapt'],['adaptive']
Modifiability,// INSERT_VECTOR_ELT v8f16 extended to VECTOR_SHUFFLE,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,extend,extended,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Ideally, we want to calculate tagged stack base pointer, and rewrite all; // alloca addresses using that. Unfortunately, offsets are not known yet; // (unless we use ASan-style mega-alloca). Instead we keep the base tag in a; // temp, shift-OR it into each alloca address and xor with the retag mask.; // This generates one extra instruction per alloca use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:64,rewrite,rewrite,64,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// Identify and add defs for single location variables.; //; // Go through all of the defs that we plan to add. If the aggregate variable; // it's a part of is not in the NotAlwaysStackHomed set we can emit a single; // location def and omit the rest. Add an entry to AlwaysStackHomed so that; // we can identify those uneeded defs later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:45,variab,variables,45,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Identify instructions using metadata that needs adaptation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp:51,adapt,adaptation,51,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,2,['adapt'],['adaptation']
Modifiability,"// If !gPluginMgr then we are at startup and cannot handle plugins; // as TArchiveFile yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:59,plugin,plugins,59,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['plugin'],['plugins']
Modifiability,"// If ""BreakBeforeInheritanceComma"" mode, don't break within the inheritance; // declaration unless there is multiple inheritance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:65,inherit,inheritance,65,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,2,['inherit'],['inheritance']
Modifiability,"// If (E) is non-trivial, then add it to the current basic block, and; // update the statement map so that S refers to E. Returns a new variable; // that refers to E.; // If E is trivial returns E.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:136,variab,variable,136,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,"// If *Arg is an ObjCIndirectCopyRestoreExpr, check that either the types of; // the argument and parameter match or the objc method is parameterized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:136,parameteriz,parameterized,136,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['parameteriz'],['parameterized']
Modifiability,"// If -Wmodule-file-config-mismatch is mapped as an error or worse, allow the; // ASTReader to diagnose it, since it can produce better errors that we can.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:20,config,config-mismatch,20,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['config'],['config-mismatch']
Modifiability,"// If -fdirect-access-external-data (default for -fno-pic), set dso_local; // for non-thread-local variables. If the symbol is not defined in the; // executable, a copy relocation will be needed at link time. dso_local is; // excluded for thread-local variables because they generally don't support; // copy relocations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:99,variab,variables,99,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['variab'],['variables']
Modifiability,"// If ALR and BLR overlaps and end of BLR extends beyond end of ALR, e.g.; // A = or A, B; // ...; // B = A; // ...; // C = killed A; // ...; // = B; // Update uses of IntA of the specific Val# with IntB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:42,extend,extends,42,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extends']
Modifiability,"// If AShr or LShr, then we need to make sure the operand0 is sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp:67,extend,extended,67,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,1,['extend'],['extended']
Modifiability,"// If AVL is defined by a vsetvli with the same VLMAX, we can replace the; // AVL operand with the AVL of the defining vsetvli. We avoid general; // register AVLs to avoid extending live ranges without being sure we can; // kill the original source reg entirely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:172,extend,extending,172,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['extend'],['extending']
Modifiability,"// If ActiveMLocs isn't tracking this location or there are no variables; // using it, don't bother remembering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:63,variab,variables,63,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// If ArgVal has type x86_fp80, zero-extend ArgVal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:37,extend,extend,37,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['extend'],['extend']
Modifiability,// If BitWidth > EltBitWidth the value is anyext:ed. So we do not know; // anything about the extended bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:94,extend,extended,94,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,2,['extend'],['extended']
Modifiability,"// If C compares the truncation of an extending load, try to compare; // the untruncated value instead. This exposes more opportunities to; // reuse CC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:38,extend,extending,38,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If C is a low-bits mask, the zero extend is serving to; // mask off the high bits. Complement the operand and; // re-apply the zext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:37,extend,extend,37,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,"// If C is a single bit, it may be in the sign-bit position; // before the zero-extend. In this case, represent the xor; // using an add, which is equivalent, and re-apply the zext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:80,extend,extend,80,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,"// If CodeView, emit enums as global variables, unless they are defined; // inside a class. We do this because MSVC doesn't emit S_CONSTANTs for; // enums in classes, and because it is difficult to attach this scope; // information to the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:37,variab,variables,37,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If Cond can be traced back to a function call, return the call expression.; // The negate variable should be called with false, and will be set to true; // if the function call is negated, e.g. if (!mu.tryLock(...))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:93,variab,variable,93,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"// If D < 0, extend Min, otherwise extend Max.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,2,['extend'],['extend']
Modifiability,"// If D is a declaration with inherited attributes, the note should; // point to the declaration with actual attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:30,inherit,inherited,30,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,1,['inherit'],['inherited']
Modifiability,// If Dst is not derived from Src we can skip the whole computation below and; // return that Src is not a public base of Dst. Record all inheritance paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:138,inherit,inheritance,138,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// If Dst is not derived from Src we can skip the whole computation below and; // return that Src is not a public base of Dst. Record all inheritance paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx:138,inherit,inheritance,138,core/metacling/src/TClingBaseClassInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx,1,['inherit'],['inheritance']
Modifiability,"// If E is a variable, then trace back through any aliases or redundant; // Phi nodes to find the canonical definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,1,['variab'],['variable']
Modifiability,"// If E is a variable, then trace back through any aliases or redundant; // Phi nodes to find the canonical definition.; // The non-const version will simplify incomplete Phi nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyTIL.cpp,1,['variab'],['variable']
Modifiability,"// If Extended(false) was explicitly set, but the pdf MUST be extended, then; // it's time to print an error. This happens when you're fitting a RooAddPdf; // with coefficient that represent yields, and without the additional; // constraint these coefficients are degenerate because the RooAddPdf; // normalizes itself. Nothing correct can come out of this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:6,Extend,Extended,6,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,2,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,"// If Field is a captured lambda variable, Field->getName() will return with; // an empty string. We can however acquire it's name from the lambda's; // captures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObjectChecker.cpp,1,['variab'],['variable']
Modifiability,// If FromRecord is not defined we need to force it to be.; // Simply calling CompleteDecl(...) for a RecordDecl will break some cases; // it will start the definition but we never finish it.; // If there are base classes they won't be imported and we will; // be missing anything that we inherit from those bases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:289,inherit,inherit,289,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['inherit'],['inherit']
Modifiability,"// If GV is not passed explicitly, use the name to find or construct; // the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp:84,variab,variable,84,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp,1,['variab'],['variable']
Modifiability,"// If ID's layout is known, then make the global constant. This serves as a; // useful assertion: we'll never use this variable to calculate ivar offsets,; // so if the runtime tries to patch it then we should crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:119,variab,variable,119,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"// If IdxVal is 0, it's cheaper to do a move instead of a pextrb, unless; // we're going to zero extend the register or fold the store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:97,extend,extend,97,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If IdxVal is 0, it's cheaper to do a move instead of a pextrw, unless; // we're going to zero extend the register or fold the store (SSE41 only).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:97,extend,extend,97,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If LHS is A % B, i.e. A % B == 0, rewrite A to (A /u B) * B to; // explicitly express that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:37,rewrite,rewrite,37,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If Length < 0xffffffff then use the regular length field, otherwise; // read the extended length field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/EHFrameSupport.cpp:84,extend,extended,84,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/EHFrameSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/EHFrameSupport.cpp,1,['extend'],['extended']
Modifiability,"// If LoopSimplify form is not available, stay out of trouble. Some notes:; // - LSR currently only supports LoopSimplify-form loops. Indvars'; // canonicalization can be a pessimization without LSR to ""clean up""; // afterwards.; // - We depend on having a preheader; in particular,; // Loop::getCanonicalInductionVariable only supports loops with preheaders,; // and we're in trouble if we can't find the induction variable even when; // we've manually inserted one.; // - LFTR relies on having a single backedge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:416,variab,variable,416,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['variab'],['variable']
Modifiability,// If LoopVarRefExpr is nullptr it means the corresponding loop variable; // is declared in the loop and it is predetermined as a private.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:64,variab,variable,64,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If LowerGEP is disabled, before really splitting the GEP, check whether the; // backend supports the addressing mode we are about to produce. If no, this; // splitting probably won't be beneficial.; // If LowerGEP is enabled, even the extracted constant offset can not match; // the addressing mode, we can still do optimizations to other lowered parts; // of variable indices. Therefore, we don't check for addressing modes in that; // case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:363,variab,variable,363,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['variab'],['variable']
Modifiability,"// If MI only demands that VL has the same zeroness, we only need to set the; // AVL if the zeroness differs. This removes a vsetvli entirely if the types; // match or allows use of cheaper avl preserving variant if VLMAX doesn't; // change. If VLMAX might change, we couldn't use the 'vsetvli x0, x0, vtype""; // variant, so we avoid the transform to prevent extending live range of an; // avl register operand.; // TODO: We can probably relax this for immediates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:359,extend,extending,359,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['extend'],['extending']
Modifiability,"// If MI produces halfword of the input in the low half of the output,; // replace it with zero-extend or extractu.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:96,extend,extend,96,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extend']
Modifiability,"// If MI resets high bits of a register and keeps the lower ones, replace it; // with zero-extend byte/half, and-immediate, or extractu, as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:91,extend,extend,91,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extend']
Modifiability,"// If MI stores a value known at compile-time, and the value is within a range; // that avoids using constant-extenders, replace it with a store-immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:110,extend,extenders,110,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extenders']
Modifiability,"// If Mapper is valid, the last component inherits the mapper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,inherit,inherits,42,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['inherit'],['inherits']
Modifiability,"// If MaskVT has smaller or bigger elements than ToMaskVT, a vector sign; // extend or truncate is needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extend']
Modifiability,"// If NewIdx is behind the last segment, extend that and append a new one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extend']
Modifiability,"// If OpenMP is enabled and threadprivates must be generated like TLS, delay; // codegen for global variables, because they may be marked as threadprivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:100,variab,variables,100,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// If PartLLT is a mismatched vector in both number of elements and element; // size, e.g. PartLLT == v2s64 and LLTy is v3s32, then first coerce it to; // have the same elt type, i.e. v4s32.; // TODO: Extend this coersion to element multiples other than just 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:201,Extend,Extend,201,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// If R has been added to the system, add the new variables and queue it for; // removal once it goes out-of-scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:50,variab,variables,50,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variables']
Modifiability,"// If ROOT was built with the fftw3 interface, we can use it as a TVirtualFFT; // plugin. The advantage here is that nothing can go wrong if fftw3.h wahs; // not istalled by the user separately.; // Retrieve previously defined FFT transformation plans",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx:82,plugin,plugin,82,roofit/roofitcore/src/RooFFTConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx,1,['plugin'],['plugin']
Modifiability,"// If Record is an Objective-C interface record and it has a super class,; // record that Record is inherited from SuperClass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:100,inherit,inherited,100,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inherit'],['inherited']
Modifiability,"// If SD is a variable, evaluate it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,1,['variab'],['variable']
Modifiability,"// If Src is i8, promote it to i32 with any_extend. There is no i8 BT; // instruction. Since the shift amount is in-range-or-undefined, we know; // that doing a bittest on the i32 value is ok. We extend to i32 because; // the encoding for the i16 version is larger than the i32 version.; // Also promote i16 to i32 for performance / code size reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:196,extend,extend,196,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If Statement is an incemement or decrement, return true and sets the; // variables Increment and DRE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:76,variab,variables,76,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variables']
Modifiability,"// If Sym is a symbol for an object with instance variables that; // must be released, remove these obligations when the object escapes; // unless via a call to a system function. System functions are; // very unlikely to release instance variables on objects passed to them,; // and are frequently called on 'self' in -dealloc (e.g., to remove; // observers) -- we want to avoid false negatives from escaping on; // them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:50,variab,variables,50,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,2,['variab'],['variables']
Modifiability,"// If T is not a dependent type or a variably-modified type, there; // is nothing to do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:37,variab,variably-modified,37,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['variab'],['variably-modified']
Modifiability,"// If Type is a signed integer type larger than 64 bits, we need to be sure; // to sign extend Res appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:88,extend,extend,88,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['extend'],['extend']
Modifiability,"// If VR's cell contains a reference to VR, then VR cannot be defined; // via ""insert"". If VR is a constant that can be generated in a single; // instruction (without constant extenders), generating it via insert; // makes no sense.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:176,extend,extenders,176,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['extend'],['extenders']
Modifiability,"// If Val is negative, and CI is shorter than it, truncate to the right; // number of bits. If it is larger, then we have to sign extend. Just; // compare their negated values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:130,extend,extend,130,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,1,['extend'],['extend']
Modifiability,"// If VirtReg has a hint and that hint is broken record this; // virtual register as a recoloring candidate for broken hint.; // Indeed, since we evicted a variable in its neighborhood it is; // likely we can at least partially recolor some of the; // copy-related live-ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:156,variab,variable,156,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['variab'],['variable']
Modifiability,"// If `Init` has a constant value that is (or equivalent to) a; // NULL pointer, we use the default constructor to initialize the span; // object, i.e., a `std:span` variable declaration with no initializer.; // So the fix-it is just to remove the initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:166,variab,variable,166,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:92,extend,extending,92,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,2,['extend'],['extending']
Modifiability,// If a class isn't polymorphic it doesn't have a key function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:20,polymorphi,polymorphic,20,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['polymorphi'],['polymorphic']
Modifiability,"// If a constant has operands, enumerate them. This makes sure that if a; // constant has uses (for example an array of const ints), that they are; // inserted also.; // We prefer to enumerate them with values before we enumerate the user; // itself. This makes it more likely that we can avoid forward references; // in the reader. We know that there can be no cycles in the constants; // graph that don't go through a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp:427,variab,variable,427,interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/ValueEnumerator.cpp,2,['variab'],['variable']
Modifiability,"// If a constant-expression is a reference to a variable where we delay; // deciding whether it is an odr-use, just assume we will apply the; // lvalue-to-rvalue conversion. In the one case where this doesn't happen; // (a non-type template argument), we have special handling anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// If a declaration that:; // 1) declares a function or a variable; // 2) has external linkage; // already exists, add a label attribute to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If a function accepts an object by argument (which would of course be a; // temporary that isn't lifetime-extended), invalidate the object itself,; // not only other objects reachable from it. This is necessary because the; // destructor has access to the temporary object after the call.; // TODO: Support placement arguments once we start; // constructing them directly.; // TODO: This is unnecessary when there's no destructor, but that's; // currently hard to figure out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:109,extend,extended,109,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['extend'],['extended']
Modifiability,"// If a function is hidden by -fvisibility-inlines-hidden option and; // is not explicitly attributed as a hidden function,; // we should not make static local variables in the function hidden.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:160,variab,variables,160,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variables']
Modifiability,"// If a generic pointer is loaded from the constant address space, it; // could only be a GLOBAL or CONSTANT one as that address space is solely; // prepared on the host side, where only GLOBAL or CONSTANT variables are; // visible. Note that this even holds for regular functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp:206,variab,variables,206,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// If a given register appears in a live DBG_VALUE_LIST for Var alongside the; // clobbered register, and never appears in a live DBG_VALUE* for Var without; // the clobbered register, then it is no longer linked to the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:220,variab,variable,220,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,"// If a global variable does not have dynamic initialization we don't; // have to instrument it. However, if a global does not have initializer; // at all, we assume it has dynamic initializer (in other TU).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// If a global variable references DIG, the global variable is live.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,2,['variab'],['variable']
Modifiability,"// If a larger ABS or SMAX isn't supported by the target, try to expand now.; // If we expand later we'll end up sign extending more than just the sra input; // in sra+xor+sub expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:118,extend,extending,118,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extending']
Modifiability,"// If a method lookup fails locally we still need to look and see if; // the method was implemented by a base class or an inherited; // protocol. This lookup is slow, but occurs rarely in correct code; // and otherwise would terminate in a warning.; // check unimplemented instance methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:122,inherit,inherited,122,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['inherit'],['inherited']
Modifiability,"// If a module summary index is supplied, load it so linkInModule can treat; // local functions/variables as exported and promote if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:96,variab,variables,96,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,1,['variab'],['variables']
Modifiability,"// If a node as its own default namespace definition it clearly cannot have; // inherited the given default namespace, and neither will any of its; // children.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:80,inherit,inherited,80,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,1,['inherit'],['inherited']
Modifiability,"// If a physical register is here, this is probably for a good reason.; // Do not rewrite that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:82,rewrite,rewrite,82,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// If a pointer's DAG type is larger than its memory type then the DAG values; // are zero-extended. This breaks signed comparisons so truncate back to the; // underlying type before doing the compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:91,extend,extended,91,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extended']
Modifiability,// If a pointer's DAG type is larger than its memory type then the DAG; // values are zero-extended. This breaks signed comparisons so truncate; // back to the underlying type before doing the compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:91,extend,extended,91,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extended']
Modifiability,"// If a temporary object that requires destruction after the full; // expression is passed, push a lifetime-extended cleanup to extend its; // lifetime to the end of the enclosing block scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:108,extend,extended,108,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If a valid fragment expression cannot be created, the variable's; // correct value cannot be determined and so it is set as Undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,"// If a variable could potentially be odr-used, defer marking it so; // until we finish analyzing the full expression for any; // lvalue-to-rvalue; // or discarded value conversions that would obviate odr-use.; // Add it to the list of potential captures that will be analyzed; // later (ActOnFinishFullExpr) for eventual capture and odr-use marking; // unless the variable is a reference that was initialized by a constant; // expression (this will never need to be captured or odr-used).; //; // FIXME: We can simplify this a lot after implementing P0588R1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,"// If a variable usable in constant expressions is referenced,; // don't warn if it isn't used: if the value of a variable is required; // for the computation of a constant expression, it doesn't make sense to; // warn even if the variable isn't odr-used. (isReferenced doesn't; // precisely reflect that, but it's a decent approximation.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,3,['variab'],['variable']
Modifiability,"// If a variable's LocKind is anything other than LocKind::Mem then we; // must note that it cannot be represented with a dbg.declare.; // Note that this check is enough without having to check the result of; // joins() because for join to produce anything other than Mem after; // we've already seen a Mem we'd be joining None or Val with Mem. In that; // case, we've already hit this codepath when we set the LocKind to Val; // or None in that block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// If a warned variable has no ""Fixable"", it is considered unfixable:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// If adding the initializer will turn this declaration into a definition,; // and we already have a definition for this variable, diagnose or otherwise; // handle the situation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:121,variab,variable,121,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If all incoming values are sign-/zero-extended,; // the output of OR, ISEL or PHI is also sign-/zero-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:41,extend,extended,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,2,['extend'],['extended']
Modifiability,"// If all incoming values are sign-extended, the output of AND, OR, XOR,; // MIN, MAX, or PHI is also sign-extended.; // The input registers for PHI are operand 1, 3, ...; // The input registers for PseudoCCMOVGPR are 4 and 5.; // The input registers for PseudoCCAND/OR/XOR are 4, 5, and 6.; // The input registers for others are operand 1 and 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,2,['extend'],['extended']
Modifiability,"// If all of the inputs are not already sign/zero extended, then; // we'll still need to do that at the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:50,extend,extended,50,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// If all sizes are kept together we probably need to extend the; // spill slot size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,1,['extend'],['extend']
Modifiability,"// If all the operands are zero-enteted to 32-bits, then we replace s_mul_u64; // with s_mul_u64_u32_pseudo. If all the operands are sign-extended to; // 32-bits, then we replace s_mul_u64 with s_mul_i64_i32_pseudo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:138,extend,extended,138,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['extend'],['extended']
Modifiability,// If all users of SETCC extend its value to a legal integer type; // then we replace SETCC with a subtraction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If all users of the globaladdr are of the form (globaladdr + constant), find; // the smallest constant, fold it into the globaladdr's offset and rewrite the; // globaladdr as (globaladdr + constant) - constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:148,rewrite,rewrite,148,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If all users only use the lower bits, this sext.w is redundant.; // Or if all definitions reaching MI sign-extend their output,; // then sext.w is redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:110,extend,extend,110,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extend']
Modifiability,"// If all variable coefficients are 0, the constraint does not provide any; // usable information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h:10,variab,variable,10,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,2,['variab'],['variable']
Modifiability,"// If all variable coefficients are 0, we have 'C >= 0'. If the constant is >=; // 0, R is always true, regardless of the system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,1,['variab'],['variable']
Modifiability,"// If all variables have reached their maximum power, then we; // break out of the loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:10,variab,variables,10,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// If an Objective-C method inherits its related result type, then its; // declared result type must be compatible with its own class type. The; // declared result type is compatible if:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:28,inherit,inherits,28,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['inherit'],['inherits']
Modifiability,"// If an edge which leads unconditionally to this use did not initialize; // the variable, we can say something stronger than 'may be uninitialized':; // we can say 'either it's used uninitialized or you have dead code'.; //; // We track the number of successors of a node which have been visited, and; // visit a node once we have visited all of its successors. Only edges where; // the variable might still be uninitialized are followed. Since a variable; // can't transfer from being initialized to being uninitialized, this will; // trace out the subgraph which inevitably leads to the use and does not; // initialize the variable. We do not want to skip past loops, since their; // non-termination might be correlated with the initialization condition.; //; // For example:; //; // void f(bool a, bool b) {; // block1: int n;; // if (a) {; // block2: if (b); // block3: n = 1;; // block4: } else if (b) {; // block5: while (!a) {; // block6: do_work(&a);; // n = 2;; // }; // }; // block7: if (a); // block8: g();; // block9: return n;; // }; //; // Starting from the maybe-uninitialized use in block 9:; // * Block 7 is not visited because we have only visited one of its two; // successors.; // * Block 8 is visited because we've visited its only successor.; // From block 8:; // * Block 7 is visited because we've now visited both of its successors.; // From block 7:; // * Blocks 1, 2, 4, 5, and 6 are not visited because we didn't visit all; // of their successors (we didn't visit 4, 3, 5, 6, and 5, respectively).; // * Block 3 is not visited because it initializes 'n'.; // Now the algorithm terminates, having visited blocks 7 and 8, and having; // found the frontier is blocks 2, 4, and 5.; //; // 'n' is definitely uninitialized for two edges into block 7 (from blocks 2; // and 4), so we report that any time either of those edges is taken (in; // each case when 'b == false'), 'n' is used uninitialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:81,variab,variable,81,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,4,['variab'],['variable']
Modifiability,"// If an equivalent block descriptor global variable exists, return it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// If an extend hasn't been found and the type is an integer, create an; // extending gather and truncate back to the original type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:9,extend,extend,9,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,// If an implicit firstprivate variable found it was checked already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If an instruction clobbers multiple registers that the variable is; // described by, then we may have already created a clobbering instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,"// If any argument copy elisions occurred and we have debug info, update the; // stale frame indices used in the dbg.declare variable info table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:125,variab,variable,125,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,"// If any dead defs were extended, truncate them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extended']
Modifiability,"// If any element in the constant vector or aggregate C is or uses a global; // variable in GVMap, the constant C needs to be reconstructed, using a set; // of instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:80,variab,variable,80,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['variab'],['variable']
Modifiability,"// If any of the arguments have a variably modified type, make sure to; // emit the type size, but only if the function is not naked. Naked functions; // have no prolog to run this evaluation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:34,variab,variably,34,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['variab'],['variably']
Modifiability,"// If any of the branches in the computation graph of the function depend on; // the integrated variable, we can't do analytical integration. The only; // case where this would work is if the branch is an l-value with known; // Jacobian, but this case is already handled in step B) in the constructor; // by reexpressing the original integration variables in terms of; // higher-order l-values if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:96,variab,variable,96,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// If any of the declaration in the chain contains an Inheritable attribute,; // it needs to be added to all the declarations in the redeclarable chain.; // FIXME: Only the logic of merging MSInheritableAttr is present, it should; // be extended for all inheritable attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:54,Inherit,Inheritable,54,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,3,"['Inherit', 'extend', 'inherit']","['Inheritable', 'extended', 'inheritable']"
Modifiability,"// If any of the sign extended bits are demanded, we know that the sign; // bit is demanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['extend'],['extended']
Modifiability,"// If any of the stack slot references may be out of range of an immediate; // offset, make sure a register (or a spill slot) is available for the; // register scavenger. Note that if we're indexing off the frame pointer, the; // effective stack size is 4 bytes larger since the FP points to the stack; // slot of the previous FP. Also, if we have variable sized objects in the; // function, stack slot references will often be negative, and some of; // our instructions are positive-offset only, so conservatively consider; // that case to want a spill slot (or register) as well. Similarly, if; // the function adjusts the stack pointer during execution and the; // adjustments aren't already part of our stack size estimate, our offset; // calculations may be off, so be conservative.; // FIXME: We could add logic to be more precise about negative offsets; // and which instructions will need a scratch register for them. Is it; // worth the effort and added fragility?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:348,variab,variable,348,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If any of the stores are a memset, then it is always good to extend the; // memset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['extend'],['extend']
Modifiability,"// If any operand in the constant expression C is or uses a global variable; // in GVMap, the constant expression C needs to be reconstructed, using a; // set of instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['variab'],['variable']
Modifiability,"// If any two of the cases has the same destination, and if one value; // is the same as the other, but has one bit unset that the other has set,; // use bit manipulation to do two compares at once. For example:; // ""if (X == 6 || X == 4)"" -> ""if ((X|2) == 6)""; // TODO: This could be extended to merge any 2 cases in switches with 3; // cases.; // TODO: Handle cases where W.CaseBB != SwitchBB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:285,extend,extended,285,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extended']
Modifiability,"// If argument contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:71,config,configuration,71,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configuration']
Modifiability,"// If at least one bit from left in a lower word is masked out,; // all of 0 to 32-th bits of the output are cleared.; // Hence the output is already sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:155,extend,extended,155,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// If at least one of the incoming values of an AND is zero extended; // then the output is also zero-extended. If both of the incoming values; // are sign-extended then the output is also sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:60,extend,extended,60,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,4,['extend'],['extended']
Modifiability,"// If at least one value used by this debug value is no longer available,; // i.e. one of the values was killed before we finished defining all of; // the values used by this variable, discard.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:175,variab,variable,175,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If bitwidth smaller than 32 extend inputs, extend output and proceed; // with 32 bit division.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,4,['extend'],['extend']
Modifiability,"// If bitwidth smaller than 64 extend inputs, extend output and proceed; // with 64 bit division.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,4,['extend'],['extend']
Modifiability,"// If both input and result vector types are of same width, extend; // operations should be done with SIGN/ZERO_EXTEND_VECTOR_INREG, which; // accepts fewer elements in the result than in the input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extend']
Modifiability,"// If both inputs are known to be zero and one is ConstZero and; // another is VariableKnownToBeZero, we can select whichever; // we like. To minimize the number of bit groups, we select; // VariableKnownToBeZero if this bit is the next bit of the same; // input variable from the previous bit. Otherwise, we select; // ConstZero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:79,Variab,VariableKnownToBeZero,79,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,3,"['Variab', 'variab']","['VariableKnownToBeZero', 'variable']"
Modifiability,"// If both inputs for this element are either constant or undef and match; // the element type, compute the constant/undef result for this element of; // the vector.; // TODO: Ideally we would use FoldConstantArithmetic() here, but that does; // not handle FP constants. The code within getNode() should be refactored; // to avoid the danger of creating a bogus temporary node here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:307,refactor,refactored,307,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['refactor'],['refactored']
Modifiability,// If both load and store instruction reference the same variable; // we won't be able to optimize it. Add all such reference edges; // to RefEdges set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// If both operands of unsigned min/max are sign-extended, it is still ok; // to narrow the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['extend'],['extended']
Modifiability,"// If both vXi32 are representable as i15 and at least one is constant,; // zero-extended, or sign-extended from vXi16 (or less pre-SSE41) then we; // can treat this as PMADDWD which has the same costs as a vXi16 multiply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:81,extend,extended,81,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extended']
Modifiability,"// If cache doesn't have our configuration, recalculate here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:29,config,configuration,29,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['config'],['configuration']
Modifiability,"// If cling cannot find a name it should ask ROOT before it issues an error.; // If ROOT knows the name then it has to create a new variable with that name; // and type in dedicated for that namespace (eg. __ROOT_SpecialObjects).; // For example if the interpreter is looking for h in h-Draw(), this routine; // will create; // namespace __ROOT_SpecialObjects {; // THist* h = (THist*) the_address;; // }; //; // Later if h is called again it again won't be found by the standart lookup; // because it is in our hidden namespace (nobody should do using namespace; // __ROOT_SpecialObjects). It caches the variable declarations and their; // last address. If the newly found decl with the same name (h) has different; // address than the cached one it goes directly at the address and updates it.; //; // returns true when declaration is found and no error should be emitted.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:132,variab,variable,132,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,2,['variab'],['variable']
Modifiability,"// If configuration files were used, print their paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:6,config,configuration,6,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configuration']
Modifiability,// If constant fold failed and we only have constants - then we have; // multiple uses by a single non-variable shuffle - just bail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:103,variab,variable,103,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If conversion was exact or resulted in a special case, we're done;; // just set the second double to zero. Otherwise, re-convert back to; // the extended format and compute the difference. This now should; // convert exactly to double.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:148,extend,extended,148,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['extend'],['extended']
Modifiability,"// If data on stack require realignemnt, frame indexies are based on a %sp; // or %s17 (bp) register. If there is a variable sized object, bp is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp:116,variab,variable,116,interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If data-sections is not explicitly set or unset, set data-sections by; // default to match the behaviour of lld and gold plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp:124,plugin,plugin,124,interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,1,['plugin'],['plugin']
Modifiability,"// If doExtended is two, selection is automatic, set to 1 of pdf is extended, to zero otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:68,extend,extended,68,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['extend'],['extended']
Modifiability,"// If duplexing produces an extender, but the original did not; // have an extender, do not duplex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:28,extend,extender,28,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,2,['extend'],['extender']
Modifiability,"// If either side has a zero element, then the result element is zero, even; // if the other is an UNDEF.; // TODO: Extend getKnownUndefForVectorBinop to also deal with known zeros; // and then handle 'and' nodes with the rest of the binop opcodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:116,Extend,Extend,116,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// If either side is a variable array, and both are complete, check whether; // the current dimension is definite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variable']
Modifiability,"// If every value used by the incoming DbgValue is available at block; // entry, ResolvedDbgOps will contain the machine locations/constants for; // those values and will be used to emit a debug location.; // If one or more values are not yet available, but will all be defined in; // this block, then LastUseBeforeDef will track the instruction index in; // this BB at which the last of those values is defined, DbgOps will; // contain the values that we will emit when we reach that instruction.; // If one or more values are undef or not available throughout this block,; // and we can't recover as an entry value, we set IsValueValid=false and; // skip this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:662,variab,variable,662,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If fBufferRef grew since we last saw it, shrink it to ""target memory ratio"" of the occupied size; // This discourages us from having poorly-occupied buffers on branches with little variability.; //; // Does not help protect against a burst in event sizes, but does help in the cases where the basket; // size jumps from 4MB to 8MB while filling the basket, but we only end up utilizing 4.1MB.; //; // The above code block is meant to protect against extremely large events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx:184,variab,variability,184,tree/tree/src/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx,1,['variab'],['variability']
Modifiability,"// If false, all ThinLTO backend compilations through code gen are performed; // using multiple threads in the gold-plugin, before handing control back to; // gold. If true, write individual backend index files which reflect; // the import decisions, and exit afterwards. The assumption is; // that the build system will launch the backend processes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:116,plugin,plugin,116,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['plugin'],['plugin']
Modifiability,"// If file name contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:72,config,configuration,72,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['config'],['configuration']
Modifiability,"// If fixup is supposed to rewrite some operand in the phi; // that was just updated, it may be already moved to; // another phi node. Such fixup requires update.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:27,rewrite,rewrite,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If folding this instruction (and it's subexprs) didn't extend any live; // ranges, we're ok with it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:58,extend,extend,58,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// If function acquires its own stack frame, then it is not a XPLeaf routine.; // At the time this function is called, only slots for local variables are; // allocated, so this is a very rough estimate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp:140,variab,variables,140,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,1,['variab'],['variables']
Modifiability,"// If histograms have labels but corresponding axes cannot be extended use bin center mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:62,extend,extended,62,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extended']
Modifiability,"// If ifconverter had not messed up with the kill flags of the; // operands, the following check on the kill flag would suffice.; // if(!jmpInstr->getOperand(0).isKill()) break;; // This predicate register is live out of BB; // this would only work if we can actually use Live; // variable analysis on phy regs - but LLVM does not; // provide LV analysis on phys regs.; //if(LVs.isLiveOut(predReg, *MBB)) break;; // Get all the successors of this block - which will always; // be 2. Check if the predicate register is live-in in those; // successor. If yes, we can not delete the predicate -; // I am doing this only because LLVM does not provide LiveOut; // at the BB level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp:281,variab,variable,281,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,1,['variab'],['variable']
Modifiability,// If index-width (mask size) is less than pointer-size then mask is; // 1-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:75,extend,extended,75,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['extend'],['extended']
Modifiability,"// If initializing the variable failed, don't also diagnose problems with; // the destructor, they're likely related.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// If input is sign extended from 32 bits, note it for the SExtWRemoval pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If intrinsic is pointing at a live SSA value, there may be an; // earlier optimization bug: if we know the location of the variable,; // why isn't the scope of the location alive?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:126,variab,variable,126,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['variab'],['variable']
Modifiability,"// If it is a non constant variable, it needs to be uniqued across shared; // objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/IR/Globals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp,1,['variab'],['variable']
Modifiability,"// If it is a tree, and there are no variables selected, show a dialog",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:37,variab,variables,37,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['variab'],['variables']
Modifiability,"// If it was an absolute-set instruction, the ""set"" part has been removed.; // ExtR will now be the register with the extended value, and since all; // users of Rd have been updated, all that needs to be done is to replace; // Rd with ExtR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:118,extend,extended,118,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extended']
Modifiability,"// If it's a global variable with name, output OpName for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp,1,['variab'],['variable']
Modifiability,"// If it's a header to be found in the system or user search path, then defer; // complaints about its absence until those searches can be done. When we; // are definitely processing headers for C++20 header units, extend this to; // allow the user to put ""-fmodule-header -xc++-header vector"" for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:215,extend,extend,215,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['extend'],['extend']
Modifiability,"// If it's a reference variable, copy the reference into the block field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// If it's an instantiated variable template specialization, find the; // template or partial specialization from which it was instantiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"// If it's not a ""simple"" variable and if there is at least one ""."" or ""->""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:26,variab,variable,26,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['variab'],['variable']
Modifiability,"// If it's not a register, just stop tracking such variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,"// If lastprivate variable is a loop control variable for loop-based; // directive, update its value before copyin back to original; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,3,['variab'],['variable']
Modifiability,"// If merged variables doesn't have external linkage, we needn't to expose; // the symbol after merging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variables']
Modifiability,"// If modules are enabled, create the AST reader before creating; // any builtins, so that all declarations know that they might be; // extended by an external source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:136,extend,extended,136,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['extend'],['extended']
Modifiability,"// If narrowing/widening failed, see if we can extract+zero-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If necessary, extend 32-bit int to 64-bit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['extend'],['extend']
Modifiability,"// If necessary, sign-extend or zero-extend ScalarRoot; // to the larger type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['extend'],['extend']
Modifiability,"// If no `WarningGadget`s ever matched, there is no unsafe operations in the; // function under the analysis. Thus, it early returns here as there is; // nothing needs to be fixed.; //; // Note this claim is based on the assumption that there is no unsafe; // variable whose declaration is invisible from the analyzing function.; // Otherwise, we need to consider if the uses of those unsafe varuables needs; // fix.; // So far, we are not fixing any global variables or class members. And,; // lambdas will be analyzed along with the enclosing function. So this early; // return is correct for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:260,variab,variable,260,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If no availability attributes are found, inherit the attribute from the; // containing decl or the class or category interface decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:44,inherit,inherit,44,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['inherit'],['inherit']
Modifiability,"// If no new location has been found, every variable that depends on this; // MLoc is dead, so end their existing MLoc->Var mappings as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// If no report made at this range mark the variable and add the end tags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['variab'],['variable']
Modifiability,"// If none of the extended bits are demanded, eliminate the sextinreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,extend,extended,18,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['extend'],['extended']
Modifiability,"// If not a ConcreteInt, try to obtain the variable; // name by calling 'getDescriptiveName' recursively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,1,['variab'],['variable']
Modifiability,"// If not a TClonesArray or STL container master branch; // or sub-branch and branch inherits from tobject,; // then register with the buffer so that pointers are; // handled properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:85,inherit,inherits,85,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,3,['inherit'],['inherits']
Modifiability,"// If not all defs have been rewritten (i.e. the instruction defines; // a register that is not compile-time constant), then try to rewrite; // register operands that are known to be constant with immediates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:132,rewrite,rewrite,132,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['rewrite'],['rewrite']
Modifiability,// If not all references were cleared it means some variables/typenames/etc; // declared inside the pool scope are used outside of it.; // We won't try to rewrite the pool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:52,variab,variables,52,interpreter/llvm-project/clang/lib/ARCMigrate/TransAutoreleasePool.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransAutoreleasePool.cpp,2,"['rewrite', 'variab']","['rewrite', 'variables']"
Modifiability,// If not captured at the target region level then mark the escaped; // variable as delayed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:72,variab,variable,72,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,"// If not extending (projecting) line is length from start enough to reach plane?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:10,extend,extending,10,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['extend'],['extending']
Modifiability,"// If not found, we try to find the variable in additional variables like; // arguments, loop iterator, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If not in sandbox, construct the base URI using session defaults; // (group, user) (syntax: /group/user/dsname[#[subdir/]objname])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:13,sandbox,sandbox,13,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,2,['sandbox'],['sandbox']
Modifiability,"// If not specify -X option, get BitMode from enviorment variable; // ""OBJECT_MODE"" for AIX OS if specify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,1,['variab'],['variable']
Modifiability,"// If not, do a quick rewrite of the alloca and then add spills of; // the rewritten value. The rewrite doesn't invalidate anything in; // Spills because the other alloca intrinsics have no other operands; // besides AI, and it doesn't invalidate the iteration because we delay; // erasing AI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:22,rewrite,rewrite,22,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If odepth > 0 then fill first odepth levels; // with empty nodes that split separating variable in half for; // all child nodes. If odepth = 0 then split variable 0; // at the median (in half) and return it as root node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:90,variab,variable,90,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,2,['variab'],['variable']
Modifiability,"// If optimization is enabled, and the value was held in a; // __strong variable, we need to tell the optimizer that this; // value has to stay alive until we're doing the store back.; // This is because the temporary is effectively unretained,; // and so otherwise we can violate the high-level semantics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:72,variab,variable,72,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['variab'],['variable']
Modifiability,"// If our exiting block exits multiple loops, we can only rewrite the; // innermost one. Otherwise, we're changing how many times the innermost; // loop runs before it exits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:58,rewrite,rewrite,58,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If our exitting block exits multiple loops, we can only rewrite the; // innermost one. Otherwise, we're changing how many times the innermost; // loop runs before it exits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:59,rewrite,rewrite,59,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If performing final tracking of transfers, report this variable definition; // to the TransferTracker too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If possible, lower this packed shift into a vector multiply instead of; // expanding it into a sequence of scalar shifts.; // For v32i8 cases, it might be quicker to split/extend to vXi16 shifts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:175,extend,extend,175,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If range for looping over 'Exp' with a non-const reference loop variable,; // check all declRefExpr of the loop variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp:67,variab,variable,67,interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,2,['variab'],['variable']
Modifiability,"// If so, and the statement doesn't contain a label, then we do not need to; // generate actual code. This is safe because (1) the current point is; // unreachable, so we don't need to execute the code, and (2) we've already; // handled the statements which update internal data structures (like the; // local variable map) which could be used by subsequent statements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:310,variab,variable,310,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable']
Modifiability,"// If so, record it as -1, meaning 'no parameter variable needed'. Then; // the corresponding call to allocParam in pass 2 will not generate a; // variable at all, and just use the value inline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:49,variab,variable,49,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,2,['variab'],['variable']
Modifiability,"// If so, rewrite the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp:10,rewrite,rewrite,10,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If some gadgets cover more than one; // variable, they'll appear more than once in the map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// If some of this call's stack ids did not have corresponding nodes (due; // to pruning), don't include any context ids for contexts that extend; // beyond these nodes. Otherwise we would be matching part of unrelated /; // not fully matching stack contexts. To do this, subtract any context ids; // found in caller nodes of the last node found above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:139,extend,extend,139,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['extend'],['extend']
Modifiability,"// If space has not been reserved for a call frame, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP must be converted to instructions manipulating the stack; // pointer. This is necessary when there is a variable length stack; // allocation (e.g. alloca), which means it's not possible to allocate; // space for outgoing arguments from within the function prologue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp:196,variab,variable,196,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,3,['variab'],['variable']
Modifiability,"// If storing a 32-bit vreg on 64-bit targets, extend to a 64-bit vreg; // in preparation for the PUSH64. The upper 32 bits can be undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp,1,['extend'],['extend']
Modifiability,"// If tail-folding is applied, the primary induction variable will be used; // to feed a vector compare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:53,variab,variable,53,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// If that IV isn't dead after we rewrite the exit condition in terms of; // another IV, there's no point in doing the transform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:34,rewrite,rewrite,34,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If that did not match, see if we have a suitable constant operand.; // Truncating and extending must produce the same constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:89,extend,extending,89,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extending']
Modifiability,"// If that doesn't work and we have fast variable cross-lane shuffle,; // attempt 32-bit sublanes (vpermd).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,variab,variable,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If the $rs is $0 and the pseudo-branch is BLTU (0 < x) or; // if the $rt is $0 and the pseudo-branch is BGTU (x > 0),; // the pseudo-branch will be taken only when the non-zero register is; // different from 0, so we emit a BNEZ.; //; // If the $rs is $0 and the pseudo-branch is BGEU (0 >= x) or; // if the $rt is $0 and the pseudo-branch is BLEU (x <= 0),; // the pseudo-branch will be taken only when the non-zero register is; // equal to 0, so we emit a BEQZ.; //; // Because only BLEU and BGEU branch on equality, we can use the; // AcceptsEquality variable to decide when to emit the BEQZ.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:557,variab,variable,557,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['variab'],['variable']
Modifiability,"// If the (non-volatile) load only has one use, we can rewrite this to a; // load from a GEP. This reduces the size of the load. If a load is used; // only by extractvalue instructions then this either must have been; // optimized before, or it is a struct with padding, in which case we; // don't want to do the transformation as it loses padding knowledge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:55,rewrite,rewrite,55,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the BaseReg or ScaledReg was referenced by the previous addrmode, their; // lifetime wasn't extended by adding this instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:98,extend,extended,98,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extended']
Modifiability,// If the BasedOn: was InheritParentConfig and this style needs the file from; // the parent directories. It is not part of the actual style for formatting.; // Thus the // instead of ///.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:23,Inherit,InheritParentConfig,23,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Inherit'],['InheritParentConfig']
Modifiability,"// If the CFG was constructed without elements for temporary destructors; // and the just-called constructor created a temporary object then; // stop exploration if the temporary object has a noreturn constructor.; // This can lose coverage because the destructor, if it were present; // in the CFG, would be called at the end of the full expression or; // later (for life-time extended temporaries) -- but avoids infeasible; // paths when no-return temporary destructors are used for assertions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:378,extend,extended,378,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['extend'],['extended']
Modifiability,"// If the FP induction variable still has uses, this is because something else; // in the loop uses its value. In order to canonicalize the induction; // variable, we chose to eliminate the IV and rewrite it in terms of an; // int->fp cast.; //; // We give preference to sitofp over uitofp because it is faster on most; // platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,3,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"// If the GCC installation we found is inside of the sysroot, we want to; // prefer libraries installed in the parent prefix of the GCC installation.; // It is important to *not* use these paths when the GCC installation is; // outside of the system root as that can pick up unintended libraries.; // This usually happens when there is an external cross compiler on the; // host system, and a more minimal sysroot available that is the target of; // the cross. Note that GCC does include some of these directories in some; // configurations but this seems somewhere between questionable and simply; // a bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:526,config,configurations,526,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['configurations']
Modifiability,"// If the Global Variable has the toc-data attribute, it needs to be emitted; // when we emit the .toc section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:17,Variab,Variable,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['Variab'],['Variable']
Modifiability,"// If the IfStmt contains a condition variable, add it and its; // initializer to the CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// If the Incoming value of P is found in RewritePhiSet, we know it; // could be rewritten to use a loop invariant value in transformation; // phase later. Skip it in the loop invariant check below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:42,Rewrite,RewritePhiSet,42,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['Rewrite'],['RewritePhiSet']
Modifiability,"// If the LHS is an 'and' of a truncate and we can widen the and/compare to; // the input width without changing the value produced, eliminate the cast:; //; // icmp (and (trunc W), C2), C1 -> icmp (and W, C2'), C1'; //; // We can do this transformation if the constants do not have their sign bits; // set or if it is an equality comparison. Extending a relational comparison; // when we're checking the sign bit would not work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:343,Extend,Extending,343,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Extend'],['Extending']
Modifiability,// If the LHS is zero-extended then we can perform the USUBSAT as DstVT by; // clamping RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// If the LHS might be a __block variable, and the RHS can; // potentially cause a block copy, we need to evaluate the RHS first; // so that the assignment goes the right place.; // This is pretty semantically fragile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['variab'],['variable']
Modifiability,"// If the Lo in (ADD_LO hi, lo) is a global variable's address; // (its low part, really), then we can rely on the alignment of that; // variable to provide a margin of safety before low part can overflow; // the 12 bits of the load/store offset. Check if CVal falls within; // that margin; if so (low part + CVal) can't overflow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,2,['variab'],['variable']
Modifiability,"// If the RHS is a constant, manually unpackl/unpackh and extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:58,extend,extend,58,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the SwitchStmt contains a condition variable, add both the; // SwitchStmt and the condition variable initialization to the CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,2,['variab'],['variable']
Modifiability,"// If the VC environment hasn't been configured (perhaps because the user; // did not run vcvarsall), try to build a consistent link environment. If; // the environment variable is set however, assume the user knows what; // they're doing. If the user passes /vctoolsdir or /winsdkdir, trust that; // over env vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp:37,config,configured,37,interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,2,"['config', 'variab']","['configured', 'variable']"
Modifiability,"// If the VL values aren't equal, return false if either a) the former is; // demanded, or b) we can't rewrite the former to be the later for; // implementation reasons.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:103,rewrite,rewrite,103,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['rewrite'],['rewrite']
Modifiability,// If the VarBitInit at position 'bit' matches the specified variable then; // return the variable bit position. Otherwise return -1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:61,variab,variable,61,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,2,['variab'],['variable']
Modifiability,"// If the actual class of this object inherits 2nd (or more) from TObject,; // 'obj' is unlikely to be the start of the object (as described by IsA()),; // hence gInterpreter->Execute will improperly correct the offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:38,inherit,inherits,38,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,['inherit'],['inherits']
Modifiability,"// If the addend copy is used only by this MI, then the addend source; // register is likely not live here. This could be fixed (based on the; // legality checks above, the live range for the addend source register; // could be extended), but it seems likely that such a trivial copy can; // be coalesced away later, and thus is not worth the effort.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp:228,extend,extended,228,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,1,['extend'],['extended']
Modifiability,"// If the address range between two endpoints is described by some; // CU, first try to extend the last range in Aranges. If we can't; // do it, start a new range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugAranges.cpp:88,extend,extend,88,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugAranges.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugAranges.cpp,1,['extend'],['extend']
Modifiability,"// If the alloca describes the variable itself, i.e. the expression in the; // dbg.declare doesn't start with a dereference, we can perform the; // conversion if the value covers the entire fragment of DII.; // If the alloca describes the *address* of DIVar, i.e. DIExpr is; // *just* a DW_OP_deref, we use DV as is for the dbg.value.; // We conservatively ignore other dereferences, because the following two are; // not equivalent:; // dbg.declare(alloca, ..., !Expr(deref, plus_uconstant, 2)); // dbg.value(DV, ..., !Expr(deref, plus_uconstant, 2)); // The former is adding 2 to the address of the variable, whereas the latter; // is adding 2 to the value of the variable. As such, we insist on just a; // deref expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,6,['variab'],['variable']
Modifiability,"// If the associated variable is not defined in this module; // (it might be available_externally, or have been an; // available_externally definition that was dropped by the; // EliminateAvailableExternally pass), some other TU; // will provide its dynamic initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// If the base class has no virtual inheritance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx:36,inherit,inheritance,36,core/metacling/src/TClingBaseClassInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx,1,['inherit'],['inheritance']
Modifiability,"// If the base class is polymorphic or isn't empty, the new one is/isn't, too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:24,polymorphi,polymorphic,24,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['polymorphi'],['polymorphic']
Modifiability,// If the base storage describes part of the variable apply the offset and; // the size constraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// If the bin lies outside histogram boundaries, then extends the boundaries.; // Also changes the partition information accordingly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:54,extend,extends,54,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['extend'],['extends']
Modifiability,"// If the buffer contains preprocessor directives, we do more fine-grained; // rewrites. This is intended to fix code that looks like (which occurs in; // NSURL.h, for example):; //; // #ifdef XYZ; // @interface Foo : NSObject; // #else; // @interface FooBar : NSObject; // #endif; // {; // int i;; // }; // @end; //; // This clause is segregated to avoid breaking the common case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:79,rewrite,rewrites,79,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['rewrite'],['rewrites']
Modifiability,"// If the build vector operands aren't sign extended vector extracts,; // of the same input vector, then return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:44,extend,extended,44,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the builder explicitly says the host action should be ignored,; // we need to increment the variable that tracks the builders that request; // the host object to be ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:98,variab,variable,98,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['variab'],['variable']
Modifiability,"// If the call's return value dominates a use of the call's argument; // value, rewrite the use to use the return value. We check for; // reachability here because an unreachable call is considered to; // trivially dominate itself, which would lead us to rewriting its; // argument in terms of its return value, which would lead to; // infinite loops in GetArgRCIdentityRoot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp:80,rewrite,rewrite,80,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the canonical terminator has operands, rewrite it to take PHI's.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp:45,rewrite,rewrite,45,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the capture had a copy expression, use the result of evaluating; // that expression, otherwise use the original value.; // We rely on the invariant that the block declaration's capture variables; // are a prefix of the BlockDataRegion's referenced vars (which may include; // referenced globals, etc.) to enable fast lookup of the capture for a; // given referenced var.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:191,variab,variables,191,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['variab'],['variables']
Modifiability,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,5,['variab'],['variable']
Modifiability,"// If the channel is not in the selected range of the category variable, we; // won't create a slave calculator for this channel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:63,variab,variable,63,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,1,['variab'],['variable']
Modifiability,"// If the channel is not in the selected range of the category variable, we; // won't create an for NLL this channel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:63,variab,variable,63,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['variab'],['variable']
Modifiability,"// If the char is variable but the input str and length are not we can turn; // this memchr call into a simple bit field test. Of course this only works; // when the return value is only checked against null.; //; // It would be really nice to reuse switch lowering here but we can't change; // the CFG at this point.; //; // memchr(""\r\n"", C, 2) != nullptr -> (1 << C & ((1 << '\r') | (1 << '\n'))); // != 0; // after bounds check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['variab'],['variable']
Modifiability,"// If the class does not inherit from TObject, the setup is always 'correct'; // (or more exactly does not matter).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:25,inherit,inherit,25,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['inherit'],['inherit']
Modifiability,"// If the class is known to have a lifecycle with teardown that is; // separate from -dealloc, do not warn about missing releases. We; // suppress here (rather than not tracking for instance variables in; // such classes) because these classes are rare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:191,variab,variables,191,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variables']
Modifiability,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:589,variab,variables,589,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,2,"['polymorphi', 'variab']","['polymorphic', 'variables']"
Modifiability,// If the client didn't configure any linker options then auto-configure the; // JIT linker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:24,config,configure,24,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,2,['config'],['configure']
Modifiability,"// If the code model is small or global variable will be placed in the small; // section, then assume address will fit in 21-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If the comparison constant has bits in the upper part, the; // zero-extended value could never match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:71,extend,extended,71,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,// If the config state provided an ObjectLinkingLayer factory then use it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:10,config,config,10,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['config'],['config']
Modifiability,"// If the constant C is a global variable and is found in GVMap, substitute; //; // addrspacecast GVMap[C] to addrspace(0); //; // for our use of C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['variab'],['variable']
Modifiability,"// If the constant is in range, use a load-immediate.; // Since LI will sign extend the constant we need to make sure that for; // our zeroext constants that the sign extended constant fits into 16-bits -; // a range of 0..0x7fff.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If the constant is only all signbits in the active bits, then we should; // extend it to the entire constant to allow it act as a boolean constant; // vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:79,extend,extend,79,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the constant on left and right side, or variable on left and right,; // does not match, early out",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If the context is a variable or a class member and not a parameter,; // it is encoded in a qualified name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['variab'],['variable']
Modifiability,"// If the current DBG_VALUE describes the same variable as one of the; // in-flight DBG_VALUEs, remove the candidate from the list and set it to; // undef. Moving one DBG_VALUE past another would result in the variable's; // value going back in time when stepping through the block in the; // debugger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:47,variab,variable,47,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,2,['variab'],['variable']
Modifiability,"// If the current variable is not in the sumSet, it should not be considered for the bin volume",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:18,variab,variable,18,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['variab'],['variable']
Modifiability,"// If the data variable is not referenced by code (if we don't emit; // @llvm.instrprof.value.profile, NS will be 0), and the counter keeps the; // data variable live under linker GC, the data variable can be private. This; // optimization applies to ELF.; //; // On COFF, a comdat leader cannot be local so we require DataReferencedByCode; // to be false.; //; // If profd is in a deduplicate comdat, NS==0 with a hash suffix guarantees; // that other copies must have the same CFG and cannot have value profiling.; // If no hash suffix, other profd copies may be referenced by code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,3,['variab'],['variable']
Modifiability,"// If the dataset variable has a wide range than the plot variable,; // calculate the number of entries in the dataset in the plot variable fit range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:18,variab,variable,18,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,3,['variab'],['variable']
Modifiability,"// If the declaration declares a template, it may inherit default arguments; // from the previous declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:50,inherit,inherit,50,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['inherit'],['inherit']
Modifiability,// If the declaration has no name or the type extends past the name take the; // end location of the type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:46,extend,extends,46,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['extend'],['extends']
Modifiability,"// If the default destination is unreachable, or if the lookup table covers; // all values of the conditional variable, branch directly to the lookup table; // BB. Otherwise, check that the condition is within the case range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['variab'],['variable']
Modifiability,"// If the defined value extends beyond NewIdx, just move the beginning; // of the segment to NewIdx.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:24,extend,extends,24,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extends']
Modifiability,"// If the defs from this range reach SI via all predecessors, it is live.; // It can happen that SI is reached by the defs through some paths, but; // not all. In the IR coming into this optimization, SI would not be; // considered live, since the defs would then not jointly dominate SI.; // That means that SI is an overwriting def, and no implicit use is; // needed at this point. Do not add SI to the extension points, since; // extendToIndices will abort if there is no joint dominance.; // If the abort was avoided by adding extra undefs added to Undefs,; // extendToIndices could actually indicate that SI is live, contrary; // to the original IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp:433,extend,extendToIndices,433,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,2,['extend'],['extendToIndices']
Modifiability,"// If the described register is the destination register we need to; // sign-extend the source register from 32 bits. The other case we handle; // is when the described register is the 32-bit sub-register of the; // destination register, in case we just need to return the source; // register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extend']
Modifiability,// If the desired elements are smaller or larger than the source; // elements we can use a matching integer vector type and then; // truncate/any extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,extend,extend,146,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,// If the desired elements are smaller or larger than the source; // elements we can use a matching integer vector type and then; // truncate/any extend followed by zext_in_reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,extend,extend,146,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If the desired elements are smaller or larger than the source; // elements, we can use a matching integer vector type and then; // truncate/sign extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:148,extend,extend,148,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If the destructor is constexpr, check whether the variable has constant; // destruction now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// If the dividend is sign-extended and the constant divisor is small enough; // to fit in the source type, shrink the division to the narrower type:; // (sext X) sdiv C --> sext (X sdiv C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:27,extend,extended,27,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['extend'],['extended']
Modifiability,"// If the divisor is a select-of-constants, try to constant fold all div ops:; // C / (select Cond, TrueC, FalseC) --> select Cond, (C / TrueC), (C / FalseC); // TODO: Adapt simplifyDivRemOfSelectWithZeroOp to allow this and other folds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:168,Adapt,Adapt,168,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['Adapt'],['Adapt']
Modifiability,"// If the divisor is a select-of-constants, try to constant fold all rem ops:; // C % (select Cond, TrueC, FalseC) --> select Cond, (C % TrueC), (C % FalseC); // TODO: Adapt simplifyDivRemOfSelectWithZeroOp to allow this and other folds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:168,Adapt,Adapt,168,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['Adapt'],['Adapt']
Modifiability,"// If the expression is already a fragment, the current register; // offset+size might extend beyond the fragment. In this case, only; // the register bits that are inside the fragment are relevant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:87,extend,extend,87,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extend']
Modifiability,// If the extend is compatible with the preferred extend then we should fix; // up the type and extend so that it uses the preferred use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,3,['extend'],['extend']
Modifiability,"// If the extendable operand is not 'Immediate' type, the instruction should; // have 'isExtended' flag set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:10,extend,extendable,10,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,"// If the final type is not the same as the loaded type, this means that; // we have to pad with zero. Create a zero extend for that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,extend,extend,117,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If the first declaration is out-of-line, this may be an; // instantiation of an out-of-line partial specialization of a variable; // template for which we have not yet instantiated the initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:123,variab,variable,123,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"// If the for loop doesn't have an increment we can just use the condition as; // the continue block. Otherwise, if there is no condition variable, we can; // form the continue block now. If there is a condition variable, we can't; // form the continue block until after we've emitted the condition, because; // the condition is in scope in the increment, but Sema's jump diagnostics; // ensure that there are no continues from the condition variable that jump; // to the loop increment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:138,variab,variable,138,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,3,['variab'],['variable']
Modifiability,"// If the for statement has a condition scope, emit the local variable; // declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable']
Modifiability,// If the frame has variable sized objects then the epilogue must restore; // the sp from fp. We can assume there's an FP here since hasFP already; // checks for hasVarSizedObjects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,2,['variab'],['variable']
Modifiability,"// If the function makes any unknown call, assume the worst case that it can; // access all variables accessed by functions whose address escaped",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:92,variab,variables,92,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,"// If the function takes variable number of arguments, make a frame index for; // the start of the first vararg value... for expansion of llvm.va_start.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// If the function takes variable number of arguments, make a frame index for; // the start of the first vararg value... for expansion of llvm.va_start. We; // can skip this if there are no va_start calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// If the function takes variable number of arguments, make a frame index for; // the start of the first vararg value... for expansion of llvm.va_start.; // On ELFv2ABI spec, it writes:; // C programs that are intended to be *portable* across different compilers; // and architectures must use the header file <stdarg.h> to deal with variable; // argument lists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,3,"['portab', 'variab']","['portable', 'variable']"
Modifiability,"// If the gather has a single extend of the correct type, use an extending; // gather and replace the ext. In which case the correct root to replace; // is not the CallInst itself, but the instruction which extends it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,3,['extend'],"['extend', 'extending', 'extends']"
Modifiability,"// If the global variable's type is different from the one in the class; // member type, assume that it's more specific and also emit it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['variab'],['variable']
Modifiability,"// If the hi bits of the splat are undefined, then it's fine to just splat Lo; // even if it might be sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:107,extend,extended,107,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the imported data is a RooDataSet, we take over its weight variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:65,variab,variable,65,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,"// If the index is smaller or larger than intptr_t, truncate or extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,2,['extend'],['extend']
Modifiability,"// If the index is smaller or larger than intptr_t, truncate or extend; // it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extend']
Modifiability,"// If the init list is shorter than the array length (or the array has; // variable length), set the array default value. Values that are already set; // are not overwritten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:75,variab,variable,75,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['variab'],['variable']
Modifiability,"// If the initializer consists solely of a reference to itself, we; // explicitly mark the variable as uninitialized. This allows code; // like the following:; //; // int x = x;; //; // to deliberately leave a variable uninitialized. Different analysis; // clients can detect this pattern and adjust their reporting; // appropriately, but we need to continue to analyze subsequent uses; // of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:91,variab,variable,91,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,3,['variab'],['variable']
Modifiability,"// If the initializer expression is usable, but the InitCaptureType; // is not, then an error has occurred - so ignore the capture for now.; // for e.g., [n{0}] { }; <-- if no <initializer_list> is included.; // FIXME: we should create the init capture variable and mark it invalid; // in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:253,variab,variable,253,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['variab'],['variable']
Modifiability,"// If the initializer is for a reference type, there is no cast for; // the variable. Values are cast to RValue first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp:76,variab,variable,76,interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,1,['variab'],['variable']
Modifiability,"// If the initializer of the extending declaration is a constant; // initializer, we should have a cached constant initializer for this; // temporary. Note that this might have a different value from the value; // computed by evaluating the initializer if the surrounding constant; // expression modifies the temporary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:29,extend,extending,29,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['extend'],['extending']
Modifiability,"// If the input is 16-bits, we need to extend to use an i32 shift below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,extend,extend,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the input is a shl/ashr pair of a same constant, then this is a sign; // extension from a smaller value. If we could trust arbitrary bitwidth; // integers, we could turn this into a truncate to the smaller bit and then; // use a sext for the whole extension. Since we don't, look deeper and check; // for a truncate. If the source and dest are the same type, eliminate the; // trunc and extend and just do shifts. For example, turn:; // %a = trunc i32 %i to i8; // %b = shl i8 %a, C; // %c = ashr i8 %b, C; // %d = sext i8 %c to i32; // into:; // %a = shl i32 %i, 32-(8-C); // %d = ashr i32 %a, 32-(8-C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:393,extend,extend,393,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,"// If the input is already sign extended, just drop the extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:32,extend,extended,32,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,3,['extend'],['extended']
Modifiability,"// If the input is i32, use ANY_EXTEND since the W instructions don't read; // the upper 32 bits. For other types we need to sign or zero extend; // based on the opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:138,extend,extend,138,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the input load is an extending load, it will be an i32 -> i64; // extending load and isValidSplatLoad() will update NewOpcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:27,extend,extending,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],['extending']
Modifiability,"// If the input value is a chrec scev, and we can prove that the value; // did not overflow the old, smaller, value, we can sign extend all of the; // operands (often constants). This allows analysis of something like; // this: for (signed char X = 0; X < 100; ++X) { int Y = X; }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:129,extend,extend,129,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,"// If the input value is a chrec scev, and we can prove that the value; // did not overflow the old, smaller, value, we can zero extend all of the; // operands (often constants). This allows analysis of something like; // this: for (unsigned char X = 0; X < 100; ++X) { int Y = X; }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:129,extend,extend,129,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,"// If the inserted segment starts in the middle or right at the end of; // another segment, just extend that segment to contain the segment of S.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:97,extend,extend,97,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,"// If the instruction has a global address as operand, it is not cheap; // since the operand will be constant extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:110,extend,extended,110,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// If the instruction has an operand of size > 16bits, its will be; // const-extended and hence, it is not cheap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:77,extend,extended,77,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// If the instruction is convertible to 3 Addr, instead; // of returning try 3 Addr transformation aggressively and; // use this variable to check later. Because it might be better.; // For example, we can just use `leal (%rsi,%rdi), %eax` and `ret`; // instead of the following code.; // addl %esi, %edi; // movl %edi, %eax; // ret",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:129,variab,variable,129,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['variab'],['variable']
Modifiability,"// If the integer type is smaller than the index size, it is implicitly; // sign extended or truncated to index size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:81,extend,extended,81,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['extend'],['extended']
Modifiability,// If the kernel accesses a variable that is going to be stored in the; // module instance through a call then that kernel needs to allocate the; // module instance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// If the key is related to and object that inherits from TTree::Class we; // set treeName with the name of this key if treeName is empty, otherwise; // error occurs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx:44,inherit,inherits,44,tree/treeplayer/src/TSimpleAnalysis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx,1,['inherit'],['inherits']
Modifiability,"// If the last range end is our begin, just extend the last range.; // Otherwise make a new range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:44,extend,extend,44,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['extend'],['extend']
Modifiability,"// If the left and right operands aren't both re-analyzing the; // variable, then the initialiers don't match, so report ""false"".; // Otherwise, we skip these operands..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,2,['variab'],['variable']
Modifiability,"// If the list of values does not have power-of-2 elements, append copies; // of the sign bit to it, to make the size be 2^n.; // The reason for this is that the values will be joined in pairs, because; // otherwise the shuffles will result in convoluted code. With pairwise; // joins, the shuffles will hopefully be folded into a perfect shuffle.; // The output will need to be sign-extended to a type with element width; // being a power-of-2 anyways.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:384,extend,extended,384,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['extend'],['extended']
Modifiability,"// If the live-in value already extends to NewIdx, there is nothing to do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:32,extend,extends,32,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extends']
Modifiability,"// If the load instruction reads directly from the address to which the; // store instruction writes and the stored value is not modified, we can; // promote the load. Since we do not handle stores with pre-/post-index,; // it's unnecessary to check if BaseReg is modified by the store itself.; // Also we can't handle stores without an immediate offset operand,; // while the operand might be the address for a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:419,variab,variable,419,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,1,['variab'],['variable']
Modifiability,"// If the low 12 bits are non-zero, the first expansion may end with an ADDI; // or ADDIW. If there are trailing zeros, try generating a sign extended; // constant with no trailing zeros and use a final SLLI to restore them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp:142,extend,extended,142,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp,1,['extend'],['extended']
Modifiability,"// If the mask covers the whole destination register, there's nothing to; // extend",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// If the memset has a variable size, it cannot be split, just adjust the; // pointer to the new alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// If the method call is a setter for property known to be backed by; // an instance variable, don't invalidate the entire receiver, just; // the storage for that instance variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:85,variab,variable,85,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,2,['variab'],['variable']
Modifiability,"// If the method is -retain, and the receiver's being loaded from; // a __weak variable, peephole the entire operation to objc_loadWeakRetained.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"// If the method we are checking overrides a method from its base; // don't warn about the other overloaded methods. Clang deviates from; // GCC by only diagnosing overloads of inherited virtual functions that; // do not override any other virtual functions in the base. GCC's; // -Woverloaded-virtual diagnoses any derived function hiding a virtual; // function from a base class. These cases may be better served by a; // warning (not specific to virtual functions) on call sites when the; // call would select a different function from the base class, were it; // visible.; // See FIXME in test/SemaCXX/warn-overload-virtual.cpp for an example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:177,inherit,inherited,177,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// If the month was not specified, inherit from the quarter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:35,inherit,inherit,35,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['inherit'],['inherit']
Modifiability,// If the new watched literal isn't watched by any other clause and its; // variable isn't assigned we need to add it to the active variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:76,variab,variable,76,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If the number of elements is too small to build an instruction, extend; // its size before applying addlv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp:67,extend,extend,67,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If the number of registers having variable arguments is odd,; // leave 4 bytes of padding to get to the location where first; // variable argument which was passed through register was copied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,2,['variab'],['variable']
Modifiability,"// If the object requires destruction and is not lifetime-extended,; // then it must have a BTE within its MTE, otherwise it shouldn't.; // FIXME: This should be an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp:58,extend,extended,58,interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,1,['extend'],['extended']
Modifiability,"// If the observable doesn't depend linearly on the integration; // variable we will not do analytical integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx:68,variab,variable,68,roofit/roofitcore/src/RooHistPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx,1,['variab'],['variable']
Modifiability,"// If the offset doesn't match the scale, we rewrite the instruction to; // use the unscaled instruction instead. Likewise, if we have a negative; // offset and there is an unscaled op to use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:45,rewrite,rewrite,45,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the offsets have a different width from the pointer, according; // to the language reference we need to sign-extend or truncate them; // to the width of the pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:115,extend,extend,115,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extend']
Modifiability,"// If the old type was dependent, we can't merge with it, so the new type; // becomes dependent for now. We'll reproduce the original type when we; // instantiate the TypeSourceInfo for the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:190,variab,variable,190,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If the operand is a constant, sign extend to increase our chances; // of being able to use a .vi instruction. ANY_EXTEND would become a; // a zero extend and the simm5 check in isel would fail.; // FIXME: Should we ignore the upper bits in isel instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,6,['extend'],['extend']
Modifiability,"// If the operand is an higher half itself, rewrite it to; // extract_high_v2i64; this way aarch64_neon_pmull64 could; // re-use the dag-combiner function with aarch64_neon_{pmull,smull,umull}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:44,rewrite,rewrite,44,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,// If the operand is the PHI induction variable:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"// If the operand types disagree, extend the shift amount to match. Since; // BT ignores high bits (like shifts) we can use anyextend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the operand types disagree, extend the shift amount to match. Since; // BTST ignores high bits (like shifts) we can use anyextend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the operation feeding into the MUL is a sign extend (sext),; // we use mulhs. Othewise, zero extends (zext) use mulhu.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,extend,extend,51,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,"// If the original function was part of a friend declaration,; // inherit its namespace state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:66,inherit,inherit,66,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['inherit'],['inherit']
Modifiability,// If the parent is a category extended from internal module then we need to; // pretend this belongs to the associated interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:31,extend,extended,31,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['extend'],['extended']
Modifiability,"// If the path goes through the initialization of a variable or field,; // it can't possibly reach a temporary created in this full-expression.; // We will have already diagnosed any problems with the initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,"// If the phi is not used by anything else, we can just adapt it when; // replacing the instruction; if it is, we'll have to duplicate it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:56,adapt,adapt,56,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,1,['adapt'],['adapt']
Modifiability,"// If the plot variable is already cloned, we don't need to do anything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:15,variab,variable,15,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,1,['variab'],['variable']
Modifiability,"// If the position is not defined in the Cling vectors, make space for it; // but normally is variable is defined in fVars a slot should be also present in fClingVariables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:94,variab,variable,94,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,// If the predicate for the sign- or zero-extended offset is the; // same as the predicate used for this load and the sign-/zero-extension; // was from a 32-bits...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the preferred size is large, then insert a truncate. For; // example:; // %1:_(s8) = G_LOAD ...; // %2:_(s64) = G_SEXT %1(s8); // %3:_(s32) = G_ZEXT %1(s8); // ... = ... %3(s32); /// rewrites to:; // %2:_(s64) = G_SEXTLOAD ...; // %4:_(s8) = G_TRUNC %2:_(s32); // %3:_(s64) = G_ZEXT %2:_(s8); // ... = ... %3(s64)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:189,rewrite,rewrites,189,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['rewrite'],['rewrites']
Modifiability,"// If the preferred size is smaller, then keep the extend but extend; // from the result of the extending load. For example:; // %1:_(s8) = G_LOAD ...; // %2:_(s32) = G_SEXT %1(s8); // %3:_(s64) = G_ANYEXT %1(s8); // ... = ... %3(s64); /// rewrites to:; // %2:_(s32) = G_SEXTLOAD ...; // %3:_(s64) = G_ANYEXT %2:_(s32); // ... = ... %3(s64)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:51,extend,extend,51,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,4,"['extend', 'rewrite']","['extend', 'extending', 'rewrites']"
Modifiability,"// If the previous file was non-affecting as well, just extend its entry; // with our information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:56,extend,extend,56,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['extend'],['extend']
Modifiability,"// If the previous variable isn't set but this one is, then we've found; // an older Visual Studio. This variable is set by newer Visual Studios too,; // so this check has to appear second.; // In older Visual Studios, the VC directory is the toolchain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,2,['variab'],['variable']
Modifiability,"// If the private variable is a local variable with lvalue ref type,; // allocate the pointer instead of the pointee type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,"// If the proxy data members are evolved by schema evolution, the proxy list; // that references them will contain null pointers because the evolved; // members are only created after the proxy list. That's why we have to set; // them manually in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:33,evolve,evolved,33,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,2,['evolve'],['evolved']
Modifiability,"// If the qualifiers lost were because we were applying the; // (deprecated) C++ conversion from a string literal to a char*; // (or wchar_t*), then there was no error (C++ 4.2p2). FIXME:; // Ideally, this check would be performed in; // checkPointerTypesForAssignment. However, that would require a; // bit of refactoring (so that the second argument is an; // expression, rather than a type), which should be done as part; // of a larger effort to fix checkPointerTypesForAssignment for; // C++ semantics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:311,refactor,refactoring,311,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['refactor'],['refactoring']
Modifiability,// If the re-extended constant didn't change any of the elements then; // this is effectively also a case of comparing two zero-extended; // values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:13,extend,extended,13,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['extend'],['extended']
Modifiability,// If the re-extended constant didn't change then this is effectively; // also a case of comparing two sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:13,extend,extended,13,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['extend'],['extended']
Modifiability,"// If the reduction can be performed in a smaller type, we need to extend; // the reduction to the wider type before we branch to the original loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:67,extend,extend,67,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['extend'],['extend']
Modifiability,// If the register class of the register we are replacing is a superset; // of any of the register classes of the operands of the materialized; // instruction don't consider that live range extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:190,extend,extended,190,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['extend'],['extended']
Modifiability,"// If the register is undefined (for example if it's a reserved register),; // it may still be possible to extend the range, but it's safer to be; // conservative and just punt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp:107,extend,extend,107,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,1,['extend'],['extend']
Modifiability,"// If the register simply lives through the CodeBB, we don't have; // to rewrite anything since the register is not defined in this; // part of the code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp:73,rewrite,rewrite,73,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the register width is greater than the type width, expand the condition; // of the switch instruction and each case constant to the width of the; // register. By widening the type of the switch condition, subsequent; // comparisons (for case comparisons) will not need to be extended to the; // preferred register width, so we will potentially eliminate N-1 extends,; // where N is the number of cases in the switch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:281,extend,extended,281,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['extend'],"['extended', 'extends']"
Modifiability,"// If the relocation section comes *after* the target section, we; // don't add Config.AllocSectionsPrefix because we've already added; // the prefix to TargetSec->Name. Otherwise, if the relocation; // section comes *before* the target section, we add the prefix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:80,Config,Config,80,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,1,['Config'],['Config']
Modifiability,"// If the requested bitfield extends beyond the most significant bit,; // the extra bits are treated as 0s. To emulate this behavior, reduce; // the number of requested bits, and make the extract unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:29,extend,extends,29,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['extend'],['extends']
Modifiability,"// If the requested stack size is larger than the guard page, then we need; // to check if we need to call the stack extender. This requires adding a; // conditional branch, but splitting the prologue block is not possible at; // this point since it would invalidate the SaveBlocks / RestoreBlocks sets; // of PEI in the single block function case. Build a pseudo to be handled; // later by inlineStackProbe().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp:117,extend,extender,117,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,1,['extend'],['extender']
Modifiability,"// If the result of a {s|z}ext and its source are both live out, rewrite all; // other uses of the source with result of extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:65,rewrite,rewrite,65,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If the result type of vextract is wider than the load, then issue an; // extending load instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:76,extend,extending,76,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"// If the resulting type is still a vector and the destination type is legal,; // we may get the extension for free. If not, get the default cost for the; // extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:158,extend,extend,158,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// If the return types are not the same, this might be a case where more; // code needs to run to compensate for it. For example, the derived; // method might return a type that inherits form from the return; // type of MD and has a prefix.; // For now we just avoid devirtualizing these covariant cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:178,inherit,inherits,178,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['inherit'],['inherits']
Modifiability,// If the same variable fragment is described more than once it is enough; // to keep the last one (i.e. the first found since we for reverse; // iteration).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,2,['variab'],['variable']
Modifiability,"// If the scope is not empty, it could alternatively be something like; // a typedef or using declaration. That declaration might be private; // in the global context, which would be diagnosed by calling into; // isCXXSimpleDeclaration, but may actually be fine in the context of; // member functions and static variable definitions. Check if the next; // token is also an identifier and assume a declaration.; // We cannot check if the scopes match because the declarations could; // involve namespaces and friend declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:312,variab,variable,312,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['variab'],['variable']
Modifiability,"// If the segment before OldIdx read a value defined earlier than; // NewIdx, the moved instruction also reads and forwards that; // value. Extend the lifetime of the new def point.; // Extend to where the previous range started, unless there is; // another redef first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:140,Extend,Extend,140,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,2,['Extend'],['Extend']
Modifiability,"// If the shift amount has come from a scalar, then zero-extend the scalar; // before moving to the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:57,extend,extend,57,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// If the shift amount is sign/zext/any-extended just peel it off.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// If the shift is not a no-op (in which case this should be just a sign; // extend already), the truncated to type is legal, sign_extend is legal; // on that type, and the truncate to that type is both legal and free,; // perform the transform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If the shifted mask extends into the high half and is 8/16/32 bits; // wide, then replace it with a SHR and a TEST8rr/TEST16rr/TEST32rr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:23,extend,extends,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extends']
Modifiability,"// If the shrunk mask fits in sign extended 12 bits, let the target; // independent code apply it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the sigma value is less than a supplied threshold, set the variable to; // constant",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryImpl.cxx:65,variab,variable,65,roofit/histfactory/src/HistFactoryImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryImpl.cxx,1,['variab'],['variable']
Modifiability,"// If the sign bit is known to be zero or one, then sext will extend; // it to the top bits, else it will just zext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp:62,extend,extend,62,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,3,['extend'],['extend']
Modifiability,"// If the sign bit is known zero, convert this to a zero extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:57,extend,extend,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the sign extend extends from a narrower width than the load's width,; // then we can narrow the load width when we combine to a G_SEXTLOAD.; // Avoid widening the load at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,"// If the sign extended value is in the range [-16,15], use VSPLTI[bhw].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the sign operand is smaller, extend it first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the size is unknown (0) then keep this location def to be safe.; // Do the same for defs of large variables, which would be expensive; // to represent with a BitVector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:104,variab,variables,104,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:92,variab,variable,92,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,3,['variab'],['variable']
Modifiability,"// If the smaller value wasn't mentioned in the asm string, and if the; // output was a register, just extend the shorter one to the size of the; // larger one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp:103,extend,extend,103,interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,1,['extend'],['extend']
Modifiability,"// If the source elements are already all-signbits, we don't need to extend,; // just splat the elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:69,extend,extend,69,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the source instruction was killing the source register before the; // merge, unset the isKill marker given the live range has been extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:137,extend,extended,137,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extended']
Modifiability,"// If the source is a G_SEXTLOAD from the same bit width, then we don't; // need any extend at all, just a truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:85,extend,extend,85,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// If the source is smaller than the dest, we still need an extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extend']
Modifiability,"// If the source operands were EXTENDED before, then {U/S}MULL can be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp:31,EXTEND,EXTENDED,31,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,2,['EXTEND'],['EXTENDED']
Modifiability,"// If the source type is not legal, see if there is a legal extload to; // an intermediate type that we can then extend further.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:113,extend,extend,113,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,"// If the source types do not match, but the casts are matching extends, we; // can still narrow the logic op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:64,extend,extends,64,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['extend'],['extends']
Modifiability,"// If the stack was realigned, the frame pointer is set in order to allow; // SP to be restored, so we need another base register to record the stack; // after realignment.; // |--------------------------| -- <-- FP; // | callee-allocated save | | <----|; // | area for register varargs| | |; // |--------------------------| | |; // | callee-saved registers | | |; // |--------------------------| -- |; // | realignment (the size of | | |; // | this area is not counted | | |; // | in MFI.getStackSize()) | | |; // |--------------------------| -- |-- MFI.getStackSize(); // | RVV alignment padding | | |; // | (not counted in | | |; // | MFI.getStackSize() but | | |; // | counted in | | |; // | RVFI.getRVVStackSize()) | | |; // |--------------------------| -- |; // | RVV objects | | |; // | (not counted in | | |; // | MFI.getStackSize()) | | |; // |--------------------------| -- |; // | padding before RVV | | |; // | (not counted in | | |; // | MFI.getStackSize() or in | | |; // | RVFI.getRVVStackSize()) | | |; // |--------------------------| -- |; // | scalar local variables | | <----'; // |--------------------------| -- <-- BP (if var sized objects present); // | VarSize objects | |; // |--------------------------| -- <-- SP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:1075,variab,variables,1075,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['variab'],['variables']
Modifiability,"// If the stacksave and the stackrestore are in the same BB, and there is; // no intervening call, alloca, or stackrestore of a different stacksave,; // remove the restore. This can happen when variable allocas are DCE'd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:194,variab,variable,194,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['variab'],['variable']
Modifiability,"// If the starting value is not the same as the phi node, we speculatively; // looked through an 'and' instruction when evaluating a potential; // arithmetic reduction to determine if it may have been type-promoted.; //; // We now compute the minimal bit width that is required to represent the; // reduction. If this is the same width that was indicated by the 'and', we; // can represent the reduction in the smaller type. The 'and' instruction; // will be eliminated since it will essentially be a cast instruction that; // can be ignore in the cost model. If we compute a different type than we; // did when evaluating the 'and', the 'and' will not be eliminated, and we; // will end up with different kinds of operations in the recurrence; // expression (e.g., IntegerAND, IntegerADD). We give up if this is; // the case.; //; // The vectorizer relies on InstCombine to perform the actual; // type-shrinking. It does this by inserting instructions to truncate the; // exit value of the reduction to the width indicated by RecurrenceType and; // then extend this value back to the original width. If IsSigned is false,; // a 'zext' instruction will be generated; otherwise, a 'sext' will be; // used.; //; // TODO: We should not rely on InstCombine to rewrite the reduction in the; // smaller type. We should just generate a correctly typed expression; // to begin with.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:1055,extend,extend,1055,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,2,"['extend', 'rewrite']","['extend', 'rewrite']"
Modifiability,"// If the style inherits the parent configuration it is a command line; // configuration, which wants to inherit, so we have to skip the check of the; // StyleName.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:16,inherit,inherits,16,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,4,"['config', 'inherit']","['configuration', 'inherit', 'inherits']"
Modifiability,"// If the subclass is not parameterized, there aren't any type; // parameters in the superclass reference to substitute.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:26,parameteriz,parameterized,26,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['parameteriz'],['parameterized']
Modifiability,"// If the symbol extends beyond the split, update the size to be within; // the new block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLink.cpp:17,extend,extends,17,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLink.cpp,1,['extend'],['extends']
Modifiability,// If the symbol is a variable it can either be in a section and; // we have a base or it is absolute and should have been expanded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MachObjectWriter.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MachObjectWriter.cpp,1,['variab'],['variable']
Modifiability,"// If the symbol isn't found, this is probably a legacy plugin, which is an; // error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:56,plugin,plugin,56,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,1,['plugin'],['plugin']
Modifiability,"// If the tail is to be folded by masking, round the number of iterations N; // up to a multiple of Step instead of rounding down. This is done by first; // adding Step-1 and then rounding down. Note that it's ok if this addition; // overflows: the vector induction variable will eventually wrap to zero given; // that it starts at zero and its Step is a power of two; the loop will then; // exit, with the last early-exit vector comparison also producing all-true.; // For scalable vectors the VF is not guaranteed to be a power of 2, but this; // is accounted for in emitIterationCountCheck that adds an overflow check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:266,variab,variable,266,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// If the target doesn't support variable shifts, use either FP conversion; // or integer multiplication to avoid shifting each element individually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If the target is likely to fold this extend away, don't propagate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// If the target requests it, assign local variables to stack slots relative; // to one another and simplify frame index references where possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:43,variab,variables,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,5,['variab'],['variables']
Modifiability,"// If the temporary is lifetime-extended by binding it to a reference-type; // field within an aggregate, automatic destructors don't work properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp:32,extend,extended,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,1,['extend'],['extended']
Modifiability,"// If the temporary is lifetime-extended, don't save the BTE,; // because we don't need a temporary destructor, but an automatic; // destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp:32,extend,extended,32,interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,1,['extend'],['extended']
Modifiability,"// If the tentative definition was completed, getActingDefinition() returns; // null. If we've already seen this variable before, insert()'s second; // return value is false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:113,variab,variable,113,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,"// If the transfer function didn't produce a value, create an atom so that; // we have *some* value for the condition expression. This ensures that; // when we extend the flow condition, it actually changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp:160,extend,extend,160,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,1,['extend'],['extend']
Modifiability,"// If the triple string is still empty, we don't fall back to; // sys::getDefaultTargetTriple() since we do not want to have differing; // behaviour dependent on the configured default triple. Therefore, if the; // user did not pass -mtriple or define an explicit triple/datalayout in; // the IR, we should default to an empty (default) DataLayout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:166,config,configured,166,interpreter/llvm-project/llvm/tools/opt/opt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp,1,['config'],['configured']
Modifiability,"// If the truncate is free for the given types, return false. Replacing a; // free truncate with an induction variable would add an induction variable; // update instruction to each iteration of the loop. We exclude from this; // check the primary induction variable since it will need an update; // instruction regardless.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,3,['variab'],['variable']
Modifiability,"// If the truncated value is not an induction variable, return false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// If the two SETCCs have different VTs, either extend/truncate one of; // them to the other ""towards"" ToMaskVT, or truncate one and extend the; // other to ToMaskVT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,2,['extend'],['extend']
Modifiability,"// If the type is variably-modified, emit all the VLA sizes for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,variab,variably-modified,18,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variably-modified']
Modifiability,"// If the ultimate src is less than 32 bits, then we will only be; // using bytes 0: Op.getValueSizeInBytes() - 1 in the or.; // CalculateByteProvider would not have returned Op as source if we; // used a byte that is outside its ValueType. Thus, we are free to; // ANY_EXTEND as the extended bits are dont-cares.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:284,extend,extended,284,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['extend'],['extended']
Modifiability,// If the upper 32-bits are not used try to convert this into a simm32 by; // sign extending bit 32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:83,extend,extending,83,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// If the upper XLen-16 bits are not used, try to convert this to a simm12; // by sign extending bit 15.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:87,extend,extending,87,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// If the upper half is all sign bits, then we can perform the ABS on the; // lower half and zero-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:98,extend,extend,98,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// If the upper halves are all sign bits, then we can perform the MINMAX on; // the lower half and sign-extend the result to the upper half.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:104,extend,extend,104,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// If the upper ops of a concatenation are undef, then try to bitcast the; // lower op and extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:91,extend,extend,91,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the use has the same type as the preferred use, then merge; // the vregs and erase the extend. For example:; // %1:_(s8) = G_LOAD ...; // %2:_(s32) = G_SEXT %1(s8); // %3:_(s32) = G_ANYEXT %1(s8); // ... = ... %3(s32); // rewrites to:; // %2:_(s32) = G_SEXTLOAD ...; // ... = ... %2(s32)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:93,extend,extend,93,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,"['extend', 'rewrite']","['extend', 'rewrites']"
Modifiability,"// If the user set the NO_COLOR environment variable, we'll honor that; // unless the command line overrides it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variable']
Modifiability,"// If the user wants to use the extended "".help scopeName"" command to access; // the online reference guide, we first check if the command starts correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:32,extend,extended,32,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['extend'],['extended']
Modifiability,"// If the user was explicitly trying to use the extended version,; // we still give helpful extension-related error messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['extend'],['extended']
Modifiability,"// If the using scope was dependent, or we had dependent bases, we need to; // recheck the inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:91,inherit,inheritance,91,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['inherit'],['inheritance']
Modifiability,"// If the value being extended is zero or positive, use a zext instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,"// If the value coming around the backedge is an add with the symbolic; // value we just inserted, possibly with casts that we can ignore under; // an appropriate runtime guard, then we found a simple induction variable!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:211,variab,variable,211,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,"// If the value has no location, we can't make a variable location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If the value is not extended, a simple load will suffice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the value is too small, extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:30,extend,extend,30,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['extend'],['extend']
Modifiability,"// If the value is zero- or sign-extended, its size becomes 4 bytes, so; // that's what we should load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallLowering.cpp,1,['extend'],['extended']
Modifiability,"// If the variable being captured has an invalid type, mark the class as; // invalid as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['variab'],['variable']
Modifiability,"// If the variable doesn't have any initializer (shouldn't this be; // invalid?), it's not clear what we should do. Maybe capture as; // zero?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// If the variable doesn't have any locations, just ignore it. We don't; // report an error or warning here as that could be noisy on optimised; // code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,1,['variab'],['variable']
Modifiability,// If the variable fragment hasn't been seen before then we don't want; // to remove this dbg intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['variab'],['variable']
Modifiability,"// If the variable group involves parameters, the diagnostic message will; // NOT explain how the variables are grouped as the reason is non-trivial; // and irrelavant to users' experience:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If the variable has a DIBasicType, extract it. Basic types cannot have; // unique identifiers, so don't bother resolving the type with the; // identifier map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['variab'],['variable']
Modifiability,"// If the variable has an attached offset expression, extract it.; // FIXME: Try to handle DW_OP_deref as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,"// If the variable has an explicit section, it is placed in that section but; // it's addressing mode may change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetObjectFile.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetObjectFile.cpp,1,['variab'],['variable']
Modifiability,"// If the variable has an explicit section, it is placed in that section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp,1,['variab'],['variable']
Modifiability,"// If the variable has an incomplete class type (or array thereof), it; // might need destruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is a pointer and is being dereferenced (i.e. is not; // the last component), the base has to be the pointer itself, not its; // reference. References are ignored for mapping purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,// If the variable is artificial and must be captured by value - try to; // capture by value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is captured by an enclosing block or lambda expression,; // use the type of the capture field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is clearly identified as non-odr-used and the full; // expression is not instantiation dependent, only then do we not; // need to check enclosing lambda's for speculative captures.; // For e.g.:; // Even though 'x' is not odr-used, it should be captured.; // int test() {; // const int x = 10;; // auto L = [=](auto a) {; // (void) +x + a;; // };; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is const qualified and has an initializer but; // we couldn't evaluate initializer to a value, treat the value as; // unknown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is declared in the current context, there is no need to; // capture it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// If the variable is implicitly firstprivate and scalar - capture by; // copy,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If the variable is private (i.e. not captured) and has variably; // modified type, we still need to capture the type for correct; // codegen in all regions, associated with the construct. Currently,; // it is captured in the innermost captured region only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],"['variable', 'variably']"
Modifiability,"// If the variable is thread-local, so is its guard variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['variab'],['variable']
Modifiability,"// If the variable is used after the loop, the register coalescer will; // merge the newly created register and remove the phi node again.; // Just do nothing in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,1,['variab'],['variable']
Modifiability,"// If the variable might have been accessed by its initializer, we; // might have to initialize with a barrier. We have to do this for; // both __weak and __strong, but __weak got filtered out above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// If the variable name is present, add it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// If the variable that we pass through is watched then we add it to the; // active variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If the variable was in the scope of the old function, i.e. it was not; // inlined, point the intrinsic to a fresh variable within the new function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,2,['variab'],['variable']
Modifiability,"// If the variable's a const type, and it's neither an NRVO; // candidate nor a __block variable and has no mutable members,; // emit it as a global instead.; // Exception is if a variable is located in non-constant address space; // in OpenCL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,3,['variab'],['variable']
Modifiability,"// If the vector element type is not legal, the BUILD_VECTOR operands; // are promoted and implicitly truncated, and the result implicitly; // extended. Make that explicit here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:143,extend,extended,143,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extended']
Modifiability,"// If the vector reduction can be performed in a smaller type, we truncate; // then extend the loop exit value to enable InstCombine to evaluate the; // entire expression in the smaller type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:84,extend,extend,84,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['extend'],['extend']
Modifiability,"// If the vector reduction can be performed in a smaller type, we truncate; // then extend the loop exit value to enable InstCombine to evaluate the; // entire expression in the smaller type.; // TODO: Handle this in truncateToMinBW.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:84,extend,extend,84,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['extend'],['extend']
Modifiability,"// If the version string is null, its not an analyzer plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:54,plugin,plugin,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['plugin'],['plugin']
Modifiability,"// If the weight variable is required but is not in the set, create and add; // it on the fly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:17,variab,variable,17,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,"// If the wider type is legal: extend, op, and truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If the width extends beyond the register size, pad the register; // with 0 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:16,extend,extends,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['extend'],['extends']
Modifiability,"// If there are 2 different variable operands, we must create a new shuffle; // (select) first, so check uses to ensure that we don't end up with more; // instructions than we started with.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"// If there are any AST files to merge, create a frontend action; // adaptor to perform the merge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp:69,adapt,adaptor,69,interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,1,['adapt'],['adaptor']
Modifiability,"// If there are any killed locations we can't find a copy for, we can't; // extend the variable value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:76,extend,extend,76,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"// If there are any, generate only global variables defined by the pdf; // associated with this state and transfer values to output placeholder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:42,variab,variables,42,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['variab'],['variables']
Modifiability,"// If there are interfering Uses (i.e. their defining access is in the; // loop), or ordered loads (stored as Defs!), don't move this store.; // Could do better here, but this is conservatively correct.; // TODO: Cache set of Uses on the first walk in runOnLoop, update when; // moving accesses. Can also extend to dominating uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:305,extend,extend,305,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['extend'],['extend']
Modifiability,"// If there are lifetime intrinsics which couldn't be traced back to an; // alloca, we may not know exactly when a variable enters scope, and; // therefore should ""fail safe"" by not poisoning them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:115,variab,variable,115,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// If there are no flexible fields, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:19,flexible,flexible,19,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible']
Modifiability,"// If there are no instructions in this lexical scope, do no location tracking; // at all, this variable shouldn't get a legitimate location range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:96,variab,variable,96,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If there are no public inheritance paths, the cast always fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:26,inherit,inheritance,26,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,// If there are no registered plugins we don't need to wrap the consumer,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:30,plugin,plugins,30,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['plugin'],['plugins']
Modifiability,"// If there are no uses of the value (e.g. because it returns void), there; // is nothing to rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:93,rewrite,rewrite,93,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If there are two 'or' instructions concat variables in opposite order:; //; // Slot1 and Slot2 are all zero bits.; // | Slot1 | Low | Slot2 | High |; // LowHigh = or (shl (zext Low), ZextLowShlAmt), (zext High); // | Slot2 | High | Slot1 | Low |; // HighLow = or (shl (zext High), ZextHighShlAmt), (zext Low); //; // the latter 'or' can be safely convert to; // -> HighLow = fshl LowHigh, LowHigh, ZextHighShlAmt; // if ZextLowShlAmt + ZextHighShlAmt == Width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:45,variab,variables,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['variab'],['variables']
Modifiability,"// If there is a dynamic LDS variable associated with this function F, every; // further dynamic LDS instance (allocated by calling setDynLDSAlign) must; // map to the same address. This holds because no LDS is allocated after the; // lowering pass if there are dynamic LDS variables present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If there is a mask here, and we have a variable shift, we can't be sure; // that we're masking out the right stuff.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// If there is a single definition of the variable, then working out it's; // value everywhere is very simple: it's every block dominated by the; // definition. At the dominance frontier, the usual algorithm would:; // * Place PHIs,; // * Propagate values into them,; // * Find there's no incoming variable value from the other incoming branches; // of the dominance frontier,; // * Specify there's no variable value in blocks past the frontier.; // This is a common case, hence it's worth special-casing it.; // Pick out the variables value from the block transfer function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// If there is a variable available in the list of referenced variables; // which wouldn't break the pattern if it is used in place of the; // current variable, we provide this variable as the suggested fix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// If there is dynamic allocation, the alignment needed is included in; // the static frame size. There may be no reference to the dynamic; // variable in the kernel itself, so without including it here, that; // alignment padding could be missed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:143,variab,variable,143,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// If there is no '=' deliminator, we only; // set the variable constant",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:55,variab,variable,55,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['variab'],['variable']
Modifiability,"// If there is no command-line argument to specify the Target version and; // no environment variable defined, see if we can set the default based; // on -isysroot using SDKSettings.json if it exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:93,variab,variable,93,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['variab'],['variable']
Modifiability,// If there is no debug info for this type then do not emit debug info; // for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,['variab'],['variable']
Modifiability,"// If there is no debug location, we do not have to rewrite this; // MDNode. This loop also initializes DILocationReachable, later; // needed by updateLoopMetadataDebugLocationsImpl; the use of; // count_if avoids an early exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:52,rewrite,rewrite,52,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If there is no default constructor the GetStreamerInfo; // will not work. It also means (hopefully) that an; // inheriting class has a streamerInfo in the list (which; // will induces the setting of this streamerInfo)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCloner.cxx:115,inherit,inheriting,115,tree/tree/src/TTreeCloner.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCloner.cxx,1,['inherit'],['inheriting']
Modifiability,"// If there is no definition of the renamed variable in this block, just use; // GetValueAtEndOfBlock to do our work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,2,['variab'],['variable']
Modifiability,"// If there is no location, and we weren't asked to make the variable; // explicitly undef, then stop here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:61,variab,variable,61,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If there is no outer outlined region,no need to lookup in a list of; // captured variables, we can use the original one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:84,variab,variables,84,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// If there is no scope for the variable then something has probably gone; // wrong.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,// If there is nothing to remove then jump to next variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,"// If there isn't an equivalent block descriptor global variable, create a new; // one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// If there was no mapping for a value ID, it's optimized out. Create no; // DBG_PHI, and any variables using this value will become optimized out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:94,variab,variables,94,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['variab'],['variables']
Modifiability,"// If there was only one read, followed by any number of writes, and the; // read is not within a loop, don't warn. Additionally, don't warn in a; // loop if the base object is a local variable -- local variables are often; // changed in loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:185,variab,variable,185,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If there were any PHI nodes in this successor, rewrite one entry; // from OrigBlock to come from NewLeaf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp:50,rewrite,rewrite,50,interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If there's a #pragma GCC visibility in scope, and this isn't a class; // member, set the visibility of this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:111,variab,variable,111,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If there's a jump into the lifetime of this variable, its lifetime; // gets broken up into several regions in IR, which requires more work; // to handle correctly. For now, just omit the intrinsics; this is a; // rare case, and it's better to just be conservatively correct.; // PR28267.; //; // We have to do this in all language modes if there's a jump past the; // declaration. We also have to do it in C if there's a jump to an; // earlier point in the current block because non-VLA lifetimes begin as; // soon as the containing block is entered, not when its variables; // actually come into scope; suppressing the lifetime annotations; // completely in this case is unnecessarily pessimistic, but again, this; // is rare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If there's already an old global variable, replace it with the new one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// If there's call before the AMX, we need to reload tile config.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:58,config,config,58,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['config'],['config']
Modifiability,"// If there's no usable candidate, we're done unless we can rewrite a; // '<=>' in terms of '==' and '<'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:60,rewrite,rewrite,60,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this DeclRefExpr does not constitute an odr-use of the variable,; // we're not permitted to emit a reference to it in general, and it might; // not be captured if capture would be necessary for a use. Emit the; // constant value directly instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"// If this PHINode is not in the header block, then we know that we; // can convert it to select during if-conversion. No need to check if; // the PHIs in this block are induction or reduction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:193,variab,variables,193,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['variab'],['variables']
Modifiability,"// If this RV32, we need to sign extend the constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:33,extend,extend,33,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// If this a RV32 and the immediate is a uimm32, sign extend it to 32 bits.; // This allows writing 'addi a0, a0, 0xffffffff'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['extend'],['extend']
Modifiability,"// If this a zero extend to i64, we should only extend to i32 and use a free; // zero extend to finish.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],['extend']
Modifiability,// If this an extended register and we don't have VLX we need to use a; // 512-bit move.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:14,extend,extended,14,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,2,['extend'],['extended']
Modifiability,"// If this and Next are describing the same variable, merge them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h:44,variab,variable,44,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,1,['variab'],['variable']
Modifiability,"// If this bit isn't from a variable, skip it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,2,['variab'],['variable']
Modifiability,"// If this block contains a condition variable, add both the condition; // variable and initializer to the CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,4,['variab'],['variable']
Modifiability,"// If this bucket has multiple paths, extend them all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:38,extend,extend,38,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['extend'],['extend']
Modifiability,"// If this call has been modified, drop all variable values defined by it.; // We can't track them once they've been stackified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['variab'],['variable']
Modifiability,"// If this can be matched by a zero extend, don't optimize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:36,extend,extend,36,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If this conversion is hidden and we're in a virtual base,; // remember that it's hidden along some inheritance path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:102,inherit,inheritance,102,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this declaration may have caused an inline variable definition to; // change linkage, make sure that it's emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"// If this defines any numeric variables, remember their values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variables']
Modifiability,"// If this defines any string variables, remember their values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variables']
Modifiability,"// If this function has uses aligned stack and also has variable sized stack; // objects, then we need to map all spill slots to fixed positions, so that; // they can be accessed through FP. Otherwise they would have to be accessed; // via AP, which may not be available at the particular place in the program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If this function is not constexpr because it is an inherited; // non-constexpr constructor, diagnose that directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:54,inherit,inherited,54,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['inherit'],['inherited']
Modifiability,"// If this input argument is tied to a larger output result, extend the; // input to be the same size as the output. The LLVM backend wants to see; // the input and output of a matching constraint be the same size. Note; // that GCC does not define what the top bits are here. We use zext because; // that is usually cheaper, but LLVM IR should really get an anyext someday.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:61,extend,extend,61,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['extend'],['extend']
Modifiability,"// If this instruction is evolved from a constant-evolving PHI, compute the; // exit value from the loop without using SCEVs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:26,evolve,evolved,26,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['evolve'],['evolved']
Modifiability,"// If this is a 64-bit load, but the spill slot is 32, then we can do; // a 32-bit load which is implicitly zero-extended. This likely is; // due to live interval analysis remat'ing a load from stack slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:113,extend,extended,113,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// If this is a Machine BB address we are talking about, and it is; // not marked as extended, say so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:85,extend,extended,85,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// If this is a block variable, call _Block_object_destroy; // (on the unforwarded address). Don't enter this cleanup if we're in pure-GC; // mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this is a byval argument and we know all the call sites (so we can; // rewrite them), there is no need to check them explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:77,rewrite,rewrite,77,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this is a call entry, the variable should be a parameter.; // FIXME: Handle CXXThisRegion as well. (This is not a priority because; // 'this' should never be NULL, but this visitor isn't just for NULL and; // UndefinedVal.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// If this is a code completion run, avoid invoking the plugin consumers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:56,plugin,plugin,56,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['plugin'],['plugin']
Modifiability,"// If this is a decay from variable width array, bail out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"// If this is a dependent context, we don't need to mark variables as; // odr-used, but we may still need to track them for lambda capture.; // FIXME: Do we also need to do this inside dependent typeid expressions; // (which are modeled as unevaluated at this point)?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:57,variab,variables,57,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// If this is a dependent lambda, there might be an enclosing variable; // template. In this case, the next step is not the parent DeclContext (or; // even a DeclContext at all).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['variab'],['variable']
Modifiability,"// If this is a global variable, try to fold it into the addressing mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// If this is a global variable, we must make sure to add any global; // values referenced by the initializer to the collection set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:23,variab,variable,23,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['variab'],['variable']
Modifiability,"// If this is a local extern function or variable declared within a function; // template, don't add it into the enclosing namespace scope until it is; // instantiated; it might have a dependent type right now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this is a local variable, dig out its value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// If this is a local variable, make sure we import the copy; // in the caller's module. The only time a local variable can; // share an entry in the index is if there is a local with the same name; // in another module that had the same source file name (in a different; // directory), where each was compiled in their own directory so there; // was not distinguishing path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,2,['variab'],['variable']
Modifiability,"// If this is a masked load followed by an UUNPKLO, fold this into a masked; // extending load. We can do this even if this is already a masked; // {z,}extload.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:80,extend,extending,80,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:132,extend,extending,132,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"// If this is a master server, find the config file and start slave; // servers as specified in the config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:40,config,config,40,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['config'],['config']
Modifiability,"// If this is a method that returns a member variable but does nothing else,; // model the field of the return value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['variab'],['variable']
Modifiability,"// If this is a module entry function, we can also sanity check against; // the static frame. Strictly it would be better to check against the; // attribute, i.e. that the variable is within the always-allocated; // section, and not within some other non-absolute-address object; // allocated here, but the extra error detection is minimal and we would; // have to pass the Function around or cache the attribute value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp:172,variab,variable,172,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,1,['variab'],['variable']
Modifiability,"// If this is a short vector argument loaded from the stack,; // extend from i64 to full vector size and then bitcast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:65,extend,extend,65,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extend']
Modifiability,// If this is a sign extending operation we don't need to look any further.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:21,extend,extending,21,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extending']
Modifiability,"// If this is a sign-bit test of a bitcast of a casted FP value, eliminate; // the FP extend/truncate because that cast does not change the sign-bit.; // This is true for all standard IEEE-754 types and the X86 80-bit type.; // The sign-bit is always the most significant bit in those types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:86,extend,extend,86,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extend']
Modifiability,"// If this is a sign-extended 32-bit value, we can truncate it and rely on the; // instruction to sign-extend since SEW>XLEN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If this is a sign-extended 8-bit integer immediate used in an ALU; // instruction, there is probably an opcode encoding to save space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// If this is a signed comparison and the value being compared is not known; // to be sign extended, sign extend it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:91,extend,extended,91,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If this is a single field member pointer (single inheritance), this is a; // single icmp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:52,inherit,inheritance,52,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this is a single narrow character, sign extend it (e.g. '\xFF' is ""-1""); // if 'char' is signed for this target (C99 6.4.4.4p10). Note that multiple; // character constants are not sign extended in the this implementation:; // '\xFF\xFF' = 65536 and '\x0\xFF' = 255, which matches GCC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp:46,extend,extend,46,interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If this is a single value copied into all lanes (a splat), we can just sign; // extend that single value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:83,extend,extend,83,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If this is a struct/class and this is not the last element, reject; // it. Note that GCC supports variable sized arrays in the middle of; // structures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:101,variab,variable,101,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this is a subsequent config file, append options to the previous one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:27,config,config,27,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// If this is a supermaster server, find the config file and start; // submaster servers as specified in the config file.; // There is a difference in startup between a slave and a submaster; // in which the submaster will issue a kPROOF_LOGFILE and; // then a kPROOF_LOGDONE message (which must be collected); // while slaves do not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofSuperMaster.cxx:45,config,config,45,proof/proof/src/TProofSuperMaster.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofSuperMaster.cxx,2,['config'],['config']
Modifiability,// If this is a truncate of a non extending load we can just narrow it to; // use a broadcast_load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// If this is a type than can be sign or zero-extended to a basic operation; // go ahead and accept it now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:46,extend,extended,46,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,4,['extend'],['extended']
Modifiability,"// If this is a variable index, we don't know which element it overwrites.; // demand exactly the same input as we produce.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['variab'],['variable']
Modifiability,"// If this is a variable template and none of its specializations is used,; // we should warn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,"// If this is a variable, then recursively evaluate now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,1,['variab'],['variable']
Modifiability,"// If this is a vector comparison, sign extend the result to the appropriate; // vector integer type and return it (don't convert to bool).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:40,extend,extend,40,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['extend'],['extend']
Modifiability,"// If this is a widening shuffle, we must be able to extend with poison; // elements. If the original binop does not produce a poison in the high; // lanes, then this transform is not safe.; // Similarly for poison lanes due to the shuffle mask, we can only; // transform binops that preserve poison.; // TODO: We could shuffle those non-poison constant values into the; // result by using a constant vector (rather than an poison vector); // as operand 1 of the new binop, but that might be too aggressive; // for target-independent shuffle creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:53,extend,extend,53,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extend']
Modifiability,// If this is a zext instruction zero extend the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['extend'],['extend']
Modifiability,"// If this is a zext/sext of a load, return 0 if the corresponding; // extending load exists on target and the result type is legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:71,extend,extending,71,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['extend'],['extending']
Modifiability,"// If this is already correctly zero-extended, leave it alone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If this is an AND, check if we have a compare on either side. As long as; // one side guarantees the mask is zero extended, the AND will preserve those; // zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:117,extend,extended,117,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,3,['variab'],['variable']
Modifiability,"// If this is an absolute variable reference, substitute it now to preserve; // semantics in the face of reassignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['variab'],['variable']
Modifiability,"// If this is an alloca for a scalar variable, insert a dbg.value; // at each load and store to the alloca and erase the dbg.declare.; // The dbg.values allow tracking a variable even if it is not; // stored on the stack, while the dbg.declare can only describe; // the stack slot (and at a lexical-scope granularity). Later; // passes will attempt to elide the stack slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,// If this is an anonymous union then we'll want to emit a global; // variable for each member of the anonymous union so that it's possible; // to find the name of any field in the union.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:70,variab,variable,70,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,"// If this is an any-extending load from the FPR bank, split it into a regular; // load + extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:21,extend,extending,21,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// If this is an arithmetic shift right and only the low-bit is set, we can; // always convert this into a logical shr, even if the shift amount is; // variable. The low bit of the shift cannot be an input sign bit unless; // the shift amount is >= the size of the datatype, which is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:152,variab,variable,152,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['variab'],['variable']
Modifiability,// If this is an extending load and the mask type is not the same as; // load's type then we have to extend the mask type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:17,extend,extending,17,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// If this is an extern variable declared locally, the relevant DeclContext; // is that of the containing namespace, or the translation unit.; // FIXME: This is a hack; extern variables declared locally should have; // a proper semantic declaration context!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If this is an insert to a variable element, we don't know what it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['variab'],['variable']
Modifiability,"// If this is an update of extended vector elements, insert them as; // appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,extend,extended,27,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['extend'],['extended']
Modifiability,"// If this is byval, the loads are already explicit in the function. We just; // need to rewrite the pointer values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp:89,rewrite,rewrite,89,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this is checking if all elements of an extended vector are clear or not,; // compare in a narrow type to eliminate the extend:; // icmp eq/ne (bitcast (ext X) to iN), 0 --> icmp eq/ne (bitcast X to iM), 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If this is not virtual inheritance, bump the direct base; // count for the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp:26,inherit,inheritance,26,interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this is optimized to re-use TStreamerElement(s) in case of variable renaming,; // then we must revisit the code in TBranchElement::InitInfo that recalculate the; // fID (i.e. the index of the TStreamerElement to be used for streaming).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:65,variab,variable,65,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['variab'],['variable']
Modifiability,"// If this is private inheritance, then a public member of the; // base will not have any access in classes derived from Cur.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:22,inherit,inheritance,22,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this is supposed to be a variable template, create it as such.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this is the callee of an immediately-enclosing CallExpr, then; // treat it as a method, otherwise it's a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:111,variab,variable,111,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"// If this is the entry block and the register is livein, see if we know; // it is sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:88,extend,extended,88,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,"// If this is the first declaration of an extern C variable, update; // the map of such variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// If this is the first line of a token, we need to inform Whitespace Manager; // about it: either adapt the whitespace range preceding it, or mark it as an; // untouchable token.; // This happens for instance here:; // // line 1 \; // // line 2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp:99,adapt,adapt,99,interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,1,['adapt'],['adapt']
Modifiability,"// If this is the first sighting of this variable, then we are guaranteed; // there are currently no overlapping fragments either. Initialize the set; // of seen fragments, record no overlaps for the current one, and return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:41,variab,variable,41,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,"// If this is the first token of the expanded result, we inherit spacing; // properties later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp:57,inherit,inherit,57,interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,1,['inherit'],['inherit']
Modifiability,"// If this is the holding variable for a `BindingDecl`, we may already; // have a storage location set up -- so check. (See also explanation below; // where we process the `BindingDecl`.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['variab'],['variable']
Modifiability,"// If this is the pattern of a variable template, find where it was; // instantiated from. FIXME: Is this necessary?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,// If this is the special case where we use a MOV32rm to load a 32-bit; // value and zero-extend the top bits. Change the destination register; // to a 32-bit one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:90,extend,extend,90,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extend']
Modifiability,"// If this is variable insert to undef vector, it might be better to splat:; // inselt undef, InVal, EltNo --> build_vector < InVal, InVal, ... >",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// If this isn't a TU in which this variable is defined, the thread; // wrapper is discardable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// If this isn't a spaceship rewrite, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp:29,rewrite,rewrite,29,interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this memory access can be shown to *statically* extend outside the; // bounds of the allocation, it's behavior is undefined, so simply; // ignore it. Note that this is more strict than the generic clamping; // behavior of insertUse. We also try to handle cases which might run the; // risk of overflow.; // FIXME: We should instead consider the pointer to have escaped if this; // function is being instrumented for addressing bugs or race conditions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extend']
Modifiability,"// If this might be a member specialization of a static data member, check; // the specialization is visible. We already did the checks for variable; // template specializations when we created them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:140,variab,variable,140,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// If this might be too difficult for the backend to handle (e.g. the addr; // of one global variable divided by another) then we can't commit it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp:93,variab,variable,93,interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp,1,['variab'],['variable']
Modifiability,"// If this node has a name associated with it, capture it in VariableMap. If; // we already saw this in the pattern, emit code to verify dagness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:61,Variab,VariableMap,61,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,1,['Variab'],['VariableMap']
Modifiability,"// If this non-virtual base has been seen before, then the class has non-; // diamond shaped repeated inheritance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:102,inherit,inheritance,102,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this operand is a lower half, rewrite it to; // extract_high_v2i64(duplane(<2 x Ty>, 0)). This saves a roundtrip to; // align lanes of two operands. A roundtrip sequence (to move from lane; // 1 to lane 0) is like this:; // mov x8, v0.d[1]; // fmov d0, x8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:36,rewrite,rewrite,36,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this particular Variable/Fragment pair already exists in the overlap; // map, it has already been accounted for.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:22,Variab,Variable,22,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['Variab'],['Variable']
Modifiability,"// If this pass is extended to support more instructions, the check for; // definedness may need to be strengthened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp:19,extend,extended,19,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,1,['extend'],['extended']
Modifiability,"// If this phi has a single use, and if that use just computes a value for; // the next iteration of a loop, delete the phi. This occurs with unused; // induction variables, e.g. ""for (int j = 0; ; ++j);"". Detecting this; // common case here is good because the only other things that catch this; // are induction variable analysis (sometimes) and ADCE, which is only run; // late.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:163,variab,variables,163,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If this protocol is marked 'objc_protocol_requires_explicit_implementation'; // then we should check if any class in the super class hierarchy also; // conforms to this protocol, either directly or via protocol inheritance.; // If so, we can skip checking this protocol completely because we; // know that a parent class already satisfies this protocol.; //; // Note: we could generalize this logic for all protocols, and merely; // add the limit on looking at the super class chain for just; // specially marked protocols. This may be a good optimization. This; // change is restricted to 'objc_protocol_requires_explicit_implementation'; // protocols for now for controlled evaluation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:214,inherit,inheritance,214,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this redeclaration makes the variable inline, we may need to add it to; // UndefinedButUsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:163,extend,extended,163,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],['extended']
Modifiability,"// If this sign extend is only used by a truncate, let the truncate be; // eliminated before we try to optimize this sext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,"// If this slice extracts the entirety of an independent variable from a; // larger alloca, do not produce a fragment expression, as the variable is; // not fragmented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['variab'],['variable']
Modifiability,"// If this type test is only used by llvm.assume instructions, it; // was used for whole program devirtualization, and is being kept; // for use by other optimization passes. We do not need or want to; // lower it here. We also don't want to rewrite any associated globals; // unnecessarily. These will be removed by a subsequent LTT invocation; // with the DropTypeTests flag set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:242,rewrite,rewrite,242,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this use is in an exit block, rewrite to use the newly inserted PHI.; // This is required for correctness because SSAUpdate doesn't handle uses; // in the same block. It assumes the PHI we inserted is at the end of the; // block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:36,rewrite,rewrite,36,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this use is tied to a def, we can't rewrite the register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:42,rewrite,rewrite,42,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If this value is a nonnull pointer, record it's range and bailout. Note; // that for all other pointer typed values, we terminate the search at the; // definition. We could easily extend this to look through geps, bitcasts,; // and the like to prove non-nullness, but it's not clear that's worth it; // compile time wise. The context-insensitive value walk done inside; // isKnownNonZero gets most of the profitable cases at much less expense.; // This does mean that we have a sensitivity to where the defining; // instruction is placed, even if it could legally be hoisted much higher.; // That is unfortunate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:183,extend,extend,183,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['extend'],['extend']
Modifiability,"// If this value is an array or struct with a statically determinable; // constant initializer, there are optimizations we can do.; //; // TODO: We should constant-evaluate the initializer of any variable,; // as long as it is initialized by a constant expression. Currently,; // isConstantInitializer produces wrong answers for structs with; // reference or bitfield members, and a few other cases, and checking; // for POD-ness protects us from some of these.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:196,variab,variable,196,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this variable has a VLA type and an initializer, try to; // fold to a constant-sized type. This is otherwise invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this variable has a deduced type, defer reading that type until we are; // done deserializing this variable, because the type might refer back to the; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,3,['variab'],['variable']
Modifiability,// If this variable has external storage and doesn't require special; // link handling we defer to its canonical definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,// If this variable is always stack homed then we have already inserted a; // dbg.declare and deleted this dbg.value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// If this variable location does not depend on any instructions or contains; // any stack locations, produce it as a standard debug value instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,1,['variab'],['variable']
Modifiability,"// If this variable might have a constant initializer or might be usable in; // constant expressions, check whether or not it actually is now. We can't; // do this lazily, because the result might depend on things that change; // later, such as which constexpr functions happen to be defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this variable must be emitted, add it as an initializer for the current; // module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this variable must be emitted, add it as an initializer for the; // current module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If this variable template specialization was instantiated from a; // specialized member that is a variable template, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,2,['variab'],['variable']
Modifiability,"// If this variable wasn't already referenced, add it to the list of; // referenced variables and add a occurrence that points to this new entry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If this was an extending gather, we need to get rid of the sext/zext; // sext/zext as well as of the gather itself",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,1,['extend'],['extending']
Modifiability,"// If this was private inheritance, but we don't have access to; // the deriving class, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:23,inherit,inheritance,23,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['inherit'],['inheritance']
Modifiability,"// If this wasn't already an extending load, we need to widen the result; // register to avoid creating a load with a narrower result than the source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:29,extend,extending,29,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extending']
Modifiability,"// If this would require more than 2 unpack instructions to expand, use; // pshufb when available. We can only use more than 2 unpack instructions; // when zero extending i8 elements which also makes it easier to use pshufb.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:161,extend,extending,161,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If this zero extend is only used by a shift, add nneg flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,"// If this zero extend is only used by a truncate, let the truncate be; // eliminated before we try to optimize this zext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,// If true assume that all variables are being bypassed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:27,variab,variables,27,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,1,['variab'],['variables']
Modifiability,// If true indicates that this global variable might be accessed; // purely by non-volatile load instructions. This in turn means; // it can be internalized in source and destination modules during; // thin LTO import because it neither modified nor its address; // is taken.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,"// If true indicates that variable is possibly only written to, so; // its value isn't loaded and its address isn't taken anywhere.; // False, when 'Constant' attribute is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:26,variab,variable,26,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,"// If true, we create a global variable that contains PCs of all instrumented; // BBs, put this global into a named section, and pass this section's bounds; // to __sanitizer_cov_pcs_init.; // This way the coverage instrumentation does not need to acquire the PCs; // at run-time. Works with trace-pc-guard, inline-8bit-counters, and; // inline-bool-flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,1,['variab'],['variable']
Modifiability,"// If truncates aren't free and there are users we can't; // extend, it isn't worthwhile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,extend,extend,61,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If truncating more than the original extended value, abort.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extended']
Modifiability,"// If type location is missing, it is because of missing type (a warning).; // Use variable's location which is good for this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variable']
Modifiability,// If value is passed by pointer we have address passed instead of the value; // itself. No need to extend if the mask value and location share the same; // absolute size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:100,extend,extend,100,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['extend'],['extend']
Modifiability,// If variable is identified in a map clause it is always captured by; // reference except if it is a pointer that is dereferenced somehow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:6,variab,variable,6,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If variable is in module scope and this module allows ODR; // deduplication set ""TypeTable"" placement, otherwise set """" placement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp:6,variab,variable,6,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,1,['variab'],['variable']
Modifiability,// If variable is not writeonly we attempt to recursively analyze; // its references in order to import referenced constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:6,variab,variable,6,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['variab'],['variable']
Modifiability,// If variable scope is not found then skip this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:6,variab,variable,6,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,8,['variab'],['variable']
Modifiability,"// If we already get the only source we can rewrite, return false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:44,rewrite,rewrite,44,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If we already had an occurrence of this index variable, merge this; // scale into it. For example, we want to handle:; // A[x][x] -> x*16 + x*4 -> x*20; // This also ensures that 'x' only appears in the index list once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// If we already have a variable template specialization, return it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,// If we are attempting to capture a global variable in a directive with; // 'target' we return true so that this global is also mapped to the device.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If we are comparing vectors, then the result needs to be a i1 boolean that; // is then extended back to the legal result type depending on how booleans; // are represented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,extend,extended,90,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extended']
Modifiability,"// If we are composing extended qualifiers together, merge together; // into one ExtQuals node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:23,extend,extended,23,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,3,['extend'],['extended']
Modifiability,"// If we are converting to 32-bit integers, we need to add an FP_ROUND.; // This is not valid if the input was originally double precision. It is; // also not profitable to do unless this is an extending load in which; // case doing this combine will allow us to combine consecutive loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:194,extend,extending,194,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If we are extending from a boolean type or if we can create a select that; // has the same size operands as its condition, try to narrow the select.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:13,extend,extending,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['extend'],['extending']
Modifiability,"// If we are extending from an offset, ensure we start on a boundary that; // we can unpack from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:13,extend,extending,13,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// If we are here then OldIdx was just a use but not a def. We only have; // to ensure liveness extends to NewIdx.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:96,extend,extends,96,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extends']
Modifiability,"// If we are inlining for an invoke instruction, we must make sure to rewrite; // any call instructions into invoke instructions. This is sensitive to which; // funclet pads were top-level in the inlinee, so must be done before; // rewriting the ""parent pad"" links.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:70,rewrite,rewrite,70,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we are inserting one variable into a vector of non-zero constants, try; // to avoid loading each constant element as a scalar. Load the constants as a; // vector and then insert the variable scalar element. If insertion is not; // supported, fall back to a shuffle to get the scalar blended with the; // constants. Insertion into a zero vector is handled as a special-case; // somewhere below here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// If we are instantiating a generic lambda call operator body,; // we do not want to capture new variables. What was captured; // during either a lambdas transformation or initial parsing; // should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:98,variab,variables,98,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// If we are instantiating a generic lambda call operator, push; // a LambdaScopeInfo onto the function stack. But use the information; // that's already been calculated (ActOnLambdaExpr) to prime the current; // LambdaScopeInfo.; // When the template operator is being specialized, the LambdaScopeInfo,; // has to be properly restored so that tryCaptureVariable doesn't try; // and capture any new variables. In addition when calculating potential; // captures during transformation of nested lambdas, it is necessary to; // have the LSI properly restored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:399,variab,variables,399,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// If we are loading a legal type, this is a non-extload followed by a; // full extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:80,extend,extend,80,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,"// If we are matching from a truncated input, we need to sext the; // ReplacementLow and ReplacementHigh values. Only do the transform if they; // are free to extend due to being constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:159,extend,extend,159,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['extend'],['extend']
Modifiability,"// If we are not statically linked, we should register the pragmas ourselves; // because the dlopen happens after creating the clang::Preprocessor which; // calls RegisterBuiltinPragmas.; // FIXME: This can be avoided by refactoring our routine and moving it to; // the CIFactory. This requires an abstraction which allows us to; // conditionally create MultiplexingConsumers.; // Copied from Lex/Pragma.cpp; // Pragmas added by plugins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:221,refactor,refactoring,221,interpreter/cling/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp,2,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,"// If we are offsetting, don't extend if we only match a single input, we; // can always do better by using a basic PSHUF or PUNPCK.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If we are parsing a definition and stop at a base-clause, continue on; // until the semicolon. Continuing from the comma will just trick us into; // thinking we are seeing a variable declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:177,variab,variable,177,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// If we are providing an explicit specialization of a member variable; // template specialization, make a note of that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// If we are providing an explicit specialization of a static variable; // template, make a note of that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If we are sign extending a wide vector without SSE4.1, its better to reduce; // the vmul width instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If we are splitting a scalar integer into f64 parts (i.e. so they; // can be placed into VFRC registers), we need to zero extend and; // bitcast the values. This will ensure the value is placed into a; // VSR using direct moves or stack operations as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:125,extend,extend,125,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If we are testing the intersection of 2 select-of-nonzero-constants with no; // common bits set, it's the same as checking if exactly one select condition; // is set:; // ((A ? TC : FC) & (B ? TC : FC)) == 0 --> xor A, B; // ((A ? TC : FC) & (B ? TC : FC)) != 0 --> not(xor A, B); // TODO: Generalize for non-constant values.; // TODO: Handle signed/unsigned predicates.; // TODO: Handle other bitwise logic connectors.; // TODO: Extend to handle a non-zero compare constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:433,Extend,Extend,433,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Extend'],['Extend']
Modifiability,"// If we are throwing a polymorphic class type or pointer thereof,; // exception handling will make use of the vtable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:24,polymorphi,polymorphic,24,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['polymorphi'],['polymorphic']
Modifiability,"// If we are truncating a select that has an extended operand, we can; // narrow the other operand and do the select as a narrow op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,"// If we are type-erasing a block to a block-compatible; // Objective-C pointer type, we may need to extend the lifetime; // of the block object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:101,extend,extend,101,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['extend'],['extend']
Modifiability,"// If we are unable to perform the extend for free, get the default cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// If we are using a wider index than needed for this platform, shrink; // it to what we need. If narrower, sign-extend it to what we need.; // This explicit cast can make subsequent optimizations more obvious.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:113,extend,extend,113,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extend']
Modifiability,"// If we are using full LTO, then automatically create a temporary file; // path for the linker to use, so that it's lifetime will extend past a; // possible dsymutil step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:131,extend,extend,131,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['extend'],['extend']
Modifiability,"// If we are zero-extending the result of a logical operation on i1; // values, we can keep the values in GPRs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// If we are zero/sign extending two steps without SSE4.1, its better to; // reduce the vmul width instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,extend,extending,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// If we call a macro, our local variables may be corrupted due to; // lack of proper lexical scoping. So, add a globally unique postfix; // to every variable.; //; // indexBody() should have set up the Dependencies set by now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:33,variab,variables,33,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// If we can determine that the high bit of the shift is zero or one, even if; // the low bits are variable, emit this shift in an optimized form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:99,variab,variable,99,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['variab'],['variable']
Modifiability,"// If we can find the original types to work on instead of a vector of i1,; // we can avoid extend/extract conversion instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:92,extend,extend,92,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If we can unambiguously determine whether Var can never be used; // in a constant expression, return true.; // - if the variable and its initializer are non-dependent, then; // we can unambiguously check if the variable is a constant expression.; // - if the initializer is not value dependent - we can determine whether; // it can be used to initialize a constant expression. If Init can not; // be used to initialize a constant expression we conclude that Var can; // never be a constant expression.; // - FXIME: if the initializer is dependent, we can still do some analysis and; // identify certain cases unambiguously as non-const by using a Visitor:; // - such as those that involve odr-use of a ParmVarDecl, involve a new; // delete, lambda-expr, dynamic-cast, reinterpret-cast etc...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:123,variab,variable,123,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,2,['variab'],['variable']
Modifiability,"// If we can't prove that the sign bit is zero, we must add one to the; // maximum bit width to account for the unknown sign bit. This preserves; // the existing sign bit so we can safely sign-extend the root back to the; // original type. Otherwise, if we know the sign bit is zero, we will; // zero-extend the root instead.; //; // FIXME: This is somewhat suboptimal, as there will be cases where adding; // one to the maximum bit width will yield a larger-than-necessary; // type. In general, we need to add an extra bit only if we can't; // prove that the upper bit of the original type is equal to the; // upper bit of the proposed smaller type. If these two bits are the; // same (either zero or one) we know that sign-extending from the; // smaller type will result in the same value. Here, since we can't; // yet prove this, we are just making the proposed smaller type; // larger to ensure correctness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:193,extend,extend,193,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,['extend'],"['extend', 'extending']"
Modifiability,"// If we cannot produce a valid value for the LiveIn value within this; // block, skip this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:92,variab,variable,92,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// If we change the return value of the function we must rewrite any return; // instructions. Check this now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp:57,rewrite,rewrite,57,interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we corrected to an inheriting constructor, handle it as one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:25,inherit,inheriting,25,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,"// If we created a new MemRegion for the block, we should explicitly bind; // the captured variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:91,variab,variables,91,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['variab'],['variables']
Modifiability,"// If we do have an element variable, this assignment is the end of; // its initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"// If we do not have a discriminator and are emitting a guard variable for; // use at global scope, then mangling the nested name will not be enough to; // remove ambiguities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['variab'],['variable']
Modifiability,"// If we do not know how to rewrite this definition, there is no point; // in trying to kill this instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:28,rewrite,rewrite,28,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we don't have a definition of the variable template, we won't perform; // any instantiation. Rather, we rely on the user to instantiate this; // definition (or provide a specialization for it) in another translation; // unit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"// If we don't have an override triple, use the first one to configure; // bugpoint, or use the host triple if none provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp:61,config,configure,61,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp,1,['config'],['configure']
Modifiability,"// If we don't wish to explore any variables, defer to the baseline method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:35,variab,variables,35,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['variab'],['variables']
Modifiability,"// If we ended up with a common successor for every path through the switch; // after unswitching, rewrite it to an unconditional branch to make it easy; // to recognize. Otherwise we potentially have to recognize the default case; // pointing at unreachable and other complexity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:99,rewrite,rewrite,99,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we ever directly evaluate global DeclStmts, this assertion will be; // invalid, but this still seems preferable to silently accepting an; // initialization that may be for a path-sensitive variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:195,variab,variable,195,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,// If we fail to produce Fix-It for the declaration we have to skip the; // variable entirely.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:76,variab,variable,76,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// If we failed to complete the type for some reason, or if the type is; // dependent, don't diagnose the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If we find a source that does not require to extract something,; // rewrite the operation with a copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:71,rewrite,rewrite,71,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we find a suitable source, an extended scalar becomes a subvector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:36,extend,extended,36,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If we find an l-value to r-value cast from a __weak variable,; // emit this operation as a copy or move.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// If we found an Objective-C instance variable, let; // LookupInObjCMethod build the appropriate expression to; // reference the ivar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// If we found an Objective-C instance variable, let; // LookupInObjCMethod build the appropriate expression to; // reference the ivar.; // FIXME: This is a gross hack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// If we found dead global variables, replace the current global; // variable list with our new live global variable list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp:27,variab,variables,27,interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// If we get here, then every node we visited produces a sign extended value; // or propagated sign extended values. So the result must be sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:62,extend,extended,62,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,3,['extend'],['extended']
Modifiability,"// If we got a member expression, we should not expect any array section; // before that:; //; // OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, p.7]; // If a list item is an element of a structure, only the rightmost symbol; // of the variable reference can be an array section.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:237,variab,variable,237,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// If we had a sign extend from 8 to 64 bits. We still need to go from 32; // to 64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// If we have (sext (setcc A B)) and A and B are cheap to extend,; // we can move the sext into the arguments and have the same result. For; // example, if A and B are both loads, we can make those extending loads and; // avoid an extra instruction. This pattern appears often in VLS code; // generation where the inputs to the setcc have a different size to the; // instruction that wants to use the result of the setcc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:58,extend,extend,58,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// If we have (zext (abs X)) where X is a type that will be promoted by type; // legalization, convert to (abs (sext X)). But don't extend past a legal type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:132,extend,extend,132,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// If we have 3 or more shuffle instructions or a chain involving a variable; // mask, we can replace them with a single PSHUFB instruction profitably.; // Intel's manuals suggest only using PSHUFB if doing so replacing 5; // instructions, but in practice PSHUFB tends to be *very* fast so we're; // more aggressive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:68,variab,variable,68,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we have AVX, we can use a variable vector select (VBLENDV) instead; // of 3 logic instructions for size savings and potentially speed.; // Unfortunately, there is no scalar form of VBLENDV.; // If either operand is a +0.0 constant, don't try this. We can expect to; // optimize away at least one of the logic instructions later in that; // case, so that sequence would be faster than a variable blend.; // BLENDV was introduced with SSE 4.1, but the 2 register form implicitly; // uses XMM0 as the selection register. That may need just as many; // instructions as the AND/ANDN/OR sequence due to register moves, so; // don't bother.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// If we have LHS == 0, check if LHS is computing a property of some unknown; // SCEV %v which we can rewrite %v to express explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:102,rewrite,rewrite,102,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we have a 32 bit instruction which zeroes out the high half of a; // register, we get an implicit zero extend for free. Check if we have one.; // FIXME: We actually emit the extend right now even though we don't have; // to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:109,extend,extend,109,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],['extend']
Modifiability,"// If we have a capture-capable lambda for the variable, go ahead and; // capture the variable in that lambda (and all its enclosing lambdas).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,2,['variab'],['variable']
Modifiability,// If we have a completely empty initializer then we do not want to create; // the guard variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:89,variab,variable,89,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// If we have a concat of v4i8 loads, convert them to a buildvector of f32; // loads to prevent having to go through the v4i8 load legalization that; // needs to extend each element into a larger type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:162,extend,extend,162,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If we have a decl in the main file, see if we should rewrite it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:56,rewrite,rewrite,56,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// If we have a declaration reference, it had better be a local variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:64,variab,variable,64,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,"// If we have a definition for the variable, emit the initialization; // function as an alias to the global Init function (if any). Otherwise,; // produce a declaration of the initialization function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// If we have a direct DBG_VALUE, and its location expression isn't; // currently complex, then adding an offset will morph it into a; // complex location that is interpreted as being a memory address.; // This changes a pointer-valued variable to dereference that pointer,; // which is incorrect. Fix by adding DW_OP_stack_value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp:236,variab,variable,236,interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,1,['variab'],['variable']
Modifiability,"// If we have a global variable with internal linkage and thread-safe statics; // are disabled, we can just let the guard variable be of type i8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['variab'],['variable']
Modifiability,"// If we have a guard variable, check whether we've already performed; // these initializations. This happens for TLS initialization functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// If we have a prebranched fallthrough into an inactive normal; // cleanup, rewrite it so that it leads to the appropriate place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:77,rewrite,rewrite,77,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we have a propagating-exception variable, check it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"// If we have a sign or zero extended integer, make sure to return Extend; // so that the parameter gets the right LLVM IR attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:29,extend,extended,29,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,4,"['Extend', 'extend']","['Extend', 'extended']"
Modifiability,"// If we have a single dependency, inherit the architecture from it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:35,inherit,inherit,35,interpreter/llvm-project/clang/lib/Driver/Action.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp,1,['inherit'],['inherit']
Modifiability,"// If we have a single edge PHINode, remove it and replace it with a; // reload from the coroutine frame. (We already took care of multi edge; // PHINodes by rewriting them in the rewritePHIs function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:180,rewrite,rewritePHIs,180,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['rewrite'],['rewritePHIs']
Modifiability,"// If we have a single input shuffle with different shuffle patterns in the; // 128-bit lanes and don't lane cross, use variable mask VPERMILPS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:120,variab,variable,120,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// If we have a single input shuffle with different shuffle patterns in the; // the 128-bit lanes use the variable mask to VPERMILPS.; // TODO Combine other mask types at higher depths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:106,variab,variable,106,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// If we have a single input shuffle with different shuffle patterns in the; // two 128-bit lanes use the variable mask to VPERMILPS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:106,variab,variable,106,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we have a trip count expression, rewrite the loop's exit condition; // using it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:39,rewrite,rewrite,39,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we have a truncating store or an extending load with a data size larger; // than 32-bits, we need to reduce to a 32-bit type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:39,extend,extending,39,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['extend'],['extending']
Modifiability,"// If we have already encountered this variable, just stop; // tracking it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,"// If we have already seen information for this variable, add to what we; // already know.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['variab'],['variable']
Modifiability,"// If we have an any_extend feeding the AND, look through it to see if there; // is a shift behind it. But only if the AND doesn't use the extended bits.; // FIXME: Generalize this to other ANY_EXTEND than i32 to i64?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:139,extend,extended,139,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['extend'],['extended']
Modifiability,"// If we have an extremely large number of variable assignments and blocks,; // bail out at this point. We've burnt some time doing analysis already,; // however we should cut our losses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// If we have an inheriting constructor, check whether we're calling an; // inherited constructor instead of a default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:17,inherit,inheriting,17,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,"// If we have any template parameter lists that don't directly belong to; // the variable (matching the scope specifier), store them.; // An explicit variable template specialization does not own any template; // parameter lists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:81,variab,variable,81,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// If we have disabled state machine rewrites, don't make a custom one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:37,rewrite,rewrites,37,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['rewrite'],['rewrites']
Modifiability,"// If we have fptrunc(OpI (fpextend x), (fpextend y)), we would like to; // simplify this expression to avoid one or more of the trunc/extend; // operations if we can do so without changing the numerical results.; //; // The exact manner in which the widths of the operands interact to limit; // what we can and cannot do safely varies from operation to operation, and; // is explained below in the various case statements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:135,extend,extend,135,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,"// If we have init expression, it might be simply a reference; // to a variable, so we can use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:71,variab,variable,71,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// If we have no current ranges just add the range and return, otherwise,; // check the current section and CU against the previous section and CU we; // emitted into and the subprogram was contained within. If these are the; // same then extend our current range, otherwise add this as a new range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:239,extend,extend,239,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['extend'],['extend']
Modifiability,"// If we have no runtime argument, ask the toolchain for its default runtime.; // However, the rewriter only really supports the Mac runtime, so assume that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:95,rewrite,rewriter,95,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['rewrite'],['rewriter']
Modifiability,"// If we have not seen a reference to this variable yet, place it into the; // deferred declarations table to be emitted if needed later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"// If we have only a symbol than there's no need for complex rewrite,; // simply skip everything after it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:61,rewrite,rewrite,61,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we have plugins after the main consumer, which may be the codegen; // action, they likely will need the ASTContext, so don't clear it in the; // codegen action.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:14,plugin,plugins,14,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['plugin'],['plugins']
Modifiability,"// If we have stack realignment or variable sized objects on the stack,; // restore the stack pointer from the frame pointer prior to SVE CSR; // restoration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we have to apply a mapping to our base range assignment, rewrite it now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:63,rewrite,rewrite,63,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we have variable sized frame objects, then we have to move; // the stack pointer to a known spot (fp - StackSize).; // Then, replace the frame pointer by (new) [sp,StackSize-4].; // Then, move the stack pointer the rest of the way (sp = sp + StackSize).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCFrameLowering.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/ARC/ARCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we have variable sized objects, we can use either FP or BP, as the; // SP offset is unknown. We can use the base pointer if we have one and; // FP is not preferred. If not, we're stuck with using FP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we inferred constant or undef values for globals variables, we can; // delete the global and any stores that remain to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp:55,variab,variables,55,interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp,1,['variab'],['variables']
Modifiability,"// If we integrate a model that uses RooLinearVar and should be able to get; // integrated analytically, this should also work if we integrate over variable; // clones because RooFit considers them identical. Covers GitHub issue #12646.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:148,variab,variable,148,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['variab'],['variable']
Modifiability,"// If we know the instruction always returns sign- and zero-extended result,; // return here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:60,extend,extended,60,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// If we know we'd exit on the first iteration, rewrite the exit to; // reflect this. This does not imply the loop must exit through this; // exit; there may be an earlier one taken on the first iteration.; // We know that the backedge can't be taken, so we replace all; // the header PHIs with values coming from the preheader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:48,rewrite,rewrite,48,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we lifetime-extend a braced initializer which is initializing an; // aggregate, and that aggregate contains reference members which are; // bound to temporaries, those temporaries are also lifetime-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:18,extend,extend,18,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// If we move NewValueJump before register allocation we'll need live variable; // analysis here too.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp:70,variab,variable,70,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,1,['variab'],['variable']
Modifiability,"// If we must print something (because we printed a line/column number),; // but don't have any new variables to print, then print a line which; // just continues any existing live ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:100,variab,variables,100,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,1,['variab'],['variables']
Modifiability,"// If we need a base pointer, set it up here. It's whatever the value of the; // stack pointer is at this point. Any variable size objects will be allocated; // after this, so we can still use the base pointer to reference locals.; //; // FIXME: Clarify FrameSetup flags here.; // Note: Use emitFrameOffset() like above for FP if the FrameSetup flag is; // needed.; // For funclets the BP belongs to the containing function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we need a base pointer, set it up here. It's whatever the value of; // the stack pointer is at this point. Any variable size objects will be; // allocated after this, so we can still use the base pointer to reference; // the incoming arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we need a base pointer, set it up here. It's whatever the value; // of the stack pointer is at this point. Any variable size objects; // will be allocated after this, so we can still use the base pointer; // to reference locals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp,3,['variab'],['variable']
Modifiability,"// If we need a base pointer, set it up here. It's whatever the value; // of the stack pointer is at this point. Any variable size objects; // will be allocated after this, so we can still use the base pointer; // to reference locals.; // FIXME: Clarify FrameSetup flags here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we need to bswap and zero extend, we have to insert a shift. Check that; // it is legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,extend,extend,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,// If we need to extend the stack it is more efficient to use entsp / retsp.; // We force the LR to be saved so these instructions are used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreFrameLowering.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/XCore/XCoreFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreFrameLowering.cpp,1,['extend'],['extend']
Modifiability,// If we need to replace any indirectbrs we need to establish integer; // constants that will correspond to each of the basic blocks in the function; // whose address escapes. We do that here and rewrite all the blockaddress; // constants to just be those integer constants cast to a pointer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp:196,rewrite,rewrite,196,interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we need to zero extend the backedge count, check if we can add one to; // it prior to zero extending without overflow. Provided this is safe, it; // allows better simplification of the +1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// If we needed to use inalloca for any argument, do a second pass and rewrite; // all the memory arguments to use inalloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:71,rewrite,rewrite,71,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['rewrite'],['rewrite']
Modifiability,// If we only need the non-extended bits of the bottom element; // then we can just bitcast to the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:27,extend,extended,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['extend'],['extended']
Modifiability,"// If we only want the lowest element and none of extended bits, then we can; // return the bitcasted source vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:50,extend,extended,50,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,"// If we optimistically assume that the MIG routine never re-uses the storage; // that was passed to it as arguments when it invalidates it (but at most when; // it assigns to parameter variables directly), this procedure correctly; // determines if the value was loaded from the transitive closure of MIG; // routine arguments in the heap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp:186,variab,variables,186,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MIGChecker.cpp,1,['variab'],['variables']
Modifiability,"// If we plan to rewrite the tree in a smaller type, we will need to sign; // extend the extracted value back to the original type. Here, we account; // for the extract and the added cost of the sign extend if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,"['extend', 'rewrite']","['extend', 'rewrite']"
Modifiability,"// If we print assembly, we can't separate .file entries according to; // compile units. Thus all files will belong to the default compile unit.; // FIXME: add a better feature test than hasRawTextSupport. Even better,; // extend .file to support this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:223,extend,extend,223,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['extend'],['extend']
Modifiability,"// If we rewrite a return and the new value is not an argument, strip the; // `returned` attribute as it is wrong now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:9,rewrite,rewrite,9,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we see ""T var();"" or ""T var(T());"" at block scope, it is probably; // an attempt to initialize a variable, not a function declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:103,variab,variable,103,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,"// If we start in the middle of another segment, just delete a range and; // extend that segment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,"// If we to this point, just add the variable as a normal local; // variable. It will be destroyed at the end of the block just; // like all others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:37,variab,variable,37,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,2,['variab'],['variable']
Modifiability,"// If we use the original shuffle mask and op1 is *variable*, we would be; // putting an undef into operand 1 of div/rem/shift. This is either UB or; // poison. We do not have to guard against UB when *constants* are op1; // because safe constants guarantee that we do not overflow sdiv/srem (and; // there's no danger for other opcodes).; // TODO: To allow this case, create a new shuffle mask with no undefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"// If we want to determine whether the variable should be captured from the; // perspective of the current capturing scope, and we've already left all the; // capturing scopes of the top directive on the stack, check from the; // perspective of its parent directive (if any) instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// If we were asked not to visit local variables, don't.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// If we were unable to find a config file deduced from executable name,; // that is not an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:31,config,config,31,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// If we zero all the possible extended bits, then we can turn this into; // a zextload if we are running before legalize or the operation is legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,extend,extended,31,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// If we're actually extending zero bits, then if; // SrcSize < DstSize: zext(a & mask); // SrcSize == DstSize: a & mask; // SrcSize > DstSize: trunc(a) & mask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:21,extend,extending,21,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extending']
Modifiability,// If we're building a vector out of extended elements from another vector; // we have P9 vector integer extend instructions. The code assumes legal; // input types (i.e. it can't handle things like v4i16) so do not run before; // legalization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// If we're deferring emission of a C++ variable with an; // initializer, remember the order in which it appeared in the file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"// If we're disambiguating a template argument in a default argument in; // a class definition versus a parameter declaration, an '=' here; // disambiguates the parse one way or the other.; // If this is a parameter, it must have a default argument because; // (a) the previous parameter did, and; // (b) this must be the first declaration of the function, so we can't; // inherit any default arguments from elsewhere.; // FIXME: If we reach a ')' without consuming any '>'s, then this must; // also be a function parameter (that's missing its default argument).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:373,inherit,inherit,373,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['inherit'],['inherit']
Modifiability,"// If we're discarding a construct expression, we still need; // to allocate a variable and call the constructor and destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"// If we're doing a variable assignment from e.g. malloc(N), there will; // probably be a cast of some kind. In exotic cases, we might also see a; // top-level ExprWithCleanups. Ignore them either way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,// If we're extending this temporary to automatic storage duration -- we; // need to register its cleanup during the full-expression's cleanups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:12,extend,extending,12,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extending']
Modifiability,"// If we're filling in a static method where we used to have an; // implicit member access, rewrite to a simple decl ref.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:92,rewrite,rewrite,92,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rewrite'],['rewrite']
Modifiability,"// If we're generating a profile, create a variable for the name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['variab'],['variable']
Modifiability,"// If we're indexing into an object with a variable index for the memory; // access, but the object has only one element, we can assume that the index; // will always be zero. If we replace the GEP, return it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['variab'],['variable']
Modifiability,"// If we're inheriting a constructor, see if we need to call it for this base; // class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:12,inherit,inheriting,12,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,"// If we're inserting into a constant, mask off the inserted index; // and OR with the zero-extended scalar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:92,extend,extended,92,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If we're inside an (outlined) parallel region, use the region info's; // thread-ID variable (it is passed in a first argument of the outlined function; // as ""kmp_int32 *gtid""). Otherwise, if we're not inside parallel region, but in; // regular serial code region, get thread ID by calling kmp_int32; // kmpc_global_thread_num(ident_t *loc), stash this thread ID in a temporary and; // return the address of that temp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,variab,variable,86,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// If we're just performing this lookup for error-recovery purposes,; // don't extend the nested-name-specifier. Just return now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:79,extend,extend,79,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['extend'],['extend']
Modifiability,"// If we're moving between different subregisters, ignore this join.; // The PHI will not get a location, dropping variable locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:115,variab,variable,115,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['variab'],['variable']
Modifiability,// If we're only shuffling a single lowest lane and the rest are identity; // then don't bother.; // TODO - isShuffleMaskInputInPlace could be extended to something like; // this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:143,extend,extended,143,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// If we're optimizing for size, only fold if at least one of the constants is; // only used once or the combined shuffle has included a variable mask; // shuffle, this is to avoid constant pool bloat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:137,variab,variable,137,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// If we're preparing for the second analysis (variables), the machine value; // locations are already solved, and we report this DBG_VALUE and the value; // it refers to to VLocTracker.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// If we're using an inheriting constructor to construct an object,; // the object class is the derived class, not the base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:21,inherit,inheriting,21,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['inherit'],['inheriting']
Modifiability,"// If we've allocated a new parameter variable for the first time, store; // its type and value to be retrieved after codegen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:38,variab,variable,38,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,"// If we've been asked to forbid guard variables, emit an error now.; // This diagnostic is hard-coded for Darwin's use case; we can find; // better phrasing if someone else needs it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variables']
Modifiability,"// If we've got some parameter variables, then emit their declarations...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:31,variab,variables,31,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variables']
Modifiability,"// If we've hit the flexible array member at the end, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:20,flexible,flexible,20,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,"// If we've inlined the constructor, then DstEvaluated would be empty.; // In this case we still want a sink, which could be implemented; // in processCallExit. But we don't have that implemented at the moment,; // so if you hit this assertion, see if you can avoid inlining; // the respective constructor when analyzer-config cfg-temporary-dtors; // is set to false.; // Otherwise there's nothing wrong with inlining such constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:320,config,config,320,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['config'],['config']
Modifiability,"// If we've used a zero-extending load that we will sign-extend,; // just do a sign-extending load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:24,extend,extending,24,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,6,['extend'],"['extend', 'extending']"
Modifiability,"// If wider type is not legal: split, extend, op, trunc and concat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// If yes, add a new occurrence that points to the existing entry in; // the Variables vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:77,Variab,Variables,77,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['Variab'],['Variables']
Modifiability,"// If you need to create another MCAsmInfo class, which inherits from MCAsmInfo,; // you will need to make sure your new class sets PrivateGlobalPrefix to; // a prefix that won't appear in a function name. The default value; // for PrivateGlobalPrefix is 'L', so it will consider any function starting; // with 'L' as a local symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCAsmInfo.h:56,inherit,inherits,56,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCAsmInfo.h,1,['inherit'],['inherits']
Modifiability,"// IfStmt is followed by several trailing objects, some of which optional.; // Note that it would be more convenient to put the optional trailing; // objects at then end but this would change the order of the children.; // The trailing objects are in order:; //; // * A ""Stmt *"" for the init statement.; // Present if and only if hasInitStorage().; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact a ""Expr *"".; //; // * A ""Stmt *"" for the then statement.; // Always present.; //; // * A ""Stmt *"" for the else statement.; // Present if and only if hasElseStorage().; //; // * A ""SourceLocation"" for the location of the ""else"".; // Present if and only if hasElseStorage().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:387,variab,variable,387,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"// IgProf profiling on master and worker. PROOF does not set the; // environment for you: proper environment variables (like PATH and; // LD_LIBRARY_PATH) should be set externally",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:109,variab,variables,109,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['variab'],['variables']
Modifiability,"// Ignore VD to avoid completing the variable itself, e.g. in 'int foo = ^'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,// Ignore assignments to zero bits of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variable']
Modifiability,"// Ignore cases in which the currently-examined value could come from; // a basic block terminated with an EHPad. This checks all incoming; // blocks of the phi node since it is possible that the same incoming; // value comes from multiple basic blocks, only some of which may end; // in an EHPad. If any of them do, a subsequent rewrite attempt by this; // pass would try to insert instructions into an EHPad, hitting an; // assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:330,rewrite,rewrite,330,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,// Ignore declarations of global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"// Ignore global variable, focus on functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['variab'],['variable']
Modifiability,// Ignore lexical scopes which do not contain variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:46,variab,variables,46,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variables']
Modifiability,// Ignore local declarations (for now) and those with const qualification.; // TODO: Local variables should not be allowed if their type declaration has; // ReadOnlyPlacementAttr attribute. To be handled in follow-up patch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:91,variab,variables,91,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// Ignore non-public inheritance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:21,inherit,inheritance,21,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,// Ignore preds that haven't been processed yet. This is essentially the; // same as initialising all variables to implicit top value (⊤) which is; // the identity value for the meet operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:102,variab,variables,102,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,// Ignore records with flexible arrays.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:23,flexible,flexible,23,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,1,['flexible'],['flexible']
Modifiability,"// Ignore scopes which have too many address ranges to represent in the; // current CodeView format or do not have a valid address range.; //; // For lexical scopes with multiple address ranges you may be tempted to; // construct a single range covering every instruction where the block is; // live and everything in between. Unfortunately, Visual Studio only; // displays variables from the first matching lexical block scope. If the; // first lexical block contains exception handling code or cold code which; // is moved to the bottom of the routine creating a single range covering; // nearly the entire routine, then it will hide all other lexical blocks; // and the variables they contain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:374,variab,variables,374,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['variab'],['variables']
Modifiability,// Ignore the INCLUDE variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h:22,variab,variable,22,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,1,['variab'],['variable']
Modifiability,// Ignore the directive if there is no number and the target doesn't support; // numberless .file directives. This allows some portability of assembler; // between different object file formats.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:127,portab,portability,127,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['portab'],['portability']
Modifiability,"// Ignore the evaluation of a DeclRefExpr on the LHS of an assignment. If this; // is not a compound-assignment, we will treat it as initializing the variable; // when TransferFunctions visits it. A compound-assignment does not affect; // whether a variable is uninitialized, and there's no point counting it as a; // use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:150,variab,variable,150,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,2,['variab'],['variable']
Modifiability,// Ignore the variable that appears only on one side of phi instruction; // because it's used only at the first iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['variab'],['variable']
Modifiability,"// Ignore variables for non-inlined function level scopes. The scope; // ranges (from scope->getRanges()) will not include any instructions; // before the first one with a debug-location, which could cause us to; // incorrectly drop a location. We could introduce special casing for; // these variables, but it doesn't seem worth it because no out-of-scope; // locations have been observed for variables declared in function level; // scopes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,3,['variab'],['variables']
Modifiability,"// Ignore weak variables, which have special behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:15,variab,variables,15,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['variab'],['variables']
Modifiability,"// Imm is a signed immediate, so sign extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,// Implement a 32-bit *MUL_LOHI operation by extending both operands to; // 64 bits. Extend is the extension type to use. Store the high part; // in Hi and the low part in Lo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:45,extend,extending,45,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,2,"['Extend', 'extend']","['Extend', 'extending']"
Modifiability,"// Implement some heroics to detect shifts of masked values where the mask can; // be replaced by extending the shift and undoing that in the addressing mode; // scale. Patterns such as (shl (srl x, c1), c2) are canonicalized into (and; // (srl x, SHIFT), MASK) by DAGCombines that don't know the shl can be done in; // the addressing mode. This results in code such as:; //; // int f(short *y, int *lookup_table) {; // ...; // return *y + lookup_table[*y >> 11];; // }; //; // Turning into:; // movzwl (%rdi), %eax; // movl %eax, %ecx; // shrl $11, %ecx; // addl (%rsi,%rcx,4), %eax; //; // Instead of:; // movzwl (%rdi), %eax; // movl %eax, %ecx; // shrl $9, %ecx; // andl $124, %rcx; // addl (%rsi,%rcx), %eax; //; // Note that this function assumes the mask is provided as a mask *after* the; // value is shifted. The input chain may or may not match that, but computing; // such a mask is trivial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:98,extend,extending,98,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,"// Implementation file for class; // AdaptiveIntegratorMultiDim; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:37,Adapt,AdaptiveIntegratorMultiDim,37,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Modifiability,// Import the major distinguishing characteristics of a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,3,['variab'],['variable']
Modifiability,// Import the major distinguishing characteristics of this variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['variab'],['variable']
Modifiability,"// In ARC, infer 'retaining' for variables of retainable type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,3,['variab'],['variables']
Modifiability,"// In ARC, it's captured strongly iff the variable has __strong; // lifetime. In MRR, it's captured strongly if the variable is; // __block and has an appropriate type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,2,['variab'],['variable']
Modifiability,"// In ARC, use some specialized diagnostics for occasions where we; // infer 'const'. These are always pseudo-strong variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:117,variab,variables,117,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// In ARC, we don't need to retain the iteration variable of a fast; // enumeration loop. Rather than actually trying to catch that; // during declaration processing, we remove the consequences here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// In ARC, we sometimes want to ""extend the lifetime""; // (i.e. retain+autorelease) of receivers of returns-inner-pointer; // messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:33,extend,extend,33,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['extend'],['extend']
Modifiability,"// In Apple kexts, we want to add a global destructor entry.; // FIXME: shouldn't this be guarded by some variable?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// In C++'s specification, the coroutine should be marked as done; // if promise.unhandled_exception() throws. The frontend will; // call coro.end(true) along this path.; //; // FIXME: We should refactor this once there is other language; // which uses Switch-Resumed style other than C++.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:195,refactor,refactor,195,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['refactor'],['refactor']
Modifiability,"// In C++, `_` variables behave as if they were maybe_unused",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:15,variab,variables,15,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// In C++, const, non-volatile variables of integral or enumeration types; // can be used in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:31,variab,variables,31,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variables']
Modifiability,"// In C++, the previous declaration we find might be a tag type; // (class or enum). In this case, the new declaration will hide the; // tag type. Note that this applies to functions, function templates, and; // variables, but not to typedefs (C++ [dcl.typedef]p4) or variable templates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:212,variab,variables,212,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// In C++11, any variable of reference type can be used in a constant; // expression if it is initialized by a constant expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"// In C++1y, check variable template ids.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// In C++1y, if this is a variable template id, then check it; // in BuildTemplateIdExpr().; // The single lookup result must be a variable template declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,"// In C++98, const, non-volatile integers initialized with ICEs are ICEs.; // In C++11, constexpr, non-volatile variables initialized with constant; // expressions are constant expressions too. Inside constexpr functions,; // parameters are constant expressions even if they're non-const.; // In C++1y, objects local to a constant expression (those with a Frame) are; // both readable and writable inside constant expressions.; // In C, such things can also be folded, although they are not ICEs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:112,variab,variables,112,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,"// In C, and external-linkage variable named main results in undefined; // behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// In C, compound literals are l-values for some reason.; // For GCC compatibility, in C++, file-scope array compound literals with; // constant initializers are also l-values, and compound literals are; // otherwise prvalues.; //; // (GCC also treats C++ list-initialized file-scope array prvalues with; // constant initializers as l-values, but that's non-conforming, so we don't; // follow it there.); //; // FIXME: It would be better to handle the lvalue cases as materializing and; // lifetime-extending a temporary object, but our materialized temporaries; // representation only supports lifetime extension from a variable, not ""out; // of thin air"".; // FIXME: For C++, we might want to instead lifetime-extend only if a pointer; // is bound to the result of applying array-to-pointer decay to the compound; // literal.; // FIXME: GCC supports compound literals of reference type, which should; // obviously have a value kind derived from the kind of reference involved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:499,extend,extending,499,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,3,"['extend', 'variab']","['extend', 'extending', 'variable']"
Modifiability,"// In C, extern is typically used to avoid tentative definitions when; // declaring variables in headers, but adding an intializer makes it a; // definition. This is somewhat confusing, so GCC and Clang both warn on it.; // In C++, extern is often used to give implictly static const variables; // external linkage, so don't warn in that case. If selectany is present,; // this might be header code intended for C and C++ inclusion, so apply the; // C++ rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:84,variab,variables,84,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variables']
Modifiability,"// In C, when declaring a global variable, look for a corresponding 'extern'; // variable declared in function scope. We don't need this in C++, because; // we find local extern decls in the surrounding file-scope DeclContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1698,config,configure,1698,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configure']
Modifiability,"// In CUDA mode without relocatable device code, variables of form 'extern; // __shared__ Foo foo[]' are pointers to the base of the GPU core's shared; // memory pool. These are never undefined variables, even if they appear; // inside of an anon namespace or static function.; //; // With CUDA relocatable device code enabled, these variables don't get; // special handling; they're treated like regular extern variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:49,variab,variables,49,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,4,['variab'],['variables']
Modifiability,"// In CUDA/HIP device compilation with -fgpu-rdc, the mangled name of a; // static device variable depends on whether the variable is referenced by; // a host or device host function. Therefore the mangled name cannot be; // cached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:90,variab,variable,90,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['variab'],['variable']
Modifiability,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,7,['variab'],['variable']
Modifiability,"// In CUDA/HIP device compilation, only device side variables have; // constant addresses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:52,variab,variables,52,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,"// In ILP32 (x32) mode, pointers are 32 bits and need to be zero-extended to; // 64 bits. Instructions with 32-bit register addresses perform this zero; // extension for us and we can safely ignore the high bits of Offset.; // Instructions with only a 32-bit immediate address do not, though: they; // sign extend instead. This means only address the low 2GB of address space; // is directly addressable, we need indirect addressing for the high 2GB of; // address space.; // TODO: Some of the earlier checks may be relaxed for ILP32 mode as the; // implicit zero extension of instructions would cover up any problem.; // However, we have asserts elsewhere that get triggered if we do, so keep; // the checks for now.; // TODO: We would actually be able to accept these, as well as the same; // addresses in LP64 mode, by adding the EIZ pseudo-register as an operand; // to get an address size override to be emitted. However, this; // pseudo-register is not part of any register class and therefore causes; // MIR verification to fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:65,extend,extended,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// In LLVM's non-standard representation of phi nodes, it's possible to have; // phi nodes with cycles (IE dependent on other phis that are .... dependent; // on the original phi node), especially in weird CFG's where some arguments; // are unreachable, or uninitialized along certain paths. This can cause; // infinite loops during evaluation. We work around this by not trying to; // really evaluate them independently, but instead using a variable; // expression to say if one is equivalent to the other.; // We also special case undef/poison, so that if we have an undef, we can't; // use the common value unless it dominates the phi block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:442,variab,variable,442,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['variab'],['variable']
Modifiability,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:163,variab,variable,163,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,4,"['enhance', 'variab']","['enhance', 'variable']"
Modifiability,"// In LoopDeletion pass Loop can be deleted when ExitingBlocks.size() > 1.; // We obviate multiple ExitingBlocks case for simplicity.; // TODO: If we see testcase with multiple ExitingBlocks can be deleted; // after exit value rewriting, we can enhance the logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:245,enhance,enhance,245,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['enhance'],['enhance']
Modifiability,"// In MRC, retainable pointers are owned by non-__block variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:56,variab,variables,56,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variables']
Modifiability,"// In Microsoft C++ mode, a const variable defined in namespace scope has; // external linkage by default if the variable is declared with; // __declspec(dllexport).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// In Microsoft mode, if we are within a templated function and we can't; // resolve Identifier, then extend the SS with Identifier. This will have; // the effect of resolving Identifier during template instantiation.; // The goal is to be able to resolve a function call whose; // nested-name-specifier is located inside a dependent base class.; // Example:; //; // class C {; // public:; // static void foo2() { }; // };; // template <class T> class A { public: typedef C D; };; //; // template <class T> class B : public A<T> {; // public:; // void foo() { D::foo2(); }; // };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:102,extend,extend,102,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['extend'],['extend']
Modifiability,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,variab,variables,13,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,5,['variab'],['variables']
Modifiability,"// In Objective-C, don't allow jumps past the implicit initialization of a; // local retaining variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:95,variab,variable,95,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// In OpenCL global init functions must be converted to kernels in order to; // be able to launch them from the host.; // FIXME: Some more work might be needed to handle destructors correctly.; // Current initialization function makes use of function pointers callbacks.; // We can't support function pointers especially between host and device.; // However it seems global destruction has little meaning without any; // dynamic resource allocation on the device and program scope variables are; // destroyed by the runtime when program is released.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:481,variab,variables,481,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variables']
Modifiability,"// In OpenMP 5.0 variables and function may be marked as; // device_type(host/nohost) and we should not emit them eagerly unless we sure; // that they must be emitted on the host/device. To be sure we need to have; // seen a declare target with an explicit mentioning of the function, we know; // we have if the level of the declare target attribute is -1. Note that we; // check somewhere else if we should emit this at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,// In OpenMP loop region loop control variable must be captured and be; // private. Perform analysis of first part (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,2,['variab'],['variable']
Modifiability,// In OpenMP loop region loop control variable must be private. Perform; // analysis of first part (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// In OpenMP, the capture kind doesn't actually describe how to capture:; // variables are ""mapped"" onto the device in a process that does not formally; // make a copy, even for a ""copy capture"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:77,variab,variables,77,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['variab'],['variables']
Modifiability,"// In Sema::CheckTemplateArugment, enum template arguments value are; // extended to the size of the integer underlying the enum type. This; // may create a size difference between the enum value and template; // argument value, requiring isSameValue here instead of operator==.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp:73,extend,extended,73,interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,1,['extend'],['extended']
Modifiability,"// In T.foo or T->foo, `foo` is a member function/variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"// In T::foo, `foo` is a static member function/variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"// In X32 mode, ensure the base-pointer is a 32-bit operand, so the LEA will; // be replaced with a 32-bit operand MOV which will zero extend the upper; // 32-bits of the super register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp:135,extend,extend,135,interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,1,['extend'],['extend']
Modifiability,// In a cast involving function types with a variable argument list only the; // types of initial arguments that are provided are considered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['variab'],['variable']
Modifiability,"// In a hopelessly buggy code, Objective-C instance variable; // lookup fails and no expression will be built to reference it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// In addition to the usual promotable integer types, we also need to; // extend all 32-bit types, since the ABI requires promotion to 64 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:74,extend,extend,74,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['extend'],['extend']
Modifiability,"// In address space agnostic languages, string literals are in default address; // space in AST. However, certain targets (e.g. amdgcn) request them to be; // emitted in constant address space in LLVM IR. To be consistent with other; // parts of AST, string literal global variables in constant address space; // need to be casted to default address space before being put into address; // map and referenced by other part of CodeGen.; // In OpenCL, string literals are in constant address space in AST, therefore; // they should not be casted to default address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:273,variab,variables,273,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// In auto-retain/release, infer strong retension for variables of; // retainable type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:54,variab,variables,54,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// In both ELFv1 and v2 ABI, method parameters and the return value; // are sign- or zero-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:90,extend,extended,90,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// In case 32bit mode, bitcast i64 is illegal, extend/split it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// In case it is a variable declaration with a ctor, then allow; // printing on the left side for readbility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp,1,['variab'],['variable']
Modifiability,"// In case of ExprWithCleanups we need to extend its 'scope' to the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp:42,extend,extend,42,interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,1,['extend'],['extend']
Modifiability,// In case of a successful match this call will set `Pred` variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,1,['variab'],['variable']
Modifiability,"// In case of collection, we know how to convert them, if we know how to convert their content.; // NOTE: we need to extend this to std::pair ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:117,extend,extend,117,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['extend'],['extend']
Modifiability,"// In case of multiple inner loop indvars, it is okay if LHS and RHS; // are both inner indvar related variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:103,variab,variables,103,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['variab'],['variables']
Modifiability,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:205,variab,variable,205,roofit/roofitcore/test/testRooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// In effect, we have a flexible array member; // Handler Handlers[0];; // But that's only standard in C99, not C++, so we have to do; // annoying pointer arithmetic instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:24,flexible,flexible,24,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['flexible'],['flexible']
Modifiability,// In error-recovery cases it's possible to get here even if we failed to; // synthesize the __begin and __end variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:111,variab,variables,111,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,"// In general, sign- and zero-extends can't be split and still; // be legal. The only exception is extending bool vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:30,extend,extends,30,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,2,['extend'],"['extending', 'extends']"
Modifiability,"// In most cases, we walk from the beginning to the end of the block. But; // when the block is the same block as the copy is from, we will visit it; // twice. The first time we start from the copy and go to the end. The; // second time we start from the beginning and go to the copy. This lets; // us handle copies inside of cycles.; // FIXME: This loop is *super* confusing. This is at least in part; // a symptom of all of this routine needing to be refactored into; // documentable components. Once done, there may be a better way to write; // this loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:453,refactor,refactored,453,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['refactor'],['refactored']
Modifiability,"// In non-aggressive mode, only warn on use-after-move of local variables; // (or local rvalue references) and of STL objects. The former is possible; // because local variables (or local rvalue references) are not tempting; // their user to re-use the storage. The latter is possible because STL; // objects are known to end up in a valid but unspecified state after the; // move and their state-reset methods are also known, which allows us to; // predict precisely when use-after-move is invalid.; // Some STL objects are known to conform to additional contracts after move,; // so they are not tracked. However, smart pointers specifically are tracked; // because we can perform extra checking over them.; // In aggressive mode, warn on any use-after-move because the user has; // intentionally asked us to completely eliminate use-after-move; // in his code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp:64,variab,variables,64,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,2,['variab'],['variables']
Modifiability,"// In order to have valid types, all of the inputs must be extended from the; // same source type and all of the inputs must be any or zero extend.; // Scalar sizes must be a power of two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,extend,extended,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// In order to represent the five basic components of an URI,; // we use 7 member variables (authority gets split in 3 parts); //; // foo://user:pass@example.com:8042/over/there?name=ferret#nose; // \_/ \________________________/\_________/ \_________/ \__/; // | | | | |; // scheme authority path query fragment; //; // In many cases we have to distinguish between empty; // TString and undefined value (i.e. delimiter not found).; // Therefore, we use a TString to hold the string value; // and a corresponding Bool_t to store if it is defined or not.; // The Bool_t has precedence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h:82,variab,variables,82,core/base/inc/TUri.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUri.h,1,['variab'],['variables']
Modifiability,"// In order to support pc-relative addressing, SI_PC_ADD_REL_OFFSET is lowered; // to the following code sequence:; //; // For constant address space:; // s_getpc_b64 s[0:1]; // s_add_u32 s0, s0, $symbol; // s_addc_u32 s1, s1, 0; //; // s_getpc_b64 returns the address of the s_add_u32 instruction and then; // a fixup or relocation is emitted to replace $symbol with a literal; // constant, which is a pc-relative offset from the encoding of the $symbol; // operand to the global variable.; //; // For global address space:; // s_getpc_b64 s[0:1]; // s_add_u32 s0, s0, $symbol@{gotpc}rel32@lo; // s_addc_u32 s1, s1, $symbol@{gotpc}rel32@hi; //; // s_getpc_b64 returns the address of the s_add_u32 instruction and then; // fixups or relocations are emitted to replace $symbol@*@lo and; // $symbol@*@hi with lower 32 bits and higher 32 bits of a literal constant,; // which is a 64-bit pc-relative offset from the encoding of the $symbol; // operand to the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:481,variab,variable,481,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,2,['variab'],['variable']
Modifiability,"// In order to support pc-relative addressing, the PC_ADD_REL_OFFSET SDNode is; // lowered to the following code sequence:; //; // For constant address space:; // s_getpc_b64 s[0:1]; // s_add_u32 s0, s0, $symbol; // s_addc_u32 s1, s1, 0; //; // s_getpc_b64 returns the address of the s_add_u32 instruction and then; // a fixup or relocation is emitted to replace $symbol with a literal; // constant, which is a pc-relative offset from the encoding of the $symbol; // operand to the global variable.; //; // For global address space:; // s_getpc_b64 s[0:1]; // s_add_u32 s0, s0, $symbol@{gotpc}rel32@lo; // s_addc_u32 s1, s1, $symbol@{gotpc}rel32@hi; //; // s_getpc_b64 returns the address of the s_add_u32 instruction and then; // fixups or relocations are emitted to replace $symbol@*@lo and; // $symbol@*@hi with lower 32 bits and higher 32 bits of a literal constant,; // which is a 64-bit pc-relative offset from the encoding of the $symbol; // operand to the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:489,variab,variable,489,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// In pass 1, unconditionally assign a new parameter variable to every; // value we're asked to process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:53,variab,variable,53,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,"// In pass 2, consult the map provided by the caller to find out which; // variable we should be keeping things in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:75,variab,variable,75,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,// In practice it's not currently possible to have a change in lane; // length for extending loads or truncating stores so both types should; // have the same scalable property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:83,extend,extending,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['extend'],['extending']
Modifiability,"// In principle, this information should be passed to us from Clang via; // an elementtype attribute. However, said attribute requires that; // the function call be an intrinsic, which is not. Instead, we rely on being; // able to trace this to the declaration of a variable: OpenCL C specification; // section 6.12.5 should guarantee that we can do this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:266,variab,variable,266,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['variab'],['variable']
Modifiability,"// In reference_impl.rs, we merge the new CV with existing CVs from the stack; // before pushing it. We can do that because we know more input is coming, so; // we know none of the merges are root.; //; // This setting is different. We want to feed as much input as possible to; // compress_subtree_wide(), without setting aside anything for the chunk_state.; // If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once; // as a single subtree, if at all possible.; //; // This leads to two problems:; // 1) This 64 KiB input might be the only call that ever gets made to update.; // In this case, the root node of the 64 KiB subtree would be the root node; // of the whole tree, and it would need to be ROOT finalized. We can't; // compress it until we know.; // 2) This 64 KiB input might complete a larger tree, whose root node is; // similarly going to be the the root of the whole tree. For example, maybe; // we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the; // node at the root of the 256 KiB subtree until we know how to finalize it.; //; // The second problem is solved with ""lazy merging"". That is, when we're about; // to add a CV to the stack, we don't merge it with anything first, as the; // reference impl does. Instead we do merges using the *previous* CV that was; // added, which is sitting on top of the stack, and we put the new CV; // (unmerged) on top of the stack afterwards. This guarantees that we never; // merge the root node until finalize().; //; // Solving the first problem requires an additional tool,; // compress_subtree_to_parent_node(). That function always returns the top; // *two* chaining values of the subtree it's compressing. We then do lazy; // merging with each of them separately, so that the second CV will always; // remain unmerged. (That also helps us support extendable output when we're; // hashing an input all-at-once.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:1853,extend,extendable,1853,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['extend'],['extendable']
Modifiability,"// In some cases the shift/extend needs to be explicitly parsed together; // with the register, rather than as a separate operand. This is needed; // for addressing modes where the instruction as a whole dictates the; // scaling/extend, rather than specific bits in the instruction.; // By parsing them as a single operand, we avoid the need to pass an; // extra operand in all CodeGen patterns (because all operands need to; // have an associated value), and we avoid the need to update TableGen to; // accept operands that have no associated bits in the instruction.; //; // An added benefit of parsing them together is that the assembler; // can give a sensible diagnostic if the scaling is not correct.; //; // The default is 'lsl #0' (HasExplicitAmount = false) if no; // ShiftExtend is specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:27,extend,extend,27,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,2,['extend'],['extend']
Modifiability,"// In some cases, a variable may not have been marked unevaluated, if it; // appears in a defaukt initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// In the (few) cases where an expression is intentionally; // ""uninterpreted"", `InitExpr` is not associated with a value. There are; // two ways to handle this situation: propagate the status, so that; // uninterpreted initializers result in uninterpreted variables, or; // provide a default value. We choose the latter so that later refinements; // of the variable can be used for reasoning about the surrounding code.; // For this reason, we let this case be handled by the `createValue()`; // call below.; //; // FIXME. If and when we interpret all language cases, change this to; // assert that `InitExpr` is interpreted, rather than supplying a; // default value (assuming we don't update the environment API to return; // references).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:257,variab,variables,257,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// In the IR, TFE is supposed to be used with a 2 element struct return; // type. The instruction really returns these two values in one contiguous; // register, with one additional dword beyond the loaded data. Rewrite the; // return type to use a single register result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:212,Rewrite,Rewrite,212,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// In the ROPI and RWPI relocation models we can't have pointers to global; // variables or functions in constant data, so don't convert switches to; // lookup tables if any of the values would need relocation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.h:79,variab,variables,79,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.h,1,['variab'],['variables']
Modifiability,// In the case if a malformed Mach-O file where the section offset is past; // the end of the file or some part of the section size is past the end of; // the file return a size of zero or a size that covers the rest of the file; // but does not extend past the end of the file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:246,extend,extend,246,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,1,['extend'],['extend']
Modifiability,"// In the case of ObjCForCollectionStmt, it appears twice in a CFG:; //; // (1) inside a basic block, which represents the binding of the; // 'element' variable to a value.; // (2) in a terminator, which represents the branch.; //; // For (1), ExprEngine will bind a value (i.e., 0 or 1) indicating; // whether or not collection contains any more elements. We cannot; // just test to see if the element is nil because a container can; // contain nil elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp:152,variab,variable,152,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,1,['variab'],['variable']
Modifiability,"// In the case of namespace, even if we have loaded before we need to; // load again in case there was new data member added.; // Mark the list as loaded to avoid an infinite recursion in the case; // where we have a data member that is a variable size array. In that; // case TDataMember::Init needs to get/load the list to find the data; // member used as the array size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfDataMembers.cxx:239,variab,variable,239,core/meta/src/TListOfDataMembers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfDataMembers.cxx,2,['variab'],['variable']
Modifiability,"// In the cases where we are behind (i.e. right of) a potential boolean optimization; // this tree variable reading may have not been executed with instance==0 which would; // result in the branch being potentially not read in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:99,variab,variable,99,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// In the kernel code model, globals are in the negative 2GB of the address; // space, so globals can be a sign extended 32-bit immediate.; // In other code models, small globals are in the low 2GB of the address; // space, so sign extending them is equivalent to zero extending them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:112,extend,extended,112,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,3,['extend'],"['extended', 'extending']"
Modifiability,"// In the kernel function, kernel arguments won't alias to (local); // variables in shared or private address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp:71,variab,variables,71,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// In the module inliner, a priority-based worklist is used for calls across; // the entire Module. With this module inliner, the inline order is not; // limited to bottom-up order. More globally scope inline order is enabled.; // Also, the inline deferral logic become unnecessary in this module inliner.; // It is possible to use other priority heuristics, e.g. profile-based; // heuristic.; //; // TODO: Here is a huge amount duplicate code between the module inliner and; // the SCC inliner, which need some refactoring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp:512,refactor,refactoring,512,interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,1,['refactor'],['refactoring']
Modifiability,"// In the past, the plot variable was cloned, but there was no apparent reason for doing so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:25,variab,variable,25,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,3,['variab'],['variable']
Modifiability,"// In the presence of variable sized objects or funclets, if the fixed stack; // size is large enough that referencing from the FP won't result in things; // being in range relatively often, we can use a base pointer to allow access; // from the other direction like the SP normally works.; //; // Furthermore, if both variable sized objects are present, and the; // stack needs to be dynamically re-aligned, the base pointer is the only; // reliable way to reference the locals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,2,['variab'],['variable']
Modifiability,"// In the remaining five permutations, we don't know the value of the sign; // bit for at least one Op. Since we have a valid ByteProvider, we know that; // the upper bits must be extension bits. Thus, the only ways for the sign; // bit to be unknown is if it was sign extended from unknown value, or if it; // was any extended. In either case, it is correct to use the signed; // version of the signedness semantics of dot4; // In two of such permutations, we known the sign bit is set for; // one op, and the other is unknown. It is okay to used signed version of; // dot4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:269,extend,extended,269,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// In the sign extend padding case, re-use the first all-signbit merge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// In the unspecified inheritance model, there might not be a vbtable at all,; // in which case we need to skip the virtual base lookup. If there is a; // vbtable, the first entry is a no-op entry that gives back the original; // base, so look for a virtual base adjustment offset of zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,inherit,inheritance,22,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// In the worst case, for a full 64-bit constant, a sequence of 8 instructions; // (i.e., LUI+ADDIW+SLLI+ADDI+SLLI+ADDI+SLLI+ADDI) has to be emitted. Note; // that the first two instructions (LUI+ADDIW) can contribute up to 32 bits; // while the following ADDI instructions contribute up to 12 bits each.; //; // On the first glance, implementing this seems to be possible by simply; // emitting the most significant 32 bits (LUI+ADDIW) followed by as many left; // shift (SLLI) and immediate additions (ADDI) as needed. However, due to the; // fact that ADDI performs a sign extended addition, doing it like that would; // only be possible when at most 11 bits of the ADDI instructions are used.; // Using all 12 bits of the ADDI instructions, like done by GAS, actually; // requires that the constant is processed starting with the least significant; // bit.; //; // In the following, constants are processed from LSB to MSB but instruction; // emission is performed from MSB to LSB by recursively calling; // generateInstSeq. In each recursion, first the lowest 12 bits are removed; // from the constant and the optimal shift amount, which can be greater than; // 12 bits if the constant is sparse, is determined. Then, the shifted; // remaining constant is processed recursively and gets emitted as soon as it; // fits into 32 bits. The emission of the shifts and additions is subsequently; // performed when the recursion returns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp:576,extend,extended,576,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMatInt.cpp,1,['extend'],['extended']
Modifiability,"// In theory we should call migrateDebugInfo here. However, we do not; // emit dbg.assign intrinsics for mem intrinsics storing through non-; // constant geps, or storing a variable number of bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:173,variab,variable,173,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// In theory, the only symbols of interest are the global variables. These; // are the only ones that need to be queried because the address of common; // data won't be described in the debug map. All other addresses should be; // fetched for the debug map. In reality, by playing with 'ld -r' and; // export lists, you can get symbols described as N_GSYM in the debug map,; // but associated with a local symbol. Gather all the symbols, but prefer; // the global ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp:58,variab,variables,58,interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,1,['variab'],['variables']
Modifiability,"// In theory, we can modify the function's LV by the LV of its; // type unless it has C linkage (see comment above about variables; // for justification). In practice, GCC doesn't do this, so it's; // just too painful to make work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:121,variab,variables,121,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variables']
Modifiability,"// In this analysis two array references are considered to exhibit temporal; // reuse if they access either the same memory location, or a memory location; // with distance smaller than a configurable threshold.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:188,config,configurable,188,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['config'],['configurable']
Modifiability,"// In this case the node with a higher priority namespace did not have a; // default namespace definition, but the lower priority node did. In this; // case the new default namespace definition is copied. A side effect of; // this is that all children will suddenly find themselves in a different; // default namespace. To maintain correctness we need to ensure that all; // children now explicitly refer to the namespace that they had previously; // implicitly inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:462,inherit,inherited,462,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,1,['inherit'],['inherited']
Modifiability,"// In this instruction, LoOperand is const extended, if required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// In this pass we look for GEP and cast instructions that are used; // across basic blocks and rewrite them to improve basic-block-at-a-time; // selection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:96,rewrite,rewrite,96,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['rewrite'],['rewrite']
Modifiability,// Include the build time variables we can report to the user. This is generated; // at build time from the BuildVariables.inc.in file by the build system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp:26,variab,variables,26,interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,1,['variab'],['variables']
Modifiability,// Include the parts of the LTO configuration that affect code generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:32,config,configuration,32,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['config'],['configuration']
Modifiability,"// Incomplete array types (flexible array members?) don't provide; // data to lay out, and the other cases shouldn't be possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:27,flexible,flexible,27,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,1,['flexible'],['flexible']
Modifiability,"// Incomplete array types indicate flexible array members. Do not allow; // paren list initializations of structs with these members, as GCC; // doesn't either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:35,flexible,flexible,35,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,"// Incomplete array types may be completed by the initializer attached to; // their definitions. For static data members of class templates and for; // variable templates, we need to instantiate the definition to get this; // initializer and complete the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:152,variab,variable,152,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,"// Increase to enhance accuracy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:15,enhance,enhance,15,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['enhance'],['enhance']
Modifiability,"// Increments for worksharing loops (LB = LB + ST; UB = UB + ST).; // Used for directives with static scheduling.; // In combined construct, add combined version that use CombLB and CombUB; // base variables for the update",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:198,variab,variables,198,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// IndVar is of the form ""A + B * I"" (where ""I"" is the canonical induction; // variable, that may or may not exist as a real llvm::Value in the loop) and; // this inductive range check is a range check on the ""C + D * I"" (""C"" is; // getBegin() and ""D"" is getStep()). We rewrite the value being range; // checked to ""M + N * IndVar"" where ""N"" = ""D * B^(-1)"" and ""M"" = ""C - NA"".; //; // The actual inequalities we solve are of the form; //; // 0 <= M + 1 * IndVar < L given L >= 0 (i.e. N == 1); //; // Here L stands for upper limit of the safe iteration space.; // The inequality is satisfied by (0 - M) <= IndVar < (L - M). To avoid; // overflows when calculating (0 - M) and (L - M) we, depending on type of; // IV's iteration space, limit the calculations by borders of the iteration; // space. For example, if IndVar is unsigned, (0 - M) overflows for any M > 0.; // If we figured out that ""anything greater than (-M) is safe"", we strengthen; // this to ""everything greater than 0 is safe"", assuming that values between; // -M and 0 just do not exist in unsigned iteration space, and we don't want; // to deal with overflown values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:79,variab,variable,79,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"// Indent to the first live-range column to the right of the currently; // printed line, and return the index of that column.; // TODO: formatted_raw_ostream uses ""column"" to mean a number of characters; // since the last \n, and we use it to mean the number of slots in which we; // put live variable lines. Pick a less overloaded word.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:293,variab,variable,293,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,2,['variab'],['variable']
Modifiability,"// Index and thus local size provided by a ""index variable of size 1""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:50,variab,variable,50,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,// Index can be a vector register while X2 is used to extend GPR only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['extend'],['extend']
Modifiability,"// Index is calculated via a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:29,variab,variable,29,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// Index of sample j of variable i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,variab,variable,24,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// Index of sample j of variable i; // l = j * fNVariables + k; // G.Q.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:24,variab,variable,24,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// Index of the first element of the vector.; // PTX Interoperability Guide 3.3(A): [Integer] Values shorter than; // 32-bits are sign extended or zero extended, depending on whether; // they are signed or unsigned types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:135,extend,extended,135,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// Index variable, derived from another index using pattern-matching based mapping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:9,variab,variable,9,roofit/roofitcore/inc/RooMappedCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h,1,['variab'],['variable']
Modifiability,"// Indexed by #Iter. To treat ""local"" variables of each stage separately, we; // manage the liveness of the registers independently by iterations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:38,variab,variables,38,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['variab'],['variables']
Modifiability,"// Indicate whether __nvvm_reflect should be configured to flush denormal; // floating point values to 0. (This corresponds to its ""__CUDA_FTZ""; // property.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,config,configured,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['config'],['configured']
Modifiability,"// Indicate whether this class supports gradient calculations, i.e.,; // if it inherits from ROOT::Math::IGradientFunctionMultiDim.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h:79,inherit,inherits,79,math/mathcore/inc/Math/IFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h,1,['inherit'],['inherits']
Modifiability,"// Indicate whether this class supports gradient calculations, i.e.,; // if it inherits from ROOT::Math::IGradientFunctionOneDim.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h:79,inherit,inherits,79,math/mathcore/inc/Math/IFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h,1,['inherit'],['inherits']
Modifiability,"// Indicates that the result can be considered sign extended from bit 31. Some; // instructions with this flag aren't W instructions, but are either sign; // extended from a smaller size, always outputs a small integer, or put zeros; // in bits 63:31. Used by the SExtWRemoval pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h:52,extend,extended,52,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h,2,['extend'],['extended']
Modifiability,"// Indicates that value is a compile-time constant. Global variable; // can be 'Constant' while not being 'ReadOnly' on several occasions:; // - it is volatile, (e.g mapped device address); // - its address is taken, meaning that unlike 'ReadOnly' vars we can't; // internalize it.; // Constant variables are always imported thus giving compiler an; // opportunity to make some extra optimizations. Readonly constants; // are also internalized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:59,variab,variable,59,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,2,['variab'],"['variable', 'variables']"
Modifiability,"// Indicates what type is the blocking variable in the step length determination. If kt_block,; // then the blocking variable is one of the slack variables t for a general lower bound,; // and so on. Special value kno_block is for the case in which a step length of 1 can be; // taken without hitting the bound.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:39,variab,variable,39,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,3,['variab'],"['variable', 'variables']"
Modifiability,"// Indicates, if the following variables have been initialized properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:31,variab,variables,31,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['variab'],['variables']
Modifiability,// Indirect fields from global anonymous structs and unions can be; // ignored; only the actual variable requires IR gen support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:96,variab,variable,96,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"// Inform the Rewriter if we have a post-increment use, so that it can; // perform an advantageous expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:14,Rewrite,Rewriter,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Rewrite'],['Rewriter']
Modifiability,// Information we want to track about one column in which we are printing a; // variable live range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:80,variab,variable,80,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,1,['variab'],['variable']
Modifiability,// Informations about how this configuration was built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h:31,config,configuration,31,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkCode.h,1,['config'],['configuration']
Modifiability,// Inherit access appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Inherit'],['Inherit']
Modifiability,"// Inherit all of the target dependent attributes and white-listed; // target independent attributes.; // (e.g. If the extracted region contains a call to an x86.sse; // instruction we need to make sure that the extracted region has the; // ""target-features"" attribute allowing it to be lowered.; // FIXME: This should be changed to check to see if a specific; // attribute can not be inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,2,"['Inherit', 'inherit']","['Inherit', 'inherited']"
Modifiability,// Inherit any content cache data from the old source manager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['Inherit'],['Inherit']
Modifiability,// Inherit constructors from ParentT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,1,['Inherit'],['Inherit']
Modifiability,// Inherit everything from RoundingMode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h,1,['Inherit'],['Inherit']
Modifiability,// Inherit live-ins from the successor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp,2,['Inherit'],['Inherit']
Modifiability,// Inherit predecessors name if it exists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['Inherit'],['Inherit']
Modifiability,// Inherit previous memory operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['Inherit'],['Inherit']
Modifiability,// Inherit register units from subregisters.; // Return true if the RegUnits changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,2,['Inherit'],['Inherit']
Modifiability,// Inherit the CC from the previous declaration if it was specified; // there but not here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Inherit'],['Inherit']
Modifiability,// Inherit the target data from the source module if the destination module; // doesn't have one already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:3,Inherit,Inherit,3,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['Inherit'],['Inherit']
Modifiability,"// Inheritance :; // TAttLine :",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:3,Inherit,Inheritance,3,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,1,['Inherit'],['Inheritance']
Modifiability,// Inherited constructors are always base class constructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:3,Inherit,Inherited,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['Inherit'],['Inherited']
Modifiability,// Inherited from sibling base classes: still ambiguous.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:3,Inherit,Inherited,3,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['Inherit'],['Inherited']
Modifiability,// Inherited via WritableBinaryStream,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp:3,Inherit,Inherited,3,interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp,1,['Inherit'],['Inherited']
Modifiability,"// Inhibit unroll for local memory if we have seen addressing not to; // a variable, most likely we will be unable to combine it.; // Do not unroll too deep inner loops for local memory to give a chance; // to unroll an outer loop for a more important reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,1,['variab'],['variable']
Modifiability,"// Init 'args' to the beginning of; // the variable length list of args",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:43,variab,variable,43,math/matrix/src/TVectorT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx,1,['variab'],['variable']
Modifiability,"// Init should be null. If it were non-null, then the logic above would; // either be defining the function to be an alias or declaring the; // function with the expectation that the definition of the variable; // is elsewhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:201,variab,variable,201,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// Init the sender instance using the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSenderSQL.cxx:38,plugin,plugin,38,proof/proofplayer/src/TProofMonSenderSQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSenderSQL.cxx,1,['plugin'],['plugin']
Modifiability,"// Initial plot range and number of bins from dependent variable; // setPlotRange(variable.getPlotMin()*_slope + _offset,; // variable.getPlotMax()*_slope + _offset) ;; // setPlotBins(variable.getPlotBins()) ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx:56,variab,variable,56,roofit/roofitcore/src/RooLinearVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx,4,['variab'],['variable']
Modifiability,// Initialise the variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,1,['variab'],['variables']
Modifiability,// Initialize DWARF register mapping variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:37,variab,variables,37,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['variab'],['variables']
Modifiability,"// Initialize RegUnitList. Because getSubRegs is called recursively, this; // processes the register hierarchy in postorder.; //; // Inherit all sub-register units. It is good enough to look at the explicit; // sub-registers, the other registers won't contribute any more units.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:133,Inherit,Inherit,133,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['Inherit'],['Inherit']
Modifiability,"// Initialize RooDataSet with optional weight variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:46,variab,variable,46,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,2,['variab'],['variable']
Modifiability,"// Initialize a RColumnRange for `physicalId` if it was not there. Columns that were created during model; // extension won't have on-disk metadata for the clusters that were already committed before the model; // was extended. Therefore, these need to be synthetically initialized upon reading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx:218,extend,extended,218,tree/ntuple/v7/src/RNTupleDescriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx,1,['extend'],['extended']
Modifiability,// Initialize all variables as unassigned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:18,variab,variables,18,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,// Initialize class variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp,10,['variab'],['variables']
Modifiability,// Initialize condition variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,1,['variab'],['variable']
Modifiability,"// Initialize fraction threshold array (used only in extended mode)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimGenContext.cxx:53,extend,extended,53,roofit/roofitcore/src/RooSimGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimGenContext.cxx,2,['extend'],['extended']
Modifiability,// Initialize local variable inline descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Initialize local variables perparing for recursive loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:20,variab,variables,20,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variables']
Modifiability,"// Initialize some variables used in the parsing. The using logic is at the; // end.; // For backward compatibility:; // The default value of ConstructorInitializerAllOnOneLineOrOnePerLine was; // false unless BasedOnStyle was Google or Chromium whereas that of; // AllowAllConstructorInitializersOnNextLine was always true, so the; // equivalent default value of PackConstructorInitializers is PCIS_NextLine; // for Google/Chromium or PCIS_BinPack otherwise. If the deprecated options; // had a non-default value while PackConstructorInitializers has a default; // value, set the latter to an equivalent non-default value if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:19,variab,variables,19,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['variab'],['variables']
Modifiability,// Initialize the __range variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,// Initialize the active variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:25,variab,variables,25,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,// Initialize the catch variable and set up the cleanups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['variab'],['variable']
Modifiability,// Initialize the catch variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,// Initialize the configured targets if they have not been initialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:18,config,configured,18,interpreter/llvm-project/llvm/tools/lto/lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp,1,['config'],['configured']
Modifiability,// Initialize the configured targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:18,config,configured,18,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['config'],['configured']
Modifiability,// Initialize the counter variable for the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,// Initialize the element variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"// Initialize the exception result. This implicitly weeds out; // abstract types or types with inaccessible copy constructors.; // C++0x [class.copymove]p31:; // When certain criteria are met, an implementation is allowed to omit the; // copy/move construction of a class object [...]; //; // - in a throw-expression, when the operand is the name of a; // non-volatile automatic object (other than a function or; // catch-clause; // parameter) whose scope does not extend beyond the end of the; // innermost enclosing try-block (if there is one), the copy/move; // operation from the operand to the exception object (15.1) can be; // omitted by constructing the automatic object directly into the; // exception object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:465,extend,extend,465,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['extend'],['extend']
Modifiability,// Initialize the iteration variable to zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,// Initialize the local variable appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['variab'],['variable']
Modifiability,// Initialize the per-variable state to refer to the possible choices for; // that variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,2,['variab'],['variable']
Modifiability,// Initialize the structure of a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,// Initialize the variable here if it doesn't have a initializer and it is a; // C struct that is non-trivial to initialize or an array containing such a; // struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// Initialize the variable, in case it's a __block variable or something.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,2,['variab'],['variable']
Modifiability,"// Initialize the variables related to training procedure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:18,variab,variables,18,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['variab'],['variables']
Modifiability,// Initialize variable-length arrays.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:14,variab,variable-length,14,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable-length']
Modifiability,"// Initializers are instantiated like expressions, except that various outer; // layers are stripped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:81,layers,layers,81,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['layers'],['layers']
Modifiability,// Initializers are unimplemented for LDS address space.; // Leave such variables in place for consistent error reporting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp:72,variab,variables,72,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp,1,['variab'],['variables']
Modifiability,// Initializes the selected subcommand and refactoring rule based on the; // command line options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:43,refactor,refactoring,43,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,"// Initializing loop variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:21,variab,variables,21,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,4,['variab'],['variables']
Modifiability,// Inline Asm: Variable size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp:15,Variab,Variable,15,interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp,1,['Variab'],['Variable']
Modifiability,// Inline assembly may use variable names with namespace alias qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['variab'],['variable']
Modifiability,// Inline variables that weren't instantiated from variable templates have; // partially-ordered initialization within their translation unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Input type must be extending a bool vector (bit-casted from a scalar; // integer) to legal integer types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:22,extend,extending,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Insert PHIs into the per-block live-in tables for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Insert VAARG node into the DAG; // VAARG returns two values: Variable Argument Address, Chain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:64,Variab,Variable,64,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Insert a branch based on __THREW__ variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variable']
Modifiability,// Insert a dbg.value where the linked dbg.assign is and remember to delete; // the dbg.assign later. Demoting to dbg.value isn't necessary for; // correctness but does reduce compile time and memory usage by reducing; // unnecessary function-local metadata. Remember that we've seen a; // dbg.assign for each variable fragment for the untracked store handling; // (after this loop).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:310,variab,variable,310,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['variab'],['variable']
Modifiability,// Insert new integer induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['variab'],['variable']
Modifiability,// Insert new loop counter variable which will be used only in loop; // body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variable']
Modifiability,// Insert new variable value; or overwrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Insert selects and rewrite the PHI operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:22,rewrite,rewrite,22,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['rewrite'],['rewrite']
Modifiability,// Insert the KILL in the return blocks to extend their liveness untill the; // end of function. Insert a separate KILL for each VGPR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp:43,extend,extend,43,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,1,['extend'],['extend']
Modifiability,// Insert the forced scalars.; // FIXME: Currently VPWidenPHIRecipe() often creates a dead vector; // induction variable when the PHI user is scalarized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:112,variab,variable,112,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,// Insert the new induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,// Insertation was successful -- CmdLineOption's constructor will validate; // whether values received from plugins or TableGen files are correct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:108,plugin,plugins,108,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['plugin'],['plugins']
Modifiability,// Insns must be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:17,extend,extended,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['extend'],['extended']
Modifiability,"// Inspect the initializer of the variable declaration which is; // being referenced prior to its initialization. We emit; // specialized diagnostics for self-initialization, and we; // specifically avoid warning about self references which take the; // form of:; //; // int x = x;; //; // This is used to indicate to GCC that 'x' is intentionally left; // uninitialized. Proven code paths which access 'x' in; // an uninitialized state after this will still warn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variable']
Modifiability,"// Instance variables filled by tablegen, do not use!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:12,variab,variables,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['variab'],['variables']
Modifiability,"// Instantiate a coefficient variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:29,variab,variables,29,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,1,['variab'],['variables']
Modifiability,// Instantiate any out-of-line variable template partial; // specializations now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['variab'],['variable']
Modifiability,// Instantiate static data member definitions or variable template; // specializations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Instantiate static data member or variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// Instantiate the first declaration of the variable template: for a partial; // specialization of a static data member template, the first declaration may; // or may not be the declaration in the class; if it's in the class, we want; // to instantiate a member in the class (a declaration), and if it's outside,; // we want to instantiate a definition.; //; // If we're instantiating an explicitly-specialized member template or member; // partial specialization, don't do this. The member specialization completely; // replaces the original declaration in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Instantiate the mapper variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Instantiate using the best variable template partial specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,// Instantiate variable definitions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"// Instantiate weight variable here such that we can pass it to StoreError()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:22,variab,variable,22,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,// Instantiating from a variable template (or partial specialization) to; // produce a variable template specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,2,['variab'],['variable']
Modifiability,"// Instead of an extend, we might have a vector type which needs; // padding with more elements, e.g. <2 x half> -> <4 x half>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extend']
Modifiability,"// Instead of creating global variables, the printf format strings are; // extracted and passed as metadata. This avoids polluting llvm's symbol; // tables in this module. Metadata is going to be extracted by the backend; // passes and inserted into the OpenCL binary as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp,1,['variab'],['variables']
Modifiability,"// Instead of explictly marking kernels that access dynamic variables; // using special case metadata, annotate with min-lds == max-lds, i.e.; // that there is no more space available for allocating more static; // LDS variables. That is the right condition to prevent allocating; // more variables which would collide with the addresses assigned to; // dynamic variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:60,variab,variables,60,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,4,['variab'],['variables']
Modifiability,"// Instead of plugins:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx:14,plugin,plugins,14,io/rootpcm/src/rootclingIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx,1,['plugin'],['plugins']
Modifiability,"// Instead of the standard SSA renaming algorithm, which is O(Number of; // instructions), and walks the entire dominator tree, we walk only the defs +; // uses. The standard SSA renaming algorithm does not really rely on the; // dominator tree except to order the stack push/pops of the renaming stacks, so; // that defs end up getting pushed before hitting the correct uses. This does; // not require the dominator tree, only the *order* of the dominator tree. The; // complete and correct ordering of the defs and uses, in dominator tree is; // contained in the DFS numbering of the dominator tree. So we sort the defs and; // uses into the DFS ordering, and then just use the renaming stack as per; // normal, pushing when we hit a def (which is a predicateinfo instruction),; // popping when we are out of the dfs scope for that def, and replacing any uses; // with top of stack if it exists. In order to handle liveness without; // propagating liveness info, we don't actually insert the predicateinfo; // instruction def until we see a use that it would dominate. Once we see such; // a use, we materialize the predicateinfo instruction in the right place and; // use it.; //; // TODO: Use this algorithm to perform fast single-variable renaming in; // promotememtoreg and memoryssa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp:1235,variab,variable,1235,interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,1,['variab'],['variable']
Modifiability,// Instruction must be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// Instruction must have a memory operand that's a stack slot, and isn't; // aliased, meaning it's a spill from regalloc instead of a variable.; // If it's aliased, we can't guarantee its value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:134,variab,variable,134,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,// Instruction range should start with a DBG_VALUE instruction for the; // variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,// Instruction that advances induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:39,variab,variable,39,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['variab'],['variable']
Modifiability,// Instructions return zero or operand 1. Result is sign extended if; // operand 1 is sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:57,extend,extended,57,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,2,['extend'],['extended']
Modifiability,// Instructions that are constant-extended may be replaced with something; // else that no longer offers the same range as the original.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extended']
Modifiability,"// Instructions used for type-casts of the induction variable,; // that are redundant when guarded with a runtime SCEV overflow check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:53,variab,variable,53,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['variab'],['variable']
Modifiability,"// Instrumenting some of the accesses may be proven redundant.; // Currently handled:; // - read-before-write (within same BB, no calls between); // - not captured variables; //; // We do not handle some of the patterns that should not survive; // after the classic compiler optimizations.; // E.g. two reads from the same temp should be eliminated by CSE,; // two writes should be eliminated by DSE, etc.; //; // 'Local' is a vector of insns within the same BB (no calls between).; // 'All' is a vector of insns that will be instrumented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:164,variab,variables,164,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,1,['variab'],['variables']
Modifiability,// Integer return values must be sign or zero extended by the callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:46,extend,extended,46,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,2,['extend'],['extended']
Modifiability,// Integer sign-extend modifier,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['extend'],['extend']
Modifiability,// Integer types smaller than a register are extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:45,extend,extended,45,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,1,['extend'],['extended']
Modifiability,// Integers and enums are extended to full register width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:26,extend,extended,26,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,1,['extend'],['extended']
Modifiability,// Integers which fit in intptr_t are zero-extended and passed directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:43,extend,extended,43,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['extend'],['extended']
Modifiability,// Intercept LDS variables with known addresses,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp:17,variab,variables,17,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,1,['variab'],['variables']
Modifiability,// Interface inherited from base classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:13,inherit,inherited,13,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,1,['inherit'],['inherited']
Modifiability,"// Internal helper RooAbsFunc that evaluates the scaled data-weighted average of; // given RooAbsReal as a function of a single variable using the RooFit::Evaluator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:128,variab,variable,128,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,// Internal variable names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Internal variable to pass drawing options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h:12,variab,variable,12,proof/proof/inc/TProofLite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h,2,['variab'],['variable']
Modifiability,// Interop variable should be of type omp_interop_t.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Interpret inlined stores to caller-local variables as assignments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:44,variab,variables,44,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['variab'],['variables']
Modifiability,"// Interpret stack stores that are not tagged as an assignment in memory for; // the variables associated with that address. These stores may not be tagged; // because a) the store cannot be represented using dbg.assigns (non-const; // length or offset) or b) the tag was accidentally dropped during; // optimisations. For these stores we fall back to assuming that the stack; // home is a valid location for the variables. The benefit is that this; // prevents us missing an assignment and therefore incorrectly maintaining; // earlier location definitions, and in many cases it should be a reasonable; // assumption. However, this will occasionally lead to slight; // inaccuracies. The value of a hoisted untagged store will be visible; // ""early"", for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:85,variab,variables,85,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variables']
Modifiability,// Intersect the variable slice with AssignRecord's fragment to trim it down; // to size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variable']
Modifiability,"// Introduce a new scope where local variable instantiations will be; // recorded, unless we're actually a member function within a local; // class, in which case we need to merge our results with the parent; // scope (of the enclosing function). The exception is instantiating; // a function template specialization, since the template to be; // instantiated already has references to locals properly substituted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Invalidate constant-evolved loop header phis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:23,evolve,evolved,23,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['evolve'],['evolved']
Modifiability,"// Invalidate designated regions using the batch invalidation API.; // NOTE: Even if RegionsToInvalidate is empty, we may still invalidate; // global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:150,variab,variables,150,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['variab'],['variables']
Modifiability,"// Irrespective of whether we are compiling for a fragile or non-fragile ABI,; // we emit a symbol containing the offset for each ivar in the class. This; // allows code compiled for the non-Fragile ABI to inherit from code compiled; // for the legacy ABI, without causing problems. The converse is also; // possible, but causes all ivar accesses to be fragile.; // Offset pointer for getting at the correct field in the ivar list when; // setting up the alias. These are: The base address for the global, the; // ivar array (second field), the ivar in this list (set for each ivar), and; // the offset (third field in ivar structure)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:206,inherit,inherit,206,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['inherit'],['inherit']
Modifiability,"// Is it DIRECT inheritance from TObject?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:16,inherit,inheritance,16,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['inherit'],['inheritance']
Modifiability,"// Is it a global variable?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:18,variab,variable,18,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['variab'],['variable']
Modifiability,// Is it profitable to sink if we found two of the same type of extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:64,extend,extends,64,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// Is the actual sub-branch a collection (inherit from parent branch); // Get data type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:42,inherit,inherit,42,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['inherit'],['inherit']
Modifiability,// Is the induction variable bump feeding the latch condition?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variable']
Modifiability,// Is the store non-extending and non-indexed?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:20,extend,extending,20,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,2,['extend'],['extending']
Modifiability,// Is the stored value a non-extending and non-indexed load?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:29,extend,extending,29,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,2,['extend'],['extending']
Modifiability,// Is the value assigned to this variable still the entry value?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Is the value extended to reach this copy? If not, another def may be; // blocking it, or we are looking at a wrong value of LI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['extend'],['extended']
Modifiability,"// Is the variable appropriate for entry values (i.e., is a parameter).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Is the variable dividend magnitude always less than the constant; // divisor magnitude?; // |X| < |C| --> X > -abs(C) and X < abs(C),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['variab'],['variable']
Modifiability,// Is the variable divisor magnitude always greater than the constant; // dividend magnitude?; // |Y| > |C| --> Y < -abs(C) or Y > abs(C),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['variab'],['variable']
Modifiability,// Is there a def in the same MBB we can extend?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp,1,['extend'],['extend']
Modifiability,"// Is there a variable that wants a location for this value? If not, skip.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,// Is this a local variable or a local rvalue reference?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,1,['variab'],['variable']
Modifiability,// Is this an extending load from an f32 to an f64?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:14,extend,extending,14,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Is this an instruction that propagates sign extend?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extend']
Modifiability,// Is this phi an induction variable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,"// Is this variable a client of our dataset?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,variab,variable,11,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,2,['variab'],['variable']
Modifiability,"// Is this variable in our dataset?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,variab,variable,11,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,2,['variab'],['variable']
Modifiability,// Is this variable known to have a definition somewhere in the complete; // program? This may be true even if the declaration has internal linkage and; // has no definition within this source file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"// Is this variable location a candidate to be an entry value. First,; // should we be trying this at all?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// IsLabelScanMode is true when we are scanning forward to find CHECK-LABEL; // bounds; we have not processed variable definitions within the bounded block; // yet so cannot handle any final CHECK-DAG yet; this is handled when going; // over the block again (including the last CHECK-LABEL) in normal mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,"// IsRetIndirect is true if classifyArgumentType indicated the value should; // be passed indirect, or if the type size is a scalar greater than 2*GRLen; // and not a complex type with elements <= FRLen. e.g. fp128 is passed direct; // in LLVM IR, relying on the backend lowering code to rewrite the argument; // list and pass indirectly on LA32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp:288,rewrite,rewrite,288,interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,1,['rewrite'],['rewrite']
Modifiability,"// IsRetIndirect is true if classifyArgumentType indicated the value should; // be passed indirect, or if the type size is a scalar greater than 2*XLen; // and not a complex type with elements <= FLen. e.g. fp128 is passed direct; // in LLVM IR, relying on the backend lowering code to rewrite the argument; // list and pass indirectly on RV32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:286,rewrite,rewrite,286,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,1,['rewrite'],['rewrite']
Modifiability,// It also gets a branch-protected scope if any of the captured; // variables needs destruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:68,variab,variables,68,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// It crashed, keep the trimmed version...; // Make sure to use global variable pointers that point into the now-current; // module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:71,variab,variable,71,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['variab'],['variable']
Modifiability,"// It doesn't make sense to access one global value using another globals; // values address, so we can assume that there is no aliasing in case of; // two different globals (unless we have symbols that may indirectly point; // to each other).; // FIXME: This is perhaps a bit too defensive. We could try to follow the; // chain with aliasee information for GlobalAlias variables to find out if; // we indirect symbols may alias or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:370,variab,variables,370,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,1,['variab'],['variables']
Modifiability,// It doesn't matter if we sign extend or zero extend in the inputs. So do; // whatever is best for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:32,extend,extend,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,2,['extend'],['extend']
Modifiability,"// It first extend the promoted v4i16 to v8i16, truncate to v8i8, and extract; // the word lane which represent the v4i8 subvector. It optimizes the store; // to:; //; // xtn v0.8b, v0.8h; // str s0, [x0]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// It happens that only x86 and PPC use the 'lib32' variant of oslibdir, and; // using that variant while targeting other architectures causes problems; // because the libraries are laid out in shared system roots that can't cope; // with a 'lib32' library search path being considered. So we only enable; // them when we know we may need it.; //; // FIXME: This is a bit of a hack. We should really unify this code for; // reasoning about oslibdir spellings with the lib dir spellings in the; // GCCInstallationDetector, but that is a more significant refactoring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp:553,refactor,refactoring,553,interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,1,['refactor'],['refactoring']
Modifiability,"// It happens that only x86, PPC and SPARC use the 'lib32' variant of; // oslibdir, and using that variant while targeting other architectures causes; // problems because the libraries are laid out in shared system roots that; // can't cope with a 'lib32' library search path being considered. So we only; // enable them when we know we may need it.; //; // FIXME: This is a bit of a hack. We should really unify this code for; // reasoning about oslibdir spellings with the lib dir spellings in the; // GCCInstallationDetector, but that is a more significant refactoring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp:560,refactor,refactoring,560,interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp,1,['refactor'],['refactoring']
Modifiability,"// It is Imm, we need to check if the Imm fit the range.; // Sign-extend to 64-bits.; // DefMI may be folded with another imm form instruction, the result Imm is; // the sum of Imm of DefMI and BaseImm which is from imm form instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:66,extend,extend,66,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extend']
Modifiability,// It is bad to allow LSR for current loop to add induction variables; // for its sibling loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:60,variab,variables,60,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variables']
Modifiability,"// It is expected that the address of global optimized variable is on; // top of the stack. After optimization, value of that variable will; // be ether 0 for initial value or 1 for other value. The following; // expression should return constant integer value depending on the; // value at global object address:; // val * (ValOther - ValInit) + ValInit:; // DW_OP_deref DW_OP_constu <ValMinus>; // DW_OP_mul DW_OP_constu <ValInit> DW_OP_plus DW_OP_stack_value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:55,variab,variable,55,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,2,['variab'],['variable']
Modifiability,"// It is generally beneficial to rewrite ""fmov s0, wzr"" to ""movi d0, #0"".; // as movi is more efficient across all cores. Newer cores can eliminate; // fmovs early and there is no difference with movi, but this not true for; // all implementations.; //; // The floating-point version doesn't quite work in rare cases on older; // CPUs, so on those targets we lower this instruction to movi.16b instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:33,rewrite,rewrite,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,1,['rewrite'],['rewrite']
Modifiability,// It is illegal to typedef parameterized types inside an interface. Therefore; // an Objective-C type can only be dependent on a type parameter when the type; // parameter structurally present in the type itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:28,parameteriz,parameterized,28,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['parameteriz'],['parameterized']
Modifiability,// It is invalid to extend a pointer type so exit early if ScaledReg or; // any of the BaseRegs are pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extend']
Modifiability,// It is legal to sign extend from v4i8/v4i16 to v4i32 or v8i8 to v8i16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// It is not currently possible for clang to generate an invariant.start; // intrinsic with scalable vector types because we don't support thread local; // sizeless types and we don't permit sizeless types in structs or classes.; // Furthermore, even if support is added for this in future the intrinsic; // itself is defined to have a size of -1 for variable sized objects. This; // makes it impossible to verify if the intrinsic envelops our region of; // interest. For example, both <vscale x 32 x i8> and <vscale x 16 x i8>; // types would have a -1 parameter, but the former is clearly double the size; // of the latter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:351,variab,variable,351,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['variab'],['variable']
Modifiability,// It is not possible to fold a sign-extend into the LShr instruction. In this; // case emit a sign-extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:37,extend,extend,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['extend'],['extend']
Modifiability,// It is not safe to modify initializers of global variables with the; // external_initializer marker since the value may be changed at runtime; // before C++ initializers are evaluated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:51,variab,variables,51,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,1,['variab'],['variables']
Modifiability,// It is only safe to sign extend the BaseReg if we know that the math; // required to create it did not overflow before we extend it. Since; // the original IR value was tossed in favor of a constant back when; // the AddrMode was created we need to bail out gracefully if widths; // do not match instead of extending it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:27,extend,extend,27,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,3,['extend'],"['extend', 'extending']"
Modifiability,// It is only safe to sign extend the BaseReg if we know that the math; // required to create it did not overflow before we extend it. Since; // the original IR value was tossed in favor of a constant back when; // the AddrMode was created we need to bail out gracefully if widths; // do not match instead of extending it.; //; // (See below for code to add the scale.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:27,extend,extend,27,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,3,['extend'],"['extend', 'extending']"
Modifiability,"// It is possible that non-constant live variables have a constant base. For; // example, a GEP with a variable offset from a global. In this case we can; // remove it from the liveset. We already don't add constants to the liveset; // because we assume they won't move at runtime and the GC doesn't need to be; // informed about them. The same reasoning applies if the base is constant.; // Note that the relocation placement code relies on this filtering for; // correctness as it expects the base to be in the liveset, which isn't true; // if the base is constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// It is possible that some DBG_VALUE instructions refer to this; // instruction. They will be deleted in the live debug variable; // analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp:121,variab,variable,121,interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp,1,['variab'],['variable']
Modifiability,"// It is possible that the extracted type is not the load type. This; // happens if there is a load past the end of the alloca, and as; // a consequence the slice is narrower but still a candidate for integer; // lowering. To handle this case, we just zero extend the extracted; // integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:257,extend,extend,257,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extend']
Modifiability,"// It is possible that the live variables analysis cannot be; // run. If so, bail out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp:32,variab,variables,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,1,['variab'],['variables']
Modifiability,// It is safe to assign a weak reference into a strong variable.; // Although this code can still have problems:; // id x = self.weakProp;; // id y = self.weakProp;; // we do not warn to warn spuriously when 'x' and 'y' are on separate; // paths through the function. This should be revisited if; // -Wrepeated-use-of-weak is made flow-sensitive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// It is safe to assign a weak reference into a strong variable.; // Although this code can still have problems:; // id x = self.weakProp;; // id y = self.weakProp;; // we do not warn to warn spuriously when 'x' and 'y' are on separate; // paths through the function. This should be revisited if; // -Wrepeated-use-of-weak is made flow-sensitive.; // For ObjCWeak only, we do not warn if the assign is to a non-weak; // variable, which will be valid for the current autorelease scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,"// It is widely common for MS InlineAsm to use a global variable and one/two; // registers in a mmory expression, and though unaccessible via rip/eip.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['variab'],['variable']
Modifiability,"// It loads same immediate value to the same Reg, which is redundant.; // We would unset kill flag in previous Reg usage to extend live range; // of Reg first, then remove the redundancy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp:124,extend,extend,124,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,1,['extend'],['extend']
Modifiability,"// It may be worth creating extending masked loads if there are multiple; // masked loads using the same predicate. That way we'll end up creating; // extending masked loads that may then get split by the legaliser. This; // results in just one set of predicate unpacks at the start, instead of; // multiple sets of vector unpacks after each load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:28,extend,extending,28,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extending']
Modifiability,// It must be a select between two values we will later establish to be a; // sign-extending value and a zero constant. The condition guarding the; // sign-extension must be based on a sign bit of the same X we had in `lshr`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:83,extend,extending,83,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['extend'],['extending']
Modifiability,"// It must be any extend, this shouldn't happen for clang-generated IR; // so just fall back on SelectionDAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,1,['extend'],['extend']
Modifiability,// It should be impossible to chose an extend without selecting a different; // type since by definition the result of an extend is larger.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:39,extend,extend,39,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['extend'],['extend']
Modifiability,// It should look like variable-length sign-extension on the outside:; // (Val << (bitwidth(Val)-Nbits)) a>> (bitwidth(Val)-Nbits),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:23,variab,variable-length,23,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['variab'],['variable-length']
Modifiability,"// It should only be necessary with variable indexes.; // As a last resort, lower to the stack",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['variab'],['variable']
Modifiability,"// It shouldn't matter whether we pass an `alloca` or a `ptrtoint` as the; // dbg.declare address opereand, but passing a `ptrtoint` seems to confuse; // later passes and can result in dropped variable coverage in debug info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:193,variab,variable,193,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// It would be incorrect to import an appending linkage variable,; // since it would cause global constructors/destructors to be; // executed multiple times. This should have already been handled; // by linkIfNeeded, and we will assert in shouldLinkFromSource; // if we try to import, so we simply return AppendingLinkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,1,['variab'],['variable']
Modifiability,"// It's OK for the N most significant bytes to be 0, we can just; // zero-extend the load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:74,extend,extend,74,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// It's OK if we couldn't merge types if either type is dependent, for a; // block-scope variable. In other cases (static data members of class; // templates, variable templates, ...), we require the types to be; // equivalent.; // FIXME: The C++ standard doesn't say anything about this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:89,variab,variable,89,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,// It's always safe to look through zero extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,extend,extends,41,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extends']
Modifiability,// It's common to see a debug user between From and DomPoint. Move it; // after DomPoint to preserve the variable update without any reordering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:105,variab,variable,105,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['variab'],['variable']
Modifiability,"// It's currently invalid to ever have a __block variable with an; // array type; should we diagnose that here?; // Regardless, we don't want to ignore array nesting when; // constructing this copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,// It's not possible to generate a constant of extended or untyped type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// It's ok if the branch is the integration variable itself",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:44,variab,variable,44,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['variab'],['variable']
Modifiability,// It's only safe to look through sign extends when Index is signed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,extend,extends,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extends']
Modifiability,// It's possible for variables using assignment tracking to have no; // dbg.assign linked to this store. These are variables in DbgAssigns that; // are missing from VarHasDbgAssignForStore. Since there isn't a dbg.assign; // to mark the assignment - and the store is going to be deleted - insert a; // dbg.value to do that now. An untracked store may be either one that; // cannot be represented using assignment tracking (non-const offset or; // size) or one that is trackable but has had its DIAssignID attachment; // dropped accidentally.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,2,['variab'],['variables']
Modifiability,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:80,rewrite,rewrite,80,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,4,['rewrite'],['rewrite']
Modifiability,"// It's worth extending once and using the vXi16/vXi32 shifts for smaller; // types, but without AVX512 the extra overheads to get from vXi8 to vXi32; // make the existing SSE solution better.; // NOTE: We honor prefered vector width before promoting to 512-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:14,extend,extending,14,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Itanium ABI 5.2.2: ""Each COMDAT group [for a static local variable] must; // be emitted in any object with references to the symbol for the object it; // contains, whether inline or out-of-line.""; // Similar behavior is observed with MSVC. An alternative ABI could use; // StrongODR/AvailableExternally to match the function, but none are; // known/supported currently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variable']
Modifiability,"// Itanium C++ ABI 2.5.2:; // Then come the virtual base virtual tables, also in inheritance graph; // order, and again excluding primary bases (which share virtual tables with; // the classes for which they are primary).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:81,inherit,inheritance,81,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['inherit'],['inheritance']
Modifiability,"// Itanium mangling ABI says:; // ""5.1.8. Compression; // ... Each non-terminal in the grammar for which <substitution> appears on the; // right-hand side is both a source of future substitutions and a candidate; // for being substituted. There are two exceptions that appear to be; // substitution candidates from the grammar, but are explicitly excluded:; // 1. <builtin-type> other than vendor extended types ...""; // For the purpose of functions the following productions make sense for the; // substitution:; // <type> ::= <builtin-type>; // ::= <class-enum-type>; // ::= <array-type>; // ::=<CV-qualifiers> <type>; // ::= P <type> # pointer-to; // ::= <substitution>; //; // Note that while types like images, samplers and events are by the ABI encoded; // using <class-enum-type> production rule they're not used for substitution; // because clang consider them as builtin types.; //; // DvNN_ type is GCC extension for vectors and is a subject for the; // substitution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp:397,extend,extended,397,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,1,['extend'],['extended']
Modifiability,// Iterate over all bindings to global variables and see if it contains; // a memory region in the stack space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,1,['variab'],['variables']
Modifiability,"// Iterate over all instructions in between SI and LastSI, not including; // SI itself. These are all the variable assignments that happen ""in the; // middle"" of the select group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp:106,variab,variable,106,interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp,1,['variab'],['variable']
Modifiability,// Iterate over all instructions:; // - dbg.declare -> add single location variable record; // - dbg.* -> Add fragments to FragmentMap; // - untagged store -> Add fragments to FragmentMap and update; // UntaggedStoreVars.; // We need to add fragments for untagged stores too so that we can correctly; // clobber overlapped fragment locations later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Iterate over all the blocks we selected, propagating the variables value.; // This loop does two things:; // * Eliminates un-necessary VPHIs in vlocJoin,; // * Evaluates the blocks transfer function (i.e. variable assignments) and; // stores the result to the blocks live-outs.; // Always evaluate the transfer function on the first iteration, and when; // the live-ins change thereafter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:60,variab,variables,60,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Iterate over all variables described by this register and add this; // instruction to their history, clobbering it. All registers that also; // describe the clobbered variables (i.e. in variadic debug values) will have; // those Variables removed from their DescribedVars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,3,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,// Iterate over all variables that have open debug values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variables']
Modifiability,"// Iterate over the variables that this store affects, add a NoneOrPhi dbg; // and mem def, set lockind to Mem, and emit a location def for each.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// Iterate through all the global variables, functions, and global; // variable initializers and create slots for them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:34,variab,variables,34,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Iteration variable SourceLocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Iteration variable for the floor (i.e. outer) loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Iteration variable for the inner loop: Reuse the iteration variable created; // by checkOpenMPLoop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,// Iteration variable for the tile (i.e. inner) loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// IterationsLeft - are there any more iterations left, given the original; // upper bound on the induction variable? If not, we branch to the ""real""; // exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:108,variab,variable,108,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,1,['variab'],['variable']
Modifiability,"// Iterators are in the same scope, get common subset of variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:57,variab,variables,57,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,// Iterators over rewrite buffers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:18,rewrite,rewrite,18,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,1,['rewrite'],['rewrite']
Modifiability,// Iterators over subexpressions. The iterators will include iterating; // over the initialization expression referenced by the condition variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:138,variab,variable,138,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,// JITLink debug support plugins put information about JITed code in this GDB; // JIT Interface global from OrcTargetProcess.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:25,plugin,plugins,25,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,2,['plugin'],['plugins']
Modifiability,"// Jalr will add UpperImm with the sign-extended 12-bit LowerImm,; // we need to add 0x800ULL before extract upper bits to reflect the; // effect of the sign extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp,1,['extend'],['extended']
Modifiability,// JavaScript/TypeScript supports inline object types in; // extends/implements positions:; // class Foo implements {bar: number} { },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:61,extend,extends,61,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['extend'],['extends']
Modifiability,"// Join A and B.; //; // Intersect = join(a, b) for a in A, b in B where Var(a) == Var(b); // Difference = join(x, ⊤) for x where Var(x) is in A xor B; // Join = Intersect ∪ Difference; //; // This is achieved by performing a join on elements from A and B with; // variables common to both A and B (join elements indexed by var; // intersect), then adding ⊤-value elements for vars in A xor B. The; // latter part is equivalent to performing join on elements with variables; // in A xor B with the ⊤-value for the map element since join(x, ⊤) = ⊤.; // BlockInfo::init initializes all variable entries to the ⊤ value so we; // don't need to explicitly perform that step as Join.VariableIDsInBlock; // is set to the union of the variables in A and B at the end of this; // function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:265,variab,variables,265,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,5,"['Variab', 'variab']","['VariableIDsInBlock', 'variable', 'variables']"
Modifiability,// Just an adaptor to switch the order of argument and have the predicate before; // the zipped inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:11,adapt,adaptor,11,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['adapt'],['adaptor']
Modifiability,// Just do a vector extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extend']
Modifiability,// Just ignore the ellipsis for now and form a non-pack variable. We'll; // diagnose this later when we try to capture it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,1,['variab'],['variable']
Modifiability,"// Just stop tracking this variable, until we cover DBG_VALUE_LIST.; // 1 DBG_VALUE $rax, ""x"", DIExpression(); // ...; // 2 DBG_VALUE_LIST ""x"", DIExpression(...), $rax, $rbx; // ...; // 3 DBG_VALUE $rax, ""x"", DIExpression()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,"// Just try to open it locally but via TFile::Open, so that we pick-up the correct; // plug-in in the case file name contains information about a special backend (e.g.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:87,plug-in,plug-in,87,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['plug-in'],['plug-in']
Modifiability,"// KINT is new number of variable params, NPAR is old",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:25,variab,variable,25,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,// Keep managed variables even if they are not used in device code since; // they need to be allocated by the runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:16,variab,variables,16,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variables']
Modifiability,// Keep the address of the original variable for future update at the end; // of the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Keep the compile time impact low by only adapting the inserted block; // of instructions in the OrigPreHeader. This might result in slightly; // more aliasing between these instructions and those that were already; // present, but it will be much faster when the original PreHeader is; // large.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:44,adapt,adapting,44,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['adapt'],['adapting']
Modifiability,"// Keep the ordering for the specific initialization matches to happen first,; // because it is cheaper to match all potential modifications of the loop; // variable.; // The range variable is a reference to a builtin array. In that case the; // array is considered modified if the loop-variable is a non-const reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp:157,variab,variable,157,interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,3,['variab'],['variable']
Modifiability,// Keep track at which iteration each phi belongs to. We need it to know; // what version of the variable to use during prologue/epilogue stitching.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['variab'],['variable']
Modifiability,// Keep track of inherited subregs and how they can be reached.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:17,inherit,inherited,17,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['inherit'],['inherited']
Modifiability,// Keep track of inherited vbases for this base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:17,inherit,inherited,17,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// Keep track of the first non-variable declaration we saw so that; // we can diagnose if we don't see any variable declarations. This; // covers a case like declaring a typedef, function, or structure; // type rather than a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,3,['variab'],['variable']
Modifiability,// Keep track of used but undefined variables.; // FIXME: We shouldn't suppress this warning for static data members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// Keep track of which vtable the derived class is going to extend with; // new methods or bases. We append to either the vftable of our primary; // base, or the first non-virtual base that has a vbtable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:60,extend,extend,60,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['extend'],['extend']
Modifiability,// Keep variable referencing live address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,1,['variab'],['variable']
Modifiability,"// Keeps track of the structure of a loop. This is similar to llvm::Loop,; // except that it is more lightweight and can track the state of a loop through; // changing and potentially invalid IR. This structure also formalizes the; // kinds of loops we can deal with -- ones that have a single latch that is also; // an exiting block *and* have a canonical induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:367,variab,variable,367,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,1,['variab'],['variable']
Modifiability,"// Kernel function with a kernel parameter gamma for; // each input variable. Described in ""An Introduction to; // Support Vector Machines and Other Kernel-based Learning; // Methods"" by Cristianini and Shawe-Taylor, Section 3.5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:68,variab,variable,68,tmva/tmva/src/SVKernelFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx,1,['variab'],['variable']
Modifiability,// Kill the iteration variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp,1,['variab'],['variable']
Modifiability,// LA64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp:57,extend,extended,57,interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,1,['extend'],['extended']
Modifiability,"// LANDAU quantile : algorithm from CERNLIB G110 ranlan; // with scale parameter xi; // Converted by Rene Brun from CERNLIB routine ranlan(G110),; // Moved and adapted to QuantFuncMathCore by B. List 29.4.2010",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:160,adapt,adapted,160,math/mathcore/src/QuantFuncMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx,1,['adapt'],['adapted']
Modifiability,"// LDRWui produces a 32-bit register, but pointers in-register are 64-bits; // so we must extend the result on ILP32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:90,extend,extend,90,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,// LDS variables aren't emitted in HSA or PAL yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp:7,variab,variables,7,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp,1,['variab'],['variables']
Modifiability,"// LHS and RHS should be only used once or if they are the same then only; // used twice. Only check this when SSE4.1 is enabled and we have zext/sext; // instructions, otherwise we use punpck to emulate zero extend in stages. The; // trunc/ we need to do likely won't introduce new instructions in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp:209,extend,extend,209,interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp,1,['extend'],['extend']
Modifiability,"// LLVM arranges the stack as follows:; // ...; // ARG2; // ARG1; // RETADDR; // PUSH RBP <-- RBP points here; // PUSH CSRs; // ~~~~~~~ <-- possible stack realignment (non-win64); // ...; // STACK OBJECTS; // ... <-- RSP after prologue points here; // ~~~~~~~ <-- possible stack realignment (win64); //; // if (hasVarSizedObjects()):; // ... <-- ""base pointer"" (ESI/RBX) points here; // DYNAMIC ALLOCAS; // ... <-- RSP points here; //; // Case 1: In the simple case of no stack realignment and no dynamic; // allocas, both ""fixed"" stack objects (arguments and CSRs) are addressable; // with fixed offsets from RSP.; //; // Case 2: In the case of stack realignment with no dynamic allocas, fixed; // stack objects are addressed with RBP and regular stack objects with RSP.; //; // Case 3: In the case of dynamic allocas and stack realignment, RSP is used; // to address stack arguments for outgoing calls and nothing else. The ""base; // pointer"" points to local variables, and RBP points to fixed objects.; //; // In cases 2 and 3, we can only answer for non-fixed stack objects, and the; // answer we give is relative to the SP after the prologue, and not the; // SP in the middle of the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:961,variab,variables,961,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['variab'],['variables']
Modifiability,"// LLVM to CV regs mapping; /// Iterator class that can traverse the differentially encoded values in; /// DiffLists. Don't use this class directly, use one of the adaptors below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:164,adapt,adaptors,164,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['adapt'],['adaptors']
Modifiability,"// LM (29/04/08) bug: change should be done in internal variables; // set the initial value for the other parameters that we are going to fit in MnCross",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:56,variab,variables,56,math/minuit2/src/MnMinos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx,1,['variab'],['variables']
Modifiability,"// LSR may at times remove all uses of an induction variable from a loop.; // The only remaining use is the PHI in the exit block.; // When this is the case, if the exit value of the IV can be calculated using; // SCEV, we can replace the exit block PHI with the final value of the IV and; // skip the updates in each loop iteration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:52,variab,variable,52,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variable']
Modifiability,"// LValue is non-gc'able for any reason, including being a parameter or local; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:82,variab,variable,82,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['variab'],['variable']
Modifiability,// Lambdas and captured statements are not allowed to capture __block; // variables; they don't support the expected semantics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:74,variab,variables,74,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// Lambdas are not allowed to capture unnamed variables; // (e.g. anonymous unions).; // FIXME: The C++11 rule don't actually state this explicitly, but I'm; // assuming that's the intent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,// Lambdas can affect all static local variables without explicitly; // capturing those.; // We invalidate all static locals referenced inside the lambda body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['variab'],['variables']
Modifiability,// Lanai Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetMachine.cpp:29,Config,Configuration,29,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"// Last modification of the group config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:34,config,config,34,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['config'],['config']
Modifiability,"// Last, match the compare variable operand with a binop operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['variab'],['variable']
Modifiability,"// Leave `undef` operands as is, StackMaps will rewrite them; // into a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp:48,rewrite,rewrite,48,interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/FixupStatepointCallerSaved.cpp,1,['rewrite'],['rewrite']
Modifiability,// Legacy CUDA kernel configuration call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:22,config,configuration,22,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['config'],['configuration']
Modifiability,// Legacy cost model: this is rough cost estimation algorithm. It counts the; // good and bad order of induction variables in the instruction and allows; // reordering if number of bad orders is more than good.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:113,variab,variables,113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['variab'],['variables']
Modifiability,"// Legacy dataset conversion happens here. Legacy RooDataHist inherits from RooTreeData; // which in turn inherits from RooAbsData. Manually stream RooTreeData contents on; // file here and convert it into a RooTreeDataStore which is installed in the; // new-style RooAbsData base class; // --- This is the contents of the streamer code of RooTreeData version 2 ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:62,inherit,inherits,62,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,2,['inherit'],['inherits']
Modifiability,"// Legacy dataset conversion happens here. Legacy RooDataSet inherits from RooTreeData; // which in turn inherits from RooAbsData. Manually stream RooTreeData contents on; // file here and convert it into a RooTreeDataStore which is installed in the; // new-style RooAbsData base class; // --- This is the contents of the streamer code of RooTreeData version 1 ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:61,inherit,inherits,61,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,2,['inherit'],['inherits']
Modifiability,// Legalization aids for extending a vector into two/four vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:25,extend,extending,25,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extending']
Modifiability,"// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; // Def by truncating the operand's type to \p NarrowTy, replacing in place and; // extending back with \p ExtOpcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:160,extend,extending,160,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['extend'],['extending']
Modifiability,"// Let see if the leaf was attempted to be casted.; // Since there would have been something like; // ((cast_class*)leafname)->.... we need to use; // paran_level+1; // Also we disable this functionality in case of TClonesArray; // because it is not yet allowed to have 'inheritance' (or virtuality); // in play in a TClonesArray.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:271,inherit,inheritance,271,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['inherit'],['inheritance']
Modifiability,"// Let's check if one of the tracked parameters is assigned into; // something, and if it is we don't want to track extra variables, so we; // consider it as an escapee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:122,variab,variables,122,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['variab'],['variables']
Modifiability,// Lexical blocks containing local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:35,variab,variables,35,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variables']
Modifiability,// Lifetime of the previous copy has been extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['extend'],['extended']
Modifiability,// Lifetime-extending a temporary?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:12,extend,extending,12,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['extend'],['extending']
Modifiability,"// Lift this: one may had an empty attribute value; // if (attr_value.length() == 0) { // checks if the attribute value is empty; // ROOT::TMetaUtils::Error(0,""Attribute - missing attibute value!\n"");; // return false;; // }; // creates new Attributes object and pushes it back in the vector; // then Sets the variables in the initial state - if there are other attributes to be read; // For the moment the proto pattern is not implemented. The current ROOT6 architecture; // relies on ABI compatibility for calling functions, no stub functions are present.; // The concept of selecting/excluding functions is not defined.; // if (attr_name == ""proto_pattern"") {; // printf(""XMLReader::GetAttributes(): proto_pattern selection not implemented yet!\n"");; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:310,variab,variables,310,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['variab'],['variables']
Modifiability,"// Lightweight interface adaptor that binds a RooAbsPdf to TFOAM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFoamGenerator.cxx:25,adapt,adaptor,25,roofit/roofitcore/src/RooFoamGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFoamGenerator.cxx,1,['adapt'],['adaptor']
Modifiability,"// Lightweight interface adaptors (caller takes ownership)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:25,adapt,adaptors,25,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['adapt'],['adaptors']
Modifiability,"// Like RooAbsLTest.SubEventSections, but here we can also check behavior; // for when component likelihoods of a top-level RooSumL have a different; // number (less) of events than the RooSumL itself. Moreover, this more; // complex likelihood has an extended term and a subsidiary component; // which also depend on section so will also be checked here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:252,extend,extended,252,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,1,['extend'],['extended']
Modifiability,// Like the inheritance list in a class declaration.; // class Input : public IO,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:12,inherit,inheritance,12,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['inherit'],['inheritance']
Modifiability,// Likelyhood of bypassing the vectorized loop because assumptions about SCEV; // variables not overflowing do not hold. See `emitSCEVChecks`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:82,variab,variables,82,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,// Likewise all truncating stores and extending loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:38,extend,extending,38,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Likewise, narrowing and extending vector loads/stores aren't handled; // directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:27,extend,extending,27,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Likewise, variables with tuple-like bindings are required if their; // bindings have side-effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:13,variab,variables,13,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variables']
Modifiability,"// Limit for the maximum number of stack slots we should track, past which we; // will ignore any spills. InstrRefBasedLDV gathers detailed information on all; // stack slots which leads to high memory consumption, and in some scenarios; // (such as asan with very many locals) the working set of the function can be; // very large, causing many spills. In these scenarios, it is very unlikely that; // the developer has hundreds of variables live at the same time that they're; // carefully thinking about -- instead, they probably autogenerated the code.; // When this happens, gracefully stop tracking excess spill slots, rather than; // consuming all the developer's memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:433,variab,variables,433,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// LinkMode determines what libraries and flags are returned by llvm-config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp:69,config,config,69,interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,1,['config'],['config']
Modifiability,// Linkage for alias of global variable has been emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// LinkageSpecDecl: DeclContext; // Re-add any previous declarations so they are reachable throughout the; // translation unit. Also remove any global variables from:; // m_Sema->Context.getExternCContextDecl()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:151,variab,variables,151,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['variab'],['variables']
Modifiability,// Linker may rewrite the instruction with variant symbol operand(e.g.; // TLSCALL).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,1,['rewrite'],['rewrite']
Modifiability,"// List of TNameds defining environment; // variables to pass to proofserv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:44,variab,variables,44,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['variab'],['variables']
Modifiability,"// List of configuration parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h:11,config,configuration,11,proof/proof/inc/TVirtualPacketizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TVirtualPacketizer.h,1,['config'],['configuration']
Modifiability,"// List of optimal cuts, separation gains, and cut types (removed background or signal) - one for each variable; // each spot in parallel no problem",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:103,variab,variable,103,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// List of passes explicitly substituted by this target. Normally this is; // empty, but it is a convenient way to suppress or replace specific passes; // that are part of a standard pass pipeline without overridding the entire; // pipeline. This mechanism allows target options to inherit a standard pass's; // user interface. For example, a target may disable a standard pass by; // default by substituting a pass ID of zero, and the user may still enable; // that standard pass with an explicit command line option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:282,inherit,inherit,282,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['inherit'],['inherit']
Modifiability,// List of variables demoted to a function scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h:11,variab,variables,11,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,1,['variab'],['variables']
Modifiability,"// Literal i1 value set in intrinsic, represents SrcMods for the next operand.; // Value is in Imm operand as i1 sign extended to int64_t.; // 1(-1) promotes packed values to signed, 0 treats them as unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:118,extend,extended,118,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['extend'],['extended']
Modifiability,// Live variable operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['variab'],['variable']
Modifiability,// Lo and Hi are zero-extended from int with size less equal than 32; // to i64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// Load (single use) -> trunc/extend (single use) -> UserI,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// Load all external decls into current context. Under the hood, it calls; // ExternalSource::completeVisibleDeclsMap, which make all decls on the redecl; // chain visible.; //; // This is crucial to code completion on dot members, since a bound variable; // before ""."" would be otherwise treated out-of-scope.; //; // clang-repl> Foo f1;; // clang-repl> f1.<tab>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp:246,variab,variable,246,interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/CodeCompletion.cpp,1,['variab'],['variable']
Modifiability,// Load any requested plugins.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:22,plugin,plugins,22,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,2,['plugin'],['plugins']
Modifiability,"// Load any requested plugins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:22,plugin,plugins,22,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['plugin'],['plugins']
Modifiability,"// Load config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:8,config,config,8,tmva/tmva/inc/TMVA/RReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx,1,['config'],['config']
Modifiability,// Load each variable type that we deferred loading because it was a; // deduced type that might refer to a local type declared within itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['variab'],['variable']
Modifiability,// Load requested pass plugins and let them register pass builder callbacks,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOBackend.cpp:23,plugin,plugins,23,interpreter/llvm-project/llvm/lib/LTO/LTOBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOBackend.cpp,1,['plugin'],['plugins']
Modifiability,"// Load the RHS and LHS operands.; // __block variables need to have the rhs evaluated first, plus this should; // improve codegen a little.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,1,['variab'],['variables']
Modifiability,// Load the _tls_index variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Load the first byte of the guard variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,// Load the global variable which represents the returned field info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['variab'],['variable']
Modifiability,// Load the global variable which represents the type info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveDIType.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveDIType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveDIType.cpp,1,['variab'],['variable']
Modifiability,// Load the handle from the specific global variable using; // `nvvm.texsurf.handle.internal` intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,1,['variab'],['variable']
Modifiability,"// Load the plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:12,plugin,plugin,12,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['plugin'],['plugin']
Modifiability,"// Load the style state out of the TGHtml object and into local; // variables. This is purely a matter of convenience...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx:68,variab,variables,68,gui/guihtml/src/TGHtmlSizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlSizer.cxx,1,['variab'],['variables']
Modifiability,// Load the value from the global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['variab'],['variable']
Modifiability,"// Load the value out, extending it from f32 to f80.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,extend,extending,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Load, scalar_to_vector, and zero extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:36,extend,extend,36,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['extend'],['extend']
Modifiability,// Loaded (extended) value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,2,['extend'],['extended']
Modifiability,"// Local variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:9,variab,variables,9,hist/hist/src/TGraphSmooth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx,3,['variab'],['variables']
Modifiability,"// Local variables and local rvalue references are classified as ""Local"".; // For the purposes of this checker, we classify move-safe STL types; // as not-""STL"" types, because that's how the checker treats them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MoveChecker.cpp,1,['variab'],['variables']
Modifiability,// Local variables of reference type cannot be re-assigned;; // map them to their initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variables']
Modifiability,"// Local variables that we want to keep in scope after loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:9,variab,variables,9,roofit/roostats/src/BernsteinCorrection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx,2,['variab'],['variables']
Modifiability,// Local variables will be handled by the CFG analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// Local variables/inlined routines are purposely omitted here. The point of; // marking this as a thunk is so Visual Studio will NOT stop in this routine.; // Emit S_PROC_ID_END,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:9,variab,variables,9,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variables']
Modifiability,"// Locate a global variable list for this scope, creating one if; // necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,"// Locate map clauses and see if the variable being captured is referred to; // in any of those clauses. Here we only care about variables, not fields,; // because fields are part of aggregates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Locate the optimal cut for this (ivar-th) variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:45,variab,variable,45,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],['variable']
Modifiability,// Locates HIP pass plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPSPV.cpp:20,plugin,plugin,20,interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPSPV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPSPV.cpp,1,['plugin'],['plugin']
Modifiability,"// Lock down the inheritance model right now in MS ABI, whether or not the; // pointee types are the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:17,inherit,inheritance,17,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['inherit'],['inheritance']
Modifiability,"// Log dialog box plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:18,plugin,plugin,18,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['plugin'],['plugin']
Modifiability,"// Logically, an optional<T> object is composed of two values - a `has_value`; // bit and a value of type T. Equality of optional objects compares both; // values. Therefore, merely comparing the `has_value` bits isn't sufficient:; // when two optional objects are engaged, the equality of their respective; // values of type T matters. Since we only track the `has_value` bits, we; // can't make any conclusions about equality when we know that two optional; // objects are engaged.; //; // We express this as two facts about the equality:; // a) EqVal => (LHS & RHS) v (!RHS & !LHS); // If they are equal, then either both are set or both are unset.; // b) (!LHS & !RHS) => EqVal; // If neither is set, then they are equal.; // We rewrite b) as !EqVal => (LHS v RHS), for a more compact formula.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp:733,rewrite,rewrite,733,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Look at all the instructions in the loop, checking to see if they have uses; // outside the loop. If so, put them into the worklist to rewrite those uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:138,rewrite,rewrite,138,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Look at inheritance tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:11,inherit,inheritance,11,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['inherit'],['inheritance']
Modifiability,// Look at the next token to make sure that this isn't a function; // declaration. We have to check this because __attribute__ might be the; // start of a function definition in GCC-extended K&R C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:182,extend,extended,182,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['extend'],['extended']
Modifiability,"// Look first in the recommended environmental variables. Both variables; // must be set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:47,variab,variables,47,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,2,['variab'],['variables']
Modifiability,"// Look for IDs declared with Import linkage, and map the corresponding function; // to the register defining that variable (which will usually be the result of; // an OpFunction). This lets us call externally imported functions using; // the correct ID registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp:115,variab,variable,115,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Look for PHI uses of the extended result, we don't want to extend the; // liveness of a PHI input. It breaks all kinds of assumptions down; // stream. A PHI use is expected to be the kill of its source values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// Look for a TESTrr+ANDrr pattern where both operands of the test are; // the same. Rewrite to remove the AND.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:85,Rewrite,Rewrite,85,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Look for a load being extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extended']
Modifiability,"// Look for a sign/zero/fpextend extend of a larger than legal load. This can be; // split into multiple extending loads, which are simpler to deal with than an; // arbitrary extend. For fp extends we use an integer extending load and a VCVTL; // to convert the type to an f32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:33,extend,extend,33,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,5,['extend'],"['extend', 'extending', 'extends']"
Modifiability,"// Look for a suitable configuration starting from the end, so we can; // find the configuration for the specific language first, and the default; // configuration (which can only be at slot 0) after it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:23,config,configuration,23,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,3,['config'],['configuration']
Modifiability,// Look for a valid extend instruction on the LHS of the shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extend']
Modifiability,"// Look for build vector patterns where input operands come from sign; // extended vector_extract elements of specific indices. If the correct indices; // aren't used, add a vector shuffle to fix up the indices and create; // SIGN_EXTEND_INREG node which selects the vector sign extend instructions; // during instruction selection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:74,extend,extended,74,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// Look for built-in declarations that we need to refer during the rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:67,rewrite,rewrite,67,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Look for constants that fit in 32 bits but not simm12, and can be made; // into simm12 by sign extending bit 31. This will allow use of ANDI.; // TODO: Is worth making simm32?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp:98,extend,extending,98,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp,1,['extend'],['extending']
Modifiability,// Look for global variable and field references in the; // constructor-initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['variab'],['variable']
Modifiability,// Look for global variables which need to be renamed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['variab'],['variables']
Modifiability,// Look for instructions using constant vector. Promote that constant to a; // global variable. Create as few loads of this variable as possible and; // update the uses accordingly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:86,variab,variable,86,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,2,['variab'],['variable']
Modifiability,// Look for other capturable variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:29,variab,variables,29,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variables']
Modifiability,// Look for sign extends:; // %170 = SXTW %166,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp:17,extend,extends,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp,1,['extend'],['extends']
Modifiability,"// Look for situation like this:; // %reg101 = MOV %reg100; // %reg102 = ...; // %reg103 = ADD %reg102, %reg101; // ... = %reg103 ...; // %reg100 = MOV %reg103; // If there is a reversed copy chain from reg101 to reg103, commute the ADD; // to eliminate an otherwise unavoidable copy.; // FIXME:; // We can extend the logic further: If an pair of operands in an insn has; // been merged, the insn could be regarded as a virtual copy, and the virtual; // copy could also be used to construct a copy chain.; // To more generally minimize register copies, ideally the logic of two addr; // instruction pass should be integrated with register allocation pass where; // interference graph is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:307,extend,extend,307,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['extend'],['extend']
Modifiability,"// Look for something like this; // PredBB; // | \; // | Rem; // | /; // Div; //; // If the Rem block has a single predecessor and successor, and all paths; // from PredBB go to either RemBB or DivBB, and execution of RemBB and; // DivBB will always reach the Div/Rem, we can hoist Div to PredBB. If; // we have a DivRem operation we can also hoist Rem. Otherwise we'll leave; // Rem where it is and rewrite it to mul/sub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:400,rewrite,rewrite,400,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Look for the pattern of a load from a narrow width to i128, feeding; // into a BUILD_VECTOR of v1i128. Replace this sequence with a PPCISD node; // (LXVRZX). This node represents a zero extending load that will be matched; // to the Load VSX Vector Rightmost instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:189,extend,extending,189,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Look for unit clauses that contain the active variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,// Look for zero extend from i8.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PartialReduction.cpp,1,['extend'],['extend']
Modifiability,"// Look now in the legacy environmental variables, for keeping backwards; // compatibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:40,variab,variables,40,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['variab'],['variables']
Modifiability,// Look this variable up in the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,17,['variab'],['variable']
Modifiability,// Look through any 32-bit to 64-bit implicit extend nodes to find the; // opcode that is input to the XORI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:46,extend,extend,46,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Look through extends if the IV has been widened. Don't look through; // extends if we already looked through a trunc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:16,extend,extends,16,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,2,['extend'],['extends']
Modifiability,"// Look through extract element. At the moment we keep this simple and; // skip tracking the specific element. But at least we might find; // information valid for all elements of the vector (for example if vector; // is sign extended, shifted, etc).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:226,extend,extended,226,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extended']
Modifiability,"// Look through inttoptr.; // Make sure this isn't a truncating or extending cast. We could; // support this eventually, but don't bother for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp:67,extend,extending,67,interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,1,['extend'],['extending']
Modifiability,"// Look through ptrtoint.; // Make sure this isn't a truncating or extending cast. We could; // support this eventually, but don't bother for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp:67,extend,extending,67,interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/Analysis.cpp,1,['extend'],['extending']
Modifiability,"// Lookup could be ambiguous when looking up a placeholder variable; // __builtin_offsetof(S, _).; // In that case we would already have emitted a diagnostic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Lookup each of the variables we are binning in our tree variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:22,variab,variables,22,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,2,['variab'],['variables']
Modifiability,"// Lookup name of weight variable if it was specified by object reference",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:25,variab,variable,25,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,// Lookup the builtin variable record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['variab'],['variable']
Modifiability,// Lookup the extended instruction number in the TableGen records.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:14,extend,extended,14,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['extend'],['extended']
Modifiability,"// Lookup variable in dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,variab,variable,10,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,4,['variab'],['variable']
Modifiability,"// LoongArch specific constraints in GCC: config/loongarch/constraints.md; //; // 'f': A floating-point register (if available).; // 'k': A memory operand whose address is formed by a base register and; // (optionally scaled) index register.; // 'l': A signed 16-bit constant.; // 'm': A memory operand whose address is formed by a base register and; // offset that is suitable for use in instructions with the same; // addressing mode as st.w and ld.w.; // 'I': A signed 12-bit constant (for arithmetic instructions).; // 'J': Integer zero.; // 'K': An unsigned 12-bit constant (for logic instructions).; // ""ZB"": An address that is held in a general-purpose register. The offset is; // zero.; // ""ZC"": A memory operand whose address is formed by a base register and; // offset that is suitable for use in instructions with the same; // addressing mode as ll.w and sc.w.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:42,config,config,42,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,1,['config'],['config']
Modifiability,// Loop body should end with destructor of Condition variable (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,// Loop iteration (after increment) should end with destructor of Condition; // variable (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:80,variab,variable,80,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// Loop over all of the computed argument and return value info. If any of; // them are direct or extend without a specified coerce type, specify the; // default now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:98,extend,extend,98,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['extend'],['extend']
Modifiability,"// Loop over all of the global variables in the program, allocating the memory; // to hold them. If there is more than one module, do a prepass over globals; // to figure out how the different modules should link together.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['variab'],['variables']
Modifiability,"// Loop over all of the global variables, making corresponding globals in the; // new module. Here we add them to the VMap and to the new Module. We; // don't worry about attributes or initializers, they will come later.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,1,['variab'],['variables']
Modifiability,// Loop over and delete any global variables which we aren't supposed to be; // playing with...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:35,variab,variables,35,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['variab'],['variables']
Modifiability,"// Loop over each variable and place PHIs for it, then propagate values; // between blocks. This keeps the locality of working on one lexical scope at; // at time, but avoids re-processing variable values because some other; // variable has been assigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,3,['variab'],['variable']
Modifiability,"// Loop over the children nodes in the XML file; // and configure the channel based on them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:56,config,configure,56,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['config'],['configure']
Modifiability,"// Loop over variable parameters for second derivatives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13,variab,variable,13,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,// Loop structure should be the following:; // Epilog Prolog; //; // PreHeader PreHeader; // NewPreHeader PrologPreHeader; // Header PrologHeader; // ... ...; // Latch PrologLatch; // NewExit PrologExit; // EpilogPreHeader NewPreHeader; // EpilogHeader Header; // ... ...; // EpilogLatch Latch; // LatchExit LatchExit; // Rewrite the cloned instruction operands to use the values created when the; // clone is created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp:322,Rewrite,Rewrite,322,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Loop through elements (i.e., sub-branches). The problem is that the elements; // and sub-branches do not always match. For example suppose that class A contains; // members x and y, and there is a class B inheriting from A and containing an extra; // member z. It is possible that B has two elements: A and z but three sub-branches; // x, y and z. Therefore, the branch iterator is treated differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:208,inherit,inheriting,208,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['inherit'],['inheriting']
Modifiability,"// Loop variable creates a temporary. Suggest either to go with; // non-reference loop variable to indicate a copy is made, or; // the correct type to bind a const reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['variab'],['variable']
Modifiability,"// Loop variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:8,variab,variables,8,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['variab'],['variables']
Modifiability,// Lower ISD::EXTRACT_VECTOR_ELT into MipsISD::VEXTRACT_SEXT_ELT.; //; // The non-value bits resulting from ISD::EXTRACT_VECTOR_ELT are undefined. We; // choose to sign-extend but we could have equally chosen zero-extend. The; // DAGCombiner will fold any sign/zero extension of the ISD::EXTRACT_VECTOR_ELT; // result into this node later (possibly changing it to a zero-extend in the; // process).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:169,extend,extend,169,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,3,['extend'],['extend']
Modifiability,"// Lower a non-power of 2 store into multiple pow-2 stores.; // E.g. split an i24 store into an i16 store + i8 store.; // We do this by first extending the stored value to the next largest power; // of 2 type, and then using truncating stores to store the components.; // By doing this, likewise with G_LOAD, generate an extend that can be; // artifact-combined away instead of leaving behind extracts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:142,extend,extending,142,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// Lower any-extends of boolean vectors to sign-extends, since they; // translate directly to Q2V. Zero-extending could also be done equally; // fast, but Q2V is used/recognized in more places.; // For all other vectors, use zero-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:13,extend,extends,13,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,4,['extend'],"['extend', 'extending', 'extends']"
Modifiability,"// Lower as SHUFPD(VPERM2F128(V1, V2), VPERM2F128(V1, V2)).; // TODO: Extend to support v8f32 (+ 512-bit shuffles).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:70,Extend,Extend,70,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// Lower bound variable, initialized with zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// Lower the deopt and gc arguments for this statepoint. Layout will be:; // deopt argument length, deopt arguments.., gc arguments...; // Figure out what lowering strategy we're going to use for each part; // Note: It is conservatively correct to lower both ""live-in"" and ""live-out""; // as ""live-through"". A ""live-through"" variable is one which is ""live-in"",; // ""live-out"", and live throughout the lifetime of the call (i.e. we can find; // it from any PC within the transitive callee of the statepoint). In; // particular, if the callee spills callee preserved registers we may not; // be able to find a value placed in that register during the call. This is; // fine for live-out, but not for live-through. If we were willing to make; // assumptions about the code generator producing the callee, we could; // potentially allow live-through values in callee saved registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:324,variab,variable,324,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,1,['variab'],['variable']
Modifiability,"// Lower v16i8/v32i8 as extension to v8i16/v16i16 vector pairs, multiply,; // logical shift down the upper half and pack back to i8.; // With SSE41 we can use sign/zero extend, but for pre-SSE41 we unpack; // and then ashr/lshr the upper bits down to the lower bits before multiply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:169,extend,extend,169,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Lower vXi1 vector shuffles.; // There is no a dedicated instruction on AVX-512 that shuffles the masks.; // The only way to shuffle bits is to sign-extend the mask vector to SIMD; // vector, shuffle and then truncate it back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:151,extend,extend,151,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Lower variable arguments parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:9,variab,variable,9,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['variab'],['variable']
Modifiability,"// Lower vector extended loads using a shuffle. If SSSE3 is not available we; // may emit an illegal shuffle but the expansion is still better than scalar; // code. We generate sext/sext_invec for SEXTLOADs if it's available, otherwise; // we'll emit a shuffle and a arithmetic shift.; // FIXME: Is the expansion actually better than scalar code? It doesn't seem so.; // TODO: It is possible to support ZExt by zeroing the undef values during; // the shuffle phase or after the shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Lowering for SIGN_EXTEND_VECTOR_INREG and ZERO_EXTEND_VECTOR_INREG.; // For sign extend this needs to handle all vector sizes and SSE4.1 and; // non-SSE4.1 targets. For zero extend this should only handle inputs of; // MVT::v64i8 when BWI is not supported, but AVX512 is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:84,extend,extend,84,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// MCOperandInfo can only represents Explicit operands. This object gives a; // uniform view of Implicit and Explicit Operands.; // - Index: can be used to refer to MCInstrDesc::operands for Explicit operands.; // - Tracker: is set for Register Operands and is used to keep track of possible; // registers and the registers reachable from them (aliasing registers).; // - Info: a shortcut for MCInstrDesc::operands()[Index].; // - TiedToIndex: the index of the Operand holding the value or -1.; // - ImplicitReg: the register value when Operand is Implicit, 0 otherwise.; // - VariableIndex: the index of the Variable holding the value for this Operand; // or -1 if this operand is implicit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:577,Variab,VariableIndex,577,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,2,['Variab'],"['Variable', 'VariableIndex']"
Modifiability,// MD5 will be stored as plain uint64_t instead of variable-length; // quantity format in NameTable section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h:51,variab,variable-length,51,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfWriter.h,1,['variab'],['variable-length']
Modifiability,"// MI change; // extended defined variable (MI); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:17,extend,extended,17,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,2,"['extend', 'variab']","['extended', 'variable']"
Modifiability,"// MI is an RR-style pseudo instruction that zero-extends the low Size bits; // of one GRX32 into another. Replace it with LowOpcode if both operands; // are low registers, otherwise use RISB[LH]G.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp:50,extend,extends,50,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,1,['extend'],['extends']
Modifiability,"// MI is reading Reg. We may have visited MI before if it happens to be; // reading Reg multiple times. That is OK, extend() is idempotent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp:116,extend,extend,116,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp,1,['extend'],['extend']
Modifiability,"// MIPS doesn't have extending float->double load/store. Set LoadExtAction; // for f32, f16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:21,extend,extending,21,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['extend'],['extending']
Modifiability,// MIPS64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp:59,extend,extended,59,interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,1,['extend'],['extended']
Modifiability,"// MOD can take several forms:; // 1. $X - take the type of parameter / variable X.; // 2. The value ""R"" - take the type of the return type.; // 3. a type string; // 4. The value ""U"" or ""S"" to switch the signedness.; // 5. The value ""H"" or ""D"" to half or double the bitwidth.; // 6. The value ""8"" to convert to 8-bit (signed) integer lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:72,variab,variable,72,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variable']
Modifiability,"// MOV32ri may be used for producing zero-extended 32-bit immediates in; // 64-bit parameters, so we need to consider super-registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// MOVZWi may be used for producing zero-extended 32-bit immediates in; // 64-bit parameters, so we need to consider super-registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:41,extend,extended,41,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// MSA has a minimum offset of 10 bits signed. If there is a variable; // sized object on the stack, the estimation cannot account for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp:61,variab,variable,61,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// MSB variable wrapped, no more unique combinations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:7,variab,variable,7,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,1,['variab'],['variable']
Modifiability,// MSP430 implicitly zero-extends 8-bit results in 16-bit registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp:26,extend,extends,26,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,2,['extend'],['extends']
Modifiability,// MSVC CRT has a global variable holding security cookie.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,6,['variab'],['variable']
Modifiability,// MSVC allows this. Keep the inherited attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:30,inherit,inherited,30,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherited']
Modifiability,// MSVC appears to mangle GUIDs as if they were variables of type; // 'const struct __s_GUID'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:48,variab,variables,48,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['variab'],['variables']
Modifiability,// MSVC inherits DLL attributes to partial class template specializations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:8,inherit,inherits,8,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherits']
Modifiability,// MVE can optimize a fpext(load(4xhalf)) using an extending integer load.; // Same for stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:51,extend,extending,51,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,"// MVE does not have a single instruction to perform the truncation of a v4i32; // into the lower half of a v8i16, in the same way that a NEON vmovn would.; // Most of the instructions in MVE follow the 'Beats' system, where moving; // values from different lanes is usually something that the instructions; // avoid.; //; // Instead it has top/bottom instructions such as VMOVLT/B and VMOVNT/B,; // which take a the top/bottom half of a larger lane and extend it (or do the; // opposite, truncating into the top/bottom lane from a larger lane). Note; // that because of the way we widen lanes, a v4i16 is really a v4i32 using the; // bottom 16bits from each vector lane. This works really well with T/B; // instructions, but that doesn't extend to v8i32->v8i16 where the lanes need; // to move order.; //; // But truncates and sext/zext are always going to be fairly common from llvm.; // We have several options for how to deal with them:; // - Wherever possible combine them into an instruction that makes them; // ""free"". This includes loads/stores, which can perform the trunc as part; // of the memory operation. Or certain shuffles that can be turned into; // VMOVN/VMOVL.; // - Lane Interleaving to transform blocks surrounded by ext/trunc. So; // trunc(mul(sext(a), sext(b))) may become; // VMOVNT(VMUL(VMOVLB(a), VMOVLB(b)), VMUL(VMOVLT(a), VMOVLT(b))). (Which in; // this case can use VMULL). This is performed in the; // MVELaneInterleavingPass.; // - Otherwise we have an option. By default we would expand the; // zext/sext/trunc into a series of lane extract/inserts going via GPR; // registers. One for each vector lane in the vector. This can obviously be; // very expensive.; // - The other option is to use the fact that loads/store can extend/truncate; // to turn a trunc into two truncating stack stores and a stack reload. This; // becomes 3 back-to-back memory operations, but at least that is less than; // all the insert/extracts.; //; // In order to do the last, we convert c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:454,extend,extend,454,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// MVE extend costs, taken from codegen tests. i8->i16 or i16->i32 is one; // instruction, i8->i32 is two. i64 zexts are an VAND with a constant, sext; // are linearised so take more.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:7,extend,extend,7,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// MVE vcvt f16 -> f32, extending from either the bottom or top lanes; // MVE VIDUP instruction, taking a start value and increment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:24,extend,extending,24,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extending']
Modifiability,"// M_PI is not standard; // two possibilities to generate a random gauss variable (m=0,s=1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h:73,variab,variable,73,math/minuit2/test/MnSim/GaussRandomGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h,1,['variab'],['variable']
Modifiability,// Mach-O specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h:19,config,configuration,19,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOConfig.h,1,['config'],['configuration']
Modifiability,// Mach-O thread local variable relocations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,1,['variab'],['variable']
Modifiability,"// MachO specific sections.; /// Section for thread local structure information.; ///; /// Contains the source code name of the variable, visibility and a pointer to; /// the initial value (.tdata or .tbss).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:128,variab,variable,128,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,1,['variab'],['variable']
Modifiability,"// Machinery for the grouping of intrinsics by similar codegen.; //; // The general setup is that 'MergeableGroup' stores the things that a set of; // similarly shaped intrinsics have in common: the text of their code; // generation, and the number and type of their parameter variables.; // MergeableGroup is the key in a std::map whose value is a set of; // OutputIntrinsic, which stores the ways in which a particular intrinsic; // specializes the MergeableGroup's generic description: the function name and; // the _values_ of the parameter variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:277,variab,variables,277,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,2,['variab'],['variables']
Modifiability,// Main portable variants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:8,portab,portable,8,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['portab'],['portable']
Modifiability,"// Main-transparency variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveElement.h:21,variab,variable,21,graf3d/eve/inc/TEveElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveElement.h,2,['variab'],['variable']
Modifiability,"// Make a Phi node in the current block for the i^th variable in CurrentVarMap.; // If E != null, sets Phi[CurrentBlockInfo->ArgIndex] = E.; // If E == null, this is a backedge and will be set later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,"// Make a copy so we can convert it to the extended semantics.; // Note that we cannot convert the addend directly, as the extendedSemantics; // is a local variable (which we take a reference to).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,3,"['extend', 'variab']","['extended', 'extendedSemantics', 'variable']"
Modifiability,// Make a global variable as a placeholder for this reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['variab'],['variable']
Modifiability,// Make a global variable. We will replace this with a GEP to this; // position after installing the initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,2,['variab'],['variable']
Modifiability,// Make a placeholder global variable as a placeholder for this reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['variab'],['variable']
Modifiability,"// Make a quick check if variable can be default NULL initialized; // and avoid going through rest of code which may do, for c++11,; // initialization of memory to all NULLs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// Make a snapshot of the generated variables that we can overwrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:36,variab,variables,36,roofit/roofitcore/src/RooAbsGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx,1,['variab'],['variables']
Modifiability,// Make emitGlobalVariable() no-op for NVPTX.; // Global variables have been already emitted by the time the base AsmPrinter; // attempts to do so in doFinalization() (see NVPTXAsmPrinter::emitGlobals()).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h:57,variab,variables,57,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,1,['variab'],['variables']
Modifiability,"// Make instance of TChainProof via the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:40,plugin,plugin,40,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['plugin'],['plugin']
Modifiability,"// Make list of all variables to be bound",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFunctor.cxx:20,variab,variables,20,roofit/roofitcore/src/RooFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFunctor.cxx,1,['variab'],['variables']
Modifiability,"// Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:71,parameteriz,parameterization,71,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['parameteriz'],['parameterization']
Modifiability,"// Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:71,parameteriz,parameterization,71,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['parameteriz'],['parameterization']
Modifiability,"// Make list of variables to be projected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:16,variab,variables,16,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,3,['variab'],['variables']
Modifiability,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:101,parameteriz,parameterized,101,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['parameteriz'],['parameterized']
Modifiability,"// Make parameterized binning from [x_lowbound,x] for each x_prime",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:8,parameteriz,parameterized,8,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['parameteriz'],['parameterized']
Modifiability,"// Make parameterized range in t : [tmin,5]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:8,parameteriz,parameterized,8,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['parameteriz'],['parameterized']
Modifiability,"// Make set with clone of variables (placeholder for output)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:26,variab,variables,26,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['variab'],['variables']
Modifiability,// Make space for a fixup that will eventually have a section relative; // relocation pointing at the offset where the variable becomes live.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp:119,variab,variable,119,interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,1,['variab'],['variable']
Modifiability,// Make sure all other operands are equally extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:44,extend,extended,44,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Make sure all variables have entries in Value2Index or NewVariables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:17,variab,variables,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variables']
Modifiability,"// Make sure at least one sign bit is included in the result, so it; // will get properly sign-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:95,extend,extended,95,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['extend'],['extended']
Modifiability,// Make sure both branches are extended in the same way.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:31,extend,extended,31,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Make sure bounding box does not have a zero size by adding padding:; // zero-size bounding box cannot be extended properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:108,extend,extended,108,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,1,['extend'],['extended']
Modifiability,"// Make sure nobody can create instances of the special variable types. nvcc; // also disallows taking address of special variables, so we disable address-of; // operator as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h:56,variab,variable,56,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h,2,['variab'],"['variable', 'variables']"
Modifiability,"// Make sure returned pointers are live. We might be trying to return a; // pointer or reference to a local variable.; // Just return false, since a diagnostic has already been emitted in Sema.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:108,variab,variable,108,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['variab'],['variable']
Modifiability,// Make sure smaller parameters are zero-extended to i64 if required by the; // target ABI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp:41,extend,extended,41,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,1,['extend'],['extended']
Modifiability,"// Make sure that CutRange() also considers the variables not selected by; // SelectVars() in RooAbsData::reduce().; //; // Covers JIRA issue ROOT-8040.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:48,variab,variables,48,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['variab'],['variables']
Modifiability,// Make sure that ISelPosition gets properly updated when nodes are deleted; // in calls made from this function. New nodes inherit relevant metadata.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:124,inherit,inherit,124,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['inherit'],['inherit']
Modifiability,"// Make sure that global data has at least 16 bits of alignment by; // default, so that we can refer to it using LARL. We don't have any; // special requirements for stack variables though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp:172,variab,variables,172,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,1,['variab'],['variables']
Modifiability,// Make sure that loop counter variable is not merged into loop body; // function argument structure and it is passed as separate variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['variab'],['variable']
Modifiability,"// Make sure that the name of this variable doesn't clash with other stuff",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:35,variab,variable,35,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variable']
Modifiability,// Make sure that the stack protector comes before the local variables on the; // stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp:61,variab,variables,61,interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp,2,['variab'],['variables']
Modifiability,"// Make sure that variable 'Constant' is only set if 'SplatBitSize' is a; // multiple of 'BitWidth'. Otherwise, we could propagate a wrong value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// Make sure that we don't have circular inheritance among our dependent; // bases. For non-dependent bases, the check for completeness below handles; // this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:41,inherit,inheritance,41,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheritance']
Modifiability,// Make sure the extend expects a 32-bit source register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['extend'],['extend']
Modifiability,// Make sure the extended decl info is allocated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:17,extend,extended,17,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,4,['extend'],['extended']
Modifiability,// Make sure the extended qualifier info is allocated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:17,extend,extended,17,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['extend'],['extended']
Modifiability,// Make sure the globals captured in the provided statement are local by; // using the privatization logic. We assume the same variable is not; // captured more than once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:127,variab,variable,127,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// Make sure the sandbox area exist and is writable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:17,sandbox,sandbox,17,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Modifiability,// Make sure the two FRs are from the same kind of record. Just in case!; // FIXME: This is probably where inheritance would be a problem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:107,inherit,inheritance,107,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['inherit'],['inheritance']
Modifiability,// Make sure this is a reg+imm.; // FIXME: It is possible to extend it to handle reg+reg cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:61,extend,extend,61,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,1,['extend'],['extend']
Modifiability,"// Make sure this is not a spill slot: spill slots cannot be aligned; // if there are variable-sized objects on the stack. They must be; // accessible via FP (which is not aligned), because SP is unknown,; // and AP may not be available at the location of the load/store.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVExtract.cpp:86,variab,variable-sized,86,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVExtract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVExtract.cpp,1,['variab'],['variable-sized']
Modifiability,// Make sure to pass the instantiated variable to the consumer at the end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"// Make sure varSubset doesn't contain any variable not in this dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:43,variab,variable,43,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,3,['variab'],['variable']
Modifiability,// Make sure we don't affect potential future NoRerun CGSCC adaptors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:60,adapt,adaptors,60,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['adapt'],['adaptors']
Modifiability,"// Make sure we don't go offscreen (use fDraw variables set in draw)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloLegoOverlay.cxx:46,variab,variables,46,graf3d/eve/src/TEveCaloLegoOverlay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloLegoOverlay.cxx,2,['variab'],['variables']
Modifiability,// Make sure we emit a debug reference to the global variable.; // This should probably fire even for,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,// Make sure we extend blocks if necessary.; // FIXME: doing this here is really ugly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:16,extend,extend,16,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['extend'],['extend']
Modifiability,// Make sure we have VFP and that we're extending float to double.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:40,extend,extending,40,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,1,['extend'],['extending']
Modifiability,// Make sure we inherit our base class's operator=(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:16,inherit,inherit,16,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['inherit'],['inherit']
Modifiability,"// Make sure we only rewrite using simple induction variables;; // otherwise, we can make the trip count of a loop unanalyzable; // to SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:21,rewrite,rewrite,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,2,"['rewrite', 'variab']","['rewrite', 'variables']"
Modifiability,// Make sure we only visit each global variable only once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/StripSymbols.cpp,1,['variab'],['variable']
Modifiability,// Make sure we were given a valid extend opcode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// Make temporary clone of original convolution to preserve configuration information; // This information will be propagated to a newly create convolution in a subsequent; // call to initialize()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvPdf.cxx:60,config,configuration,60,roofit/roofitcore/src/RooNumConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvPdf.cxx,1,['config'],['configuration']
Modifiability,"// Make the loop iteration variable private (for worksharing; // constructs), linear (for simd directives with the only one; // associated loop) or lastprivate (for simd directives with several; // collapsed or ordered loops).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Make this (privately inherited) member public.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:24,inherit,inherited,24,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['inherit'],['inherited']
Modifiability,// Make unique name for device side static file-scope variable for HIP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,2,['variab'],['variable']
Modifiability,"// Make working copy of variables list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:24,variab,variables,24,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variables']
Modifiability,// Managed variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:11,variab,variable,11,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['variab'],['variable']
Modifiability,// Manages variable groups:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// Mangle a GUID object as if it were a variable with the corresponding; // mangled name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['variab'],['variable']
Modifiability,// Mangle extended parameter info as order-sensitive qualifiers here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,extend,extended,10,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,// Mangle matrix types as a vendor extended type:; // u<Len>matrix_typeI<Rows><Columns><element type>E,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:35,extend,extended,35,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,// Mangle matrix types as a vendor extended type:; // u<Len>matrix_typeI<row expr><column expr><element type>E,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:35,extend,extended,35,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,"// Mangle ownership casts as a vendor extended operator __bridge,; // __bridge_transfer, or __bridge_retain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:38,extend,extended,38,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,// Mangle variable name to null stream to collect tags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,// Mangling only works for functions and variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:41,variab,variables,41,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['variab'],['variables']
Modifiability,// Manifest the launch configuration in the metadata matching the kernel; // environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:23,config,configuration,23,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['config'],['configuration']
Modifiability,// Manually handle aliases for pre-configured pipeline fragments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:35,config,configured,35,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,2,['config'],['configured']
Modifiability,"// Map ""T omp_in;"" variable to ""*omp_in_parm"" value in all expressions.; // Map ""T omp_out;"" variable to ""*omp_out_parm"" value in all expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,// Map between induction variable and its increment,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,2,['variab'],['variable']
Modifiability,"// Map explicit sub-registers first, so the names take precedence.; // The inherited sub-registers are mapped below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:75,inherit,inherited,75,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['inherit'],['inherited']
Modifiability,// Map from Stmt to TIL Variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:24,Variab,Variables,24,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,1,['Variab'],['Variables']
Modifiability,// Map from clang local variables to indices in a LVarDefinitionMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:24,variab,variables,24,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,1,['variab'],['variables']
Modifiability,// Map from last block to the chain that contains it. This allows us to extend; // chains as we find new triangles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:72,extend,extend,72,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['extend'],['extend']
Modifiability,// Map from local variable indices to SSA variables (or constants).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,2,['variab'],"['variable', 'variables']"
Modifiability,// Map from one LexicalScope to all the variables in that scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:40,variab,variables,40,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Map of Variable: [Fragments].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:10,Variab,Variable,10,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Variab'],['Variable']
Modifiability,// Map of overlapping variable fragments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:22,variab,variable,22,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,2,['variab'],['variable']
Modifiability,// Map of values to the locations that store them for every value used by; // the variables that may have become available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:82,variab,variables,82,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Map our optimization levels into one of the distinct levels used to; // configure the pipeline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:75,config,configure,75,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['config'],['configure']
Modifiability,// Map to separate global variables according to the lexical scope they; // belong in. A null local scope represents the global scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:26,variab,variables,26,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variables']
Modifiability,"// Map to the first declaration that we've already merged into this one.; // The TSI of redeclarations might not match (due to calling conventions; // being inherited onto the type but not the TSI), but the TSI type of; // the first declaration of the function should match across modules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:157,inherit,inherited,157,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inherit'],['inherited']
Modifiability,// Map used to seperate variables according to the lexical scope they belong; // in. This is populated by recordLocalVariable() before; // collectLexicalBlocks() separates the variables between the FunctionInfo; // and LexicalBlocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:24,variab,variables,24,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,2,['variab'],['variables']
Modifiability,"// MapReduce; // Redefinition of the MapReduce classes of the base class, to adapt them to; // TProcessExecutor's logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/ROOT/TProcessExecutor.hxx:77,adapt,adapt,77,core/multiproc/inc/ROOT/TProcessExecutor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/ROOT/TProcessExecutor.hxx,1,['adapt'],['adapt']
Modifiability,// Maps libcall names to their RTLIB::Libcall number. Builds the map in a; // constructor for use with a static variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp:112,variab,variable,112,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp,1,['variab'],['variable']
Modifiability,// Maps physreg numbers to the variables they describe.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variables']
Modifiability,// Maps variable into dbg users (#dbg values/declares for this variable).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:8,variab,variable,8,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,2,['variab'],['variable']
Modifiability,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// Mark all functions used in the rewrite as referenced. Note that when; // a < b is rewritten to (a <=> b) < 0, both the <=> and the < might be; // function calls, and/or there might be a user-defined conversion sequence; // applied to the operands of the <.; // FIXME: this is a bit instantiation-specific.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:34,rewrite,rewrite,34,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['rewrite'],['rewrite']
Modifiability,// Mark all global variables with initializers that are not in the api as; // internal as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,1,['variab'],['variables']
Modifiability,"// Mark all variable to store their errors in the dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:12,variab,variable,12,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['variab'],['variable']
Modifiability,// Mark all variables in private list clauses as used in inner region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,variab,variables,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Mark all variables in private list clauses as used in inner region.; // Required for proper codegen of combined directives.; // TODO: add processing for other clauses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,variab,variables,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Mark all variables uninitialized at the entry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:12,variab,variables,12,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variables']
Modifiability,// Mark both the variable region and its contents as interesting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,// Mark floating-point truncating stores/extending loads as having custom; // lowering,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:41,extend,extending,41,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Mark given operand as extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp,2,['extend'],['extended']
Modifiability,// Mark integer truncating stores/extending loads as having custom lowering,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Mark lvalue as nontemporal if the variable is marked as nontemporal; // in simd context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,2,['variab'],['variable']
Modifiability,"// Mark read/write-only variables which can be imported with specific; // attribute. We can't internalize them now because IRMover will fail; // to link variable definitions to their external declarations during; // ThinLTO import. We'll internalize read-only variables later, after; // import is finished. See internalizeGVsAfterImport.; //; // If global value dead stripping is not enabled in summary then; // propagateConstants hasn't been run. We can't internalize GV; // in such case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Mark string variable as defined to detect collisions between; // string and numeric variables in parseNumericVariableUse() and; // defineCmdlineVariables() when the latter is created later than the; // former. We cannot reuse GlobalVariableTable for this by populating; // it with an empty string since we would then lose the ability to; // detect the use of an undefined variable in match().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Mark the counter variable as used so that it isn't optimized out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,// Mark the data variable as used so that it isn't stripped out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,// Mark the string variable as defined to detect collisions between; // string and numeric variables in defineCmdlineVariables when the latter; // is created later than the former. We cannot reuse GlobalVariableTable; // for this by populating it with an empty string since we would then; // lose the ability to detect the use of an undefined variable in; // match().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Mark the user variable as used so that it isn't stripped out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// Mark the variable as potentially uninitialized for those cases where; // it's used on an indirect path, where it's not guaranteed to be; // defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,// Mark the variable escaped if nobody else referenced it and compute the; // localescape index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['variab'],['variable']
Modifiability,// Mark this variable as undefined,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,// Mark variable as allocated:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,// Mark variable as used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Mark variables on back edges as ""unknown"" if they've been changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:8,variab,variables,8,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variables']
Modifiability,// Mask off upper 16-bits of sign-extended constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Mask operation additionally required extend and truncate,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// Mask out the opcode.; // Now we've got the shifted immediate, shift by 2, sign extend and ret.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h:82,extend,extend,82,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,1,['extend'],['extend']
Modifiability,// Mask sign extend has an instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,4,['extend'],['extend']
Modifiability,// Mask was extended from a boolean vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:12,extend,extended,12,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['extend'],['extended']
Modifiability,// Mask zero extend is a sext + shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,4,['extend'],['extend']
Modifiability,"// Masking the negated extension of a boolean is just the zero-extended; // boolean:; // and (sub 0, zext(bool X)), 1 --> zext(bool X); // and (sub 0, sext(bool X)), 1 --> zext(bool X); //; // Note: the SimplifyDemandedBits fold below can make an information-losing; // transform, and then we have no way to find this better fold.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,extend,extended,63,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// Match (icmp unsigned-cond zext, RHS); // TODO: Extend to handle corresponding sext/signed-cmp case; // TODO: Extend to other invertible functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:50,Extend,Extend,50,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['Extend'],['Extend']
Modifiability,// Match a shared variable operand and 2 non-opaque constant operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// Match against a VZEXT_MOVL vXi32 and vXi16 zero-extending instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:51,extend,extending,51,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Match against one or both scalar values being inserted into constant; // vectors:; // vec_op VecC0, (inselt VecC1, V1, Index); // vec_op (inselt VecC0, V0, Index), VecC1; // vec_op (inselt VecC0, V0, Index), (inselt VecC1, V1, Index); // TODO: Deal with mismatched index constants and variable indexes?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:288,variab,variable,288,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,1,['variab'],['variable']
Modifiability,"// Match any non-shifted, non-extend, non-immediate add expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// Match exactly the main sequence used to describe global variables:; // `DW_OP_addr[x] [+ DW_OP_plus_uconst]`. Currently, this is the sequence; // that LLVM produces for DILocalVariables and DIGlobalVariables. If, in; // future, the DWARF producer (`DwarfCompileUnit::addLocationAttribute()` is; // a good starting point) is extended to use further expressions, this code; // needs to be updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp:59,variab,variables,59,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"// Match select ?, TC, FC where the constants are equal but negated.; // TODO: Generalize to handle a negated variable operand?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['variab'],['variable']
Modifiability,// Match the remaining variable portion of the GEP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// Match the types so we can compare the stride and the BETakenCount.; // The Stride can be positive/negative, so we sign extend Stride;; // The backedgeTakenCount is non-negative, so we zero extend BETakenCount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:122,extend,extend,122,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['extend'],['extend']
Modifiability,// Match the variable offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,2,['variab'],['variable']
Modifiability,"// Match this pattern:; // (or (and (shl (A, 8)), 0xff00ff00), (and (srl (A, 8)), 0x00ff00ff)); // And rewrite this to:; // (rotr (bswap A), 16)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,rewrite,rewrite,103,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['rewrite'],['rewrite']
Modifiability,// Match unsigned saturated add of 2 variables with an unnecessary 'not'.; // Strictness of the comparison is irrelevant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['variab'],['variables']
Modifiability,// Match unsigned saturated add of 2 variables with an unnecessary 'not'.; // There are 8 commuted variants.; // Canonicalize -1 (saturated result) to true value of the select.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['variab'],['variables']
Modifiability,"// Matched reduce.add(ext(mul(ext(A), ext(B))); // Note that the extend opcodes need to all match, or if A==B they will have; // been converted to zext(mul(sext(A), sext(A))) as it is known positive,; // which is equally fine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:65,extend,extend,65,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['extend'],['extend']
Modifiability,"// Matches the same pattern as above, except it also looks for truncs; // on the phi, which can be the result of widening the induction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:136,variab,variables,136,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variables']
Modifiability,"// Matches the splat of a value which can be extended or truncated, such that; // only the bottom 8 bits are preserved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.h:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.h,1,['extend'],['extended']
Modifiability,// Matches {U/S}ADDV(ext(x)) => {U/S}ADDLV(x); // Ensure that the type coming from the extend instruction is the right size,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp:87,extend,extend,87,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp,1,['extend'],['extend']
Modifiability,"// MaterializeTemporaryExpr may appear out of place, after a few field and; // base-class accesses have been made to the object, even though semantically; // it is the whole object that gets materialized and lifetime-extended.; //; // For example:; //; // `-MaterializeTemporaryExpr; // `-MemberExpr; // `-CXXTemporaryObjectExpr; //; // instead of the more natural; //; // `-MemberExpr; // `-MaterializeTemporaryExpr; // `-CXXTemporaryObjectExpr; //; // Use the usual methods for obtaining the expression of the base object,; // and record the adjustments that we need to make to obtain the sub-object; // that the whole expression 'Ex' refers to. This trick is usual,; // in the sense that CodeGen takes a similar route.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:217,extend,extended,217,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['extend'],['extended']
Modifiability,"// Materializing increment expressions in the preheader that didn't exist in; // the original code may cost a register. For example, sign-extended array; // indices can produce ridiculous increments like this:; // IV + ((sext i32 (2 * %s) to i64) + (-1 * (sext i32 %s to i64)))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:138,extend,extended,138,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,// Max of the input and what this extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp:34,extend,extends,34,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,2,['extend'],['extends']
Modifiability,"// Maximum number of instructions in a packet before shuffling,; // including a compound one or a duplex or an extender.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.h:111,extend,extender,111,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.h,1,['extend'],['extender']
Modifiability,// May need to rewrite constant operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:15,rewrite,rewrite,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,1,['rewrite'],['rewrite']
Modifiability,// Member pointers in the MS ABI have special behavior in; // RequireCompleteType: they attach a MSInheritanceAttr to the CXXRecordDecl; // to indicate which inheritance model to use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:158,inherit,inheritance,158,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['inherit'],['inheritance']
Modifiability,// Member variables require a different approach to check for self moves.; // MemberExpr's are the same if every nested MemberExpr refers to the same; // Decl and that the base Expr's are DeclRefExpr's with the same Decl or; // the base Expr's are CXXThisExpr's.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variables']
Modifiability,// Members of categories extending an interface are serialized as members of; // the interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:25,extend,extending,25,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['extend'],['extending']
Modifiability,"// Members present:; //; // static const SCEV::NoWrapFlags WrapType;; //; // static const ExtendOpTraitsBase::GetExtendExprTy GetExtendExpr;; //; // static const SCEV *getOverflowLimitForStep(const SCEV *Step,; // ICmpInst::Predicate *Pred,; // ScalarEvolution *SE);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:90,Extend,ExtendOpTraitsBase,90,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Extend'],['ExtendOpTraitsBase']
Modifiability,// Memory operand should be considered last.; // Change the priority such that Memory operand are assigned in; // the reverse order that they came in.; // TODO: Make this a member variable and probably do something about hints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:180,variab,variable,180,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['variab'],['variable']
Modifiability,// Memory reserved in the local variable space of the callers stack frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Memtag sanitization works differently: sanitization is requested by clang; // when `-fsanitize=memtag-globals` is provided, and the request can be; // denied (and the attribute removed) by the AArch64 global tagging pass if; // it can't be fulfilled (e.g. the global variable is a TLS variable).; // Memtag sanitization has to interact with other parts of LLVM (like; // supressing certain optimisations, emitting assembly directives, or; // creating special relocation sections).; //; // Use `GlobalValue::isTagged()` to check whether tagging should be enabled; // for a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:270,variab,variable,270,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,3,['variab'],['variable']
Modifiability,"// Mentioning a member pointer type for an array type causes us to lock in; // an inheritance model, even if it's inside an unused typedef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:82,inherit,inheritance,82,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['inherit'],['inheritance']
Modifiability,// Merge a back edge into the current variable map.; // This will create phi nodes for all variables in the variable map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Merge inherited info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:9,inherit,inherited,9,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,2,['inherit'],['inherited']
Modifiability,// Merge the old default argument into the new parameter unless the new; // function is a friend declaration in a template class. In the latter; // case the default arguments will be inherited when the friend; // declaration will be instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:183,inherit,inherited,183,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// Merge the statistic quantities into local variables to then; // update the data members of this object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:45,variab,variables,45,math/mathcore/src/TStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx,1,['variab'],['variables']
Modifiability,"// Merge them together, SubVec should be zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,extend,extended,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Merge values from Map into the current variable map.; // This will construct Phi nodes in the current basic block as necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,// Merge with any existing definition.; // FIXME: This is duplicated in several places. Refactor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:88,Refactor,Refactor,88,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['Refactor'],['Refactor']
Modifiability,"// Meta-p.d.f flat in all observables introducing only extended ML term",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendedTerm.h:55,extend,extended,55,roofit/roofitcore/inc/RooExtendedTerm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendedTerm.h,1,['extend'],['extended']
Modifiability,// Metadata for global variables and function declarations is copied eagerly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:23,variab,variables,23,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['variab'],['variables']
Modifiability,// Method does not override anything; // FIXME: this does not work with multiple inheritance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:81,inherit,inheritance,81,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['inherit'],['inheritance']
Modifiability,"// Method for multiple variable dimensions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h:23,variab,variable,23,tree/treeplayer/inc/TFormLeafInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h,1,['variab'],['variable']
Modifiability,"// Method-specific ranking for input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:37,variab,variables,37,tmva/tmva/inc/TMVA/Ranking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h,1,['variab'],['variables']
Modifiability,"// MethodCuts redefines some of the evaluation variables and histograms -> must access private members",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:47,variab,variables,47,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,// Methods for handling the Extended-type case in functions above.; // These are all out-of-line to prevent users of this header file; // from having a dependency on Type.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:28,Extend,Extended-type,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['Extend'],['Extended-type']
Modifiability,// Might not have attached any initializer to the loop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:55,variab,variable,55,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['variab'],['variable']
Modifiability,// Mingw64 GCC uses the old 80 bit extended precision floating point; // unit. It passes them indirectly through memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:35,extend,extended,35,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['extend'],['extended']
Modifiability,// Mips specific constraints; // GCC config/mips/constraints.md; //; // 'd' : An address register. Equivalent to r; // unless generating MIPS16 code.; // 'y' : Equivalent to r; retained for; // backwards compatibility.; // 'c' : A register suitable for use in an indirect; // jump. This will always be $25 for -mabicalls.; // 'l' : The lo register. 1 word storage.; // 'x' : The hilo register pair. Double word storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:37,config,config,37,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['config'],['config']
Modifiability,"// Mod fullname and 'rename' the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:33,variab,variable,33,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['variab'],['variable']
Modifiability,"// Modifiers to guide how an ISD::SETCC node's result is to be computed; // in a GPR.; // ZExtOrig - use the original condition code, zero-extend value; // ZExtInvert - invert the condition code, zero-extend value; // SExtOrig - use the original condition code, sign-extend value; // SExtInvert - invert the condition code, sign-extend value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:139,extend,extend,139,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,4,['extend'],['extend']
Modifiability,"// Modify the ""complementarity"" component of the; // residuals, by adding the pairwise products of the; // complementary variables plus a constant alpha to this; // term.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h:121,variab,variables,121,math/quadp/inc/TQpResidual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h,1,['variab'],['variables']
Modifiability,"// Modify the TypeSpec per-argument to get a concrete Type, and create; // known variables for each.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:81,variab,variables,81,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variables']
Modifiability,"// Modify the TypeSpec per-argument to get a concrete Type, and create; // known variables for each.; // Types[0] is the return value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:81,variab,variables,81,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variables']
Modifiability,"// Modify the variable's linkage by its type, but ignore the; // type's visibility unless it's a definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:14,variab,variable,14,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:52,variab,variables,52,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// More than 1 variable index, use outer result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variable']
Modifiability,// Most comparisons of register against an immediate value allow; // the immediate to be constant-extended. There are some exceptions; // though. Make sure the new combination will work.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:98,extend,extended,98,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['extend'],['extended']
Modifiability,"// Most markup uses this class. Some markup extends this class with; // additional information, but most use it as is, at the very least.; //; // If the markup doesn't have arguments (the ""count"" field of; // TGHtmlElement is 0) then the extra ""argv"" field of this class; // is not allocated and should not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:44,extend,extends,44,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['extend'],['extends']
Modifiability,"// Most non-template variables have strong linkage; inline variables are; // linkonce_odr or (occasionally, for compatibility) weak_odr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,['variab'],['variables']
Modifiability,"// Most parse failures other than when parsing extended opcodes are due to; // failures to read ULEBs. Bail out of parsing, since we don't know where to; // continue reading from as there is no stated length for such byte; // sequences. Print the final trailing new line if needed before doing so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['extend'],['extended']
Modifiability,"// Move all to the right, while sign or zero extending.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:45,extend,extending,45,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Move over * and & if they are bound to the variable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['variab'],['variable']
Modifiability,// Move the extend into the same block as the load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// Move the name variable to the right section. Place them in a COMDAT group; // if the associated function is a COMDAT. This will make sure that only one; // copy of counters of the COMDAT function will be emitted after linking. Keep; // in mind that this pass may run before the inliner, so we need to create a; // new comdat group for the counters and profiling data. If we use the comdat; // of the parent function, that will result in relocations against discarded; // sections.; //; // If the data variable is referenced by code, counters and data have to be; // in different comdats for COFF because the Visual C++ linker will report; // duplicate symbol errors if there are multiple external symbols with the; // same name marked IMAGE_COMDAT_SELECT_ASSOCIATIVE.; //; // For ELF, when not using COMDAT, put counters, data and values into a; // nodeduplicate COMDAT which is lowered to a zero-flag section group. This; // allows -z start-stop-gc to discard the entire group when the function is; // discarded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,2,['variab'],['variable']
Modifiability,// Move the upper/lower halves to the lower bits as we'll be extending to; // NextVT. Mask the lower result to zero if HiZ is true and add the results; // together.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:61,extend,extending,61,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,adapt,adapted,425,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['adapt'],['adapted']
Modifiability,"// Move variables which cannot be generated into the list to be generated with accept/reject",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:8,variab,variables,8,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variables']
Modifiability,// MultiKeywordSelector objects are not allocated with new because they have a; // variable size array (for parameter types) at the end of them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,1,['variab'],['variable']
Modifiability,"// Multiple sources, recurse into each source to find a new source; // for it. Then, rewrite the PHI accordingly to its new edges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:85,rewrite,rewrite,85,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// Multiplicative reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially zero-extended); // logical `and` reduction over the original non-extended value:; // vector_reduce_mul(?ext(<n x i1>)); // -->; // zext(vector_reduce_and(<n x i1>)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:62,extend,extended,62,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,3,['extend'],['extended']
Modifiability,// Multiplies of the outer iteration variable and inner iteration; // count will be optimised out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variable']
Modifiability,"// Multiply answer with integration ranges of factorized variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:57,variab,variables,57,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['variab'],['variables']
Modifiability,// Must be a 32-bit sign extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extended']
Modifiability,// Must be extending from vXi16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,extend,extending,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Must be more than one implicit element on the stack.; // FIXME: A better way to implement this would be to add a local variable; // that keeps track of the stack depth and introduce something like a; // DW_LLVM_OP_implicit_location as a placeholder for the location this; // DIExpression is attached to, or else pass the number of implicit stack; // elements into isValid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp:122,variab,variable,122,interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp,1,['variab'],['variable']
Modifiability,// Must extend size to at least 64 bits to be used as an operand for VMULL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extend']
Modifiability,// Must extend the sign bit into higher bits for a G_SEXTLOAD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extend']
Modifiability,// Must extend zero into higher bits with an AND for a G_ZEXTLOAD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extend']
Modifiability,// Must not redefine a typedef with a variably-modified type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:38,variab,variably-modified,38,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variably-modified']
Modifiability,"// Must pass the shift amount needed to sign extend the loaded value prior; // to performing a signed comparison for min/max. ShiftAmt is the number of; // bits to shift the value into position. Pass GRLen-ShiftAmt-ValWidth, which; // is the number of bits to left+right shift the value in order to; // sign-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:45,extend,extend,45,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// Must pass the shift amount needed to sign extend the loaded value prior; // to performing a signed comparison for min/max. ShiftAmt is the number of; // bits to shift the value into position. Pass XLen-ShiftAmt-ValWidth, which; // is the number of bits to left+right shift the value in order to; // sign-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:45,extend,extend,45,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// N00/N10 are zero extended. N01/N11 are sign extended.; // For each element, we need to ensure we have an odd element from one vector; // multiplied by the odd element of another vector and the even element from; // one of the same vectors being multiplied by the even element from the; // other vector. So we need to make sure for each element i, this operator; // is being performed:; // A[2 * i] * B[2 * i] + A[2 * i + 1] * B[2 * i + 1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// NB: Note that bin density for each bin is adjusted to that of default frame binning as shown; // in Y axis label (100 bins --> Events/0.4*Xaxis-dim) so that all bins represent a consistent density; // distribution; // S h o w m i x s t a t e a s y m m e t r y w i t h c u s t o m b i n n i n g; // ------------------------------------------------------------------------------------; // Make plot of dt distribution of data asymmetry in 'mixState' with variable binning; // Create binning object with range (-10,10)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:456,variab,variable,456,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variable']
Modifiability,// NEON vector operations that can extend their inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// NEW: add an array of variables (e.g. for image data)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:24,variab,variables,24,tmva/tmva/inc/TMVA/DataSetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h,1,['variab'],['variables']
Modifiability,"// NEW: add an array of variables (e.g. for image data) with the provided size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:24,variab,variables,24,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['variab'],['variables']
Modifiability,"// NLL = mainTerm + constraintTerm; // mainTerm = sum( entryVals ) + extendedTerm + simTerm [+ binnedDataTerm if activated binnedL option]; // this is what it should be, at least; // total nll should be all these values + constraint term + extended term + simTerm [+binnedDataTerm if activated; // binnedL option]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:69,extend,extendedTerm,69,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,2,['extend'],"['extended', 'extendedTerm']"
Modifiability,"// NOLINT: allocated memory now used by environment variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:52,variab,variable,52,rootx/src/rootx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx,1,['variab'],['variable']
Modifiability,"// NOLINT: do not release memory in ev, will be used by environment variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx:68,variab,variable,68,main/src/pmain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx,1,['variab'],['variable']
Modifiability,"// NOTE: Currently only the leafcount can indicate a dimension that; // is physically variable. So only the left-most dimension is variable.; // When an API is introduced to be able to determine a variable inside dimensions; // one would need to add a way to recalculate the values of fCumulSizes for this; // leaf. This would probably require the addition of a new data member; // fSizes[kMAXCODES][kMAXFORMDIM];; // Also note that EvalInstance expect all the values (but the very first one); // of fCumulSizes to be positive. So indicating that a physical dimension is; // variable (expected for the first one) can NOT be done via negative values of; // fCumulSizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:86,variab,variable,86,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,4,['variab'],['variable']
Modifiability,"// NOTE: If BEValue is loop invariant, we know that the PHI node just; // has a special value for the first iteration of the loop.; // If the value coming around the backedge is an add with the symbolic; // value we just inserted, then we found a simple induction variable!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:264,variab,variable,264,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,"// NOTE: Since this function validates against another TDSetElement,; // if the other TDSetElement (elem) did not use -1 to request all; // entries, this TDSetElement may get less than all entries if it; // requests all (with -1). For the application it was developed for; // (TProofSuperMaster::ValidateDSet) it works, since the design was; // to send the elements to their mass storage domain and let them; // look at the file and send the info back to the supermaster. The; // ability to set fValid was also required to be only exist in; // TDSetElement through certain function and not be set externally.; // TDSetElement may need to be extended for more general applications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:641,extend,extended,641,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['extend'],['extended']
Modifiability,"// NOTE: This should not be allowed for Alphanumeric histograms,; // but it is heavily used (legacy) in the TTreePlayer to fill alphanumeric histograms.; // but in case of alphanumeric do-not extend the axis. It makes no sense",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:192,extend,extend,192,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['extend'],['extend']
Modifiability,"// NOTE: We assume that ONLY the first dimension of a leaf can have a variable; // size AND contain the index for the size of yet another sub-dimension.; // I.e. a variable size array inside a variable size array can only have its; // size vary with the VERY FIRST physical dimension of the leaf.; // Thus once the index of the first dimension is found, all other dimensions; // are fixed!; // NOTE: We could unroll some of this loops to avoid a few tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:70,variab,variable,70,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,3,['variab'],['variable']
Modifiability,"// NOTE: We assume that the inside variable dimensions are dictated by the; // first index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:35,variab,variable,35,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// NOTE: We assume the indexing of variable sizes on the first index!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:35,variab,variable,35,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// NOTE: We don't check that srcsize / tgtsize is reasonable or within the ROOT-imposed limits.; // This is assumed to be handled by the upper layers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx:143,layers,layers,143,core/lz4/src/ZipLZ4.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx,1,['layers'],['layers']
Modifiability,"// NOTE: When support for inside variable dimension is added this; // will become inaccurate (since one of the value in the middle of the chain; // is unknown until GetNdata is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:33,variab,variable,33,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// NOTE: add verification that the directives has the required variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:63,variab,variables,63,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,['variab'],['variables']
Modifiability,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:599,extend,extended,599,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,"// NOTE: trackAssignments doesn't understand base expressions yet, so all; // variables that reach here are guaranteed to start at offset 0 in the; // alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:78,variab,variables,78,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variables']
Modifiability,"// NOTICE: In the code below we use ArithOp to hold the arithmetic operation; // which may be the result of a CAST. We use the variable 'Op', which is the; // non-casted variable when we check for possible users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:127,variab,variable,127,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,4,['variab'],['variable']
Modifiability,// NSObject is a fixed size. If we can see the @implementation of a class; // which inherits from NSObject then we know that all it's offsets also must; // be fixed. FIXME: Can we do this if see a chain of super classes with; // implementations leading to NSObject?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:84,inherit,inherits,84,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['inherit'],['inherits']
Modifiability,"// NVPTX has no way to emit variables at specific sections or support for; // the traditional constructor sections. Instead, we emit mangled global; // names so the runtime can build the list manually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp:28,variab,variables,28,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp,1,['variab'],['variables']
Modifiability,// NaCl MIPS sandbox's instruction bundle size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h:13,sandbox,sandbox,13,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h,1,['sandbox'],['sandbox']
Modifiability,// NaCl sandboxing requires that indirect call instructions are masked.; // This means that function entry points should be bundle-aligned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:8,sandbox,sandboxing,8,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['sandbox'],['sandboxing']
Modifiability,"// Name of the ""errno"" variable.; // FIXME: Is there a system where it is not called ""errno"" but is a variable?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,2,['variab'],['variable']
Modifiability,// Name of the variable that will be displayed by asan; // if a stack-related bug is reported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:15,variab,variable,15,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,1,['variab'],['variable']
Modifiability,"// Named statistical variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TStatistic.h:21,variab,variable,21,math/mathcore/inc/TStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TStatistic.h,1,['variab'],['variable']
Modifiability,// Need address of variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['variab'],['variable']
Modifiability,// Need to avoid trying to rewrite casts contained in macros.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:27,rewrite,rewrite,27,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,// Need to avoid trying to rewrite synthesized casts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:27,rewrite,rewrite,27,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Need to check for protocol refs (id <P>, Foo <P> *) in variable decls; // and cast exprs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variable']
Modifiability,// Need to copy-in the inner copied-in variables not actually used in this; // block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variables']
Modifiability,// Need to sign extend the index since the bits will likely be used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,2,['extend'],['extend']
Modifiability,// Need to sign-extended to 64-bits to handle negative values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Need to transform ISD::PREFETCH into something that doesn't inherit; // all of the properties of ISD::PREFETCH, specifically SDNPMayLoad and; // SDNPMayStore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:63,inherit,inherit,63,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['inherit'],['inherit']
Modifiability,// Needed so that we don't try to implement f128 constant loads using; // a load-and-extend of a f80 constant (in cases where the constant; // would fit in an f80).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:85,extend,extend,85,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Needed to set ranges for variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:28,variab,variables,28,roofit/roostats/src/NumberCountingPdfFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx,2,['variab'],['variables']
Modifiability,// Negate the result to make an 8-bit sign extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extended']
Modifiability,"// Neither is a register. The first source is extendable, but the second; // is not (s8).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp:46,extend,extendable,46,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp,1,['extend'],['extendable']
Modifiability,// Never emit TLS variable xyz in emulated TLS model.; // The initialization value is in __emutls_t.xyz instead of xyz.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,// Never split a variable extractelement that isn't fully scalarized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,1,['variab'],['variable']
Modifiability,// Never split a variable insertelement that isn't fully scalarized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,1,['variab'],['variable']
Modifiability,"// Never use the initializer of a weak variable, not even for constant; // folding. We can't be sure that this is the definition that will be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,// Never warn about shadowing a placeholder variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// New experimental plotOn() with varargs...; // Define configuration for this method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:56,config,configuration,56,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['config'],['configuration']
Modifiability,// New scope for correct construction/destruction of temp variables for; // exclusive scan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,variab,variables,58,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// New style likelihoods define parallelization through Parallelize(...) on fitTo or attributes on; // RooMinimizer::Config.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:117,Config,Config,117,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['Config'],['Config']
Modifiability,// NewMBB inherits CurMBB's block frequency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:10,inherit,inherits,10,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['inherit'],['inherits']
Modifiability,"// Next power in variable i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:17,variab,variable,17,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// Next, captured variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:18,variab,variables,18,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variables']
Modifiability,"// Next, look for variables which don't already have a column, but which; // are now live.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,1,['variab'],['variables']
Modifiability,// No Gro variable was allocated. Simply emit the call to; // get_return_object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,1,['variab'],['variable']
Modifiability,// No Users.; // If the instruction has no users then this is a broken chain and can't be; // a reduction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:106,variab,variable,106,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variable']
Modifiability,"// No capture-default, and this is not an explicit capture; // so cannot capture this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:86,variab,variable,86,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// No check required. G_STORE by itself is a non-extending store.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:49,extend,extending,49,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,1,['extend'],['extending']
Modifiability,// No code is generated for a FP extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:33,extend,extend,33,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['extend'],['extend']
Modifiability,"// No compounds are available. It is not clear whether we should; // even process such extenders where the initializer cannot be; // a single instruction, but do it for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:87,extend,extenders,87,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extenders']
Modifiability,// No debug location at all for the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,// No extending loads from f16 or HW conversions back and forth.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:6,extend,extending,6,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extending']
Modifiability,// No extending loads from i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:6,extend,extending,6,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// No flexible array member found or it doesn't have the ""counted_by""; // attribute.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:6,flexible,flexible,6,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['flexible'],['flexible']
Modifiability,"// No initializer: the variable is now uninitialized. This matters; // for cases like:; // while (...) {; // int n;; // use(n);; // n = 0;; // }; // FIXME: Mark the variable as uninitialized whenever its scope is; // left, since its scope could be re-entered by a jump over the; // declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,2,['variab'],['variable']
Modifiability,"// No more users of extend, delete it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,1,['extend'],['extend']
Modifiability,// No need for device_launch_parameters.h as __clang_cuda_builtin_vars.h above; // has taken care of builtin variables declared in the file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h:109,variab,variables,109,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,1,['variab'],['variables']
Modifiability,"// No need to generate individual map information for the pointer, it; // can be associated with the combined storage if shared memory mode is; // active or the base declaration is not global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:192,variab,variable,192,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// No need to reorder this nodes, still need to extend and to use shuffle,; // just need to merge reordering shuffle and the reuse shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['extend'],['extend']
Modifiability,"// No prototype variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:16,variab,variables,16,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variables']
Modifiability,// No scopes? No variable locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// No shift/extend is the default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,2,['extend'],['extend']
Modifiability,"// No space between the variable name and the initializer list.; // A a1{1};; // Verilog doesn't have such syntax, but it has word operators that are C++; // identifiers like `a inside {b, c}`. So the rule is not applicable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variable']
Modifiability,// No state information for the given variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,1,['variab'],['variable']
Modifiability,"// No value means no extension is needed. If extension is needed, the value; // indicates if it needs to be sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:113,extend,extended,113,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,// No variables associated with the store destination.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:6,variab,variables,6,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// No, we need a new parameter variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:31,variab,variable,31,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,"// No-one ever wants a using-declaration to name an injected-class-name; // of a base class, unless they're declaring an inheriting constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:121,inherit,inheriting,121,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,"// Non constant index. Extend source and destination,; // insert element and then truncate the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,Extend,Extend,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// Non-Variadic Operands: Location, Offset, Variable, Expression; // Variadic Operands: Variable, Expression, Locations...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:44,Variab,Variable,44,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,4,['Variab'],['Variable']
Modifiability,// Non-array float values are extended and passed in a GPR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:30,extend,extended,30,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Non-chain users of this value must either be the setcc in this; // sequence or extends that can be folded into the new {z/s}ext-load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,extend,extends,82,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extends']
Modifiability,"// Non-exported function and variable definitions with a weak-for-linker; // linkage can be internalized in certain cases. The minimum legality; // requirements would be that they are not address taken to ensure that we; // don't break pointer equality checks, and that variables are either read-; // or write-only. For functions, this is the case if either all copies are; // [local_]unnamed_addr, or we can propagate reference edge attributes; // (which is how this is guaranteed for variables, when analyzing whether; // they are read or write-only).; //; // However, we only get to this code for weak-for-linkage values in one of; // two cases:; // 1) The prevailing copy is not in IR (it is in native code).; // 2) The prevailing copy in IR is not exported from its module.; // Additionally, at least for the new LTO API, case 2 will only happen if; // there is exactly one definition of the value (i.e. in exactly one; // module), as duplicate defs are result in the value being marked exported.; // Likely, users of the legacy LTO API are similar, however, currently there; // are llvm-lto based tests of the legacy LTO API that do not mark; // duplicate linkonce_odr copies as exported via the tool, so we need; // to handle that case below by checking the number of copies.; //; // Generally, we only want to internalize a weak-for-linker value in case; // 2, because in case 1 we cannot see how the value is used to know if it; // is read or write-only. We also don't want to bloat the binary with; // multiple internalized copies of non-prevailing linkonce/weak functions.; // Note if we don't internalize, we will convert non-prevailing copies to; // available_externally anyway, so that we drop them after inlining. The; // only reason to internalize such a function is if we indeed have a single; // copy, because internalizing it won't increase binary size, and enables; // use of inliner heuristics that are more aggressive in the face of a; // single call to a static (local). For var",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Non-externally visible variables are numbered here in CodeGen.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:26,variab,variables,26,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variables']
Modifiability,// Non-local variables are also directly modified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp:13,variab,variables,13,interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/AnalysisDeclContext.cpp,1,['variab'],['variables']
Modifiability,// Non-owning containers of categories that extend the class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:44,extend,extend,44,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,1,['extend'],['extend']
Modifiability,// Non-power of two alignment. This is not widely supported by assemblers.; // FIXME: Parameterize this based on MAI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp:86,Parameteriz,Parameterize,86,interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAsmStreamer.cpp,1,['Parameteriz'],['Parameterize']
Modifiability,// Non-static local constexpr variables have unintuitive semantics:; // constexpr int a = 1;; // constexpr const int *p = &a;; // ... is invalid because the address of 'a' is not constant. Suggest; // adding a 'static' in this case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:30,variab,variables,30,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,"// NonTemplateParmDecls should only print one default fwd decl, i.e it should; // omit the inheritant default arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/Autoloading/Def2.h:91,inherit,inheritant,91,interpreter/cling/test/Autoloading/Def2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/Autoloading/Def2.h,1,['inherit'],['inheritant']
Modifiability,// NonVLX sub-targets extend 128/256 vectors to use the 512 version.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// None of the above, need to zero-extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// None of the sandboxing applies, just emit the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:15,sandbox,sandboxing,15,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Modifiability,"// Normalise independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:25,variab,variables,25,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,// Normalize integer types as vendor extended types:; // u<length>i<type size>; // u<length>u<type size>,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:37,extend,extended,37,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,// Not a DBG_VALUE instruction. It may clobber registers which describe; // some variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:81,variab,variables,81,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variables']
Modifiability,"// Not a V1 Segment.; // Okay, we found a V1 live range. If it had a previous, touching, V2 live; // range, extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:108,extend,extend,108,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,// Not a global variable. Maybe an extern function reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,1,['variab'],['variable']
Modifiability,"// Not a real-valued variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:21,variab,variable,21,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['variab'],['variable']
Modifiability,"// Not a scope, visit the Die itself. It could be a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:52,variab,variable,52,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,// Not a variable name nor namespace name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['variab'],['variable']
Modifiability,// Not a variable or constant member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:9,variab,variable,9,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,// Not actually extending,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:16,extend,extending,16,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extending']
Modifiability,// Not in the form of a global constant variable with an initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CallPromotionUtils.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Transforms/Utils/CallPromotionUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CallPromotionUtils.cpp,1,['variab'],['variable']
Modifiability,// Not needed if we can't rewrite due to an invalid state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:26,rewrite,rewrite,26,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['rewrite'],['rewrite']
Modifiability,// Not preserve stack space within prologue for outgoing variables when the; // function contains variable size objects and let eliminateCallFramePseudoInstr; // preserve stack space for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp:57,variab,variables,57,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYFrameLowering.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Not preserve stack space within prologue for outgoing variables when the; // function contains variable size objects or there are vector objects accessed; // by the frame pointer.; // Let eliminateCallFramePseudoInstr preserve stack space for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:57,variab,variables,57,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Not sure how to interpret a bitcast of an extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:45,extend,extending,45,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extending']
Modifiability,// Not the canonical variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['variab'],['variable']
Modifiability,// Note `VisitedVars` contain all the variables in the graph:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:38,variab,variables,38,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,"// Note that Index and Stride of a GEP candidate do not necessarily have the; // same integer type. In that case, during rewriting, Stride will be; // sign-extended or truncated to Index's type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:156,extend,extended,156,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,"// Note that both field index and field length are 8-bit quantities.; // Since variables 'Index' and 'Length' are unsigned values; // obtained from zero-extending field index and field length; // respectively, their sum should never wrap around.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:79,variab,variables,79,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,4,"['extend', 'variab']","['extending', 'variables']"
Modifiability,"// Note that for __block variables, we want to destroy the; // original stack object, not the possibly forwarded object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:25,variab,variables,25,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variables']
Modifiability,"// Note that in all of these cases, __block variables need the RHS; // evaluated first just in case the variable gets moved by the RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:44,variab,variables,44,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Note that the code in FunctionLoweringInfo::ComputePHILiveOutRegInfo; // assumes that constant PHI operands will be zero extended, and failure to; // match that assumption will cause problems if we sign extend here but; // some user of a PHI is in a block for which we fall back to full SDAG; // instruction selection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:124,extend,extended,124,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// Note that the index category of a RooSimultaneous can only be of type; // RooCategory or RooSuperCategory, because these are the only classes that; // inherit from RooAbsCategoryLValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:154,inherit,inherit,154,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['inherit'],['inherit']
Modifiability,// Note that we can return a VariableArrayType here in the case where; // the element type was a dependent VariableArrayType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:29,Variab,VariableArrayType,29,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,['Variab'],['VariableArrayType']
Modifiability,// Note that we can't usefully rewrite this to the inverse without complex; // analysis of the users of the setCC. Largely we rely on duplicates which; // could have been avoided already being avoided here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:31,rewrite,rewrite,31,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,// Note that we do extended encoding of protocol qualifier list; // Only when doing ivar or property encoding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:19,extend,extended,19,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['extend'],['extended']
Modifiability,// Note that we have left ((X / Y) * Y) around.; // If it had other uses we could rewrite it as X - X % Y,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:82,rewrite,rewrite,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Note that we open here with @{ the Doxygen group vecops and it is; // closed again at the end of the C++ namespace VecOps; /**; * \defgroup vecops VecOps; * A ""std::vector""-like collection of values implementing handy operation to analyse them; * @{; */; // From the original SmallVector code:; // This is a 'vector' (really, a variable-sized array), optimized; // for the case when the array is small. It contains some number of elements; // in-place, which allows it to avoid heap allocation when the actual number of; // elements is below that threshold. This allows normal ""small"" cases to be; // fast without losing generality for large inputs.; //; // Note that this does not attempt to be exception safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx:331,variab,variable-sized,331,math/vecops/inc/ROOT/RVec.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx,1,['variab'],['variable-sized']
Modifiability,"// Note the order here. We extend first to preserve the sign, if this value; // is signed, /then/ match the signedness of the result type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:27,extend,extend,27,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,1,['extend'],['extend']
Modifiability,"// Note we take advantage of having only one physically variable; // dimension:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:56,variab,variable,56,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,4,['variab'],['variable']
Modifiability,"// Note: In general, we do not create new shuffles in InstCombine because we; // do not know if a target can lower an arbitrary shuffle optimally. In this; // case, the shuffle uses the existing mask, so there is no additional risk.; // Select the variable vectors first, then perform the binop:; // shuffle (op X, C0), (op Y, C1), M --> op (shuffle X, Y, M), C'; // shuffle (op C0, X), (op C1, Y), M --> op C', (shuffle X, Y, M)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:248,variab,variable,248,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"// Note: Long_t and ULong_t are currently not portable types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h:46,portab,portable,46,core/foundation/inc/RtypesCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/RtypesCore.h,1,['portab'],['portable']
Modifiability,// Note: Since v2f64 is a legal type. We don't need to zero extend the; // source for strict FP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Note: The following bit of code is somewhat distinct from the rest of LVI;; // LVI as a whole tries to compute a lattice value which is conservatively; // correct at a given location. In this case, we have a predicate which we; // weren't able to prove about the merged result, and we're pushing that; // predicate back along each incoming edge to see if we can prove it; // separately for each input. As a motivating example, consider:; // bb1:; // %v1 = ... ; constantrange<1, 5>; // br label %merge; // bb2:; // %v2 = ... ; constantrange<10, 20>; // br label %merge; // merge:; // %phi = phi [%v1, %v2] ; constantrange<1,20>; // %pred = icmp eq i32 %phi, 8; // We can't tell from the lattice value for '%phi' that '%pred' is false; // along each path, but by checking the predicate over each input separately,; // we can.; // We limit the search to one step backwards from the current BB and value.; // We could consider extending this to search further backwards through the; // CFG and/or value graph, but there are non-obvious compile time vs quality; // tradeoffs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:927,extend,extending,927,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['extend'],['extending']
Modifiability,"// Note: This is duplicating a particular part on SimplifyIndVars reasoning.; // We need to duplicate it because given icmp zext(small-iv), C, IVUsers; // never reaches the icmp since the zext doesn't fold to an AddRec unless; // it already has flags. The alternative to this would be to extending the; // set of ""interesting"" IV users to include the icmp, but doing that; // regresses results in practice by querying SCEVs before trip counts which; // rely on them which results in SCEV caching sub-optimal answers. The; // concern about caching sub-optimal results is why we only query SCEVs of; // the loop invariant RHS here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:288,extend,extending,288,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['extend'],['extending']
Modifiability,"// Note: This rule has been modified to work around ROOT bug #15877.; // The original rule was `str = std::string{onfile.chars, 4};`; //; // This bug is triggered by the TClassReadRules unit test (in rfield_class.cxx) in the following way:; // 1. Upon write, RNTuple calls TClass::GetStreamerInfo() to store the streamer info of StructWithTransientString; // 2. The read rule calls TClass::GetDataMemberOffset(""chars"") to fill the `onfile` variable; // 3. The class doesn't find ""chars"" among its real data members (it's ""chars[4]"" in this list); // 4. The class therefore tries to get the offset from the streamer info; the streamer info exists in; // GetCurrentStreamerInfo() because we called TClass::GetStreamerInfo() in step 1.; // Otherwise GetDataMemberOffset() would return 0 which happens to be correct.; // 5. Now we enter the bug:; // - The streamer info has two elements for ""chars"", one with the correct offset (0),; // one cached, with a wrong one (8); // - The streamer info returns the offset of the wrong data member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h:440,variab,variable,440,tree/ntuple/v7/test/CustomStructLinkDef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h,1,['variab'],['variable']
Modifiability,// Note: We assume simple value types because this should only be called with; // legal operations/types.; // TODO: This can be extended to handle extraction to 256-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:128,extend,extended,128,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Note: fast-math-flags flags are controlled by the builder configuration; // and are assumed to apply to all generated arithmetic instructions. Other; // poison generating flags (nsw/nuw/inbounds/inrange/exact) are not part; // of the builder configuration, and since they're not passed explicitly,; // will never be relevant here. Note that it would be generally unsound to; // propagate these from an intrinsic call to the expansion anyways as we/; // change the order of operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:61,config,configuration,61,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,2,['config'],['configuration']
Modifiability,"// Note: minima where the covariance was made posdef are deemed 'valid' ...; // remove limits on pars before calculation - CURRENTLY HAS NO EFFECT, minuit still holds the state as; // transformed interesting note: error on pars before hesse can be significantly smaller than after hesse ...; // what is the pre-hesse error corresponding to? - corresponds to approximation of covariance matrix calculated; // with iterative method; /*auto parSettings = _minimizer.fitter()->Config().ParamsSettings();; for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; ss.RemoveLimits();; }. for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(nullptr)) v->setRange(""backup"",v->getMin(),v->getMax());; v->removeRange();; }*/; // std::cout << ""nIterations = "" << _minimizer.fitter()->GetMinimizer()->NIterations() << std::endl;; // std::cout << ""covQual before hesse = "" << _minimizer.fitter()->GetMinimizer()->CovMatrixStatus() <<; // std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:473,Config,Config,473,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['Config'],['Config']
Modifiability,"// Note: we could also extend to i32 and use i32 med3 if i16 med3 is; // not available, but this is unlikely to be profitable as constants; // will often need to be materialized & extended, especially on; // pre-GFX10 where VOP3 instructions couldn't take literal operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// Notes:; // - Users can only write off of the end when we have an invalid base. Invalid; // bases imply we don't know where the memory came from.; // - We used to be a bit more aggressive here; we'd only be conservative if; // the array at the end was flexible, or if it had 0 or 1 elements. This; // broke some common standard library extensions (PR30346), but was; // otherwise seemingly fine. It may be useful to reintroduce this behavior; // with some sort of list. OTOH, it seems that GCC is always; // conservative with the last element in structs (if it's an array), so our; // current behavior is more compatible than an explicit list approach would; // be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:254,flexible,flexible,254,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['flexible'],['flexible']
Modifiability,// Nothing interesting to do if the inheritance attribute is already set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:36,inherit,inheritance,36,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['inherit'],['inheritance']
Modifiability,// Nothing to do if this is a __block variable captured by a; // non-escaping block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,// Nothing to do; this construction is not responsible for constructing; // the base class containing the inherited constructor.; // FIXME: Can we just pass undef's for the remaining arguments if we don't; // have constructor variants?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:106,inherit,inherited,106,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['inherit'],['inherited']
Modifiability,"// Notice that the RAxisBase configuration is _not_ updated when new; // labels are added. This is by design, according to the RAxisLabels docs.; // The configuration would be updated on Grow(), but we can't test Grow(); // right now since it isn't implemented yet...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:29,config,configuration,29,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,2,['config'],['configuration']
Modifiability,"// Now Orphans contains the inherited subregisters without a direct index.; // Create inferred indexes for all missing entries.; // Work backwards in the Indices vector in order to compose subregs bottom-up.; // Consider this subreg sequence:; //; // qsub_1 -> dsub_0 -> ssub_0; //; // The qsub_1 -> dsub_0 composition becomes dsub_2, so the ssub_0 register; // can be reached in two different ways:; //; // qsub_1 -> ssub_0; // dsub_2 -> ssub_0; //; // We pick the latter composition because another register may have [dsub_0,; // dsub_1, dsub_2] subregs without necessarily having a qsub_1 subreg. The; // dsub_2 -> ssub_0 composition can be shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:28,inherit,inherited,28,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['inherit'],['inherited']
Modifiability,"// Now `FixItsForVariable` gets further reduced: a variable is in; // `FixItsForVariable` iff it can be fixed and all its group mates can be; // fixed.; // Fix-its of bounds-safe overloads of `D` are shared by parameters of `D`.; // That is, when fixing multiple parameters in one step, these fix-its will; // be applied only once (instead of being applied per parameter).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// Now add the base class descriptions.; // Itanium C++ ABI 2.9.5p6c:; // __base_info[] is an array of base class descriptions -- one for every; // direct proper base. Each description is of the type:; //; // struct abi::__base_class_type_info {; // public:; // const __class_type_info *__base_type;; // long __offset_flags;; //; // enum __offset_flags_masks {; // __virtual_mask = 0x1,; // __public_mask = 0x2,; // __offset_shift = 8; // };; // };; // If we're in mingw and 'long' isn't wide enough for a pointer, use 'long; // long' instead of 'long' for __offset_flags. libstdc++abi uses long long on; // LLP64 platforms.; // FIXME: Consider updating libc++abi to match, and extend this logic to all; // LLP64 platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:678,extend,extend,678,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['extend'],['extend']
Modifiability,"// Now apply the information from the collected conditions to RewriteMap.; // Conditions are processed in reverse order, so the earliest conditions is; // processed first. This ensures the SCEVs with the shortest dependency chains; // are constructed first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:62,Rewrite,RewriteMap,62,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Rewrite'],['RewriteMap']
Modifiability,// Now deal with the left-hand side. If this is already an operation node; // from the original expression then just rewrite the rest of the expression; // into it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:117,rewrite,rewrite,117,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['rewrite'],['rewrite']
Modifiability,// Now do the actual rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:21,rewrite,rewrite,21,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Now evaluate the expression whose value this variable should be set; // to, since the expression of a command-line variable definition should; // only use variables defined earlier on the command-line. If not, this; // is an error and we report it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Now extend LR to reach all uses.; // Ignore uses of reserved registers. We only track defs of those.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:7,extend,extend,7,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extend']
Modifiability,// Now extend each pair to the widest seen.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:7,extend,extend,7,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['extend'],['extend']
Modifiability,"// Now look up the TypeDefDecl from the vector type. Without this,; // diagostics look bad. We want extended vector types to appear built-in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:100,extend,extended,100,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['extend'],['extended']
Modifiability,"// Now loop over each string in the block and copy them into the; // environment vector, adjusting the PATH variable as needed when we; // find it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp:108,variab,variable,108,interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,1,['variab'],['variable']
Modifiability,"// Now mangle the type.; // <variable-type> ::= <type> <cvr-qualifiers>; // ::= <type> <pointee-cvr-qualifiers> # pointers, references; // Pointers and references are odd. The type of 'int * const foo;' gets; // mangled as 'QAHA' instead of 'PAHB', for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:29,variab,variable-type,29,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['variab'],['variable-type']
Modifiability,// Now map variables to their picked LocIdxes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:11,variab,variables,11,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Now push the live variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['variab'],['variables']
Modifiability,"// Now read variable info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:12,variab,variable,12,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,// Now rewrite all the uses of the pred state using the SSA updater to insert; // PHIs connecting the state between blocks along the CFG edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['rewrite'],['rewrite']
Modifiability,// Now rewrite references to basic blocks to be depth immediates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Now rewrite the blockaddress to an integer constant based on the index.; // FIXME: This part doesn't properly recognize other uses of blockaddress; // expressions, for instance, where they are used to pass labels to; // asm-goto. This part of the pass needs a rework.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,1,['rewrite'],['rewrite']
Modifiability,// Now rewrite the body...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,// Now rewrite the jumps that use the flags. These we handle specially; // because if there are multiple jumps in a single basic block we'll have; // to do surgery on the CFG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Now run through and replace the existing statepoints with new ones with; // the live variables listed. We do not yet update uses of the values being; // relocated. We have references to live variables that need to; // survive to the last iteration of this loop. (By construction, the; // previous statepoint can not be a live variable, thus we can and remove; // the old statepoint calls as we go.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:88,variab,variables,88,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// Now test the complete 2D case where the y variable is also distributed; // with non-uniform binning. To make things simple, the histogram has only; // 2 bins.; //; // The x-histogram will have the following content for the entries where y; // is in the [0, 2.5] bin (12 entries):; //; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4); //; // Then, there are some more entries with y in the [2.5, 3.5] bin (4 entries);; //; // - bin6 [0.0, 1.0]: 1 counts (bin volume x counts = 1); // - bin7 [1.0, 3.0]: 2 counts (bin volume x counts = 4); // - bin8 [3.0, 3.5]: 1 counts (bin volume x counts = 0.5)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:45,variab,variable,45,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['variab'],['variable']
Modifiability,"// Now test the simple 2D case where there just an additional dummy variable y that is always in the first bin; // This should consistently give the same results as the 1D case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:68,variab,variable,68,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['variab'],['variable']
Modifiability,"// Now that all globals which are needed are in the AliveGlobals set, we loop; // through the program, deleting those which are not alive.; //; // The first pass is to drop initializers of global variables which are dead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp:196,variab,variables,196,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,1,['variab'],['variables']
Modifiability,"// Now that all of the things that global variable initializer can refer to; // have been created, loop through and copy the global variable referrers; // over... We also set the attributes on the global now.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,2,['variab'],['variable']
Modifiability,"// Now that all rewrite information is collect, rewrite the collected; // expressions with the information in the map. This applies information to; // sub-expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:16,rewrite,rewrite,16,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Now that the extend is gone, we want to expose it's uses for potential; // further simplification. We don't need to directly inform SimplifyIVUsers; // of the new users, because their parent IV will be processed later as a; // new loop phi. If we preserved IVUsers analysis, we would also want to; // push the uses of WideDef here.; // No further widening is needed. The deceased [sz]ext had done it for us.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extend']
Modifiability,"// Now that the linkage set by the FE has been passed to the data and counter; // variables, reset Name variable's linkage and visibility to private so that; // it can be removed later by the compiler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:82,variab,variables,82,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:108,variab,variable-offset,108,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['variab'],['variable-offset']
Modifiability,"// Now that we have started to extend ranges across BBs we need to; // examine spill, copy and restore instructions to see whether they; // operate with registers that correspond to user variables.; // First load any pending inlocs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"// Now that we have the split loads, do the slow walk over all uses of the; // load and rewrite them as split stores, or save the split loads to use; // below if the store is going to be split there anyways.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:88,rewrite,rewrite,88,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Now that we have verified that 'musttail' is valid here, rewrite the; // return value to remove all implicit nodes, but retain parentheses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:60,rewrite,rewrite,60,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Now that we saw all the expressions and variables AND that; // we know whether arrays of chars are treated as string or; // not, we can properly setup the dimensions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:43,variab,variables,43,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variables']
Modifiability,"// Now that we've canonicalized the condition to match the extend,; // see if we can rotate the extend out of the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:59,extend,extend,59,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['extend'],['extend']
Modifiability,// Now the condition as well as the loop variable assignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,1,['variab'],['variable']
Modifiability,// Now try to reduce the number of global variable initializers in the; // module to something small.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['variab'],['variable']
Modifiability,// Now use :dtprel_whatever: operations to calculate this variable's offset; // in its thread-storage area.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Now walk all possible inheritance paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:25,inherit,inheritance,25,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// Now walk all possible inheritance paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx:25,inherit,inheritance,25,core/metacling/src/TClingBaseClassInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx,1,['inherit'],['inheritance']
Modifiability,"// Now we have:; // (or (srl (smul_lohi ?, ?), 16), (shl (smul_lohi ?, ?), 16))); // For SMUL[B|T] smul_lohi will take a 32-bit and a 16-bit arguments.; // For SMUWB the 16-bit value will signed extended somehow.; // For SMULWT only the SRA is required.; // Check both sides of SMUL_LOHI",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:195,extend,extended,195,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Now we know that Start <= I->End and End >= I->Start so the range overlaps; // but is not entirely contained within the range.; // See if the range extends the start of the range. In this case, it couldn't; // possibly cause it to join the prior range, because otherwise we would have; // stopped on *it*.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:151,extend,extends,151,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['extend'],['extends']
Modifiability,"// Now we know that Start <= I->End and Start >= I->Start (so the startpoint; // is in or right at the end of I), and that End >= I->Start. Extend I out to; // End.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:140,Extend,Extend,140,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['Extend'],['Extend']
Modifiability,"// Now we need sign extend. Do this by shifting the elements. Even if these; // aren't legal operations, they have a better chance of being legalized; // without full scalarization than the sign extension does.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['extend'],['extend']
Modifiability,"// Now we need to differentiate between a variable length array and; // a TClonesArray.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:42,variab,variable,42,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// Now we need to sort the powers according to least `control; // variable'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:66,variab,variable,66,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,// Now we replace the original zero extend and its associated INSERT_SUBREG; // with the value feeding the INSERT_SUBREG (which has now been promoted to; // return an i64).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:36,extend,extend,36,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// Now we're ready to do the pass 2 code generation, which will emit the; // reduced set of parameter variables we've just worked out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:102,variab,variables,102,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variables']
Modifiability,"// Now, *zero*-extend the shift amount. The bits 8...15 *must* be zero!; // We could zext to i16 in some form, but we intentionally don't do that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// Now, create and configure an asimov object; // and add it to the measurement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:19,config,configure,19,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['config'],['configure']
Modifiability,"// Now, create the channel,; // configure it based on the XML; // and return it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:32,config,configure,32,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['config'],['configure']
Modifiability,"// Now, finally validate the sign-extending magic.; // `select` itself may be appropriately extended, look past that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,"// Now, go through each block (with the current terminator type); // we've recorded, and rewrite it to branch to the new common block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp:89,rewrite,rewrite,89,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Now, insert extending instructions between the sources and their users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:15,extend,extending,15,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,1,['extend'],['extending']
Modifiability,"// Now, loop over all variables and; // set the constant as; // Get the list of parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryNavigation.cxx:22,variab,variables,22,roofit/histfactory/src/HistFactoryNavigation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryNavigation.cxx,1,['variab'],['variables']
Modifiability,// Null single inheritance member functions are encoded as a simple nullptr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:15,inherit,inheritance,15,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['inherit'],['inheritance']
Modifiability,"// Number all variables in the order that they appear, to be used as a stable; // insertion order later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:14,variab,variables,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// Number of Layers in MLP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RFunction_MLP.hxx:13,Layers,Layers,13,tmva/sofie/inc/TMVA/RFunction_MLP.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/RFunction_MLP.hxx,1,['Layers'],['Layers']
Modifiability,// Number of bits of range before extending operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['extend'],['extending']
Modifiability,"// Number of expected events to generate in extended mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:44,extend,extended,44,roofit/roofitcore/inc/RooMCStudy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h,1,['extend'],['extended']
Modifiability,"// Number of variables in dataframe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:13,variab,variables,13,roofit/roofitcore/inc/RooAbsDataHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h,1,['variab'],['variables']
Modifiability,"// Number of variables in dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:13,variab,variables,13,roofit/roofitcore/inc/RooAbsDataHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h,1,['variab'],['variables']
Modifiability,"// Numeric (MC) Event generator configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:32,config,configuration,32,roofit/roofitcore/inc/RooNumGenConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h,1,['config'],['configuration']
Modifiability,"// Numeric Integrator configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:22,config,configuration,22,roofit/roofitcore/inc/RooNumIntConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h,1,['config'],['configuration']
Modifiability,"// Numeric integrator configuration specific for this object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:22,config,configuration,22,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['config'],['configuration']
Modifiability,"// Numeric substitution reads the value of a variable directly, not via; // GlobalNumericVariableTable. Therefore, we clear local variables by; // clearing their value which will lead to a numeric substitution failure. We; // also mark the variable for removal from GlobalNumericVariableTable since; // this is what defineCmdlineVariables checks to decide that no global; // variable has been defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,// Numeric variable definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,2,['variab'],['variable']
Modifiability,"// Numeric variable definitions and uses are parsed in the order in which; // they appear in the CHECK patterns. For each definition, the pointer to the; // class instance of the corresponding numeric variable definition is stored; // in GlobalNumericVariableTable in parsePattern. Therefore, if the pointer; // we get below is null, it means no such variable was defined before. When; // that happens, we create a dummy variable so that parsing can continue. All; // uses of undefined variables, whether string or numeric, are then diagnosed; // in printNoMatch() after failing to match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"// O p e r a t i o n s o n b i n n e d d a t a s e t s; // ---------------------------------------------------------; // A binned dataset can be constructed empty, from an unbinned dataset, or; // from a ROOT native histogram (TH1,2,3); // The binning of real variables (like x,y) is done using their fit range; // 'get/setRange()' and number of specified fit bins 'get/setBins()'.; // Category dimensions of binned datasets get one bin per defined category state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:260,variab,variables,260,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variables']
Modifiability,"// O(log N), but with a very low constant factor).; ///; /// The implementation of this datastructure is a conceptual linear sequence of; /// RopePiece elements. Each RopePiece represents a view on a separately; /// allocated and reference counted string. This means that splitting a very; /// long string can be done in constant time by splitting a RopePiece that; /// references the whole string into two rope pieces that reference each half.; /// Once split, another string can be inserted in between the two halves by; /// inserting a RopePiece in between the two others. All of this is very; /// inexpensive: it takes time proportional to the number of RopePieces, not the; /// length of the strings they represent.; ///; /// While a linear sequences of RopePieces is the conceptual model, the actual; /// implementation captures them in an adapted B+ Tree. Using a B+ tree (which; /// is a tree that keeps the values in the leaves and has where each node; /// contains a reasonable number of pointers to children/values) allows us to; /// maintain efficient operation when the RewriteRope contains a *huge* number; /// of RopePieces. The basic idea of the B+ Tree is that it allows us to find; /// the RopePiece corresponding to some offset very efficiently, and it; /// automatically balances itself on insertions of RopePieces (which can happen; /// for both insertions and erases of string ranges).; ///; /// The one wrinkle on the theory is that we don't attempt to keep the tree; /// properly balanced when erases happen. Erases of string data can both insert; /// new RopePieces (e.g. when the middle of some other rope piece is deleted,; /// which results in two rope pieces, which is just like an insert) or it can; /// reduce the number of RopePieces maintained by the B+Tree. In the case when; /// the number of RopePieces is reduced, we don't attempt to maintain the; /// standard 'invariant' that each node in the tree contains at least; /// 'WidthFactor' children/values. For our us",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp:1243,Rewrite,RewriteRope,1243,interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,1,['Rewrite'],['RewriteRope']
Modifiability,// O32 ABI extended for 64-bit architecture.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:11,extend,extended,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['extend'],['extended']
Modifiability,"// ODRHash; // This Array slurps the rest of the record. Fortunately we want to encode; // (nearly) all the remaining (variable number of) fields in the same way.; //; // This is:; // NumParams and Params[] from FunctionDecl, and; // NumOverriddenMethods, OverriddenMethods[] from CXXMethodDecl.; //; // Add an AbbrevOp for 'size then elements' and use it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:119,variab,variable,119,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['variab'],['variable']
Modifiability,"// OK, now we have the first iteration,; // next: calculate the Sigmas (Widths) for the second (adaptive) iteration; // based on the output of the first iteration; // these Sigmas will be stored in histo called fSigmaHist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:96,adapt,adaptive,96,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,1,['adapt'],['adaptive']
Modifiability,"// OK, we can read this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,// OR 0b11 into bit 8 and 9. 0b11 is the encoding for double extended; // precision.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:61,extend,extended,61,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// ORRWrs zero-extends to 64-bits, so we need to consider such cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:15,extend,extends,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['extend'],['extends']
Modifiability,// ObjC Blocks can create local variables that don't have a FunctionDecl; // LexicalContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:32,variab,variables,32,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variables']
Modifiability,// ObjC EH selector entries are always global variables with; // names starting like this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,2,['variab'],['variables']
Modifiability,// ObjC instance variables are lvalues; // FIXME: ObjC++0x might have different rules,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,1,['variab'],['variables']
Modifiability,"// ObjC rewriter: attempts to rewrite ObjC constructs into pure C code.; // This is considered experimental, and only works with Apple's ObjC runtime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h:8,rewrite,rewriter,8,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,2,['rewrite'],"['rewrite', 'rewriter']"
Modifiability,"// ObjCAtCatchStmt are treated like labels, so they are the first statement; // in a block.; // Save local scope position because in case of exception variable ScopePos; // won't be restored when traversing AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:151,variab,variable,151,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// Objective-C instance variable access. Bail if we're performing fix-it; // code completion since Objective-C properties are normally backed by; // ivars, most Objective-C fix-its here would have little value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,// Objective-C instance variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// Objects with trivial destructor ends their lifetime when their storage; // is destroyed, for automatic variables, this happens when the end of the; // scope is added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:106,variab,variables,106,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"// Observation:; // If the cell has a form of 00..0xx..x with k zeros and n remaining; // bits, this could be an extractu of the n bits, but it could also be; // an extractu of a longer field which happens to have 0s in the top; // bit positions.; // The same logic applies to sign-extended fields.; //; // Do not check for the extended extracts, since it would expand the; // search space quite a bit. The search may be expensive as it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:282,extend,extended,282,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,2,['extend'],['extended']
Modifiability,// Obtain array indices to add them to the variable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,1,['variab'],['variable']
Modifiability,// Obtain relevant IVs and attempt to rewrite the salvageable DVIs with; // expressions composed using the derived iteration count.; // TODO: Allow for multiple IV references for nested AddRecSCEVs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:38,rewrite,rewrite,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Offer fixes to insert an explicit capture for the variable.; // [] -> [VarName]; // [OtherCapture] -> [OtherCapture, VarName]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Offset of the first variable argument from stack pointer, and size of; // the vararg save area. For now, the varargs save area is either zero or; // large enough to hold a0-a4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Offset of the first variable argument from stack pointer, and size of; // the vararg save area. For now, the varargs save area is either zero or; // large enough to hold a0-a7.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Offset of the first variable argument from stack pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Offsets that are not of type <N x i32> are sign extended by the; // getelementptr instruction, and MVE gathers/scatters treat the offset as; // unsigned. Thus, if the element size is smaller than 32, we can only allow; // positive offsets - i.e., the offsets are not allowed to be variables we; // can't look into.; // Additionally, <N x i32> offsets have to either originate from a zext of a; // vector with element types smaller or equal the type of the gather we're; // looking at, or consist of constants that we can check are small enough; // to fit into the gather type.; // Thus we check that 0 < value < 2^TargetElemSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:51,extend,extended,51,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,// Ok we can drop this extend and just use the original extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['extend'],['extend']
Modifiability,"// Okay, all the short cuts are exhausted. We must compute it. The following; // is a classical Babylonian method for computing the square root. This code; // was adapted to APInt from a wikipedia article on such computations.; // See http://www.wikipedia.org/ and go to the page named; // Calculate_an_integer_square_root.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:163,adapt,adapted,163,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['adapt'],['adapted']
Modifiability,"// Okay, if there weren't any loop invariants to be folded, check to see if; // there are multiple AddRec's with the same loop induction variable being; // added together. If so, we can fold them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:137,variab,variable,137,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,"// Okay, if there weren't any loop invariants to be folded, check to see; // if there are multiple AddRec's with the same loop induction variable; // being multiplied together. If so, we can fold them.; // {A1,+,A2,+,...,+,An}<L> * {B1,+,B2,+,...,+,Bn}<L>; // = {x=1 in [ sum y=x..2x [ sum z=max(y-x, y-n)..min(x,n) [; // choose(x, 2x)*choose(2x-y, x-z)*A_{y-z}*B_z; // ]]],+,...up to x=2n}.; // Note that the arguments to choose() are always integers with values; // known at compile time, never SCEV objects.; //; // The implementation avoids pointless extra computations when the two; // addrec's are of different length (mathematically, it's equivalent to; // an infinite stream of zeros on the right).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:137,variab,variable,137,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,"// Okay, now we rewrite all loads that use live-in values in the loop,; // inserting PHI nodes as necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp:16,rewrite,rewrite,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Okay, one of the vbases must have a vfptr, or else this isn't; // actually a polymorphic class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:80,polymorphi,polymorphic,80,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['polymorphi'],['polymorphic']
Modifiability,"// Okay, this is the first use in the block. If this block just has a; // single user in it, we can rewrite it trivially.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp:100,rewrite,rewrite,100,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Okay, we found the operation and type to use. Zero extend our input to the; // desired type then run the operation on it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,"// Okay, we have a legal flexible array member at the end of the struct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:25,flexible,flexible,25,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['flexible'],['flexible']
Modifiability,"// Okay. Undo some of what StartFunction did.; // At -O0 we generate an explicit alloca for the BlockPointer, so the RA; // won't delete the dbg.declare intrinsics for captured variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:177,variab,variables,177,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variables']
Modifiability,"// Old variable for backward compatibility",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:7,variab,variable,7,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['variab'],['variable']
Modifiability,"// Older OS versions (particularly system unwinders) are confused by the; // Swift extended frame, so when building code that might be run on them we; // must dynamically query the concurrency library to determine whether; // extended frames should be flagged as present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h:83,extend,extended,83,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h,4,['extend'],['extended']
Modifiability,"// On 32-bit PowerPC systems running SUSE Linux, gcc is configured as a; // 64-bit compiler which defaults to ""-m32"", hence ""powerpc64-suse-linux"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:56,config,configured,56,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['configured']
Modifiability,"// On 32-bit platforms, DiffSCEV might now have type i32 -- we've always; // sign-extended OffSCEV to i64, so make sure they agree again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp:82,extend,extended,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp,1,['extend'],['extended']
Modifiability,"// On AIX, an aligned attribute can not decrease the alignment when applied; // to a variable declaration with vector type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:85,variab,variable,85,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['variab'],['variable']
Modifiability,"// On AIX, the variable offset should already be in R4 and the region handle; // should already be in R3.; // For TLSGD, which currently is the only supported access model, we only; // need to generate an absolute branch to .__tls_get_addr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// On AIX, we have a region handle (symbol@m) and the variable offset; // (symbol@{gd|ie|le}) for TLS variables, depending on the TLS model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// On ARM arguments smaller than 4 bytes are extended, so all arguments; // are at least 4 bytes aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// On AVX2 targets we can permute 256-bit vectors as 64-bit sub-lanes; // (with PERMQ/PERMPD). On AVX2/AVX512BW targets, permuting 32-bit sub-lanes,; // even with a variable shuffle, can be worth it for v32i8/v64i8 vectors.; // Otherwise we can only permute whole 128-bit lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:165,variab,variable,165,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// On Darwin external linkage needs to be preserved, otherwise; // dsymutil cannot preserve the debug info for the merged; // variables. If they have external linkage, use the symbol name; // of the first variable merged as the suffix of global symbol; // name. This avoids a link-time naming conflict for the; // _MergedGlobals symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:126,variab,variables,126,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:116,variab,variable,116,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,4,['variab'],['variable']
Modifiability,"// On ELF platforms, we're further restricted in that we can't; // increase the alignment of any variable which might be emitted; // into a shared library, and which is exported. If the main; // executable accesses a variable found in a shared-lib, the main; // exe actually allocates memory for and exports the symbol ITSELF,; // overriding the symbol found in the library. That is, at link; // time, the observed alignment of the variable is copied into the; // executable binary. (A COPY relocation is also generated, to copy; // the initial data from the shadowed variable in the shared-lib; // into the location in the main binary, before running code.); //; // And thus, even though you might think you are defining the; // global, and allocating the memory for the global in your object; // file, and thus should be able to set the alignment arbitrarily,; // that's not actually true. Doing so can cause an ABI breakage; an; // executable might have already been built with the previous; // alignment of the variable, and then assuming an increased; // alignment will be incorrect.; // Conservatively assume ELF if there's no parent pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/lib/IR/Globals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Globals.cpp,5,['variab'],['variable']
Modifiability,"// On GFX12, the intrinsics with 16-bit accumulator use a packed layout.; // There is no need for the variable opsel argument, so always set it to; // ""false"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:102,variab,variable,102,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['variab'],['variable']
Modifiability,"// On MinGW, variables that haven't been declared with DLLImport may still; // end up automatically imported by the linker. To make this feasible,; // don't assume the variables to be DSO local unless we actually know; // that for sure. This only has to be done for variables; for functions; // the linker can insert thunks for calling functions from another DLL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,3,['variab'],['variables']
Modifiability,"// On P10, we have legal lowering for constant and variable indices for; // all vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// On PPC32/64, arguments smaller than 4/8 bytes are extended, so all; // arguments are at least 4/8 bytes aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:53,extend,extended,53,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// On PPC64, we use `stux r1, r1, <scratch_reg>` to extend the stack;; // use `add r1, r1, <scratch_reg>` to release the stack frame.; // Scratch register contains a signed 64-bit number, which is negative; // when extending the stack and is positive when releasing the stack frame.; // To make `stux` and `add` paired, the absolute value of the number contained; // in the scratch register should be the same. Thus the maximum stack size; // is (2^63)-1, i.e., LONG_MAX.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:52,extend,extend,52,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// On PS4/PS5, TLS variable cannot be aligned to more than 32 bytes (256; // bits).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:19,variab,variable,19,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,1,['variab'],['variable']
Modifiability,"// On RV64, sign-extend from 32 to 64 bits where possible in order to; // achieve better constant materializion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// On X86-64, a general purpose integer register is viewed as a 64-bit; // register internal to the processor.; // An update to the lower 32 bits of a 64 bit integer register is; // architecturally defined to zero extend the upper 32 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:214,extend,extend,214,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp,1,['extend'],['extend']
Modifiability,"// On a configuration mismatch, enter the header textually. We still know; // that it's part of the corresponding module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:8,config,configuration,8,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['config'],['configuration']
Modifiability,"// On recent Mach-O platforms, use a structure which binds the liveness of; // the global variable to the metadata struct. Keep the list of ""Liveness"" GV; // created to be added to llvm.compiler.used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// On testing with the data from the 250202_181_RECO.root and doing ""just"" serializing; // the value 8 was the sweet spot of performance. With more slots, too much time is; // spent scanning the array of ""last"" seen and with less slots then the; // serialization induced by and/or the cost of executed `++fSubTypesReaders is slow; // down (noticeably) the streaming of branches with polymorphic containers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TIsAProxy.h:383,polymorphi,polymorphic,383,core/meta/inc/TIsAProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TIsAProxy.h,1,['polymorphi'],['polymorphic']
Modifiability,"// On windows there is an order of initialization problem that lead to; // 'Int_t not being in the list of types when TProfile's TClass is; // initialized (via a call to IsA()->InheritsFrom(); on linux this is; // not a problem because G__Base1 is initialized early; on windows with; // root.exe this is not a problem because GetListOfType(kTRUE) is called; // via a call to TClass::GetClass induces by the initialization of the; // plugin manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:177,Inherit,InheritsFrom,177,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Inherit', 'plugin']","['InheritsFrom', 'plugin']"
Modifiability,"// On x86_64 long double is 80-bit extended precision format, which is; // not supported by AMDGPU. 128-bit floating point format is also not; // supported by AMDGPU. Therefore keep its own format for these two types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:35,extend,extended,35,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,1,['extend'],['extended']
Modifiability,"// Once LLVM switches to C++17, the constexpr variables can be inline and we; // won't need this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,1,['variab'],['variables']
Modifiability,"// Once we encounter a branch, the rest of the instructions must also be; // branches. We can't rewrite in place here, so we handle them below.; //; // Note that we don't have to handle tail calls here, even conditional; // tail calls, as those are not introduced into the X86 MI until post-RA; // branch folding or black placement. As a consequence, we get to deal; // with the simpler formulation of conditional branches followed by tail; // calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:96,rewrite,rewrite,96,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// One argument, create constant variable with given value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:33,variab,variable,33,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['variab'],['variable']
Modifiability,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,3,"['config', 'variab']","['config', 'configuration', 'variables']"
Modifiability,"// One of types is a pointer and another one is not. We cannot extend; // them properly to a wider type, so let us just reject this case.; // TODO: Usage of getEffectiveSCEVType for DTy, FRHSTy etc should help; // to avoid this check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:63,extend,extend,63,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,// One operand (NarrowDef) has already been extended to WideDef. Now determine; // if extending the other will lead to a recurrence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:44,extend,extended,44,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,// Only A2_addi and A2_tfrsi can be extended in duplex form PRM 10.5,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:36,extend,extended,36,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,1,['extend'],['extended']
Modifiability,// Only C++1y supports variable templates (N3651).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Only Local-Exec, Initial-Exec and General-Dynamic TLS models are currently; // supported models. If Local- or Initial-exec are not possible or specified,; // all GlobalTLSAddress nodes are lowered using the general-dynamic model.; // We need to generate two TOC entries, one for the variable offset, one for; // the region handle. The global address for the TOC entry of the region; // handle is created with the MO_TLSGDM_FLAG flag and the global address; // for the TOC entry of the variable offset is created with MO_TLSGD_FLAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:286,variab,variable,286,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['variab'],['variable']
Modifiability,// Only __strong variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variables']
Modifiability,"// Only allow function, variable, record decls inside HLSLBuffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseHLSL.cpp,1,['variab'],['variable']
Modifiability,// Only allow inbounds GEPs with at most one variable offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['variab'],['variable']
Modifiability,// Only bother tracking variables that are at some point stack homed. Other; // variables can be dealt with trivially later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variables']
Modifiability,// Only changing alignment of LDS variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:34,variab,variables,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// Only check the domination rule when requested. Once all passes have been; // adapted this option can go away.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:80,adapt,adapted,80,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['adapt'],['adapted']
Modifiability,// Only combine constant extended A2_tfrsi if we are in aggressive mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// Only consider 8-bit values to avoid constant-extenders.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:48,extend,extenders,48,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extenders']
Modifiability,"// Only const objects can be used in constant expressions in C++. C++98 does; // not require the variable to be non-volatile, but we consider this to be a; // defect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:97,variab,variable,97,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,// Only constexpr and const variabless with implicit constant attribute; // are emitted on both sides. Such variables are promoted to device side; // only if they have static constant intializers on device side.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:28,variab,variabless,28,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,2,['variab'],"['variables', 'variabless']"
Modifiability,// Only diagnose if we're shadowing an unambiguous field or variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Only do the rewrite when the ExitValue can be expanded cheaply.; // If LoopCanBeDel is true, rewrite exit value aggressively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:15,rewrite,rewrite,15,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,2,['rewrite'],['rewrite']
Modifiability,// Only do this combine with AVX512 for vector extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:47,extend,extends,47,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,// Only extend from i16 unless its a sign_extend from i32. Zext/aext from i32; // are free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Only extend the RHS within the instruction if there is a valid extend type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['extend'],['extend']
Modifiability,// Only extend to i32 or i64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Only global variables can be marked as declare target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:15,variab,variables,15,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// Only global variables, not functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,3,['variab'],['variables']
Modifiability,"// Only handle constant-sized or VLAs, but not flexible members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:47,flexible,flexible,47,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['flexible'],['flexible']
Modifiability,// Only handle this instruction when we are building the variable value; // transfer function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Only if a local variable was declared in the function currently being; // evaluated, do we expect to be able to find its value in the current; // frame. (Otherwise it was likely declared in an enclosing context and; // could either have a valid evaluatable value (for e.g. a constexpr; // variable) or be ill-formed (and trigger an appropriate evaluation; // diagnostic)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['variab'],['variable']
Modifiability,// Only include names that correspond to user variables. FIXME: We should use; // debug info if available to get the name of the user variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DiagnosticInfo.cpp:46,variab,variables,46,interpreter/llvm-project/llvm/lib/IR/DiagnosticInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DiagnosticInfo.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Only include raw integers (not enums) as configuration; // values if they are used in a logical or comparison operator; // (not arithmetic).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:44,config,configuration,44,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,1,['config'],['configuration']
Modifiability,"// Only integer and floating literals, otherwise try to rewrite to boxed; // expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp:56,rewrite,rewrite,56,interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,1,['rewrite'],['rewrite']
Modifiability,// Only lambdas within the initializer of a non-local variable or non-static; // data member get a <closure-prefix>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,// Only lay out bases with extendable VFPtrs on the first pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:27,extend,extendable,27,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['extend'],['extendable']
Modifiability,// Only lay out bases without extendable VFPtrs on the second pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:30,extend,extendable,30,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['extend'],['extendable']
Modifiability,// Only load and stores instructions can have variable vector length on Power.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,1,['variab'],['variable']
Modifiability,// Only matching constant steps matching the AllocSize are supported at the; // moment. This simplifies the difference computation. Can be extended in the; // future.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:139,extend,extended,139,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['extend'],['extended']
Modifiability,// Only methods and static fields inherit the attributes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:34,inherit,inherit,34,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherit']
Modifiability,// Only other tracking variables that are at some point stack homed.; // Other variables can be dealt with trivally later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:23,variab,variables,23,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variables']
Modifiability,// Only read from the environment variable if the user hasn't already; // set the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,1,['variab'],['variable']
Modifiability,"// Only record top-level expansions that directly produce expanded tokens.; // This excludes those where:; // - the macro use is inside a macro body,; // - the macro appears in an argument to another macro.; // However macro expansion isn't really a tree, it's token rewrite rules,; // so there are other cases, e.g.; // #define B(X) X; // #define A 1 + B; // A(2); // Both A and B produce expanded tokens, though the macro name 'B' comes; // from an expansion. The best we can do is merge the mappings for both.; // The *last* token of any top-level macro expansion must be in a file.; // (In the example above, see the closing paren of the expansion of B).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp:267,rewrite,rewrite,267,interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp,1,['rewrite'],['rewrite']
Modifiability,// Only rewrite each module file once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp:8,rewrite,rewrite,8,interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,1,['rewrite'],['rewrite']
Modifiability,// Only rewrite once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:8,rewrite,rewrite,8,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Only sub-instruction #1 can be extended in a duplex. If MI is a; // sub-instruction #0, it is not extended even if Extended is true; // (it can be true for the duplex as a whole).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp,3,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,// Only support the following globals:; // . static variables; // . non-static weak or non-weak global variables; // . weak or non-weak extern global variables; // Whether DataSec is readonly or not can be found from corresponding ELF; // section flags. Whether a BTF_KIND_VAR is a weak symbol or not; // can be found from the corresponding ELF symbol table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp:52,variab,variables,52,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,3,['variab'],['variables']
Modifiability,// Only target executable directives support extended device construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:45,extend,extended,45,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['extend'],['extended']
Modifiability,// Only the least significant bits of Imm are used.; // Using int8_t to ensure it will be sign extended to the int64_t that; // setImm takes in order to match isel behavior.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:95,extend,extended,95,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Only top-level modules can have configuration macros.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:35,config,configuration,35,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['config'],['configuration']
Modifiability,// Only true variables (not parameters or implicit parameters) can be; // merged; the other kinds are not really redeclarable at all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:13,variab,variables,13,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['variab'],['variables']
Modifiability,// Only update stat and exports if we haven't already imported this; // variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['variab'],['variable']
Modifiability,// Only variable declarations are permitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// Oops, we didn't find the actual type of the variable. Don't emit a fixit; // with a broken cast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,// Op1 is a foldable extend. Op0 might be foldable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:21,extend,extend,21,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Op2 is used for the comparison and thus must be extended according to the; // target's atomic operations. Op3 is merely stored and so can be left alone.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:51,extend,extended,51,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,// OpSegStart is where this destination segment would start in OpReg if it; // extended infinitely in both directions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:79,extend,extended,79,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['extend'],['extended']
Modifiability,"// Opcode for copying dividend into lowreg, or; // zero/sign-extending into lowreg for i8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:61,extend,extending,61,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,2,['extend'],['extending']
Modifiability,"// Opcode for sign-extending lowreg into; // highreg, or copying a zero into highreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:19,extend,extending,19,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,2,['extend'],['extending']
Modifiability,"// Open and read the PROOF config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofResourcesStatic.cxx:27,config,config,27,proof/proof/src/TProofResourcesStatic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofResourcesStatic.cxx,1,['config'],['config']
Modifiability,"// Open the config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:12,config,config,12,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,2,['config'],['config']
Modifiability,"// OpenACC 3.3, section 2.10:; // A 'var' in a cache directive must be a single array element or a simple; // subarray. In C and C++, a simple subarray is an array name followed by; // an extended array range specification in brackets, with a start and; // length such as:; //; // arr[lower:length]; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:188,extend,extended,188,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['extend'],['extended']
Modifiability,// OpenACC Configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:11,Config,Configuration,11,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['Config'],['Configuration']
Modifiability,"// OpenACCDirectiveKindEx is meant to be an extended list; // over OpenACCDirectiveKind, so any value below Invalid is one of the; // OpenACCDirectiveKind values. This switch takes care of all of the extra; // parsing required for the Extended values. At the end of this block,; // ExDirKind can be assumed to be a valid OpenACCDirectiveKind, so we can; // immediately cast it and use it as that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:44,extend,extended,44,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,2,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,"// OpenCL 1.1 6.5.2: ""Variables allocated in the __local address space inside; // a kernel function cannot be initialized.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:22,Variab,Variables,22,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Variab'],['Variables']
Modifiability,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:42,variab,variables,42,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,6,"['Variab', 'inherit', 'variab']","['Variables', 'inherits', 'variables']"
Modifiability,"// OpenCL C v3.0 s6.7.8 - For OpenCL C 2.0 or with the; // __opencl_c_program_scope_global_variables feature, the address space; // for a variable at program scope or a static or extern variable inside; // a function are inferred to be __global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:138,variab,variable,138,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// OpenCL global variables of sampler type are translated to function calls,; // therefore no need to be translated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// OpenCL permits const integral variables to be used in constant; // expressions, like in C++98.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variables']
Modifiability,// OpenCL v1.1 s6.5.2 and s6.5.3: no local or constant variables; // in functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:55,variab,variables,55,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// OpenCL v1.1 s6.5.3: variables declared in the constant address space must; // be initialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// OpenCL v1.2 s6.1.1.1: reject declaring variables of the half and; // half array type (unless the cl_khr_fp16 extension is enabled).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:42,variab,variables,42,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// OpenCL v1.2 s6.5.3: The __constant or constant address space name is; // used to describe variables allocated in global memory and which are; // accessed inside a kernel(s) as read-only variables. As such, variables; // in constant address space cannot have local storage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:93,variab,variables,93,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],['variables']
Modifiability,// OpenCL v1.2 s6.9.d: variable length arrays are not supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,// OpenCL v1.2 s6.9.r:; // The event type cannot be used to declare a program scope variable.; // OpenCL v2.0 s6.9.q:; // The clk_event_t and reserve_id_t types cannot be declared in program; // scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// OpenCL v2.0 s6.12.5 - Every block variable declaration must have an; // initialiser,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// OpenCL v2.0 s6.13.11.1. atomic variables can be initialized in global scope,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:34,variab,variables,34,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variables']
Modifiability,// OpenCL v2.0 s6.5.2 and s6.5.3: local and constant variables must be; // in the outermost scope of a kernel function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:53,variab,variables,53,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// OpenCL v2.0 s6.6 - read_write can be used for image types to specify that; // an image object can be read and written. OpenCL v2.0 s6.13.6 - A kernel; // cannot read from and write to the same pipe object. Using the read_write; // (or __read_write) qualifier with the pipe qualifier is a compilation error.; // OpenCL v3.0 s6.8 - For OpenCL C 2.0, or with the; // __opencl_c_read_write_images feature, image objects specified as arguments; // to a kernel can additionally be declared to be read-write.; // C++ for OpenCL 1.0 inherits rule from OpenCL C v2.0.; // C++ for OpenCL 2021 inherits rule from OpenCL C v3.0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:528,inherit,inherits,528,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['inherit'],['inherits']
Modifiability,"// OpenCL v2.0 specification doesn't extend compatibility of type qualifiers; // (C99 6.7.3) for address spaces. We assume that the check should behave in; // the same manner as it's defined for CVR qualifiers, so for OpenCL two; // qual types are compatible iff; // * corresponded types are compatible; // * CVR qualifiers are equal; // * address spaces are equal; // Thus for conditional operator we merge CVR and address space unqualified; // pointees and if there is a composite type we return a pointer to it with; // merged qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:37,extend,extend,37,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['extend'],['extend']
Modifiability,"// OpenCL v2.0, s6.12.5 - Block variable declarations are implicitly; // qualified with const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,// OpenCL variables in local address space and CUDA shared; // variables cannot have an initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variables']
Modifiability,// OpenCLC v2.0 s6.13.11.1 allows atomic variables to be initialized by; // the ATOMIC_VAR_INIT macro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:41,variab,variables,41,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, C/C++, p.1]; // A variable for which the type is pointer and an array section; // derived from that variable must not appear as list items of map; // clauses of the same construct.; //; // Also, cover one of the cases in:; // OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, p.5]; // If any part of the original storage of a list item has corresponding; // storage in the device data environment, all of the original storage; // must have corresponding storage in the device data environment.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:69,variab,variable,69,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, C/C++, p.2]; // A list item cannot be a variable that is a member of a structure with; // a union type.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:91,variab,variable,91,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, p.10]; // threadprivate variables cannot appear in a map clause.; // OpenMP 4.5 [2.10.5, target update Construct]; // threadprivate variables cannot appear in a from clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:75,variab,variables,75,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variables']
Modifiability,"// OpenMP 4.5 [2.15.5.1, map Clause, Restrictions, p.3]; // At most one list item can be an array item derived from a given; // variable in map clauses of the same construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:128,variab,variable,128,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 5.0 [2.19.3, List Item Privatization, Restrictions]; // A variable that is privatized must not have a const-qualified type; // unless it is of class type with a mutable member. This restriction does; // not apply to the firstprivate clause, nor to the linear clause on; // declarative directives (like declare simd).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 5.0 [2.19.3, List Item Privatization, Restrictions]; // A variable that is privatized must not have a const-qualified type; // unless it is of class type with a mutable member. This restriction does; // not apply to the firstprivate clause.; //; // OpenMP 3.1 [2.9.3.3, private clause, Restrictions]; // A variable that appears in a private clause must not have a; // const-qualified type unless it is of class type with a mutable member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP 5.0 [2.19.3, List Item Privatization, Restrictions]; // A variable that is privatized must not have a const-qualified type; // unless it is of class type with a mutable member. This restriction does; // not apply to the firstprivate clause.; //; // OpenMP 3.1 [2.9.3.5, lastprivate clause, Restrictions]; // A variable that appears in a lastprivate clause must not have a; // const-qualified type unless it is of class type with a mutable member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP 5.0 [2.19.4.5 lastprivate Clause, Restrictions]; // A list item that appears in a lastprivate clause with the conditional; // modifier must be a scalar variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:162,variab,variable,162,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 5.0 [2.19.7.2, defaultmap clause, Description]; // If implicit-behavior is none, each variable referenced in the; // construct that does not have a predetermined data-sharing attribute; // and does not appear in a to or link clause on a declare target; // directive must be listed in a data-mapping attribute clause, a; // data-sharing attribute clause (including a data-sharing attribute; // clause on a combined construct where target. is one of the; // constituent constructs), or an is_device_ptr clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:96,variab,variable,96,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 5.0, 2.10.1 task Construct.; // event-handle is a variable of the omp_event_handle_t type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP 5.0, 2.12.7 declare target Directive, Restrictions; // If a lambda declaration and definition appears between a; // declare target directive and the matching end declare target; // directive, all variables that are captured by the lambda; // expression must also appear in a to clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:206,variab,variables,206,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP 5.1 [2.11.7, loop construct, Restrictions]; // A list item may not appear in a lastprivate clause unless it is the; // loop iteration variable of a loop that is associated with the construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:144,variab,variable,144,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,5,['variab'],['variable']
Modifiability,"// OpenMP 5.1 [2.21.7.3] defaultmap clause, Description]; // If implicit-behavior is present, each variable referenced in the; // construct in the category specified by variable-category is treated as if; // it had been listed in a map clause with the map-type of alloc and; // map-type-modifier of present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:99,variab,variable,99,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variable-category']"
Modifiability,"// OpenMP 5.2 148:21:; // If the target construct is within a class non-static member function,; // and a variable is an accessible data member of the object for which the; // non-static data member function is invoked, the variable is treated as; // if the this[:1] expression had appeared in a map clause with a map-type; // of tofrom.; // Emit this[:1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP [2.1, C/C++]; // A list item is a variable name.; // OpenMP [2.14.4.1, Restrictions, p.1]; // A list item that appears in a copyin clause must be threadprivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.1, C/C++]; // A list item is a variable or array section, subject to the restrictions; // specified in Section 2.4 on page 42 and in each of the sections; // describing clauses and directives for which a list appears.; // OpenMP [2.14.3.3, Restrictions, p.1]; // A variable that is part of another variable (as an array or; // structure element) cannot appear in a private clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,"// OpenMP [2.13.9, Summary]; // depend(dependence-type : vec), where dependence-type is:; // 'sink' and where vec is the iteration vector, which has the form:; // x1 [+- d1], x2 [+- d2 ], . . . , xn [+- dn]; // where n is the value specified by the ordered clause in the loop; // directive, xi denotes the loop iteration variable of the i-th nested; // loop associated with the loop directive, and di is a constant; // non-negative integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:321,variab,variable,321,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.14.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct]; // Variables with the predetermined data-sharing attributes may not be; // listed in data-sharing attributes clauses, except for the cases; // listed below. For these exceptions only, listing a predetermined; // variable in a data-sharing attribute clause is allowed and overrides; // the variable's predetermined data-sharing attributes.; // OpenMP [2.14.3.6, Restrictions, p.3]; // Any number of reduction clauses can be specified on the directive,; // but a list item can appear only once in the reduction clauses for that; // directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:54,Variab,Variables,54,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,4,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.14.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct]; // Variables with the predetermined data-sharing attributes may not be; // listed in data-sharing attributes clauses, except for the cases; // listed below.; // OpenMP 4.5 [2.10.8, Distribute Construct, p.3]; // A list item may appear in a firstprivate or lastprivate clause but not; // both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:54,Variab,Variables,54,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variables']
Modifiability,"// OpenMP [2.14.1.1, Data-sharing Attribute Rules for Variables; // Referenced in a Construct, C/C++]. The loop iteration variable in the; // associated for-loop of a simd construct with just one associated; // for-loop may be listed in a linear clause with a constant-linear-step; // that is the increment of the associated for-loop. The loop iteration; // variable(s) in the associated for-loop(s) of a for or parallel for; // construct may be listed in a private or lastprivate clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:54,Variab,Variables,54,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.14.3.5, Restrictions, C++, p.1,2]; // A variable of class type (or array thereof) that appears in a; // lastprivate clause requires an accessible, unambiguous default; // constructor for the class type, unless the list item is also specified; // in a firstprivate clause.; // A variable of class type (or array thereof) that appears in a; // lastprivate clause requires an accessible, unambiguous copy assignment; // operator for the class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP [2.14.3.5, Restrictions, C/C++, p.1]; // A variable of class type (or array thereof) that appears in a lastprivate; // clause requires an accessible, unambiguous default constructor for the; // class type, unless the list item is also specified in a firstprivate; // clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.14.3.5, Restrictions, C/C++, p.2]; // A variable that appears in a lastprivate clause must not have an; // incomplete type or a reference type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.14.4.1, Restrictions, C/C++, p.2]; // A variable of class type (or array thereof) that appears in a; // copyin clause requires an accessible, unambiguous copy assignment; // operator for the class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP [2.15.11, distribute simd Construct]; // A list item may not appear in a linear clause, unless it is the loop; // iteration variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:134,variab,variable,134,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.4.13, Data-sharing Attribute Clauses]; // A list item that specifies a given variable may not appear in more; // than one clause on the same directive, except that a variable may be; // specified in both firstprivate and lastprivate clauses.; // OpenMP 4.5 [2.10.8, Distribute Construct, p.3]; // A list item may appear in a firstprivate or lastprivate clause but not; // both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:90,variab,variable,90,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// OpenMP [2.6, Canonical Loop Form]; // Var is one of the following:; // A variable of signed or unsigned integer type.; // For C++, a variable of a random access iterator type.; // For C, a variable of a pointer type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:76,variab,variable,76,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, implicitly determined, p.1]; // In a parallel or task construct, the data-sharing attributes of these; // variables are determined by the default clause, if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, predetermined, p.1]; // Variables appearing in threadprivate directives are threadprivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, predetermined, p.1]; // Variables with automatic storage duration that are declared in a scope; // inside the construct are private.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, predetermined, p.4]; // Static data members are shared.; // OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, predetermined, p.7]; // Variables with static storage duration that are declared in a scope; // inside the construct are shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, predetermined, p.6]; // Variables with const qualified type having no mutable member are; // shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, implicitly determined, p.2]; // In a parallel construct, if no default clause is present, these; // variables are shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, implicitly determined, p.3]; // For constructs other than task, if no default clause is present, these; // variables inherit their data-sharing attributes from the enclosing; // context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,"['Variab', 'inherit', 'variab']","['Variables', 'inherit', 'variables']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, implicitly determined, p.4]; // In a task construct, if no default clause is present, a variable that in; // the enclosing context is determined to be shared by all implicit tasks; // bound to the current team is shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct]; // Variables with the predetermined data-sharing attributes may not be; // listed in data-sharing attributes clauses, except for the cases; // listed below. For these exceptions only, listing a predetermined; // variable in a data-sharing attribute clause is allowed and overrides; // the variable's predetermined data-sharing attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,8,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct]; // Variables with the predetermined data-sharing attributes may not be; // listed in data-sharing attributes clauses, except for the cases; // listed below. For these exceptions only, listing a predetermined; // variable in a data-sharing attribute clause is allowed and overrides; // the variable's predetermined data-sharing attributes.; // OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a Construct, C/C++, p.2]; // Variables with const-qualified type having no mutable member may be; // listed in a firstprivate clause, even if they are static data members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,6,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables Referenced; // in a region but not in construct]; // File-scope or namespace-scope variables referenced in called routines; // in the region are shared unless they appear in a threadprivate; // directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"// OpenMP [2.9.1.1, Data-sharing Attribute Rules for Variables; // Referenced in a Construct, implicitly determined, p.6]; // In a task construct, if no default clause is present, a variable; // whose data-sharing attribute is not determined by the rules above is; // firstprivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// OpenMP [2.9.1.2, Data-sharing Attribute Rules for Variables Referenced; // in a region but not in construct]; // Variables with static storage duration that are declared in called; // routines in the region are shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.10]; // A threadprivate variable must not have a reference type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:65,variab,variable,65,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.10]; // A threadprivate variable must not have an incomplete type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:65,variab,variable,65,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.2-6]; // A threadprivate directive must lexically precede all references to any; // of the variables in its list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:132,variab,variables,132,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.2]; // A threadprivate directive for file-scope variables must appear outside; // any definition or declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:89,variab,variables,89,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.3]; // A threadprivate directive for static class member variables must appear; // in the class definition, in the same scope in which the member; // variables are declared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:98,variab,variables,98,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variables']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.4]; // A threadprivate directive for namespace-scope variables must appear; // outside any definition or declaration other than the namespace; // definition itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:94,variab,variables,94,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP [2.9.2, Restrictions, C/C++, p.6]; // A threadprivate directive for static block-scope variables must appear; // in the scope of the variable and not in a nested scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:97,variab,variables,97,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// OpenMP [2.9.2, Syntax, C/C++]; // Variables must be file-scope, namespace-scope, or static block-scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:37,Variab,Variables,37,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Variab'],['Variables']
Modifiability,"// OpenMP [2.9.3.3, Restrictions, C/C++, p.1]; // A variable of class type (or array thereof) that appears in a private; // clause requires an accessible, unambiguous default constructor for the; // class type.; // Generate helper private variable and initialize it with the default; // value. The address of the original variable is replaced by the address of; // the new private variable in CodeGen. This new variable is not added to; // IdResolver, so the code in the OpenMP region uses original variable for; // proper diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,6,['variab'],['variable']
Modifiability,"// OpenMP [2.9.3.3, Restrictions, C/C++, p.3]; // A variable that appears in a private clause must not have an incomplete; // type or a reference type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,"// OpenMP [2.9.3.4, Restrictions, C/C++, p.1]; // A variable of class type (or array thereof) that appears in a private; // clause requires an accessible, unambiguous copy constructor for the; // class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// OpenMP [3.1, C/C++]; // A list item is a variable name.; // OpenMP [2.9.3.3, Restrictions, p.1]; // A variable that is part of another variable (as an array or; // structure element) cannot appear in a private clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,// OpenMP declare target variables must be visible to the host so they can; // be registered. We require protected visibility unless the variable has; // the DT_nohost modifier and does not need to be registered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:25,variab,variables,25,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// OpenMP private variables should not be captured in outer scope, so; // just break here. Similarly, global variables that are captured in a; // target region should not be captured outside the scope of the region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:18,variab,variables,18,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variables']
Modifiability,// OpenMP runtime requires 32-bit or 64-bit loop variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:49,variab,variables,49,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// OpenMP, 2.14.1.1 Data-sharing Attribute Rules for Variables Referenced in; // a Construct; // The loop iteration variable(s) in the associated for-loop(s) of a for or; // parallel for construct is (are) private.; // The loop iteration variable in the associated for-loop of a simd; // construct with just one associated for-loop is linear with a; // constant-linear-step that is the increment of the associated for-loop.; // Exclude loop var from the list of variables with implicitly defined data; // sharing attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:53,Variab,Variables,53,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,4,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,// Operand 1 is a memory operand (possibly SIB-extended); // Operand 2 (optional) is an immediate or relocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,1,['extend'],['extended']
Modifiability,"// Operand 1 is a memory operand (possibly SIB-extended); // Operand 2 is a register operand in the Reg/Opcode field.; // - In AVX, there is a register operand in the VEX.vvvv field here -; // Operand 3 (optional) is an immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,1,['extend'],['extended']
Modifiability,"// Operand 1 is a register operand in the Reg/Opcode field.; // Operand 2 is a memory operand (possibly SIB-extended); // - In AVX, there is a register operand in the VEX.vvvv field here -; // Operand 3 (optional) is an immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp:108,extend,extended,108,interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86RecognizableInstr.cpp,1,['extend'],['extended']
Modifiability,// Operand 1 is implicitly zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:32,extend,extended,32,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,// Operators that can follow a C variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['variab'],['variable']
Modifiability,"// Optimize the special case where the source is a constant integer; // induction variable. Notice that we can only optimize the 'trunc' case; // because (a) FP conversions lose precision, (b) sext/zext may wrap, and; // (c) other casts depend on pointer size.; // Determine whether \p K is a truncation based on an induction variable that; // can be optimized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['variab'],['variable']
Modifiability,"// Optimize vectors in AVX mode; // Sign extend v8i16 to v8i32 and; // v4i32 to v4i64; //; // Divide input vector into two parts; // for v4i32 the high shuffle mask will be {2, 3, -1, -1}; // use vpmovsx instruction to extend v4i32 -> v2i64; v8i16 -> v4i32; // concat the vectors to original VT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// Optionally pass along configuration data from prototype object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvPdf.cxx:25,config,configuration,25,roofit/roofitcore/src/RooNumConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvPdf.cxx,1,['config'],['configuration']
Modifiability,"// Optionally, solve the variable value problem and emit to blocks by using; // a lexical-scope-depth search. It should be functionally identical to; // the ""else"" block of this condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Options relating to how we treat the input (but not what we do with it); // are inherited from the AST unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:83,inherit,inherited,83,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['inherit'],['inherited']
Modifiability,// Options used to configure the symbolizer,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:19,config,configure,19,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,1,['config'],['configure']
Modifiability,"// Or, if it's the special case of CustomCodegen, just accumulate; // a list of parameters we're going to assign to variables before; // breaking from the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:116,variab,variables,116,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variables']
Modifiability,// Ori zero extends immediate. Used for values with zeros in high 16 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp:12,extend,extends,12,interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,1,['extend'],['extends']
Modifiability,// Original number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:22,variab,variables,22,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variables']
Modifiability,// Other we need to extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,1,['extend'],['extend']
Modifiability,"// Otherwise it is a load, queue it to rewrite as a live-in load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp:39,rewrite,rewrite,39,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Otherwise it must be a load instruction, keep track of variable; // reads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise look for weight variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:29,variab,variable,29,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['variab'],['variable']
Modifiability,// Otherwise reject putting the variable to small section if it has an; // explicit section name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp,1,['variab'],['variable']
Modifiability,// Otherwise rewrite all files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp:13,rewrite,rewrite,13,interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,1,['rewrite'],['rewrite']
Modifiability,// Otherwise this may be an attribute defined by a plugin.; // Search for a ParsedAttrInfo whose name and syntax match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp:51,plugin,plugin,51,interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/ParsedAttr.cpp,1,['plugin'],['plugin']
Modifiability,// Otherwise we can just rewrite in-place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:25,rewrite,rewrite,25,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,// Otherwise we check if the cmp instruction compares an inner indvar; // related variable (Left) with a outer loop invariant (Right).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['variab'],['variable']
Modifiability,// Otherwise we have to explicitly sign extend the operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// Otherwise we'll use TFormula to evaluate the string, having first found; // all the GDML variable names in it and marked them with [] so that; // TFormula will recognize them as parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx:92,variab,variable,92,geom/gdml/src/TGDMLParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx,1,['variab'],['variable']
Modifiability,"// Otherwise, check for variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variables']
Modifiability,"// Otherwise, create the struct layout. Because it is variable length, we; // malloc it, then use placement new.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, examine all other seen fragments for this variable, with ""this""; // fragment being a previously unseen fragment. Record any pair of; // overlapping fragments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,"// Otherwise, expand into a number of unpckl*, start by extending each of; // our (non-undef) elements to the full vector width with the element in the; // bottom slot of the vector (which generates no code for SSE).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:56,extend,extending,56,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Otherwise, extend the segment right after.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:14,extend,extend,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,"// Otherwise, if it's a field, and the field doesn't have; // reference type, then it must have a complete type (or be a; // flexible array member, which we explicitly want to; // white-list anyway), which makes the following checks trivial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:125,flexible,flexible,125,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['flexible'],['flexible']
Modifiability,"// Otherwise, if we haven't widened the IV, check if the new iteration; // variable might overflow. In this case, we need to version the loop, and; // select the original version at runtime if the iteration space is too; // large.; // TODO: We currently don't version the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, it should be some constant, left-shifted by the same NBits we; // had in `lshr`. Said left-shift can also be appropriately extended.; // Again, we must look past zero-ext when looking for NBits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:137,extend,extended,137,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['extend'],['extended']
Modifiability,"// Otherwise, just drop the variable in the normal data section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, just extend the original operand all the way to the larger type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:19,extend,extend,19,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// Otherwise, let the static local variable inherit its linkage from the; // nearest enclosing function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,"['inherit', 'variab']","['inherit', 'variable']"
Modifiability,"// Otherwise, make a list of the values this parameter takes for each; // intrinsic, and see if that value vector matches anything we already; // have. We also record the parameter type, so that we don't accidentally; // match up two parameter variables with different types. (Not that; // there's much chance of them having textually equivalent values, but in; // _principle_ it could happen.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:244,variab,variables,244,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variables']
Modifiability,"// Otherwise, print the value of the variable.; //; // NOTE: we could recursively !repr the elements of a list,; // but that could produce a lot of output when printing a; // defset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, see if the node's program point directly points to a statement.; // FIXME: Refactor into a ProgramPoint method?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExplodedGraph.cpp:89,Refactor,Refactor,89,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExplodedGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExplodedGraph.cpp,1,['Refactor'],['Refactor']
Modifiability,"// Otherwise, sink this PHI node into UnwindDest.; // Any predecessors to UnwindDest which are not already represented; // must be back edges which inherit the value from the path through; // BB. In this case, the PHI value must reference itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:148,inherit,inherit,148,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['inherit'],['inherit']
Modifiability,"// Otherwise, this is safe to transform. Insert PHI nodes for each operand; // that is variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:87,variab,variable,87,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, use a local variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, we *can* safely rewrite this load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:30,rewrite,rewrite,30,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Otherwise, we know we have a load(ext), see if any of the Extends are a; // vmull. This is a simple heuristic and certainly not perfect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp:61,Extend,Extends,61,interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,1,['Extend'],['Extends']
Modifiability,"// Otherwise, we need a thread wrapper unless we know that every; // translation unit will emit the value as a constant. We rely on the; // variable being constant-initialized in every translation unit if it's; // constant-initialized in any translation unit, which isn't actually; // guaranteed by the standard but is necessary for sanity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:140,variab,variable,140,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, we need tile config to live in this BB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:27,config,config,27,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['config'],['config']
Modifiability,"// Otherwise, we need to provide a de-sugared/transformed AST that can be; // associated with another loop directive.; //; // The canonical loop analysis return by checkTransformableLoopNest assumes; // the following structure to be the same loop without transformations or; // directives applied: \code OriginalInits; LoopHelper.PreInits;; // LoopHelper.Counters;; // for (; IV < LoopHelper.NumIterations; ++IV) {; // LoopHelper.Updates;; // Body;; // }; // \endcode; // where IV is a variable declared and initialized to 0 in LoopHelper.PreInits; // and referenced by LoopHelper.IterationVarRef.; //; // The unrolling directive transforms this into the following loop:; // \code; // OriginalInits; \; // LoopHelper.PreInits; > NewPreInits; // LoopHelper.Counters; /; // for (auto UIV = 0; UIV < LoopHelper.NumIterations; UIV+=Factor) {; // #pragma clang loop unroll_count(Factor); // for (IV = UIV; IV < UIV + Factor && UIV < LoopHelper.NumIterations; ++IV); // {; // LoopHelper.Updates;; // Body;; // }; // }; // \endcode; // where UIV is a new logical iteration counter. IV must be the same VarDecl; // as the original LoopHelper.IterationVarRef because LoopHelper.Updates; // references it. If the partially unrolled loop is associated with another; // loop directive (like an OMPForDirective), it will use checkOpenMPLoop to; // analyze this loop, i.e. the outer loop must fulfill the constraints of an; // OpenMP canonical loop. The inner loop is not an associable canonical loop; // and only exists to defer its unrolling to LLVM's LoopUnroll instead of; // doing it in the frontend (by adding loop metadata). NewPreInits becomes a; // property of the OMPLoopBasedDirective instead of statements in; // CompoundStatement. This is to allow the loop to become a non-outermost loop; // of a canonical loop nest where these PreInits are emitted before the; // outermost directive.; // Determine the PreInit declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:486,variab,variable,486,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Otherwise, we only care about anonymous class members / block-scope decls.; // FIXME: We need to handle blocks within inline / templated variables too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTCommon.cpp:140,variab,variables,140,interpreter/llvm-project/clang/lib/Serialization/ASTCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTCommon.cpp,1,['variab'],['variables']
Modifiability,"// Otherwise, we've got some expression that is more complex than just a; // single SCEVUnknown. But we don't want to have a SCEVPtrToIntExpr of an; // arbitrary expression, we want to have SCEVPtrToIntExpr of an SCEVUnknown; // only, and the expressions must otherwise be integer-typed.; // So sink the cast down to the SCEVUnknown's.; /// The SCEVPtrToIntSinkingRewriter takes a scalar evolution expression,; /// which computes a pointer-typed value, and rewrites the whole expression; /// tree so that *all* the computations are done on integers, and the only; /// pointer-typed operands in the expression are SCEVUnknown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:457,rewrite,rewrites,457,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrites']
Modifiability,// Otherwise: terminate any overlapped variable locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:39,variab,variable,39,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,"// Our approach to inheriting constructors is fundamentally different from; // that used by the MS ABI, so keep our inheriting constructor thunks; // internal rather than trying to pick an unambiguous mangling for them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:19,inherit,inheriting,19,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,['inherit'],['inheriting']
Modifiability,"// Our code motion strategy implies that we can't have dependences; // between accesses in an interleaved group and other accesses located; // between the first and last member of the group. Note that this also; // means that a group can't have more than one member at a given offset.; // The accesses in a group can have dependences with other accesses, but; // we must ensure we don't extend the boundaries of the group such that; // we encompass those dependent accesses.; //; // For example, assume we have the sequence of accesses shown below in a; // stride-2 loop:; //; // (1, 2) is a group | A[i] = a; // (1); // | A[i-1] = b; // (2) |; // A[i-3] = c; // (3); // A[i] = d; // (4) | (2, 4) is not a group; //; // Because accesses (2) and (3) are dependent, we can group (2) with (1); // but not with (4). If we did, the dependent access (3) would be within; // the boundaries of the (2, 4) group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:387,extend,extend,387,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['extend'],['extend']
Modifiability,"// Our job is very easy without suggestions. Just warn about; // every problematic operation and consider it done. No need to deal; // with fixable gadgets, no need to group operations by variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:188,variab,variable,188,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// Our main concern here is re-establishing invariants like ""a; // variable's type is either dependent or complete"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:67,variab,variable,67,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Out-of-line definitions shouldn't be pushed into scope in C++.; // Out-of-line variable and function definitions shouldn't even in C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/AST.cpp:82,variab,variable,82,interpreter/cling/lib/Utils/AST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/AST.cpp,1,['variab'],['variable']
Modifiability,"// Output a FIXIT hint if the destination is an array (rather than a; // pointer to an array). This could be enhanced to handle some; // pointers if we know the actual size, like if DstArg is 'array+2'; // we could say 'sizeof(array)-2'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:109,enhance,enhanced,109,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['enhance'],['enhanced']
Modifiability,"// Output for-loop as:; // ...; // start = startexpr; // goto loop; // loop:; // variable = phi [start, loopheader], [nextvariable, loopend]; // ...; // bodyexpr; // ...; // loopend:; // step = stepexpr; // nextvariable = variable + step; // endcond = endexpr; // br endcond, loop, endloop; // outloop:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/Chapter5/toy.cpp,4,['variab'],['variable']
Modifiability,// Output non-lazy-pointers for external and common global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp:59,variab,variables,59,interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,1,['variab'],['variables']
Modifiability,// Output stubs for external and common global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,3,['variab'],['variables']
Modifiability,// Overdefined condition variables can branch either way.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h:25,variab,variables,25,interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h,1,['variab'],['variables']
Modifiability,"// Overdefined condition variables, and branches on unfoldable constant; // conditions, mean the branch could go either way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:25,variab,variables,25,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['variab'],['variables']
Modifiability,"// Overflow occurred if it occurred in the larger type, or if the high part; // of the result does not zero/sign-extend the low part. Check this second; // possibility first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:113,extend,extend,113,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['extend'],['extend']
Modifiability,// Overload to construct a global variable using its constructor's defaults.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/IR/Module.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp,1,['variab'],['variable']
Modifiability,// Override only those variables that can be captured to avoid re-emission; // of the variables declared within the loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],['variables']
Modifiability,// Override to disable global variable loading on Linux and insert AIX canary; // word declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Override to disable global variable loading on Linux.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Overwriting open files on Windows is tricky, but the rewriter can do it; // for us.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp:56,rewrite,rewriter,56,interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FixItRewriter.cpp,1,['rewrite'],['rewriter']
Modifiability,"// Owners in the current set may be purged from the analyzer later on.; // If a variable is dead (is not referenced directly or indirectly after; // some point), it will be removed from the Store before the end of its; // actual lifetime.; // This means that if the ownership status didn't change, CurrOwners; // must be a superset of, but not necessarily equal to ExitOwners.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:80,variab,variable,80,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['variab'],['variable']
Modifiability,"// P = inv(D0, 2^W); // 2^W requires W + 1 bits, so we have to extend and then truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:63,extend,extend,63,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['extend'],['extend']
Modifiability,// PACKSS is just a truncation if the sign bits extend to the packed size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// PHI node for the loaded value of __THREW__ global variable in; // call.em.longjmp BB,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:53,variab,variable,53,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variable']
Modifiability,// PHI node for the loaded value of __THREW__ global variable in; // rethrow.longjmp BB,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:53,variab,variable,53,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variable']
Modifiability,// PHI node for the loaded value of __threwValue global variable in; // call.em.longjmp BB,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['variab'],['variable']
Modifiability,"// PHIUsers - Keep track of all of the truncated values extracted from a set; // of PHIs, along with their offset. These are the things we want to rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:147,rewrite,rewrite,147,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,1,['rewrite'],['rewrite']
Modifiability,"// PHIs can't be promoted on their own, but often can be speculated. We; // check the speculation outside of the rewriter so that we see the; // fully-rewritten alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:113,rewrite,rewriter,113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewriter']
Modifiability,// PLDTILECFGV; // Rewrite the shape information to memory. Stack slot should have; // been initialized to zero in pre config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp:19,Rewrite,Rewrite,19,interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,2,"['Rewrite', 'config']","['Rewrite', 'config']"
Modifiability,// PPC MMA non-pointer types are not allowed as non-local variable types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// PPC allows a sign-extended 16-bit immediate field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// PR31226: C++ is more complicated than what this checker currently supports.; // There are derived-to-base casts, there are different rules for 0-size; // structures, no flexible arrays, etc.; // FIXME: Disabled on C++ for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp:172,flexible,flexible,172,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp,1,['flexible'],['flexible']
Modifiability,"// PR9614. Avoid cases where the source code is lying to us. An available; // externally function should have an equivalent function somewhere else,; // but a function that calls itself through asm label/`__builtin_` trickery is; // clearly not equivalent to the real implementation.; // This happens in glibc's btowc and in some configure checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:330,config,configure,330,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['config'],['configure']
Modifiability,"// PROOF plugin...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx:9,plugin,plugin,9,gui/gui/src/TRootBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowser.cxx,1,['plugin'],['plugin']
Modifiability,"// PROOF sandbox root dir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h:9,sandbox,sandbox,9,proof/proof/inc/TProofLite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h,1,['sandbox'],['sandbox']
Modifiability,"// PS/EPS/PDF plugin based on GhostScript interpreter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASPluginGS.h:14,plugin,plugin,14,graf2d/asimage/inc/TASPluginGS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASPluginGS.h,1,['plugin'],['plugin']
Modifiability,"// PTX Interoperability Guide 3.3(A): [Integer] Values shorter than; // 32-bits are sign extended or zero extended, depending on whether; // they are signed or unsigned types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// PTX Interoperability Guide 3.3(A): [Integer] Values shorter; // than 32-bits are sign extended or zero extended, depending on; // whether they are signed or unsigned types. This case applies; // only to scalar parameters and not to aggregate values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// Packed Record Decl Bits: FlexibleArrayMember,; // AnonymousStructUnion, hasObjectMember, hasVolatileMember,; // isNonTrivialToPrimitiveDefaultInitialize,; // isNonTrivialToPrimitiveCopy, isNonTrivialToPrimitiveDestroy,; // hasNonTrivialToPrimitiveDefaultInitializeCUnion,; // hasNonTrivialToPrimitiveDestructCUnion,; // hasNonTrivialToPrimitiveCopyCUnion, isParamDestroyedInCallee,; // getArgPassingRestrictions; // ODRHash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:28,Flexible,FlexibleArrayMember,28,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['Flexible'],['FlexibleArrayMember']
Modifiability,// Parameterize the decoders based on namespace and instruction width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:3,Parameteriz,Parameterize,3,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['Parameteriz'],['Parameterize']
Modifiability,"// Parameterized SPIR-V builtins names follow this format:; // e.g. %spirv.Image._void_1_0_0_0_0_0_0, %spirv.Pipe._0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:3,Parameteriz,Parameterized,3,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['Parameteriz'],['Parameterized']
Modifiability,// Parameters are unnecessary if we're constructing a base class subobject; // and the inherited constructor lives in a virtual base.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:87,inherit,inherited,87,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['inherit'],['inherited']
Modifiability,// Parse additional include paths from environment variables.; // FIXME: We should probably sink the logic for handling these from the; // frontend into the driver. It will allow deleting 4 otherwise unused flags.; // CPATH - included following the user specified includes (but prior to; // builtin and standard includes).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:51,variab,variables,51,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['variab'],['variables']
Modifiability,"// Parse comma separated lists of variable name changes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:34,variab,variable,34,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['variab'],['variable']
Modifiability,// Parse configuration and 'roots',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:9,config,configuration,9,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['config'],['configuration']
Modifiability,// Parse inheritance specifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:9,inherit,inheritance,9,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['inherit'],['inheritance']
Modifiability,"// Parse list of variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,variab,variable,17,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['variab'],['variable']
Modifiability,// Parse options from environment variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['variab'],['variable']
Modifiability,// Parse string variable or legacy @LINE expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,"// Parse the Static Analyzer configuration. If \p Diags is set to nullptr,; // it won't verify the input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:29,config,configuration,29,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['config'],['configuration']
Modifiability,"// Parse the config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:13,config,config,13,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['config'],['config']
Modifiability,// Parse the numeric variable definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,"// Parse the variable size, starting from <vlen>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,1,['variab'],['variable']
Modifiability,// Parse the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Parse variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['variab'],['variable']
Modifiability,// ParseBitcodeStripOptions returns the config and sets the input arguments.; // If a help flag is set then ParseBitcodeStripOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:40,config,config,40,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,1,['config'],['config']
Modifiability,// ParseInstallNameToolOptions returns the config and sets the input arguments.; // If a help flag is set then ParseInstallNameToolOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:43,config,config,43,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,1,['config'],['config']
Modifiability,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:35,config,config,35,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,1,['config'],['config']
Modifiability,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:33,config,config,33,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,1,['config'],['config']
Modifiability,"// Parses simple list:; // simple-variable-list:; // '(' id-expression {, id-expression} ')'; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:34,variab,variable-list,34,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['variab'],['variable-list']
Modifiability,"// Partial integration scenario, retrieve set of variables, calculate partial; // sum, figure out integration ranges (if needed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx:49,variab,variables,49,roofit/roofitcore/src/RooHistPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx,1,['variab'],['variables']
Modifiability,"// Partial uses. Mark register def dead and add implicit def of; // sub-registers which are used.; // dead EAX = op implicit-def AL; // That is, EAX def is dead but AL def extends pass it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp:172,extend,extends,172,interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,1,['extend'],['extends']
Modifiability,// Partition variables accessed indirectly into the different strategies,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// Pass 1: generate code for all the intrinsics as if every type or constant; // that can possibly be abstracted out into a parameter variable will be.; // This identifies the sets of intrinsics we'll group together into a single; // piece of code generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:134,variab,variable,134,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Pass 2: for each of those groups, optimize the parameter variable set by; // eliminating 'parameters' that are the same for all intrinsics in the; // group, and merging together pairs of parameter variables that take the; // same values as each other for all intrinsics in the group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:60,variab,variable,60,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Pass Pipeline Configuration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp:17,Config,Configuration,17,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,13,['Config'],['Configuration']
Modifiability,"// Passing a nullptr name means no weight variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGlobalFunc.cxx:42,variab,variable,42,roofit/roofitcore/src/RooGlobalFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGlobalFunc.cxx,1,['variab'],['variable']
Modifiability,"// Passwd dialog GUI plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:21,plugin,plugin,21,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['plugin'],['plugin']
Modifiability,"// Path to the group config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:21,config,config,21,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['config'],['config']
Modifiability,"// Peek through a bitcasted shuffle operand by scaling the mask. If the; // simulated shuffle can simplify, then this shuffle is unnecessary:; // shuf (bitcast X), undef, Mask --> bitcast X'; // TODO: This could be extended to allow length-changing shuffles.; // The transform might also be obsoleted if we allowed canonicalization; // of bitcasted shuffles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:215,extend,extended,215,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['extend'],['extended']
Modifiability,// Peek through any zero-extend if we're only testing for a zero result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Peek through changes of magnitude's sign-bit. This call rewrites those:; // copysign (fabs X), Sign --> copysign X, Sign; // copysign (fneg X), Sign --> copysign X, Sign",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:59,rewrite,rewrites,59,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['rewrite'],['rewrites']
Modifiability,// Peek through extends to find a 'not' of the other side:; // (ext Y) op ext(~Y),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:16,extend,extends,16,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extends']
Modifiability,// Peek through extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,extend,extends,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,// Peek through the extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,extend,extends,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],['extends']
Modifiability,// Peel off the first phi from Defaults and insert a phi between producer; // and consumer. This phi will not be at the front of the block so we; // consider it illegal. It will only exist during the rewrite process; it; // needs to exist while we peel off prologs because these could take the; // default value. After that we can replace all uses with the loop producer; // value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:200,rewrite,rewrite,200,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Per C++11 [basic.def.odr], a variable is odr-used ""unless it is; // an object that satisfies the requirements for appearing in a; // constant expression (5.19) and the lvalue-to-rvalue conversion (4.1); // is immediately applied."" This function handles the lvalue-to-rvalue; // conversion part.; //; // If we encounter a node that claims to be an odr-use but shouldn't be, we; // transform it into the relevant kind of non-odr-use node and rebuild the; // tree of nodes leading to it.; //; // This is a mini-TreeTransform that only transforms a restricted subset of; // nodes (and only certain operands of them).; // Rebuild a subexpression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Per C++17 [temp.explicit]p10, we may instantiate despite an explicit; // instantiation declaration if a variable is usable in a constant; // expression (among other cases).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:107,variab,variable,107,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Per [dcl.decomp]p3, the binding is treated as a variable of reference; // type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,// Per-variable loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Perform TLS alignment check here after attributes attached to the variable; // which may affect the alignment have been processed. Only perform the check; // if the target has a maximum TLS alignment (zero means no constraints).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:69,variab,variable,69,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// Perform a bottom up rewrite of all children.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:23,rewrite,rewrite,23,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Perform address type promotion if doing so is profitable.; // If AllowPromotionWithoutCommonHeader == false, we should find other sext; // instructions that sign extended the same initial value. However, if; // AllowPromotionWithoutCommonHeader == true, we expect promoting the; // extension is just profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:165,extend,extended,165,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extended']
Modifiability,"// Perform any subclass implementation-specific initialization; // Can be skipped if this is a rerun with an identical configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:119,config,configuration,119,roofit/roofitcore/src/RooAbsGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx,2,['config'],['configuration']
Modifiability,"// Perform check for initializers of device-side global variables.; // CUDA allows empty constructors as initializers (see E.2.3.1, CUDA; // 7.5). We must also apply the same checks to all __shared__; // variables whether they are local or not. CUDA also allows; // constant initializers for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:56,variab,variables,56,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,3,['variab'],['variables']
Modifiability,"// Perform combines for MVEEXT. If it has not be optimized to anything better; // before lowering, it gets converted to stack store and extloads performing the; // extend whilst still keeping the same lane ordering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:164,extend,extend,164,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Perform correct code generation around function calls and before returns.; // The below variables record the return/terminator instructions and the call; // instructions respectively; including which register is available as a; // temporary register just before the recorded instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:91,variab,variables,91,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,1,['variab'],['variables']
Modifiability,// Perform custom splitting instead of the two stage extend we would get; // by default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:53,extend,extend,53,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Perform derived-to-base casts and/or field accesses, to get from the; // temporary object we created (and, potentially, for which we extended; // the lifetime) to the subobject we're binding the reference to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:136,extend,extended,136,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['extend'],['extended']
Modifiability,// Perform fast-path value-number based elimination of values inherited from; // dominators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:62,inherit,inherited,62,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['inherit'],['inherited']
Modifiability,// Perform implicit floating-point type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleFloatConversion(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:99,Refactor,Refactor,99,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['Refactor'],['Refactor']
Modifiability,"// Perform implicit instantiation of static data members, static data member; // templates of class templates, and variable template specializations. Delay; // instantiations of variable templates, except for those that could be used; // in a constant expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:115,variab,variable,115,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,// Perform implicit integer type conversion.; // May modify all input parameters.; // TODO: Refactor to use Sema::handleIntegerConversion(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:92,Refactor,Refactor,92,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['Refactor'],['Refactor']
Modifiability,// Perform implicit type conversion on binary symbolic expressions.; // May modify all input parameters.; // TODO: Refactor to use built-in conversion functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:115,Refactor,Refactor,115,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['Refactor'],['Refactor']
Modifiability,"// Perform lookup for Objective-C instance variables (including automatically; // synthesized instance variables), if we're in an Objective-C method.; // FIXME: This lookup really, really needs to be folded in to the normal; // unqualified lookup mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variables']
Modifiability,"// Perform some tweaks to the cost and threshold based on the direct; // callsite information.; // We want to more aggressively inline vector-dense kernels, so up the; // threshold, and we'll lower it if the % of vector instructions gets too; // low. Note that these bonuses are some what arbitrary and evolved over; // time by accident as much as because they are principled bonuses.; //; // FIXME: It would be nice to remove all such bonuses. At least it would be; // nice to base the bonus values on something more scientific.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:303,evolve,evolved,303,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['evolve'],['evolved']
Modifiability,// Perform the elision. Delete the old stack object and replace its only use; // in the variable info map. Mark the stack object as mutable and aliased.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:88,variab,variable,88,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,// Perform the operation on the extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:32,extend,extended,32,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['extend'],['extended']
Modifiability,"// Perform unbinned extended ML fit to data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:20,extend,extended,20,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['extend'],['extended']
Modifiability,"// Performs the same function as StepBound, and supplies; // additional information about which component of the; // nonnegative variables is responsible for restricting; // alpha. In terms of the abstract formulation, the; // components have the following meanings.; //; // primalValue: the value of the blocking component of the; // primal variables (u,t,v,w).; // primalStep: the corresponding value of the blocking; // component of the primal step variables (b->u,b->t,; // b->v,b->w); // dualValue: the value of the blocking component of the; // dual variables (lambda,pi,phi,gamma).; // dualStep: the corresponding value of the blocking; // component of the dual step variables (b->lambda,b->pi,; // b->phi,b->gamma); // firstOrSecond: 1 if the primal step is blocking, 2; // if the dual step is block, 0 if no step is blocking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:129,variab,variables,129,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,5,['variab'],['variables']
Modifiability,"// Permit the debug-info to be completely wrong: identifying a nonexistant; // operand, or one that is not a register definition, means something; // unexpected happened during optimisation. Broken debug-info, however,; // shouldn't crash the compiler -- instead leave the variable value as; // None, which will make it appear ""optimised out"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:273,variab,variable,273,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Persistable project container for (composite) pdfs, functions, variables and datasets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:66,variab,variables,66,roofit/roofitcore/inc/RooWorkspace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h,1,['variab'],['variables']
Modifiability,// Phase 1: fill the gaps between fixed-offset fields with the best; // flexible-offset field that fits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:72,flexible,flexible-offset,72,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible-offset']
Modifiability,// Phase 2: repeatedly add the best flexible-offset field until; // they're all gone.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:36,flexible,flexible-offset,36,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible-offset']
Modifiability,// Picking whatever value for the tied variable will make the instruction; // serial.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp,1,['variab'],['variable']
Modifiability,"// Picks a random configuration, then selects a random def and a random use from; // it and finally set the selected values in the provided InstructionInstances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:18,config,configuration,18,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,1,['config'],['configuration']
Modifiability,"// Place PHIs for variable values, using the LLVM IDF calculator.; // Collect the set of blocks where variables are def'd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Place the code for broadcasting invariant variables in the new preheader.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp:45,variab,variables,45,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp,1,['variab'],['variables']
Modifiability,// Place the code for broadcasting invariant variables in the new preheader.; // Broadcast the scalar into all locations in the vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp:45,variab,variables,45,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp,1,['variab'],['variables']
Modifiability,// Place the extended lanes into the correct locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:13,extend,extended,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['extend'],['extended']
Modifiability,// Place this variable to llvm.used so it won't be GC'ed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SampleProfileLoaderBaseUtil.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Transforms/Utils/SampleProfileLoaderBaseUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SampleProfileLoaderBaseUtil.cpp,1,['variab'],['variable']
Modifiability,"// Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluation errors,; // but if an likelihood value evaluates with error, the corresponding value; // on the curve will be set to the value given in EvalErrorValue().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:79,config,configuration,79,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['config'],['configuration']
Modifiability,"// Plot range of variable may not be infinite or empty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:17,variab,variable,17,roofit/roofitcore/src/RooAbsRealLValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx,2,['variab'],['variable']
Modifiability,"// Plotting unbinned data with alternate and variable binnings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:45,variab,variable,45,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variable']
Modifiability,// Plugin IDs are not bound to any value as they are set dynamically.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Plugin,Plugin,3,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,1,['Plugin'],['Plugin']
Modifiability,"// Plugin Postscript driver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Plugin,Plugin,3,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Plugin'],['Plugin']
Modifiability,"// Plugin Postscript/SVG driver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Plugin,Plugin,3,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,2,['Plugin'],['Plugin']
Modifiability,"// Plugin TImageDump driver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Plugin,Plugin,3,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Plugin'],['Plugin']
Modifiability,"// Plugin XML driver",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:3,Plugin,Plugin,3,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Plugin'],['Plugin']
Modifiability,"// Plugin automatically executed during next()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h:3,Plugin,Plugin,3,geom/geom/inc/TGeoNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h,1,['Plugin'],['Plugin']
Modifiability,// PluginAction is the only program action handled separately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:3,Plugin,PluginAction,3,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['Plugin'],['PluginAction']
Modifiability,"// PoP says: ""A short floating-point datum requires only the; // left-most 32 bit positions of a floating-point register"".; // Therefore, in contrast to AK_GeneralPurpose and AK_Memory,; // don't extend shadow and don't mind the gap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:196,extend,extend,196,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['extend'],['extend']
Modifiability,// Point to variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Pointer to data (address of variable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/inc/TStructNode.h:31,variab,variable,31,graf3d/gviz3d/inc/TStructNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/inc/TStructNode.h,1,['variab'],['variable']
Modifiability,"// Pointer to main-color variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveElement.h:25,variab,variable,25,graf3d/eve/inc/TEveElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveElement.h,2,['variab'],['variable']
Modifiability,"// Pointer to weight variable (if set)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:21,variab,variable,21,roofit/roofitcore/inc/RooTreeDataStore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h,1,['variab'],['variable']
Modifiability,"// Poison the vtable pointer if it has no virtual bases, but inherits; // virtual functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:61,inherit,inherits,61,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['inherit'],['inherits']
Modifiability,"// PoisonValue inherits UndefValue, so its check is not necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:15,inherit,inherits,15,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['inherit'],['inherits']
Modifiability,// Policy choice says not to rewrite - the most common reason is that we're; // compiling code without a GCStrategy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:29,rewrite,rewrite,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['rewrite'],['rewrite']
Modifiability,// Pop all our variables from scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,13,['variab'],['variables']
Modifiability,"// Pop the local variables off the stack. If there are no callee-saved; // registers, it means we are actually positioned at the terminator and can; // combine stack increment for the locals and the stack increment for; // callee-popped arguments into (possibly) a single instruction and be done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:17,variab,variables,17,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variables']
Modifiability,// Pop the stored field regions and apply them to the origin; // object in the same order we had them on the copy.; // OriginField will evolve like 'b' -> 'b.y' -> 'b.y.e'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:136,evolve,evolve,136,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['evolve'],['evolve']
Modifiability,"// Pop-up pieces needs the index of the last reported piece and its count; // how many times we report to handle multiple reports on the same range.; // This marks the variable, adds the </table> end tag and the message; // (list element) as a row. The <table> start tag will be added after the; // rows has been written out. Note: It stores every different range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:168,variab,variable,168,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['variab'],['variable']
Modifiability,// Populate ValueToLoc with illegal default mappings for every value used by; // any UseBeforeDef variables for this instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:98,variab,variables,98,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Populate `FixItsForVariable` with fix-its directly associated with each; // variable. Fix-its directly associated to a variable 'v' are the ones; // produced by the `FixableGadget`s whose claimed variable is 'v'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,3,['variab'],['variable']
Modifiability,// Populate a new block to contain the loop body and loop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,// Populate profile symbol list if extended binary format is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,1,['extend'],['extended']
Modifiability,"// Populate the VRX map (VR to extension-type).; // Go over all the formal parameters of the function. If a given parameter; // P is sign- or zero-extended, locate the virtual register holding that; // parameter and create an entry in the VRX map indicating the type of ex-; // tension (and the source type).; // This is a bit complicated to do accurately, since the memory layout in-; // formation is necessary to precisely determine whether an aggregate para-; // meter will be passed in a register or in memory. What is given in MRI; // is the association between the physical register that is live-in (i.e.; // holds an argument), and the virtual register that this value will be; // copied into. This, by itself, is not sufficient to map back the virtual; // register to a formal parameter from Function (since consecutive live-ins; // from MRI may not correspond to consecutive formal parameters from Func-; // tion). To avoid the complications with in-memory arguments, only consi-; // der the initial sequence of formal parameters that are known to be; // passed via registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:147,extend,extended,147,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['extend'],['extended']
Modifiability,// Populate the config from the command-line options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp:16,config,config,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp,1,['config'],['config']
Modifiability,// Populate the non-atomic reduction using the elementwise reduction function.; // This loads the elements from the global and private variables and reduces; // them before storing back the result to the global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:135,variab,variables,135,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Populate the outlined reduction function using the elementwise reduction; // function. Partial values are extracted from the type-erased array of; // pointers to private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:173,variab,variables,173,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,"// Posix condition variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TPosixCondition.h:19,variab,variable,19,core/thread/inc/TPosixCondition.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TPosixCondition.h,2,['variab'],['variable']
Modifiability,"// Possible TODO: Allow targets to extend this (perhaps by allowing the; // constructor to specify the size of the bit vector); // Possible TODO: Allow requiring the negative (e.g. VRegsAllocated could be; // stated as the negative of ""has vregs""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:35,extend,extend,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['extend'],['extend']
Modifiability,// Post-process instructions (typically extended mnemonics),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/AsmParser/PPCAsmParser.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/Target/PowerPC/AsmParser/PPCAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/AsmParser/PPCAsmParser.cpp,1,['extend'],['extended']
Modifiability,// Postorder register normalization.; // Inherit register units newly adopted by subregisters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:41,Inherit,Inherit,41,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['Inherit'],['Inherit']
Modifiability,// Postpone error emission until we've collected attributes required to; // figure out whether it's a host or device variable and whether the; // error should be ignored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:117,variab,variable,117,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// Pragmas added by plugins,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:20,plugin,plugins,20,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,1,['plugin'],['plugins']
Modifiability,"// Pre and Post inc on these are legal, given the correct extends",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:58,extend,extends,58,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// Pre-promote (i1 (truncate (srl X, Y))) on RV64 with Zbs without zero; // extending X. This is safe since we only need the LSB after the shift and; // shift amounts larger than 31 would produce poison. If we wait until; // type legalization, we'll create RISCVISD::SRLW and we can't recover it; // to use a BEXT instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:76,extend,extending,76,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Pre-promote (i32 (and (srl X, Y), 1)) on RV64 with Zbs without zero; // extending X. This is safe since we only need the LSB after the shift and; // shift amounts larger than 31 would produce poison. If we wait until; // type legalization, we'll create RISCVISD::SRLW and we can't recover it; // to use a BEXT instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:75,extend,extending,75,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Pre-shift a constant shifted by a variable amount with constant offset:; // C shift (A add nuw C1) --> (C shift C1) shift A,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['variab'],['variable']
Modifiability,// PreTileConfig should configure the tile registers based on basic; // block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp:24,config,configure,24,interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,2,['config'],['configure']
Modifiability,// Precalculate the number of lits this variable contributes to in the; // operand. If there is a single lit (consecutive range of bits) we can use a; // destructive sequence on APInt that reduces memory allocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,1,['variab'],['variable']
Modifiability,// Predefine macros and configure the preprocessor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:24,config,configure,24,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['config'],['configure']
Modifiability,"// Prefer addition if the second operation is sign-extended, in the; // hope of using AGF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:51,extend,extended,51,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// Prefer constants to undef to anything else; // Undef is a constant, have to check it first.; // Prefer poison to undef as it's less defined.; // Prefer smaller constants to constantexprs; // Note that the order here matters because of class inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:244,inherit,inheritance,244,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['inherit'],['inheritance']
Modifiability,"// Prefer sign extensions to zero extensions as sign-extensions tend to be; // more expensive. Don't do this if the load is already a zero-extend load; // though, otherwise we'll rewrite a zero-extend load into a sign-extend; // later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:139,extend,extend,139,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,4,"['extend', 'rewrite']","['extend', 'rewrite']"
Modifiability,// Prefer to promote to s32 before lowering if we don't have 16-bit; // shifts. This avoid a lot of intermediate truncate and extend operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:126,extend,extend,126,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['extend'],['extend']
Modifiability,// Prefix + Name is enough for local variables and parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"// Preincrement iterator to avoid invalidation issues.; // This is for CET enhancement.; //; // ENDBR32 and ENDBR64 have specific opcodes:; // ENDBR32: F3 0F 1E FB; // ENDBR64: F3 0F 1E FA; // And we want that attackers won’t find unintended ENDBR32/64; // opcode matches in the binary; // Here’s an example:; // If the compiler had to generate asm for the following code:; // a = 0xF30F1EFA; // it could, for example, generate:; // mov 0xF30F1EFA, dword ptr[a]; // In such a case, the binary would include a gadget that starts; // with a fake ENDBR64 opcode. Therefore, we split such generation; // into multiple operations, let it not shows in the binary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:75,enhance,enhancement,75,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['enhance'],['enhancement']
Modifiability,// Prepare a ReaderWriterInfo with a helper variable that will use; // the sub-reader/writer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:44,variab,variable,44,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,1,['variab'],['variable']
Modifiability,// Prepare function/variable address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.h:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.h,1,['variab'],['variable']
Modifiability,// Prepare list of directories where config file is searched for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:37,config,config,37,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// Presence of an IVar superregion has priority over this branch, because; // ObjC objects are on the heap even if the core doesn't realize this.; // Presence of a block variable base region has priority over this branch,; // because block variables are known to be either on stack or on heap; // (might actually move between the two, hence UnknownSpace).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp:170,variab,variable,170,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Pretend the variable template specializations are class template; // specializations and form a fake injected class name type for comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['variab'],['variable']
Modifiability,// Prevent 2 instructions with extenders from duplexing; // Note that MIb (slot1) can be extended and MIa (slot0); // can never be extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:31,extend,extenders,31,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,3,['extend'],"['extended', 'extenders']"
Modifiability,"// Prevent CSE-ing non-local convergent instructions.; // LLVM's current definition of `isConvergent` does not necessarily prove; // that non-local CSE is illegal. The following check extends the definition; // of `isConvergent` to assume a convergent instruction is dependent not; // only on additional conditions, but also on fewer conditions. LLVM does; // not have a MachineInstr attribute which expresses this extended; // definition, so it's necessary to use `isConvergent` to prevent illegally; // CSE-ing the subset of `isConvergent` instructions which do fall into this; // extended definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:184,extend,extends,184,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,3,['extend'],"['extended', 'extends']"
Modifiability,"// Prevent the ROOT-PCMs hitting this during auto-load during; // JITting - which will cause recursive compilation.; // Avoid to call the plugin manager at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:138,plugin,plugin,138,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['plugin'],['plugin']
Modifiability,// Prevent the path from being extended twice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:31,extend,extended,31,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['extend'],['extended']
Modifiability,// Prevent unused variable warnings with TC,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,1,['variab'],['variable']
Modifiability,"// Prevent use of AH in a REX instruction by explicitly copying it to; // an ABCD_L register.; //; // The current assumption of the register allocator is that isel; // won't generate explicit references to the GR8_ABCD_H registers. If; // the allocator and/or the backend get enhanced to be more robust in; // that regard, this can be, and should be, removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:276,enhance,enhanced,276,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['enhance'],['enhanced']
Modifiability,"// Prevents diagnosing multiple times for the same instance variable; // at, for example, both a return and at the end of the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,"// Previously, we just called AddGlobalTestEnvironment in global namespace, but this caused either a warning about an; // unused declared variable (the return value of the call) or a parsing problem that the compiler can't handle if you; // don't store the return value at all. The solution is to just define this manual main function. The default gtest; // main function does InitGoogleTest and RUN_ALL_TESTS, we add the environment call in the middle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:138,variab,variable,138,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,4,['variab'],['variable']
Modifiability,"// Print list of non-projected variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:31,variab,variables,31,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['variab'],['variables']
Modifiability,// Print out module-level global variables in proper order,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variables']
Modifiability,// Print the debug variable information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,1,['variab'],['variable']
Modifiability,// Print the global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp,1,['variab'],['variables']
Modifiability,// Print the location statistics for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,// Print the location statistics for variables (includes local variables; // and formal parameters).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,2,['variab'],['variables']
Modifiability,// Print the meta-variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Print the normal qualified name for the variable, then break off the last; // NNS, and add the appropriate other text. Clang always prints the global; // variable name without template arguments, so we can use rsplit(""::"") and; // then recombine the pieces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,['variab'],['variable']
Modifiability,// Print the single location variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:29,variab,variables,29,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,// Print the summary for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,// Print the variable table first. TODO: Sorting by variable could make the; // output more stable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variable']
Modifiability,"// Prints cell content; //--- getter and setter for user variable ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:57,variab,variable,57,tmva/tmva/inc/TMVA/PDEFoamCell.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h,1,['variab'],['variable']
Modifiability,// Private member variables require Mutex protections,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:18,variab,variables,18,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,1,['variab'],['variables']
Modifiability,// Privatization callback that performs appropriate action for; // shared/private/firstprivate/lastprivate/copyin/... variables.; //; // TODO: This defaults to shared right now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:118,variab,variables,118,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],['variables']
Modifiability,// Privatize all private variables except for in_reduction items.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:25,variab,variables,25,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Privatize the declared variable of mapper to be the current array element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,// Probably an exception catch-by-reference variable.; // FIXME: It doesn't really mean that the object has a trivial destructor.; // Also are there other cases?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// Process all changes in variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:26,variab,variable,26,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['variab'],['variable']
Modifiability,// Process all the classes to inherit as if they were part of a; // regular 'def' and inherit all record values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,inherit,inherit,30,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,2,['inherit'],['inherit']
Modifiability,"// Process any change in variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:25,variab,variable,25,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,3,['variab'],['variable']
Modifiability,"// Process automatic extended option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:21,extend,extended,21,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['extend'],['extended']
Modifiability,// Process declare target link variables for the target directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:31,variab,variables,31,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// Process insert hooks required for parameterized binnings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:37,parameteriz,parameterized,37,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['parameteriz'],['parameterized']
Modifiability,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:50,variab,variables,50,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variables']
Modifiability,// Process llvm.global.annotations special global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// Process old versions of the voxel finder. Just read the data; // from the buffer in a temp variable then mark voxels as garbage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVoxelFinder.cxx:94,variab,variable,94,geom/geom/src/TGeoVoxelFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVoxelFinder.cxx,1,['variab'],['variable']
Modifiability,// Process options that change search path for config files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:47,config,config,47,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,// Process rows where the variable is != 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,1,['variab'],['variable']
Modifiability,// Process the config file pointed to by CURRENT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:15,config,config,15,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['config']
Modifiability,"// Process the sinking DbgUsersToSalvage in reverse order, as we only want; // to clone the last appearing debug intrinsic for each given variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:138,variab,variable,138,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['variab'],['variable']
Modifiability,"// ProcessImplicitDefs may leave some copies of <undef> values, it only; // removes local variables. When we have a copy like:; //; // %1 = COPY undef %2; //; // We delete the copy and remove the corresponding value number from %1.; // Any uses of that value number are marked as <undef>.; // Note that we do not query CoalescerPair here but redo isMoveInstr as the; // CoalescerPair may have a new register class with adjusted subreg indices; // at this point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:90,variab,variables,90,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['variab'],['variables']
Modifiability,// Processing for implicitly captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,variab,variables,38,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"// Produce OPC_Decode or OPC_TryDecode opcode based on the information; // whether the instruction decoder is complete or not. If it is complete; // then it handles all possible values of remaining variable/unfiltered bits; // and for any value can determine if the bitpattern is a valid instruction; // or not. This means OPC_Decode will be the final step in the decoding; // process. If it is not complete, then the Fail return code from the; // decoder method indicates that additional processing should be done to see; // if there is any other instruction that also matches the bitpattern and; // can decode it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:198,variab,variable,198,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['variab'],['variable']
Modifiability,// Produce the value that needs to be either zero or sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:58,extend,extended,58,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// Produces the full sequence of instructions for getting the thread pointer; // offset of a variable into X0, using the TLSDesc model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:93,variab,variable,93,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,1,['variab'],['variable']
Modifiability,"// Profile histogram is resized along axis such that x is in the axis range.; // The new axis limits are recomputed by doubling iteratively; // the current axis range until the specified value x is within the limits.; // The algorithm makes a copy of the histogram, then loops on all bins; // of the old histogram to fill the extended histogram.; // Takes into account errors (Sumw2) if any.; // The axis must be extendable before invoking this function.; // Ex: h->GetXaxis()->SetCanExtend(kTRUE)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:326,extend,extended,326,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,2,['extend'],"['extendable', 'extended']"
Modifiability,// Profitability check: we must be extending exactly one of it's operands.; // FIXME: this is probably overly restrictive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,extend,extending,35,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,// ProgramPaths are found via 'PATH' environment variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/XCore.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Driver/ToolChains/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/XCore.cpp,1,['variab'],['variable']
Modifiability,"// ProgramPaths are found via 'PATH' environment variable.; // Default library paths are following:; // ${RESOURCEDIR}/lib/ve-unknown-linux-gnu,; // These are OK.; // Default file paths are following:; // ${RESOURCEDIR}/lib/ve-unknown-linux-gnu, (== getArchSpecificLibPaths); // ${RESOURCEDIR}/lib/linux/ve, (== getArchSpecificLibPaths); // /lib/../lib64,; // /usr/lib/../lib64,; // ${BINPATH}/../lib,; // /lib,; // /usr/lib,; // These are OK for host, but no go for VE.; // Define file paths from scratch here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/VEToolchain.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Driver/ToolChains/VEToolchain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/VEToolchain.cpp,1,['variab'],['variable']
Modifiability,// Prohibit function address recording if the function is both internal and; // COMDAT. This avoids the profile data variable referencing internal symbols; // in COMDAT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,// Prohibit structs with flexible array members too.; // We cannot capture what is in the tail end of the struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:25,flexible,flexible,25,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['flexible'],['flexible']
Modifiability,// Prohibit variably-modified types in blocks; they're difficult to deal with.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:12,variab,variably-modified,12,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variably-modified']
Modifiability,// Promote the operation by extending the operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:28,extend,extending,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,3,['extend'],['extending']
Modifiability,"// Promoting the operand and result values changes the saturation width,; // which is extends the values that we clamp to on saturation. This could be; // resolved by shifting one of the operands the same amount, which would; // also shift the result we compare against, then shifting back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:86,extend,extends,86,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extends']
Modifiability,// Promotion requires extend/truncate for data and a shuffle for mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// Prompt is ""$ ""; // Sometimes (extended input modes) followed by EditorPrompt, e.g.; // ""[bkwd''] """,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Range.h:33,extend,extended,33,core/textinput/src/textinput/Range.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Range.h,1,['extend'],['extended']
Modifiability,// Properly emit variable-sized array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:17,variab,variable-sized,17,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable-sized']
Modifiability,// Properly sign extend the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Proposed Change of [dcl.fct.def.coroutine]p12 in P2014R0:; // Otherwise, overload resolution is performed again on a function call; // created; // by passing the amount of space requested as an argument of type; // std::size_t as the first argument, and the lvalues p1 ... pn as the; // succeeding arguments. Otherwise, overload resolution is performed again; // on a function call created by passing just the amount of space required as; // an argument of type std::size_t.; //; // So within the proposed change in P2014RO, the priority order of aligned; // allocation functions wiht promise_type is:; //; // void* operator new( std::size_t, std::align_val_t, placement_args... );; // void* operator new( std::size_t, std::align_val_t);; // void* operator new( std::size_t, placement_args... );; // void* operator new( std::size_t);; // Helper variable to emit warnings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:848,variab,variable,848,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['variab'],['variable']
Modifiability,"// Protect against multiple extended terms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:28,extend,extended,28,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,3,['extend'],['extended']
Modifiability,// Protect the dtor to ensure this type is never destroyed polymorphically.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h:59,polymorphi,polymorphically,59,interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/ArgList.h,1,['polymorphi'],['polymorphically']
Modifiability,// Protocol description structures; // struct _objc_protocol_extension {; // uint32_t size; // sizeof(struct _objc_protocol_extension); // struct _objc_method_description_list *optional_instance_methods;; // struct _objc_method_description_list *optional_class_methods;; // struct _objc_property_list *instance_properties;; // const char ** extendedMethodTypes;; // struct _objc_property_list *class_properties;; // },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:341,extend,extendedMethodTypes,341,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['extend'],['extendedMethodTypes']
Modifiability,// Provide a specific diagnostic for uninitialized variable; // definitions with incomplete array type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// Provide a specific diagnostic for uninitialized variable; // definitions with reference type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Provided ahead of time in pass 2, to indicate which parameters are being; // assigned to what. This vector contains an entry for each call to; // allocParam expected during code gen (which we counted up in pass 1), and; // indicates the number of the parameter variable that should be returned, or; // -1 if this call shouldn't allocate a parameter variable at all.; //; // We rely on the recursive code generation working identically in passes 1; // and 2, so that the same list of calls to allocParam happen in the same; // order. That guarantees that the parameter numbers recorded in pass 1 will; // match the entries in this vector that store what EmitterBase::EmitBuiltinCG; // decided to do about each one in pass 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:264,variab,variable,264,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,2,['variab'],['variable']
Modifiability,"// Providing that the variable being spilled does not look like a loop; // induction variable, which is expensive to spill around and better; // pushed into a condition inside the loop if possible, provide a strong; // negative bias on through blocks to prevent unwanted liveness on loop; // backedges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,2,['variab'],['variable']
Modifiability,// Pseudo code for the test:; // if (!(GuardVar & MyGuardBit)) {; // GuardVar |= MyGuardBit;; // ... initialize the object ...;; // }; // Test our bit from the guard variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:166,variab,variable,166,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,// Pseudo-object operations and ivar references need special; // treatment because we're going to recursively rewrite them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:110,rewrite,rewrite,110,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,// Ptx allows variable initilization only for constant and global state; // spaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,// Ptx allows variable initilization only for constant and; // global state spaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// Publish sandbox nodes in directory and/or CINT if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:11,sandbox,sandbox,11,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['sandbox'],['sandbox']
Modifiability,// Pull out the pointer to the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,3,['variab'],['variable']
Modifiability,"// Push a rewrite for replacing the identifier name with the internal name,; // unless we are parsing the operand of an offset operator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:10,rewrite,rewrite,10,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['rewrite'],['rewrite']
Modifiability,// Push live variables for the stack map (skipping the first two arguments; // <id> and <numBytes>).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['variab'],['variables']
Modifiability,// Push live variables for the stack map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,2,['variab'],['variables']
Modifiability,"// Push the sign extend to the operand of the unpack; // This is necessary where, for example, the operand of the unpack; // is another unpack:; // 4i32 sign_extend_inreg (4i32 uunpklo(8i16 uunpklo (16i8 opnd)), from 4i8); // ->; // 4i32 sunpklo (8i16 sign_extend_inreg(8i16 uunpklo (16i8 opnd), from 8i8); // ->; // 4i32 sunpklo(8i16 sunpklo(16i8 opnd))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Put all commands that expand environment variables above this",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClingPragmas.cpp:44,variab,variables,44,interpreter/cling/lib/Interpreter/ClingPragmas.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClingPragmas.cpp,1,['variab'],['variables']
Modifiability,// Put all invalid and variable sized objects at the end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Put the parameter variables in scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// Puts rewrite rule \p From -> \p To into the rewrite map. Also if \p From; // and \p FromRewritten are the same (i.e. there has been no rewrite; // registered for \p From), then puts this value in the list of rewritten; // expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:8,rewrite,rewrite,8,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,3,['rewrite'],['rewrite']
Modifiability,"// Qp Variables class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:6,Variab,Variables,6,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['Variab'],['Variables']
Modifiability,"// Query the Setup Config server for installs, then pick the newest version; // and find its default VC toolchain. If `VCToolsVersion` is specified, that; // version is preferred over the latest version.; //; // This is the preferred way to discover new Visual Studios, as they're no; // longer listed in the registry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCPaths.h:19,Config,Config,19,interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCPaths.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsDriver/MSVCPaths.h,1,['Config'],['Config']
Modifiability,// Queue up any out-of-line partial specializations of this member; // variable template; the client will force their instantiation once; // the enclosing class has been instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:71,variab,variable,71,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// R/O variable with multiple of 2 byte alignment,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,1,['variab'],['variable']
Modifiability,// RLDICL generates sign-extended output if it clears at least; // 33 bits from the left (MSB).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// ROOT configuration: all of xRooFit is placed into a detail namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h:8,config,configuration,8,roofit/xroofit/inc/RooFit/xRooFit/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/Config.h,1,['config'],['configuration']
Modifiability,// RV32 ignores the upper 32 bits. ADDIW sign extends the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMergeBaseOffset.cpp:46,extend,extends,46,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMergeBaseOffset.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMergeBaseOffset.cpp,1,['extend'],['extends']
Modifiability,// RV64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:57,extend,extended,57,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,1,['extend'],['extended']
Modifiability,// R_SExpr is the result type for a traversal.; // A copy or non-destructive rewrite returns a newly allocated term.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h:77,rewrite,rewrite,77,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,1,['rewrite'],['rewrite']
Modifiability,"// R__USE_IMT; // fixture that provides fixed and variable sized arrays as RDF columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:50,variab,variable,50,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['variab'],['variable']
Modifiability,// Raycaster temp variables to avoid one per frame allocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,variab,variables,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variables']
Modifiability,// Rd = #u6; // Do not test for #u6 size since the const is getting extended; // regardless and compound could be formed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:68,extend,extended,68,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Rd = #u6; // Do not test for #u6 size since the const is getting extended; // regardless and compound could be formed.; // Rd = #-1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:68,extend,extended,68,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// Re-evaluate an SVal with top-level `State->assume`, this ignites; // a RECURSIVE algorithm that will reach a FIXPOINT.; //; // About performance and complexity: Let us assume that in a State we; // have N non-trivial equivalence classes and that all constraints and; // disequality info is related to non-trivial classes. In the worst case,; // we can simplify only one symbol of one class in each iteration. The; // number of symbols in one class cannot grow b/c we replace the old; // symbol with the simplified one. Also, the number of the equivalence; // classes can decrease only, b/c the algorithm does a merge operation; // optionally. We need N iterations in this case to reach the fixpoint.; // Thus, the steps needed to be done in the worst case is proportional to; // N*N.; //; // This worst case scenario can be extended to that case when we have; // trivial classes in the constraints and in the disequality map. This; // case can be reduced to the case with a State where there are only; // non-trivial classes. This is because a merge operation on two trivial; // classes results in one non-trivial class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:827,extend,extended,827,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['extend'],['extended']
Modifiability,"// Re-initialize live-ins and live-outs, to clear the remains of previous; // variables live-ins / live-outs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:78,variab,variables,78,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// Re-state the variable location: if there's no replacement then NewLoc; // is std::nullopt and a $noreg DBG_VALUE will be created. Otherwise, a; // DBG_VALUE identifying the alternative location will be emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Read CPU configuration information operation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h:12,config,configuration,12,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,1,['config'],['configuration']
Modifiability,// Read a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp,1,['variab'],['variable']
Modifiability,"// Read config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:8,config,config,8,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,1,['config'],['config']
Modifiability,// Read options from config file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,config,config,21,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// Read out input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:18,variab,variables,18,tmva/tmva/inc/TMVA/RReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx,1,['variab'],['variables']
Modifiability,"// Read specified byte range asynchronously. Actually we tell the kernel; // which blocks we are going to read so it can start loading these blocks; // in the buffer cache.; // Shortcut to avoid having to implement dummy ReadBufferAsync() in all; // I/O plugins. Override ReadBufferAsync() in plugins if async is supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:254,plugin,plugins,254,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['plugin'],['plugins']
Modifiability,// Read the opcode (except the ModR/M byte in the case of extended or escape; // opcodes).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp:58,extend,extended,58,interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp,1,['extend'],['extended']
Modifiability,"// Reads a set of optional statements. These can change the behavior of; // a number of resource types (e.g. STRINGTABLE, MENU or DIALOG) if provided; // before the main block with the contents of the resource.; // Usually, resources use a basic set of optional statements:; // CHARACTERISTICS, LANGUAGE, VERSION; // However, DIALOG and DIALOGEX extend this list by the following items:; // CAPTION, CLASS, EXSTYLE, FONT, MENU, STYLE; // UseExtendedStatements flag (off by default) allows the parser to read; // the additional types of statements.; //; // Ref (to the list of all optional statements):; // msdn.microsoft.com/en-us/library/windows/desktop/aa381002(v=vs.85).aspx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:346,extend,extend,346,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,1,['extend'],['extend']
Modifiability,"// Real-valued variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:15,variab,variable,15,roofit/roofitcore/inc/RooRealVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h,1,['variab'],['variable']
Modifiability,// Rebuild Defaultmap Clause since we need to invoke the checking of; // defaultmap(none:variable-category) after template initialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:89,variab,variable-category,89,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['variab'],['variable-category']
Modifiability,// Recommend -fsafe-buffer-usage-suggestions?; // Lists as a string the names of variables in `VarGroupForVD` except for `VD`; // itself:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:81,variab,variables,81,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variables']
Modifiability,"// Reconnect all plotClones to each other, imported when plotting N-dim integrals with entangled parameterized ranges",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:97,parameteriz,parameterized,97,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['parameteriz'],['parameterized']
Modifiability,"// Reconstruct the constructor we originally found, which might be; // different if this is a call to an inherited constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:105,inherit,inherited,105,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['inherit'],['inherited']
Modifiability,"// Record a CUDA/HIP device side variable if it is ODR-used; // by host code. This is done conservatively, when the variable is; // referenced in any of the following contexts:; // - a non-function context; // - a host function; // - a host device function; // This makes the ODR-use of the device side variable by host code to; // be visible in the device compilation for the compiler to be able to; // emit template variables instantiated by host code only and to; // externalize the static device side variable ODR-used by host code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,// Record if we see any constexpr constructors which are neither copy; // nor move constructors.; // C++1z [basic.types]p10:; // [...] has at least one constexpr constructor or constructor template; // (possibly inherited from a base class) that is not a copy or move; // constructor [...],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:212,inherit,inherited,212,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// Record small dead def live-ranges for all the subregisters; // of the destination register.; // Otherwise, variables that live through may miss some; // interferences, thus creating invalid allocation.; // E.g., i386 code:; // %1 = somedef ; %1 GR8; // %2 = remat ; %2 GR32; // CL = COPY %2.sub_8bit; // = somedef %1 ; %1 GR8; // =>; // %1 = somedef ; %1 GR8; // dead ECX = remat ; implicit-def CL; // = somedef %1 ; %1 GR8; // %1 will see the interferences with CL but not with CH since; // no live-ranges would have been created for ECX.; // Fix that!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:110,variab,variables,110,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['variab'],['variables']
Modifiability,// Record the NRVO flag for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,// Record the constant offset for the variable.; //; // A Fortran common block uses this idiom to encode the offset; // of a variable from the common block's starting address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['variab'],['variable']
Modifiability,// Record the current SCC for higher layers of the CGSCC pass manager now that; // all the updates have been applied.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp:37,layers,layers,37,interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,1,['layers'],['layers']
Modifiability,// Record the frame index of the first variable argument which is a value; // necessary to G_VASTART.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp,1,['variab'],['variable']
Modifiability,// Record the frame index of the first variable argument; // which is a value necessary to VASTART.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYISelLowering.cpp,5,['variab'],['variable']
Modifiability,"// Record the variable for any DBG_VALUE, to avoid re-ordering any of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['variab'],['variable']
Modifiability,// Record this variable definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// Recover the QualType of an APSInt.; // TODO: Refactor to put elsewhere,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:48,Refactor,Refactor,48,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['Refactor'],['Refactor']
Modifiability,"// Recursive function that attempts to find if a bool vector node was originally; // a vector/float/double that got truncated/extended/bitcast to/from a scalar; // integer. If so, replace the scalar ops with bool vector equivalents back down; // the chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:126,extend,extended,126,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Recursively walk the inheritance tree to find the overloads of the named method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:24,inherit,inheritance,24,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['inherit'],['inheritance']
Modifiability,// Reduction variable chain can only be stored somewhere but it; // can't be used as an address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variable']
Modifiability,// Reduction variables are only found in the loop header block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,// Reduction variables cannot be constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['variab'],['variables']
Modifiability,"// Reductions of instructions such as Div, and Sub is only possible if the; // LHS is the reduction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:100,variab,variable,100,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variable']
Modifiability,"// Reference and pointer non-type template parameters point to; // variables, functions, etc and their value is, at best (for; // variables) represented as an address - not a reference to the; // DWARF describing the variable/function/etc. This makes it hard,; // possibly impossible to rebuild the original name - looking up the; // address in the executable file's symbol table would be needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:67,variab,variables,67,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Reference the counter variable with a label difference (link-time; // constant).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:84,adapt,adaptive,84,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,2,['adapt'],['adaptive']
Modifiability,"// Refresh the fCumulSizes[i] to have '1' for the; // double variable dimensions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:61,variab,variable,61,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,['variab'],['variable']
Modifiability,// RegParmMax is inherited from the underlying architecture.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:17,inherit,inherited,17,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,1,['inherit'],['inherited']
Modifiability,// Register DAG post-processors.; //; // FIXME: extend the mutation API to allow earlier mutations to instantiate; // data and pass it to later mutations. Have a single mutation that gathers; // the interesting nodes in one pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['extend'],['extend']
Modifiability,"// Register GPU binary with the CUDA runtime, store returned handle in a; // global variable and save a reference in GpuBinaryHandle to be cleaned up; // in destructor on exit. Then associate all known kernels with the GPU binary; // handle so CUDA runtime can figure out what to call on the GPU side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variable']
Modifiability,// Register a rewrite of the argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['rewrite'],['rewrite']
Modifiability,// Register all variables and emit their initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:16,variab,variables,16,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,13,['variab'],['variables']
Modifiability,"// Register candidates for induction variables, with their associated bumps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variables']
Modifiability,// Register checkers from plugins.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:26,plugin,plugins,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['plugin'],['plugins']
Modifiability,// Register non-target variables being emitted in device code (debug info; // may cause this).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// Register plugin!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/SampleAnalyzer/MainCallChecker.cpp:12,plugin,plugin,12,interpreter/llvm-project/clang/lib/Analysis/plugins/SampleAnalyzer/MainCallChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/SampleAnalyzer/MainCallChecker.cpp,1,['plugin'],['plugin']
Modifiability,"// Register prototype and default config with factory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:34,config,config,34,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['config'],['config']
Modifiability,"// Register the PluginASTAction in the registry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/DemoPlugin.cpp:16,Plugin,PluginASTAction,16,interpreter/cling/tools/plugins/example/DemoPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/DemoPlugin.cpp,1,['Plugin'],['PluginASTAction']
Modifiability,"// Register this class with RooNumIntFactory; ////////////////////////////////////////////////////////////////////////////////; /// This function registers class RooMCIntegrator, its configuration options; /// and its capabilities with RooNumIntFactory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx:183,config,configuration,183,roofit/roofitcore/src/RooMCIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.cxx,1,['config'],['configuration']
Modifiability,"// Register units are used to model interference and register pressure.; // Every register is assigned one or more register units such that two; // registers overlap if and only if they have a register unit in common.; //; // Normally, one register unit is created per leaf register. Non-leaf; // registers inherit the units of their sub-registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:307,inherit,inherit,307,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,1,['inherit'],['inherit']
Modifiability,// Register variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,2,['variab'],['variable']
Modifiability,"// Regular LTO module doesn't participate in ThinLTO import,; // so no reference from it can be read/writeonly, since this; // would require importing variable as local copy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:151,variab,variable,151,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Reject matchables with operand modifiers, these aren't something we can; // handle, the target should be refactored to use operands instead of; // modifiers.; //; // Also, check for instructions which reference the operand multiple times,; // if they don't define a custom AsmMatcher: this implies a constraint that; // the built-in matching code would not honor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:108,refactor,refactored,108,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['refactor'],['refactored']
Modifiability,// Related tokens and user classes get sorted by depth in the inheritence; // tree (so that subclasses are before their parents).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:62,inherit,inheritence,62,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['inherit'],['inheritence']
Modifiability,"// Release an existing variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,variab,variable,23,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// Relese the layers memory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:14,layers,layers,14,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['layers'],['layers']
Modifiability,"// Reload, increment, and restore the alloca. This handles the case where; // the body of the loop mutates the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:111,variab,variable,111,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,13,['variab'],['variable']
Modifiability,// Remap lhs and rhs variables to the addresses of the function arguments.; // %lhs = bitcast void* %arg0 to <type>*; // %rhs = bitcast void* %arg1 to <type>*,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// Remap pseudo source variable to private copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Remap variables and DILocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:9,variab,variables,9,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['variab'],['variables']
Modifiability,// Remember if it is worth folding N when it produces extended register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:54,extend,extended,54,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,2,['extend'],['extended']
Modifiability,"// Remember that we are now parsing the arguments to a macro invocation.; // Preprocessor directives used inside macro arguments are not portable, and; // this enables the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp:137,portab,portable,137,interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,1,['portab'],['portable']
Modifiability,// Remember the old variable binding so that we can restore the binding when; // we unrecurse.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,13,['variab'],['variable']
Modifiability,// Remember the variable index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// Remember what the extended PDF is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:21,extend,extended,21,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['extend'],['extended']
Modifiability,"// Reminder of the meaning of fMultiplicity:; // -1: Only one or 0 element per entry but contains variable length; // -array! (Only used for TTreeFormulaManager); // 0: Only one element per entry, no variable length array; // 1: loop over the elements of a variable length array; // 2: loop over elements of fixed length array (nData is the same for all entry)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:98,variab,variable,98,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,3,['variab'],['variable']
Modifiability,"// Reminder, EXTRACT_VECTOR_ELT has the effect of any-extending to its VT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:54,extend,extending,54,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Remove a `FixableGadget` if the associated variable is not in the graph; // computed above. We do not want to generate fix-its for such variables,; // since they are neither warned nor reachable from a warned one.; //; // Note a variable is not warned if it is not directly used in any unsafe; // operation. A variable `v` is NOT reachable from an unsafe variable, if it; // does not exist another variable `u` such that `u` is warned and fixing `u`; // (transitively) implicates fixing `v`.; //; // For example,; // ```; // void f(int * p) {; // int * a = p; *p = 0;; // }; // ```; // `*p = 0` is a fixable gadget associated with a variable `p` that is neither; // warned nor reachable from a warned one. If we add `a[5] = 0` to the end of; // the function above, `p` becomes reachable from a warned variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,8,['variab'],"['variable', 'variables']"
Modifiability,"// Remove all committed objects from the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:41,sandbox,sandbox,41,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['sandbox'],['sandbox']
Modifiability,// Remove all exits which aren't both rewriteable and execute on every; // iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:38,rewrite,rewriteable,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['rewrite'],['rewriteable']
Modifiability,// Remove an outer '!' if it exists (only happens for a '!=' rewrite).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp:61,rewrite,rewrite,61,interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Remove any (Coefficient, Variable) entry where the Coefficient is 0 for new; // variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:28,Variab,Variable,28,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,2,"['Variab', 'variab']","['Variable', 'variables']"
Modifiability,// Remove any existing intrinsics on the new alloca describing; // the variable fragment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:71,variab,variable,71,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,// Remove any implied protocols from the list of inherited protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,inherit,inherited,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inherit'],['inherited']
Modifiability,// Remove dead instructions due to loop induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:50,variab,variables,50,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['variab'],['variables']
Modifiability,"// Remove spill-reload like copy chains. For example; // r0 = COPY r1; // r1 = COPY r2; // r2 = COPY r3; // r3 = COPY r4; // <def-use r4>; // r4 = COPY r3; // r3 = COPY r2; // r2 = COPY r1; // r1 = COPY r0; // will be folded into; // r0 = COPY r1; // r1 = COPY r4; // <def-use r4>; // r4 = COPY r1; // r1 = COPY r0; // TODO: Currently we don't track usage of r0 outside the chain, so we; // conservatively keep its value as it was before the rewrite.; //; // The algorithm is trying to keep; // property#1: No Def of spill COPY in the chain is used or defined until the; // paired reload COPY in the chain uses the Def.; //; // property#2: NO Source of COPY in the chain is used or defined until the next; // COPY in the chain defines the Source, except the innermost spill-reload; // pair.; //; // The algorithm is conducted by checking every COPY inside the MBB, assuming; // the COPY is a reload COPY, then try to find paired spill COPY by searching; // the COPY defines the Src of the reload COPY backward. If such pair is found,; // it either belongs to an existing chain or a new chain depends on; // last available COPY uses the Def of the reload COPY.; // Implementation notes, we use CopyTracker::findLastDefCopy(Reg, ...) to find; // out last COPY that defines Reg; we use CopyTracker::findLastUseCopy(Reg, ...); // to find out last COPY that uses Reg. When we are encountered with a Non-COPY; // instruction, we check registers in the operands of this instruction. If this; // Reg is defined by a COPY, we untrack this Reg via; // CopyTracker::clobberRegister(Reg, ...).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp:442,rewrite,rewrite,442,interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,1,['rewrite'],['rewrite']
Modifiability,// Remove temp variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Remove the projected variables from the list of leaf nodes, if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,variab,variables,24,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variables']
Modifiability,// Remove the variable that was just assigned from the set of active; // variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:14,variab,variable,14,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// Remove value number i from LR.; // For intervals with subranges, removing a segment from the main range; // may require extending the previous segment: for each definition of; // a subregister, there will be a corresponding def in the main range.; // That def may fall in the middle of a segment from another subrange.; // In such cases, removing this def from the main range must be; // complemented by extending the main range to account for the liveness; // of the other subrange.; // The new end point of the main range segment to be extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:123,extend,extending,123,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,3,['extend'],"['extended', 'extending']"
Modifiability,// Remove variable from local scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,// Remove variables from ActiveMLocs if they no longer use any other MLocs; // due to being killed by this clobber.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Remove variables in the system that went out of scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:10,variab,variables,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variables']
Modifiability,"// Removes a definition from the context, but keeps the variable name; // as a valid variable. The index 0 is a placeholder for cleared definitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,2,['variab'],['variable']
Modifiability,"// Removes fast qualifiers, but leaves any extended qualifiers in place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:43,extend,extended,43,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,// Rename all global variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MetaRenamer.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/MetaRenamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MetaRenamer.cpp,1,['variab'],['variables']
Modifiability,"// Rename the special variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:22,variab,variables,22,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['variab'],['variables']
Modifiability,"// Repeatedly calling lookupPrivateMethod() is expensive, especially; // when in many cases it returns null. We cache the results so; // that repeated queries on the same ObjCIntefaceDecl and Selector; // don't incur the same cost. On some test cases, we can see the; // same query being issued thousands of times.; //; // NOTE: This cache is essentially a ""global"" variable, but it; // only gets lazily created when we get here. The value of the; // cache probably comes from it being global across ExprEngines,; // where the same queries may get issued. If we are worried about; // concurrency, or possibly loading/unloading ASTs, etc., we may; // need to revisit this someday. In terms of memory, this table; // stays around until clang quits, which also may be bad if we; // need to release memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:366,variab,variable,366,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['variab'],['variable']
Modifiability,"// Replace (seteq (i64 (and X, 0xffffffff)), C1) with; // (seteq (i64 (sext_inreg (X, i32)), C1')) where C1' is C1 sign extended from; // bit 31. Same for setne. C1' may be cheaper to materialize and the sext_inreg; // can become a sext.w instead of a shift pair.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:120,extend,extended,120,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Replace 8-bit loads with the zero-extending version if not optimizing; // for size. The extending op is cheaper across a wide range of uarch and; // it avoids a potentially expensive partial register stall. It takes an; // extra byte to encode, however, so don't do this when optimizing for size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:37,extend,extending,37,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,2,['extend'],['extending']
Modifiability,// Replace OpenCL enqueued block function pointers with global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:63,variab,variables,63,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,1,['variab'],['variables']
Modifiability,"// Replace all servers in _pdfVars and _modelVars with those in theEvent, except for the convolution variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:101,variab,variable,101,roofit/roofitcore/src/RooConvGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx,2,['variab'],['variable']
Modifiability,// Replace all uses of module scope variable from non-kernel functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,// Replace all uses of the polynomial calculated from the two induction; // variables with the one new one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:76,variab,variables,76,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variables']
Modifiability,// Replace any external references to this variable with the new global.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,1,['variab'],['variable']
Modifiability,// Replace any uses of the two global variables with uses of the new; // global.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:38,variab,variables,38,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['variab'],['variables']
Modifiability,// Replace constant expressions directly or indirectly using the managed; // variable with instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:77,variab,variable,77,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variable']
Modifiability,// Replace occurrences of the old variable if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"// Replace phi operands in successor blocks that are using the constant case; // value rather than the switch condition variable:; // switchbb:; // switch i32 %x, label %default [; // i32 17, label %succ; // ...; // succ:; // %r = phi i32 ... [ 17, %switchbb ] ...; // -->; // %r = phi i32 ... [ %x, %switchbb ] ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:120,variab,variable,120,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['variab'],['variable']
Modifiability,// Replace the constant with the zero extend mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Replace the destructor's type, building off the existing one. Fortunately,; // the only thing of interest in the destructor type is its extended info.; // The return and arguments are fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:139,extend,extended,139,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['extend'],['extended']
Modifiability,// Replace the existing compare operand with the properly zero-extended one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:63,extend,extended,63,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Replace the extender ED with a form corresponding to the initializer ExtI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:15,extend,extender,15,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,// Replace the extender at index Idx with the register ExtR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:15,extend,extender,15,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,// Replace the original induction variable with an induction variable computed; // from the tile and floor induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Replace the original variable Var with the address loaded from variable; // ManagedVar populated by HIP runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,2,['variab'],['variable']
Modifiability,// Replace the s_mul_u64 instructions with S_MUL_I64_I32_PSEUDO if the higher; // 33 bits are sign extended and with S_MUL_U64_U32_PSEUDO if the higher 32; // bits are zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp:99,extend,extended,99,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPostLegalizerCombiner.cpp,2,['extend'],['extended']
Modifiability,// Replace the variable that was just assigned with the last active; // variable for efficient removal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],['variable']
Modifiability,"// Replace this subexpr in the parent.; // delete Exp; leak for now, see RewritePropertyOrImplicitSetter() usage for more info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:73,Rewrite,RewritePropertyOrImplicitSetter,73,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['RewritePropertyOrImplicitSetter']
Modifiability,// Replace uses of ith variable with a constantexpr to the corresponding; // field of the instance that will be allocated by AMDGPUMachineFunction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// Replace uses of module scope variable from kernel functions that; // allocate the module scope variable, otherwise leave them unchanged; // Record on each kernel whether the module scope global is used by it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,2,['variab'],['variable']
Modifiability,// Replace variable with constant value equivalence to remove a variable use:; // (X == C) && (Y Pred1 X) --> (X == C) && (Y Pred1 C); // (X != C) || (Y Pred1 X) --> (X != C) || (Y Pred1 C); // Can think of the 'or' substitution with the 'and' bool equivalent:; // A || B --> A || (!A && B),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['variab'],['variable']
Modifiability,// Replace vector any extend with the zero extend equivalents so we don't; // need 2 sets of patterns. Ignore vXi1 extensions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['extend'],['extend']
Modifiability,// Replaces all of the uses of a variable with uses of the constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['variab'],['variable']
Modifiability,"// Replacing user formula the old way (as opposed to 'HandleFunctionArguments'); // Note this is only for replacing functions that do; // not specify variables and/or parameters in brackets; // (the other case is done by `HandleFunctionArguments`)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:150,variab,variables,150,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// Replicate a reg or immediate with VREP instead of scalar multiply or; // immediate load. It seems best to do this during the first DAGCombine as; // it is straight-forward to handle the zero-extend node in the initial; // DAG, and also not worry about the keeping the new MemVT legal (e.g. when; // extracting an i16 element from a v16i8 vector).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:194,extend,extend,194,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Replicate sign bit from 32-bit extended part.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extended']
Modifiability,// Report an error that the config file could not be found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:28,config,config,28,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// Report an error the target doesn't support Mips32r2 or later.; // The epilogue relies on the use of the ""ehb"" to clear execution; // hazards. Pre R2 Mips relies on an implementation defined number; // of ""ssnop""s to clear the execution hazard. Support for ssnop hazard; // clearing is not provided so reject that configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp:316,config,configuration,316,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,1,['config'],['configuration']
Modifiability,"// Report any errors if occur during the configuration proceedings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx:41,config,configuration,41,tree/treeplayer/src/TSimpleAnalysis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx,1,['config'],['configuration']
Modifiability,// Report where the variable was declared when the use wasn't within; // the initializer of that declaration & we didn't already suggest; // an initialization fixit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variable']
Modifiability,"// Represents a merged replacement, i.e. a replacement consisting of multiple; // overlapping replacements from 'First' and 'Second' in mergeReplacements.; //; // Position projection:; // Offsets and lengths of the replacements can generally refer to two different; // coordinate spaces. Replacements from 'First' refer to the original text; // whereas replacements from 'Second' refer to the text after applying 'First'.; //; // MergedReplacement always operates in the coordinate space of the original; // text, i.e. transforms elements from 'Second' to take into account what was; // changed based on the elements from 'First'.; //; // We can correctly calculate this projection as we look at the replacements in; // order of strictly increasing offsets.; //; // Invariants:; // * We always merge elements from 'First' into elements from 'Second' and vice; // versa. Within each set, the replacements are non-overlapping.; // * We only extend to the right, i.e. merge elements with strictly increasing; // offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp:939,extend,extend,939,interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Core/Replacement.cpp,1,['extend'],['extend']
Modifiability,// Represents a single event that has been configured in the Linux perf; // subsystem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:43,config,configured,43,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,1,['config'],['configured']
Modifiability,// Represents a variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:16,variab,variable,16,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['variab'],['variable']
Modifiability,"// Represents the internal structure of a GEP, decomposed into a base pointer,; // constant offsets, and variable scaled indices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:105,variab,variable,105,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,// Reproduce the trunc(lshr) sequence:; // - Start from the truncated value.; // - Zero extend to the desired bit width.; // - Shift left.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:88,extend,extend,88,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// Request the set of PHIs we should insert for this variable. If there's; // only one value definition, things are very simple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:53,variab,variable,53,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Reroll the provided loop with respect to the provided induction variable.; // Generally, we're looking for a loop like this:; //; // %iv = phi [ (preheader, ...), (body, %iv.next) ]; // f(%iv); // %iv.1 = add %iv, 1 <-- a root increment; // f(%iv.1); // %iv.2 = add %iv, 2 <-- a root increment; // f(%iv.2); // %iv.scale_m_1 = add %iv, scale-1 <-- a root increment; // f(%iv.scale_m_1); // ...; // %iv.next = add %iv, scale; // %cmp = icmp(%iv, ...); // br %cmp, header, exit; //; // Notably, we do not require that f(%iv), f(%iv.1), etc. be isolated groups of; // instructions. In other words, the instructions in f(%iv), f(%iv.1), etc. can; // be intermixed with eachother. The restriction imposed by this algorithm is; // that the relative order of the isomorphic instructions in f(%iv), f(%iv.1),; // etc. be the same.; //; // First, we collect the use set of %iv, excluding the other increment roots.; // This gives us f(%iv). Then we iterate over the loop instructions (scale-1); // times, having collected the use set of f(%iv.(i+1)), during which we:; // - Ensure that the next unmatched instruction in f(%iv) is isomorphic to; // the next unmatched instruction in f(%iv.(i+1)).; // - Ensure that both matched instructions don't have any external users; // (with the exception of last-in-chain reduction instructions).; // - Track the (aliasing) write set, and other side effects, of all; // instructions that belong to future iterations that come before the matched; // instructions. If the matched instructions read from that write set, then; // f(%iv) or f(%iv.(i+1)) has some dependency on instructions in; // f(%iv.(j+1)) for some j > i, and we cannot reroll the loop. Similarly,; // if any of these future instructions had side effects (could not be; // speculatively executed), and so do the matched instructions, when we; // cannot reorder those side-effect-producing instructions, and rerolling; // fails.; //; // Finally, we make sure that all loop instructions are either loop in",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,// Reserve call frame if the size of the maximum call frame fits into 15-bit; // immediate field and there are no variable sized objects on the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16FrameLowering.cpp:114,variab,variable,114,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16FrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Reserve call frame if the size of the maximum call frame fits into 16-bit; // immediate field and there are no variable sized objects on the stack.; // Make sure the second register scavenger spill slot can be accessed with one; // instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp:114,variab,variable,114,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Reserve call frame if there are no variable sized objects on the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Reserve call frame memory in function prologue under the following; // conditions:; // - Y pointer is reserved to be the frame pointer.; // - The function does not contain variable sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp:175,variab,variable,175,interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Reserve registers for the NaCl sandbox.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:34,sandbox,sandbox,34,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['sandbox'],['sandbox']
Modifiability,// Reserve resources for a constant extender. Trigger an assertion if the; // reservation fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:36,extend,extender,36,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['extend'],['extender']
Modifiability,// Reserve the base register if we need to allocate; // variable-sized objects at runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYRegisterInfo.cpp:56,variab,variable-sized,56,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYRegisterInfo.cpp,1,['variab'],['variable-sized']
Modifiability,// Reserve the base register if we need to both realign the stack and; // allocate variable-sized objects at runtime. This should test the; // same conditions as MipsFrameLowering::hasBP().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:83,variab,variable-sized,83,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['variab'],['variable-sized']
Modifiability,// Reserve the extended general purpose registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,1,['extend'],['extended']
Modifiability,// Reset FirstStartOfName after finding a semicolon so that a for loop; // with multiple increment statements is not confused with a for loop; // having multiple variable declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:162,variab,variable,162,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variable']
Modifiability,// Reset SP based on frame pointer only if the stack frame extends beyond; // frame pointer stack slot or target is ELF and the function has FP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:59,extend,extends,59,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['extend'],['extends']
Modifiability,"// Reset SP based on frame pointer only if the stack frame extends beyond; // frame pointer stack slot, the target is ELF and the function has FP, or; // the target uses var sized objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp:59,extend,extends,59,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp,1,['extend'],['extends']
Modifiability,"// Reset global variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:16,variab,variable,16,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['variab'],['variable']
Modifiability,// Reset inheritance of style,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:9,inherit,inheritance,9,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['inherit'],['inheritance']
Modifiability,"// Reset member variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:16,variab,variables,16,core/base/src/TUri.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx,1,['variab'],['variables']
Modifiability,// Reset possible inheritance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:18,inherit,inheritance,18,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['inherit'],['inheritance']
Modifiability,// Reset the bit in the mask so that the static variable may be; // reinitialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,// Reset the inner alloca insertion as it will be used for loading the values; // wrapped into pointers before passing them into the to-be-outlined region.; // Configure it to insert immediately after the fake use of zero address so; // that they are available in the generated body and so that the; // OpenMP-related values (thread ID and zero address pointers) remain leading; // in the argument list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:160,Config,Configure,160,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['Config'],['Configure']
Modifiability,"// Reset the terminal configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp:22,config,configuration,22,core/textinput/src/textinput/TerminalConfigUnix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp,1,['config'],['configuration']
Modifiability,"// Reshuffle to get only unique values.; // If some of the scalars are duplicated in the vectorization; // tree entry, we do not vectorize them but instead generate a; // mask for the reuses. But if there are several users of the; // same entry, they may have different vectorization factors.; // This is especially important for PHI nodes. In this case, we; // need to adapt the resulting instruction for the user; // vectorization factor and have to reshuffle it again to take; // only unique elements of the vector. Without this code the; // function incorrectly returns reduced vector instruction with; // the same elements, not with the unique ones.; // block:; // %phi = phi <2 x > { .., %entry} {%shuffle, %block}; // %2 = shuffle <2 x > %phi, poison, <4 x > <1, 1, 0, 0>; // ... (use %2); // %shuffle = shuffle <2 x> %2, poison, <2 x> {2, 0}; // br %block",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:370,adapt,adapt,370,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['adapt'],['adapt']
Modifiability,"// Residual from training sample versus independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:52,variab,variables,52,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Residual from training sample versus. dependent variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:51,variab,variable,51,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,// Resolve constant variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMachObjectWriter.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMachObjectWriter.cpp,2,['variab'],['variables']
Modifiability,"// Resolve mutual references among the mapped variables, but prevent; // infinite recursion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:46,variab,variables,46,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['variab'],['variables']
Modifiability,"// Resolve our internal configuration for the target. If at some point the; // CPUArch alone becomes too unprecise, we can find more details in the; // Tag_CPU_arch_profile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch32.cpp:24,config,configuration,24,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch32.cpp,1,['config'],['configuration']
Modifiability,// Resolve the variable associated type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSymbol.cpp,1,['variab'],['variable']
Modifiability,"// Resolving a wording defect, we also inherit default arguments from the; // constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:39,inherit,inherit,39,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inherit'],['inherit']
Modifiability,"// Resolving a wording defect, we also inherit the variadicness of the; // constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:39,inherit,inherit,39,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inherit'],['inherit']
Modifiability,"// Respect the original bufsize and splitlevel arguments; // In particular, by keeping splitlevel equal to 0 if this was the case for `inputBranch`, we avoid; // writing garbage when unsplit objects cannot be written as split objects (e.g. in case of a polymorphic; // TObject branch, see https://bit.ly/2EjLMId ).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:253,polymorphi,polymorphic,253,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,1,['polymorphi'],['polymorphic']
Modifiability,// Restore savedTInfo into (extended) decl info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:28,extend,extended,28,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,3,['extend'],['extended']
Modifiability,// Restore the original width by sign extending.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:38,extend,extending,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,3,['extend'],['extending']
Modifiability,"// Restore the stack pointer using the value of the frame pointer. Only; // necessary if the stack pointer was modified, meaning the stack size is; // unknown.; //; // In order to make sure the stack point is right through the EH region,; // we also need to restore stack pointer from the frame pointer if we; // don't preserve stack space within prologue/epilogue for outgoing variables,; // normally it's just checking the variable sized object is present or not; // is enough, but we also don't preserve that at prologue/epilogue when; // have vector objects in stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:378,variab,variables,378,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Restore the unshadowed variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,15,['variab'],['variable']
Modifiability,// Restrict the mask to the extended operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// Restrict valid pre-extend data type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Restrictions:; // - The loop must consist of a single block.; // - The iteration count must be known at compile-time.; // - The loop must have an induction variable starting from 0, and; // incremented in each iteration of the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:159,variab,variable,159,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['variab'],['variable']
Modifiability,// Result is already sign extended just remove the sext.w.; // NOTE: We only handle the nodes that are selected with hasAllWUsers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// Result subclass that retrieves one of the arguments to the clang builtin; // function. In cases where the argument has pointer type, we call; // EmitPointerWithAlignment and store the result in a variable of type Address,; // so that load and store IR nodes can know the right alignment. Otherwise, we; // call EmitScalarExpr.; //; // There are aggregate parameters in the MVE intrinsics API, but we don't deal; // with them in this Tablegen back end: they only arise in the vld2q/vld4q and; // vst2q/vst4q family, which is few enough that we just write the code by hand; // for those in CGBuiltin.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:199,variab,variable,199,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,// Result type of the binary operator.; // The following two variables are used for compound assignment operators,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:61,variab,variables,61,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,// Retain and copy setters retain/copy their values before storing and so; // the value in their instance variables must be released in -dealloc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:106,variab,variables,106,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variables']
Modifiability,// Retain the name of the old global variable. People who are debugging their; // programs may expect these variables to be named the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Retargets llvm.dbg.value to any renamed variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['variab'],['variables']
Modifiability,"// Retrieve bin configuration from integrand",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:16,config,configuration,16,roofit/roofitcore/src/RooBinIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx,1,['config'],['configuration']
Modifiability,"// Retrieve current value of convolution variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx:41,variab,variable,41,roofit/roofitcore/src/RooNumConvolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx,1,['variab'],['variable']
Modifiability,"// Retrieve proto integrator and return clone configured for the requested integration task",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx:46,config,configured,46,roofit/roofitcore/src/RooNumGenFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenFactory.cxx,2,['config'],['configured']
Modifiability,// Retrieve the capture type for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// Retrieve the shared variables from the list of references returned; // by the runtime. Pass the variables to the outlined function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],['variables']
Modifiability,"// Return C++ ostream associated with given message configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:52,config,configuration,52,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,2,['config'],['configuration']
Modifiability,// Return a VT for a vector type with the same element type but; // double the number of elements. The type returned may be an; // extended type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:131,extend,extended,131,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,// Return a VT for a vector type with the same element type but; // half the number of elements. The type returned may be an; // extended type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:129,extend,extended,129,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,"// Return a better dynamic type if one can be derived from the cast.; // Compare the current dynamic type of the region and the new type to which we; // are casting. If the new type is lower in the inheritance hierarchy, pick it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:198,inherit,inheritance,198,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['inherit'],['inheritance']
Modifiability,// Return a properly extended integer (DstWidth bits wide) if the operation is; // an itofp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['extend'],['extended']
Modifiability,// Return a reference to the extendable operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:29,extend,extendable,29,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extendable']
Modifiability,"// Return a substring of current line in a static variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h:50,variab,variable,50,test/periodic/NdbEndfIO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h,1,['variab'],['variable']
Modifiability,// Return a suitable opcode for extending the operands of Opc when widening.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:32,extend,extending,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extending']
Modifiability,"// Return a v2f64 that contains the extended form of elements Start and Start+1; // of v4f32 value Op. If Chain is nonnull, return the strict form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:36,extend,extended,36,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Return an invalid address if variable is MT_To (or MT_Enter starting with; // OpenMP 5.2) and unified memory is not enabled. For all other cases: MT_Link; // and MT_To (or MT_Enter) with unified memory, return a valid address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"// Return extended mode capabilities",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:10,extend,extended,10,roofit/roofitcore/inc/RooAddPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h,1,['extend'],['extended']
Modifiability,// Return if data variable was already created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// Return immediately, if every global variable has a specific address space; // specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['variab'],['variable']
Modifiability,"// Return regular generator config ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:28,config,config,28,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['config'],['config']
Modifiability,"// Return special generator config that can also do binned generation for selected states",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:28,config,config,28,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['config'],['config']
Modifiability,// Return the address of the private variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Return the allowable deviation from the current value of Rb (i.e. the; // range of values that can be added to the current value) which the; // instruction MI can accommodate.; // The instruction MI is a user of register Rb, which is defined via an; // extender. It may be possible for MI to be tweaked to work for a register; // defined with a slightly different value. For example; // ... = L2_loadrub_io Rb, 1; // can be modifed to be; // ... = L2_loadrub_io Rb', 0; // if Rb' = Rb+1.; // The range for Rb would be [Min+1, Max+1], where [Min, Max] is a range; // for L2_loadrub with offset 0. That means that Rb could be replaced with; // Rc, where Rc-Rb belongs to [Min+1, Max+1].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:256,extend,extender,256,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,"// Return the allowable deviation from the current value of the extender ED,; // for which the instruction corresponding to ED can be modified without; // using an extender.; // The instruction uses the extender directly. It will be replaced with; // another instruction, say MJ, where the extender will be replaced with a; // register. MJ can allow some variability with respect to the value of; // that register, as is the case with indexed memory instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:64,extend,extender,64,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,5,"['extend', 'variab']","['extender', 'variability']"
Modifiability,"// Return the cache for expensive data objects (and make extended as necessary)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:57,extend,extended,57,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['extend'],['extended']
Modifiability,"// Return the cost of converting a vector bitmask produced by a compare; // (SrcTy), to the type of the select or extend instruction (DstTy).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:114,extend,extend,114,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// Return the extender for instruction at Index or nullptr if none,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:14,extend,extender,14,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extender']
Modifiability,// Return the implicit alignment of the extendable operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:40,extend,extendable,40,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extendable']
Modifiability,// Return the index of the extendable operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:27,extend,extendable,27,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extendable']
Modifiability,// Return the max value that a constant extendable operand can have; // without being extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:40,extend,extendable,40,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,2,['extend'],"['extendable', 'extended']"
Modifiability,// Return the min value that a constant extendable operand can have; // without being extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:40,extend,extendable,40,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,2,['extend'],"['extendable', 'extended']"
Modifiability,// Return the number of bits SPIR-V pointers and size_t variables require.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.h:56,variab,variables,56,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.h,1,['variab'],['variables']
Modifiability,"// Return the number of bytes required to encode the instruction.; // Hexagon instructions are fixed length, 4 bytes, unless they; // use a constant extender, which requires another 4 bytes.; // For debug instructions and prolog labels, return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:149,extend,extender,149,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extender']
Modifiability,// Return the number of logical bits of the extendable operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:44,extend,extendable,44,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extendable']
Modifiability,// Return the value of variable fVarIndex for this event; /**; * @return value of variable fVarIndex for this event; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:23,variab,variable,23,tmva/tmva/inc/TMVA/BDTEventWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h,2,['variab'],['variable']
Modifiability,// Return true if E is a variable that points to an incomplete Phi node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,// Return true if a given MI can accommodate given offset.; // Use abs estimate as oppose to the exact number.; // TODO: This will need to be changed to use MC level; // definition of instruction extendable field size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:196,extend,extendable,196,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,"// Return true if string literal S is matched in content.; // When true, P marks begin-position of the match, and calling Advance sets C; // to end-position of the match.; // If S is the empty string, then search for any letter instead (makes sense; // with FinishDirectiveToken=true).; // If EnsureStartOfWord, then skip matches that don't start a new word.; // If FinishDirectiveToken, then assume the match is the start of a comment; // directive for -verify, and extend the match to include the entire first; // token of that directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:467,extend,extend,467,interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp,1,['extend'],['extend']
Modifiability,// Return true if the ABI requires Ty to be passed sign- or zero-; // extended to 64 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:70,extend,extended,70,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['extend'],['extended']
Modifiability,// Return true if the insn may be extended based on the operand value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extended']
Modifiability,// Return true if the register is sign-extended from 32 to 64 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,1,['extend'],['extended']
Modifiability,// Return true if the register is zero-extended from 32 to 64 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,1,['extend'],['extended']
Modifiability,// Return true if the required (according to Opcode) variable-shift form is; // natively supported by the Subtarget,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:53,variab,variable-shift,53,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable-shift']
Modifiability,"// Return true if the specified function should have a dedicated frame; // pointer register. This is true if frame pointer elimination is; // disabled, if it needs dynamic stack realignment, if the function has; // variable sized allocas, or if the frame address is taken.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp:215,variab,variable,215,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp,2,['variab'],['variable']
Modifiability,"// Return true if there a constructor taking no arguments (including; // a constructor that has defaults for all of its arguments) which; // is callable. Either it has a body, or it is trivial and the; // compiler elides it.; //; // Note: This is could enhanced to also know about the ROOT ioctor; // but this was not the case in CINT.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingClassInfo.cxx:253,enhance,enhanced,253,core/metacling/src/TClingClassInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingClassInfo.cxx,1,['enhance'],['enhanced']
Modifiability,"// Return true if we want to issue a diagnostic by default if we; // encounter this name in a #include with the wrong case. For now,; // this includes the standard C and C++ headers, Posix headers,; // and Boost headers. Improper case for these #includes is a; // potential portability issue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:274,portab,portability,274,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['portab'],['portability']
Modifiability,"// Return true only if Configure() and Run() functions were performed correctly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx:23,Config,Configure,23,tree/treeplayer/src/TSimpleAnalysis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSimpleAnalysis.cxx,1,['Config'],['Configure']
Modifiability,"// Return value of embedded function using value of referenced variable x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooCFunction1Binding.h:63,variab,variable,63,roofit/roofit/inc/RooCFunction1Binding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooCFunction1Binding.h,12,['variab'],['variable']
Modifiability,"// Return variable; // Damping factors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:10,variab,variable,10,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['variab'],['variable']
Modifiability,// Return whether the instruction must be always extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extended']
Modifiability,// Return whether the instruction needs to be constant extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:55,extend,extended,55,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extended']
Modifiability,// Returned type-dependence will never have VariablyModified set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:44,Variab,VariablyModified,44,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['Variab'],['VariablyModified']
Modifiability,"// Returning i64 unconditionally here (i.e. even for ILP32) means that the; // *DAG* representation of pointers will always be 64-bits. They will be; // truncated and extended when transferred to memory, but the 64-bit DAG; // allows us to use AArch64's addressing modes much more easily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:167,extend,extended,167,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,1,['extend'],['extended']
Modifiability,// Returns Operand Index for the constant extended instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Returns all possible configurations leading Def registers of DefInstruction; // to alias with Use registers of UseInstruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:24,config,configurations,24,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,1,['config'],['configurations']
Modifiability,// Returns an SVE type that ContentTy can be trivially sign or zero extended; // into.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:68,extend,extended,68,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Returns an array of all the machine values used to calculate this variable; // value, or an empty list for an Undef or unjoined VPHI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:69,variab,variable,69,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,"// Returns one of the source operands if the shuffle can be reduced to a; // MOVQ, copying the lower 64-bits and zero-extending to the upper 64-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:118,extend,extending,118,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Returns one of the stack, base, or frame pointer registers, depending on; // which is used to reference local variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:113,variab,variables,113,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variables']
Modifiability,// Returns opcode of the non-extended equivalent instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:29,extend,extended,29,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Returns operand 4 or an ADDW/SUBW/etc. of operands 5 and 6. We only; // need to check if operand 4 is sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:110,extend,extended,110,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,// Returns shadow bytes with marked red zones and after scope. This shadow; // represents the state if the stack frame when all local variables are outside; // of the own scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:134,variab,variables,134,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,1,['variab'],['variables']
Modifiability,// Returns shadow bytes with marked red zones. This shadow represents the state; // if the stack frame when all local variables are inside of the own scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:118,variab,variables,118,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,1,['variab'],['variables']
Modifiability,"// Returns the Operand linked to this Variable.; // In case the Variable is tied, the primary (i.e. Def) Operand is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:38,Variab,Variable,38,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,2,['Variab'],['Variable']
Modifiability,"// Returns the bandwidth for the adaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,adapt,adaptive,33,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// Returns the bandwidth for the non adaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:37,adapt,adaptive,37,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,2,['adapt'],['adaptive']
Modifiability,"// Returns the bandwidths for the adaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:34,adapt,adaptive,34,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,// Returns the begin location of the identifier of the given variable; // declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// Returns the index of the Operand linked to this Variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:51,Variab,Variable,51,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,1,['Variab'],['Variable']
Modifiability,// Returns the index of this Variable inside Instruction's Variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:29,Variab,Variable,29,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,2,['Variab'],['Variable']
Modifiability,// Returns the literal text of the identifier of the given variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// Returns the max value that doesn't need to be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Returns the min value that doesn't need to be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// Returns the number of pointer and integer slots used to represent a member; // pointer in the MS C++ ABI.; //; // Member function pointers have the following general form; however, fields; // are dropped as permitted (under the MSVC interpretation) by the inheritance; // model of the actual class.; //; // struct {; // // A pointer to the member function to call. If the member function is; // // virtual, this will be a thunk that forwards to the appropriate vftable; // // slot.; // void *FunctionPointerOrVirtualThunk;; //; // // An offset to add to the address of the vbtable pointer after; // // (possibly) selecting the virtual base but before resolving and calling; // // the function.; // // Only needed if the class has any virtual bases or bases at a non-zero; // // offset.; // int NonVirtualBaseAdjustment;; //; // // The offset of the vb-table pointer within the object. Only needed for; // // incomplete types.; // int VBPtrOffset;; //; // // An offset within the vb-table that selects the virtual base containing; // // the member. Loading from this offset produces a new offset that is; // // added to the address of the vb-table pointer to produce the base.; // int VirtualBaseAdjustmentOffset;; // };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:259,inherit,inheritance,259,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// Returns true if BB is in the dominance frontier of; // entry, because it was inherited from exit. In the other case there is an; // edge going from entry to BB without passing exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:80,inherit,inherited,80,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['inherit'],['inherited']
Modifiability,// Returns true if Extend can be folded into the index of a masked gathers/scatters; // on this target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:19,Extend,Extend,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Extend'],['Extend']
Modifiability,"// Returns true if a particular level is scalar; that is,; // if no subscript in the source or destination mention the induction; // variable associated with the loop at this level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:133,variab,variable,133,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Returns true if a particular level is scalar; that is,; // if no subscript in the source or destination mention the induction; // variable associated with the loop at this level.; // Leave this out of line, so it will serve as a virtual method anchor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:133,variab,variable,133,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,// Returns true if a particular operand is extendable for an instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:43,extend,extendable,43,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,// Returns true if an instruction can be converted into a non-extended; // equivalent instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:62,extend,extended,62,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Returns true if the operand Op is an immediate value; // and writes the immediate value into variable Imm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp:96,variab,variable,96,interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,1,['variab'],['variable']
Modifiability,"// Returns true if the section name is such that the symbol will be put; // in a small data section.; // For instance, global variables with section attributes such as "".sdata""; // "".sdata.*"", "".sbss"", and "".sbss.*"" will go into small data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:126,variab,variables,126,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,1,['variab'],['variables']
Modifiability,// Returns true if the variable Value has the number of least-significant zero; // bits equal to Shift and if the shifted value is between the bounds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,1,['variab'],['variable']
Modifiability,// Returns true if the variable declaration is a redeclaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"// Returns true if unroll count was set explicitly.; // Calculates unroll count and writes it to UP.Count.; // Unless IgnoreUser is true, will also use metadata and command-line options; // that are specific to to the LoopUnroll pass (which, for instance, are; // irrelevant for the LoopUnrollAndJam pass).; // FIXME: This function is used by LoopUnroll and LoopUnrollAndJam, but consumes; // many LoopUnroll-specific options. The shared functionality should be; // refactored into it own function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:466,refactor,refactored,466,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['refactor'],['refactored']
Modifiability,// Returns true if we can assume the writer of the mask has zero extended it; // for us.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:65,extend,extended,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// Returns whether this Variable has more than one Operand linked to it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:24,Variab,Variable,24,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,1,['Variab'],['Variable']
Modifiability,// Returns whether this instruction is an immediate extender,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:52,extend,extender,52,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extender']
Modifiability,// Reuse the iteration variable created by checkOpenMPLoop. It is also; // used by the expressions to derive the original iteration variable's; // value from the logical iteration number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,// Reusing variable increments likely saves a register to hold the multiple of; // the stride.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:11,variab,variable,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variable']
Modifiability,"// Reverse offloading is not supported, so just execute on the host.; // FIXME: This fallback solution is incorrect since it ignores the; // OMP_TARGET_OFFLOAD environment variable. Instead it would be better to; // assert here and ensure SEMA emits an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:172,variab,variable,172,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,// Reverse pointer upcast. C++ 4.10p3 specifies pointer upcast.; // C++ 5.2.9p8 additionally disallows a cast path through virtual inheritance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:131,inherit,inheritance,131,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['inherit'],['inheritance']
Modifiability,// Rewrite AddRecs in TheLoop to step by VF and check if the expression for; // lane 0 matches the expressions for all other lanes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite INSERT_SUBREG as COPY now that we no longer need SSA form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite MBB operands to be depth immediates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite MBB's Live-ins.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite MachineMemOperands that reference old frame indices.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite NewFragment to be relative to the existing one (this is; // what createFragmentExpression wants). CalculateFragment has; // already resolved the size for us. FIXME: Should it return the; // relative fragment too?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite Objective-c meta data*,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite Other values before changing the VNInfo ids.; // This can leave Other in an invalid state because we're not coalescing; // touching segments that now have identical values. That's OK since Other is; // not supposed to be valid after calling join();,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite PHI operands TPred -> (DstReg, Head), remove FPred.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite RNTuple with valid pz page and corrupted px, py page",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.cxx:3,Rewrite,Rewrite,3,tree/ntuple/v7/test/ntuple_test.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.cxx,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite _emit as .byte.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite a GEP into a DIExpression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite actual uses with the inserted definitions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite align as .align.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all MO_FrameIndex operands. Look for dead stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all MachineMemOperands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all SrcReg operands to DstReg.; // Also update DstReg operands to include DstIdx if it is set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite all instructions based on the collected cell information.; //; // Traverse the instructions in a post-order, so that rewriting an; // instruction can make changes ""downstream"" in terms of control-flow; // without affecting the rewriting process. (We should not change; // instructions that have not yet been visited by the rewriter.); // The reason for this is that the rewriter can introduce new vregs,; // and replace uses of old vregs (which had corresponding cells; // computed during propagation) with these new vregs (which at this; // point would not have any cells, and would appear to be ""top"").; // If an attempt was made to evaluate an instruction with a fresh; // ""top"" vreg, it would cause an error (abend) in the evaluator.; // Collect the post-order-traversal block ordering. The subsequent; // traversal/rewrite will update block successors, so it's safer; // if the visiting order it computed ahead of time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,4,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite', 'rewriter']"
Modifiability,// Rewrite all loads of the PN to use the new PHI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all predecessors of the old block to go to the fallthrough; // instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all preds to unwind to caller (or from invoke to call).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all the loads in the loop and remember all the definitions from; // stores in the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all the uses to fix up the types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all users of the inputs in the extracted region to use the; // arguments (or appropriate addressing into struct) instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite all uses outside the loop in terms of the new PHIs we just; // inserted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite an ADD constant node into a DIExpression. Since we are; // performing arithmetic to compute the variable's *value* in the; // DIExpression, we need to mark the expression with a; // DW_OP_stack_value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,"// Rewrite an AddRec in terms of the canonical induction variable, if; // its type is more narrow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,// Rewrite arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite branches to basic blocks outside of the loop to new dummy blocks; // within the new function. This must be done before we lose track of which; // blocks were originally in the code region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite candidates in the reverse depth-first order. This order makes sure; // a candidate being rewritten is not a basis for any other candidate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite conversion between integer and floating-point in such a way that; // the integer type is extended/narrowed to match the bitwidth of the; // floating-point type, combined with additional integer-integer extensions; // or narrowings to match the original input/result types.; // E.g. f32 -> i8 ==> f32 -> i32 -> i8; //; // The input/result types are not required to be legal, but if they are; // legal, this function should not introduce illegal types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,2,"['Rewrite', 'extend']","['Rewrite', 'extended']"
Modifiability,"// Rewrite debug uses last so that they can take advantage of any; // register mappings introduced by other users in its BB, since we; // cannot create new register definitions specifically for the debug; // instruction (as debug instructions should not affect CodeGen).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each BaseInst using SCEV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each call to a load from OffsetByte/OffsetBit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite each chain to use an independent load.; // By construction, each chain can be represented by a unique load.; // Prepare the argument for the new token factor for all the slices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each extraction as an independent load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each partition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each rewritable source by generating new COPYs. This works; // differently from optimizeCoalescableCopy since it first makes sure that all; // definitions can be rewritten.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite each rewritable source.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite even as .even.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite expressions in $N notation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite final suspend handling as it is not done via switch (allows to; // remove final case from the switch, since it is undefined behavior to; // resume the coroutine suspended at the final suspend point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite for pairwise fadd pattern; // (f32 (extract_vector_elt; // (fadd (vXf32 Other); // (vector_shuffle (vXf32 Other) undef <1,X,...> )) 0)); // ->; // (f32 (fadd (extract_vector_elt (vXf32 Other) 0); // (extract_vector_elt (vXf32 Other) 1)); // For strict_fadd we need to make sure the old strict_fadd can be deleted, so; // we can only do this when it's used only by the extract_vector_elt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite gather/scatter to form strided load/store if possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite implemented methods,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite in terms of $N.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite in terms of ${N:P}.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite instruction operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite into vselect(cond, rhs, lhs).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite local labels.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite materializable instructions to be materialized at the use; // point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite p_offset and p_filesz of non-PT_PHDR segments after sh_offset values; // have been updated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite phis in the exit block to get their inputs from the Preheader; // instead of the exiting block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite preprocessor options, to replace -Wp,-MD,FOO which is used by; // some build systems. We don't try to be complete here because we don't; // care to encourage this usage model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite register operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite reserved library names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite sh_offset after some sections are changed to SHT_NOBITS and thus; // occupy no space in the file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite source files as HTML for every new file the path crosses,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite source.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the ""copy"" in a way the register coalescer understands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the BlockMask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the CMov to use the !ZF flag from the test, and then kill its use; // of the flags afterward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the CMov to use the !ZF flag from the test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the DebugLocs to be equivalent to what; // -gline-tables-only would have created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the IR for the unswitched basic blocks. This requires two steps.; // First, we split any exit blocks with remaining in-loop predecessors. Then; // we update the PHIs in one of two ways depending on if there was a split.; // We walk in reverse so that we split in the same order as the cases; // appeared. This is purely for convenience of reading the resulting IR, but; // it doesn't cost anything really.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the PHI's incoming values to ARC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the accumulator recursion instruction so that it does not use; // the result of the call anymore, instead, use the PHI node we just; // inserted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the addressing register layout before doing anything else.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the base, but without actually doing replaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the block body in place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the byref variable into BYREFVAR->__forwarding->BYREFVAR; // for each DeclRefExp where BYREFVAR is name of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,6,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,// Rewrite the casted expression from scratch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the code to refer to itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the contents of the module in a separate compiler instance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/FrontendActions.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the executable instructions. Skip branches if we don't; // have block successor information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the extension/truncation/saturation op into steps where each; // step changes the type widths by a factor of 2.; // E.g. i8 -> i16 remains unchanged, but i8 -> i32 ==> i8 -> i16 -> i32.; //; // Some of the vector types in Op may not be legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the fN constraint according to the value type if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the file specified by FID with HTML formatting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the function decl for this builtin by replacing parameters; // with no explicit address space with the address space of the arguments; // in ArgExprs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the functions as requested during manifest.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the instructions in the cloned blocks to refer to the instructions; // in the cloned blocks. We have to do this as a second pass so that we have; // everything available. Also, we have inserted new instructions which may; // include assume intrinsics, so we update the assumption cache while; // processing this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the iteration space of the loop denoted by (LS, Preheader). The; // iteration space of the rewritten loop ends at ExitLoopAt. The start of the; // iteration space is not changed. `ExitLoopAt' is assumed to be slt; // `OriginalHeaderCount'.; //; // If there are iterations left to execute, control is made to jump to; // `ContinuationBlock', otherwise they take the normal loop exit. The; // returned `RewrittenRangeInfo' object is populated as follows:; //; // .PseudoExit is a basic block that unconditionally branches to; // `ContinuationBlock'.; //; // .ExitSelector is a basic block that decides, on exit from the loop,; // whether to branch to the ""true"" exit or to `PseudoExit'.; //; // .PHIValuesAtPseudoExit are PHINodes in `PseudoExit' that compute the value; // for each PHINode in the loop header on taking the pseudo exit.; //; // After changeIterationSpaceEnd, `Preheader' is no longer a legitimate; // preheader because it is made to branch to the loop header only; // conditionally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the jump to use the !ZF flag from the test, and kill its use of; // flags afterward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the load to the chosen extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,"['Rewrite', 'extend']","['Rewrite', 'extending']"
Modifiability,// Rewrite the locations and record the stack slot offsets for spills.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the method result type if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the new base according to BasePtrSCEV.; // bb.loop.preheader:; // %newstart = ...; // bb.loop.body:; // %phinode = phi [ %newstart, %bb.loop.preheader ], [ %add, %bb.loop.body ]; // ...; // %add = getelementptr %phinode, %inc; //; // First returned instruciton is %phinode (or a type cast to %phinode), caller; // needs this value to rewrite other load/stores in the same chain.; // Second returned instruction is %add, caller needs this value to rewrite other; // load/stores in the same chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,3,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite']"
Modifiability,"// Rewrite the offset as ""base + [-8, 7)"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonRegisterInfo.cpp,1,['Rewrite'],['Rewrite']
