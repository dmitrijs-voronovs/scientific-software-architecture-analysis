quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"## Description; The purpose of this PR is to turn off FDDS dispersion when SAPT_DFT_FUNCTIONAL = HF in SAPT(DFT). . SAPT0 uses a HF description of monomers, whereas SAPT(DFT) replaces this description with KS-DFT. When SAPT(DFT)’s functional is set to HF, the results should be equivalent to those of SAPT0. Currently, SAPT(DFT) / SAPT_DFT_FUNCTIONAL HF computes coupled dispersion with FDDS. This step is costly and unnecessary. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The dispersion energy for SAPT(DFT) with HF will now match SAPT0 and no longer calculate or print Disp2,r or Est. Exch-Disp2,r; - [x] No change necessary in input files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Places SAPT(DFT)'s FDDS dispersion into an if statement so that FDDS disp is only computed when the functional is not HF; - [x] Carries information regarding the functional into the printing code so that the correct dispersion terms are printed out. ## Questions; - [ ] Question1. ## Checklist; - [x] sapt-dft1, sapt-dft2, and sapt-compare all pass; no need for the creation of additional tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3080:565,release,release,565,https://psicode.org,https://github.com/psi4/psi4/pull/3080,1,['release'],['release']
Deployability,"## Description; The stuff needed to get nightly builds working again, this time driven by Py36. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Something about my new nightly build script makes it hypersensitive to unicode. So conducted a purge of docs, source (except for comments and @jgonthier), and basis sets.; - [x] Make sure to return a `str` version from our fake setup.py, no matter if called by py2 or 3.; * **User-Facing for Release Notes**; - [x] After two reports of Intel 2016.0.1 not building, officially disallowing it. ## Questions; - [x] @amjames and/or @jgonthier, could you copy the relevant two lines into your `cmake/custom_cxxstandard.cmake` and see if that properly scuppers your 2016.0.1 build attempts?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/663:503,Release,Release,503,https://psicode.org,https://github.com/psi4/psi4/pull/663,1,['Release'],['Release']
Deployability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:549,update,updated,549,https://psicode.org,https://github.com/psi4/psi4/pull/1383,2,"['A/B', 'update']","['A/B', 'updated']"
Deployability,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:250,Release,Release,250,https://psicode.org,https://github.com/psi4/psi4/pull/1001,1,['Release'],['Release']
Deployability,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668:707,Release,Release,707,https://psicode.org,https://github.com/psi4/psi4/pull/668,1,['Release'],['Release']
Deployability,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2532:908,Update,UpdateHelpers,908,https://psicode.org,https://github.com/psi4/psi4/pull/2532,1,['Update'],['UpdateHelpers']
Deployability,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1275:862,install,install,862,https://psicode.org,https://github.com/psi4/psi4/pull/1275,1,['install'],['install']
Deployability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:244,integrat,integrates,244,https://psicode.org,https://github.com/psi4/psi4/pull/2443,1,['integrat'],['integrates']
Deployability,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644:673,Release,Release,673,https://psicode.org,https://github.com/psi4/psi4/pull/644,1,['Release'],['Release']
Deployability,"## Description; This PR adds implementation of `force_soccpi` and `force_doccpi`, allowing the user to change the singly and doubly occupied orbitals per irrep in the Wavefunction object. The alpha and beta electron counts are also updated accordingly. This functionality should only be used by expert users in special circumstances, since it causes inconsistency in the Wavefunction object for SCF purposes. (Let me know if I should add some sort of ""expert"" flag in the documentation to reflect this, or if I need to add any other documentation besides what I've put in already!). ## Todos; - [x] Add implementation of `force_soccpi` and `force_doccpi` C++-side; - [x] Add Python-side accessibility to `force_soccpi` and `force_doccpi`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/876:232,update,updated,232,https://psicode.org,https://github.com/psi4/psi4/pull/876,1,['update'],['updated']
Deployability,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:351,install,install,351,https://psicode.org,https://github.com/psi4/psi4/pull/850,2,['install'],"['install', 'installation']"
Deployability,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/896:171,update,update,171,https://psicode.org,https://github.com/psi4/psi4/pull/896,3,"['Release', 'update']","['Release', 'update', 'updated']"
Deployability,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956:641,update,update,641,https://psicode.org,https://github.com/psi4/psi4/pull/1956,2,['update'],['update']
Deployability,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683:527,Release,Release,527,https://psicode.org,https://github.com/psi4/psi4/pull/683,1,['Release'],['Release']
Deployability,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:345,update,update,345,https://psicode.org,https://github.com/psi4/psi4/pull/810,3,"['Release', 'Update', 'update']","['Release', 'Updated', 'update']"
Deployability,"## Description; This PR fixes a bug accidentally introduced in #2190 that prevented docs updates. 1.4 please - a new release had better have docs that actually work. ## Questions; - [x] Some ""sections"" have a section line like the one I change in this PR, others don't. Local sphinx has a light blue color for the ones with the section line, dark blue for the ones without it. For standardization, should we just remove all of these...?. ## Checklist; - [x] Sphinx appeased, locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251:89,update,updates,89,https://psicode.org,https://github.com/psi4/psi4/pull/2251,2,"['release', 'update']","['release', 'updates']"
Deployability,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/841:273,Release,Release,273,https://psicode.org,https://github.com/psi4/psi4/pull/841,1,['Release'],['Release']
Deployability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:225,release,released,225,https://psicode.org,https://github.com/psi4/psi4/pull/2350,1,['release'],['released']
Deployability,"## Description; This PR has TDDFT triplets for LDA and GGA functionals. (Psi does not currently support any TDDFT for meta functionals.) This requires lots of moving parts, so this PR serves as a reference for how they all fit together. For ease of reviewing, I'll have smaller PRs that pull off independent pieces for analysis. While I'm waiting for reviews, I'll update comments to show exactly how I know these spin-integration formulae are correct, for the benefit of future debuggers. Closes #2841. ## Status. There are four parts that I can split into separate PRs for reviewer convenience. Then I can bring in this PR. - [x] #2886; - [x] #2887; - [x] #2888; - [x] #2889. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:365,update,update,365,https://psicode.org,https://github.com/psi4/psi4/pull/2885,3,"['integrat', 'release', 'update']","['integration', 'release', 'update']"
Deployability,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:613,Release,Release,613,https://psicode.org,https://github.com/psi4/psi4/pull/2039,1,['Release'],['Release']
Deployability,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:205,update,update,205,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['update'],['update']
Deployability,"## Description; This PR implements standard grid pruning techniques, where one assumes that the electron density is largely isotropic close to the atomic centre and thus coarse grids are sufficient. Typically the atomic integration sphere is divided into several (3-4) regions where the outer region gets the most accurate grid and the grid get step-wise more coarse towards the inner region(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:220,integrat,integration,220,https://psicode.org,https://github.com/psi4/psi4/pull/1591,4,"['integrat', 'update']","['integration', 'updated']"
Deployability,"## Description; This PR is a follow-up to https://github.com/psi4/psi4/pull/2906, and what can be considered an official solution to the issue discussed in https://github.com/psi4/psi4/issues/2890. The current issue is that COSX does not work with certain grid configurations - specifically, it does not work with grids that have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:261,configurat,configurations,261,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['configurat'],['configurations']
Deployability,"## Description; This PR is a rather important update to the DFJLinK JK subclass, counting both as the continuation of the CompositeJK development started in https://github.com/psi4/psi4/pull/2762 and the first PR in the new incremental Fock build standardization seen in https://github.com/psi4/psi4/pull/2682. To describe the problem, as of now, different integral-direct JK algorithms use different implementations of the incremental Fock build formalism. DirectJK and DFJLinK use the same incremental Fock build formalism, while DFJCOSK uses its own methodology. This introduces two problems:. 1. The next step of CompositeJK development is to combine DFJLinK and DFJCOSK into the pilot CompositeJK subclass. To ease this process, DFJLinK and DFJCOSK need to use the same incremental Fock process.; 2. The incremental Fock formalism currently used by DirectJK and DFJLinK has a couple of extra bells and whistles that DFJCOSK does not have - mainly, the ability to recompute the full Fock matrix every couple of iterations and the ability to disable incremental Fock construction entirely past a specific convergence threshold. These bells and whistles can greatly improve the convergence capabilities of the calculation, while ""normal"" IncFock implementations without these bells and whistles run the risk of greatly increasing the number of SCF iterations needed to converge. This issue is meant to be addressed with https://github.com/psi4/psi4/pull/2682; however, the introduction of DFJLinK to the JK hierarchy has potentially changed how that PR should be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:46,update,update,46,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['update'],['update']
Deployability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:254,Upgrade,UpgradeHelper,254,https://psicode.org,https://github.com/psi4/psi4/pull/2974,3,['Upgrade'],['UpgradeHelper']
Deployability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:376,update,updates,376,https://psicode.org,https://github.com/psi4/psi4/pull/2978,1,['update'],['updates']
Deployability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:99,install,install,99,https://psicode.org,https://github.com/psi4/psi4/pull/563,2,"['Release', 'install']","['Release', 'install']"
Deployability,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505:354,update,update,354,https://psicode.org,https://github.com/psi4/psi4/pull/2505,1,['update'],['update']
Deployability,"## Description; This PR makes small changes to the `PsiException` class, specifically regarding the printout of the function call stack upon throwing. Now, the number of functions included in the printed call stack during exception printout is tied to a singular variable, instead of being scattered about in multiple places. The goal is to allow easier control of the function call stack size during printout for debugging purposes, if desired. . There are a couple small cleanups here and there as well. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] All separate instances of function call stack printout sizes have been replaced with a single variable definition.; - [X] The `Stack` variable now uses a `std::array` instead of a `std::vector`.; - [X] Uses of `&Stack[0]` have been replaced with `Stack.data()`. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:639,release,release,639,https://psicode.org,https://github.com/psi4/psi4/pull/3179,1,['release'],['release']
Deployability,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:234,pipeline,pipeline,234,https://psicode.org,https://github.com/psi4/psi4/pull/2140,1,['pipeline'],['pipeline']
Deployability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:1234,Update,Updated,1234,https://psicode.org,https://github.com/psi4/psi4/pull/1942,2,['Update'],['Updated']
Deployability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:205,configurat,configurations,205,https://psicode.org,https://github.com/psi4/psi4/pull/2906,3,['configurat'],['configurations']
Deployability,"## Description; This PR removes Psi's internal ADC module, so that all ADC calculations are run through `adcc` from now on.; Closes #1033. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] remove built-in ADC module (does not remove any ADC features), closing #1033. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] remove built-in ADC code; - [x] update `proc.py`; - [x] update docs. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737:271,release,release,271,https://psicode.org,https://github.com/psi4/psi4/pull/2737,3,"['release', 'update']","['release', 'update']"
Deployability,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221:643,update,updated,643,https://psicode.org,https://github.com/psi4/psi4/pull/2221,1,['update'],['updated']
Deployability,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2025:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/2025,2,"['release', 'update']","['release', 'updates']"
Deployability,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2035:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/2035,1,['update'],['updates']
Deployability,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/2160,2,"['integrat', 'update']","['integration', 'updates']"
Deployability,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/1922,2,"['Update', 'update']","['Updated', 'updates']"
Deployability,"## Description; This PR updates the documentation to reflect two aspects of the JK code:. 1. It mentions the `SCF_TYPE` naming option added as per https://github.com/psi4/psi4/pull/3001. ; 2. It provides a warning regarding the current defaults for the COSX grids. From my testing, these grids are very crude in practical use, and cannot be expected to be accurate if high (e.g., chemical) accuracy is desired. The documentation is updated to reflect this. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Updates documentation regarding `SCF_TYPE` selection and COSX grid issues. ## Questions; - [X] N/A. ## TODO; - [X] Recommend tighter grid settings in contrast to the defaults. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3079:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/3079,3,"['Update', 'update']","['Updates', 'updated', 'updates']"
Deployability,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:705,release,release,705,https://psicode.org,https://github.com/psi4/psi4/pull/3183,1,['release'],['release']
Deployability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:1017,Release,Release,1017,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['Release'],['Release']
Deployability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/861:927,Release,Release,927,https://psicode.org,https://github.com/psi4/psi4/pull/861,1,['Release'],['Release']
Deployability,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401:926,release,released,926,https://psicode.org,https://github.com/psi4/psi4/pull/1401,1,['release'],['released']
Deployability,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:621,update,updated,621,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['update'],['updated']
Deployability,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2144:45,deploy,deploys,45,https://psicode.org,https://github.com/psi4/psi4/pull/2144,1,['deploy'],['deploys']
Deployability,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:64,update,update,64,https://psicode.org,https://github.com/psi4/psi4/pull/2018,1,['update'],['update']
Deployability,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1046:308,Release,Release,308,https://psicode.org,https://github.com/psi4/psi4/pull/1046,1,['Release'],['Release']
Deployability,"## Description; This cleans up a matrix before diagonalisation by removing extremely small values arising from numerical accuracy during matrix generation. Diagonalisation of matrices that have off-diagonal elements of ca <10-14 with DSYEV appears to lead to unexpected eigenvalues, which ultimately lead to different DFT grid generation on different processor types that show subtly different behaviour with numerical accuracy. Ultimately, this enables the dftd3-version test to pass on core i7-5930X processors (all Haswell?) where before it failed due to generation of an odd DFT grid compared with other processors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - I don't think this should affect anything other than within OrientationMgr but the main developers will know better!; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678:869,Release,Release,869,https://psicode.org,https://github.com/psi4/psi4/pull/678,1,['Release'],['Release']
Deployability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:534,Release,Release,534,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['Release'],['Release']
Deployability,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234:843,install,install,843,https://psicode.org,https://github.com/psi4/psi4/pull/1234,1,['install'],['install']
Deployability,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/919:970,Release,Release,970,https://psicode.org,https://github.com/psi4/psi4/pull/919,1,['Release'],['Release']
Deployability,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605:328,update,updates,328,https://psicode.org,https://github.com/psi4/psi4/pull/605,2,"['Release', 'update']","['Release', 'updates']"
Deployability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:91,pipeline,pipeline,91,https://psicode.org,https://github.com/psi4/psi4/pull/1539,2,['pipeline'],['pipeline']
Deployability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:91,pipeline,pipeline,91,https://psicode.org,https://github.com/psi4/psi4/pull/1527,4,"['pipeline', 'release']","['pipeline', 'pipelines', 'release']"
Deployability,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:293,install,installing,293,https://psicode.org,https://github.com/psi4/psi4/pull/591,3,"['Release', 'install', 'patch']","['Release', 'installing', 'patch']"
Deployability,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:1173,update,updated,1173,https://psicode.org,https://github.com/psi4/psi4/pull/864,1,['update'],['updated']
Deployability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:469,update,updated,469,https://psicode.org,https://github.com/psi4/psi4/pull/3081,1,['update'],['updated']
Deployability,"## Description; This is it. It's here. This PR is the initial implementation of the CompositeJK framework, the culmination of many, MANY of the JK-related PRs that are either in progress, or have been added to Psi4 already. Many methods have been added to Psi4's JK class which enable utilization of algorithms that build J or K separately to improve performance. The ones in Psi4 as of now are the JK subclasses DFJLinK and DFJCOSK, which, between the two, contain integral-direct density-fitted J construction, the Linear Exchange method (LinK), and the Chain-of-Spheres Exchange method (COSX). Further ones, such as the Continuous Fast Multipole Method (CFMM), are planned for the future, and even more (e.g., J-Engine, Local DF methods) exist beyond the work done in Psi4 for the past year. The problem is, Psi4's JK class does not have a framework that truly supports the existence of these separate J and K algorithms. DFJLinK and DFJCOSK work for now, given the low number of separate J and K algorithms current in Psi4. But, as more separate J and K algorithms are added to Psi4, the number of JK subclasses will skyrocket, assuming every combination of separate J and separate K algorithm is stored in its own JK subclass. This will lead to a nasty problem with code duplication, not even discussing the pollution of the JK hierarchy that would result. Thus, for continued research into separate J and K construction algorithms, a proper framework for supporting such algorithms is paramount. CompositeJK is that framework. CompositeJK is a single JK subclass which enables the combination and execution of any separate J and K build algorithm available in Psi4. CompositeJK can enable this without duplication of separate build algorithms across different subclasses. Additionally, CompositeJK is designed to enable simple expansion of itself, enabling the easy addition of new separate J and K builds to Psi4 with minimal programming issues. The current PR is the first implementation of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:623,Continuous,Continuous,623,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['Continuous'],['Continuous']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:264,Update,Update,264,https://psicode.org,https://github.com/psi4/psi4/pull/1238,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399:235,Update,Update,235,https://psicode.org,https://github.com/psi4/psi4/pull/1399,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227:200,Update,Update,200,https://psicode.org,https://github.com/psi4/psi4/pull/1227,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276:221,Update,Update,221,https://psicode.org,https://github.com/psi4/psi4/pull/1276,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221:225,Update,Update,225,https://psicode.org,https://github.com/psi4/psi4/pull/1221,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246:276,Update,Update,276,https://psicode.org,https://github.com/psi4/psi4/pull/1246,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:218,Update,Update,218,https://psicode.org,https://github.com/psi4/psi4/pull/1219,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220:241,Update,Update,241,https://psicode.org,https://github.com/psi4/psi4/pull/1220,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237:231,Update,Update,231,https://psicode.org,https://github.com/psi4/psi4/pull/1237,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239:243,Update,Update,243,https://psicode.org,https://github.com/psi4/psi4/pull/1239,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1180:191,Update,Update,191,https://psicode.org,https://github.com/psi4/psi4/pull/1180,1,['Update'],['Update']
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264:226,Update,Update,226,https://psicode.org,https://github.com/psi4/psi4/pull/1264,1,['Update'],['Update']
Deployability,"## Description; This is part of *Psi4* porting to Windows (#933). Enable *conda* package building for *Windows* with *Azure*. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Enable package building; - [x] Add conda recipe; - [x] Add an option to trigger package building; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `conda.build` with default `false` (settable at queuing time). ## Questions; - [x] Currently, the conda recipe is in `conda/win`. Maybe it should be somewhere in https://github.com/psi4/psi4meta/? --> Recipe will stay in `conda/win`, for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560:360,pipeline,pipeline,360,https://psicode.org,https://github.com/psi4/psi4/pull/1560,1,['pipeline'],['pipeline']
Deployability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:529,install,installer,529,https://psicode.org,https://github.com/psi4/psi4/pull/1571,2,"['Update', 'install']","['Update', 'installer']"
Deployability,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1420:214,install,install,214,https://psicode.org,https://github.com/psi4/psi4/pull/1420,1,['install'],['install']
Deployability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226:290,update,update,290,https://psicode.org,https://github.com/psi4/psi4/pull/1226,1,['update'],['update']
Deployability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224:291,update,update,291,https://psicode.org,https://github.com/psi4/psi4/pull/1224,1,['update'],['update']
Deployability,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199:447,install,install,447,https://psicode.org,https://github.com/psi4/psi4/pull/1199,1,['install'],['install']
Deployability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:175,configurat,configuration,175,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['configurat'],['configuration']
Deployability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Change staging path; - [x] Remove direct calls to `make`; - [x] Remove `DESTDIR`; - [x] Change `cmake` to `${CMAKE_COMMAND}`; - [x] Fix `pthreads` linking; - [x] Fix installation path of `core.pyd`; - [x] Remove hardcoded `.so`; - [x] Processor-specific optimisation flags; - [x] Set minimum MSVC toolset version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115:345,install,installation,345,https://psicode.org,https://github.com/psi4/psi4/pull/1115,1,['install'],['installation']
Deployability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124:179,Update,Update,179,https://psicode.org,https://github.com/psi4/psi4/pull/1124,3,['Update'],['Update']
Deployability,"## Description; This is take one at adding the kinetic energy, potential energy, and virial ratio as psivars, for the purposes of `cc` testing. I'm not confident on how this handles PCM, EFP, PE, and point charges, so putting it up very early for feedback. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Kinetic energy, potential energy, and virial energy are added as Psi variables for fully QM HF and CC computations. The variable names are subject to change. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Standardize `E_h` in docs. ## Checklist; - [ ] Do we want tests for the new psivars now, or in the next PR?. ## Status; - [x] Ready for review; - [x] Ready for merge - need Lori re-review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769:390,release,release,390,https://psicode.org,https://github.com/psi4/psi4/pull/2769,1,['release'],['release']
Deployability,"## Description; This is the make-dfocc-work-reliably and bring-dfocc-testing-to-normal-level step of mega-dfocc-remp. All the former by @behnle. ~**REVIEW COMMIT 3 ONLY** I'll get the first two merged and out of the way shortly.~. This is PR No. 3 in the mega-dfocc-remp series. ## Todos; - [x] no new methods; - [x] coupled DIIS ported from OCC! fixes #2215. now dfocc can be converged tightly enough that 5-pt findif gradient matches analytic gradient; - [x] potential integer overflows fixed which may lead to wrong memory demand estimates for large molecules; - [x] stdsuite testing added for plain RHF DF/CD a-ccsd(t) energies and DF/CD energies and DF gradients for OO methods omp2, omp2.5, omp3, & olccd. attendantly, qcvar handling in the managers brought up to modern standards, with most saving on wfn, and freebie methods saved and checked; - [x] update run_dfocc in driver to dict/director syntax (works b/c `cc_lambda_` now set in dfocc.cc) and uniform P::e/wfn handling of qcvars; - [x] tightened convergence so that default conditions match values to 1e-6; - [x] tightened base rms_mograd_convergence from 4 to 6.5 for oo methods (matches occ, which had to be tightened from 6 to 6.5); - [x] tightened r_convergence to same on the basis of e_conv for non-oo methods; - [x] added an extra check that difference in orbitals at convergence not too big a step. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669:858,update,update,858,https://psicode.org,https://github.com/psi4/psi4/pull/2669,1,['update'],['update']
Deployability,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:584,Release,Release,584,https://psicode.org,https://github.com/psi4/psi4/pull/2504,1,['Release'],['Release']
Deployability,## Description; This partially reverts #1823 and reopens #1820. The attempt to update OpenMP syntax caused outrageous CPHF iterations for sapt with more than one thread and for >double-zeta basis sets. ```; Iter Energy [mEh] dE [mEh] Residual Time [s]; 1 -1328115.94527411 1328115.945274106 82108.848515395 1; 2 -808873.32594920 -519242.619324907 43451.688666137 2; 3 -296640.46386268 -512232.862086516 32804.415609124 3; 4 333490.09801172 -630130.561874404 34046.370717066 4; 5 1671552.17203003 -1338062.074018315 56004.396085803 4; 6 13698345.73019254 -12026793.558162510 344787.457633287 5; 7 -3546455.02303636 17244800.753228907 93826.473521208 6; 8 -1533796.48314396 -2012658.539892400 57723.614037136 7; 9 -499317.88252071 -1034478.600623253 54202.304843513 8; 10 842882.68064645 -1342200.563167160 77577.115912486 9; 11 10985391.53586249 -10142508.855216034 438590.756423259 10; 12 -3227723.70021011 14213115.236072602 110579.601555807 11; 13 -1262295.14487745 -1965428.555332662 64414.226793794 11; 14 -344481.73535989 -917813.409517556 66358.190915373 12; 15 1270218.17221537 -1614699.907575266 113531.143520574 13; 16 -14683932.45018955 15954150.622404918 665246.510118182 14; 17 -2102251.26175256 -12581681.188436987 97682.706587764 15; 18 -774469.20123848 -1327782.060514077 71301.522796551 16; 19 434577.29351654 -1209046.494755025 91453.663971012 17; 20 6270242.49774886 -5835665.204232313 357174.337476779 17; 21 -3323605.23554375 9593847.733292609 150213.104016802 18; 22 -1263277.17636199 -2060328.059181767 73827.751134365 19; 23 -279192.63896875 -984084.537393233 67326.241707876 20; 24 1391940.63398407 -1671133.272952828 106325.475310588 21; 25 -20002406.89729887 21394347.531282943 835829.365499684 22; 26 -2062499.69457425 -17939907.202724621 87641.599632480 23; 27 -785909.82443207 -1276589.870142181 59961.822150188 23; 28 299446.28501843 -1085356.109450493 71518.295316707 24; 29 5556514.54958980 -5257068.264571375 271524.834839076 25; 30 -2756549.97425513 8313064.523844934,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1849:79,update,update,79,https://psicode.org,https://github.com/psi4/psi4/pull/1849,1,['update'],['update']
Deployability,"## Description; This patch adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores, with settings more customizable than TRUE/FALSE/1/0/-1/-2. This patch addresses some (but not all) issues raised in #2631 by allowing for more flexible policies to be set appropriate to multi-part calculations. . ## Todos; - [x] Add POLICY as option to FREEZE_CORE; - [x] Add global variable FREEZE_CORE_POLICY to hold custom frozen-core policy. ## Checklist; - [x] A functionality test for this flag has been added to `tests/dfmp2-ecp/input.dat`; - [x] `ctest -L quick` runs successfully, which includes the above listed test; - [ ] `ctest ` still in-flight but given the scope of this patch I don't expect any issues. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667:21,patch,patch,21,https://psicode.org,https://github.com/psi4/psi4/pull/2667,3,['patch'],['patch']
Deployability,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:194,update,update,194,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['update'],['update']
Deployability,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:51,update,update,51,https://psicode.org,https://github.com/psi4/psi4/pull/747,1,['update'],['update']
Deployability,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742:125,Update,Update,125,https://psicode.org,https://github.com/psi4/psi4/pull/742,1,['Update'],['Update']
Deployability,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1402:390,update,updates,390,https://psicode.org,https://github.com/psi4/psi4/pull/1402,2,['update'],"['update', 'updates']"
Deployability,"## Description; This should not be reviewed directly. It reflects the difference between branch `master` and branch `master-cf`, where the latter contains reviewed PRs on topics of the last Libint2 changeover and deps changes only built on conda-forge. The idea is to keep `master` buildable with your existing `defaults`-based envs as long as possible, while allowing users and CI to test the new stuff from one place. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2902:553,release,release,553,https://psicode.org,https://github.com/psi4/psi4/pull/2902,1,['release'],['release']
Deployability,"## Description; This will temporarily disable installation and testing of `adcc`.; Current `psi4` and `adcc` do not seem to like each other (dependency issues with MKL and HDF5). As discussed with @loriab, `adcc` will be re-enabled for tests upon reconciliation. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848:46,install,installation,46,https://psicode.org,https://github.com/psi4/psi4/pull/1848,1,['install'],['installation']
Deployability,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:26,upgrade,upgrade,26,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['upgrade'],['upgrade']
Deployability,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This is atop lapack and ambit PR's, so you'll want to look only at 410be6f; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` --> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [ ] This runs into trouble in libpsipcm, where the signatures don't match up. What's missing is the dreaded HostWriter at the end. I daresay that's a change upstream that @robertodr understands. ```; /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(133): error: argument of type ""void (*)(const char *, int)"" is incompatible with parameter of type ""HostWriter""; symmetry_info, &host_input, &host_writer);; ^. /theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/psi4/src/psi4/libpsipcm/psipcm.cc(136): error #165: too few arguments in function call; symmetry_info, &host_input);; ^; ```. * **User-Facing for Release Notes**. ## Questions; - [ ] @robertodr, you'll take a look at this? I can certainly answer any ""why"" questions. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594:1292,Release,Release,1292,https://psicode.org,https://github.com/psi4/psi4/pull/594,1,['Release'],['Release']
Deployability,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599:1122,Release,Release,1122,https://psicode.org,https://github.com/psi4/psi4/pull/599,1,['Release'],['Release']
Deployability,"## Description; UKS LDA hessians!. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Analytic hessians for unrestricted LDA functionals are now supported. ## Dev notes & details; - [x] UKS LDA hessians pass; - [x] To support meta hessians, we'll need to update `compute_fock_derivatives` and `compute_hessians`. Both RKS and UKS need their copy of both functions. All the other machinery is in place. . ## Questions; - [x] @loriab, are the standard suite changes correct? Any docs changes needed?. ## Checklist; - [x] `dft-freq-analytic2` passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2992:168,release,release,168,https://psicode.org,https://github.com/psi4/psi4/pull/2992,2,"['release', 'update']","['release', 'update']"
Deployability,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2161:16,Update,Update,16,https://psicode.org,https://github.com/psi4/psi4/pull/2161,1,['Update'],['Update']
Deployability,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2163:16,Update,Update,16,https://psicode.org,https://github.com/psi4/psi4/pull/2163,1,['Update'],['Update']
Deployability,## Description; Update adcc conda installation in azure pipelines to pick the adcc conda package from the **main** label. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1826:16,Update,Update,16,https://psicode.org,https://github.com/psi4/psi4/pull/1826,3,"['Update', 'install', 'pipeline']","['Update', 'installation', 'pipelines']"
Deployability,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728:16,Update,Update,16,https://psicode.org,https://github.com/psi4/psi4/pull/728,2,['Update'],['Update']
Deployability,"## Description; Update the CI documentation. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Split off MCSCF docs to own page; - [x] Updated CI documentation, closes #600 ; - [x] Fixed typo to address #621 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/616:16,Update,Update,16,https://psicode.org,https://github.com/psi4/psi4/pull/616,2,['Update'],"['Update', 'Updated']"
Deployability,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865:16,Update,Updated,16,https://psicode.org,https://github.com/psi4/psi4/pull/1865,1,['Update'],['Updated']
Deployability,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359:16,Update,Updated,16,https://psicode.org,https://github.com/psi4/psi4/pull/2359,2,['Update'],['Updated']
Deployability,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/695,3,"['Release', 'Update', 'update']","['Release', 'Updates', 'updated']"
Deployability,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/988,4,"['Release', 'Update', 'release', 'update']","['Release', 'Updates', 'released', 'updated']"
Deployability,## Description; Updates copyright year range in all license statements from `(c) 2007-2017` to `(c) 2007-2018` for new release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Protects Psi for another year; * **User-Facing for Release Notes**; - [ ] Can't steal code without proper attribution for another year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/984:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/984,3,"['Release', 'Update', 'release']","['Release', 'Updates', 'release']"
Deployability,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/489,3,"['Update', 'install']","['Updates', 'install']"
Deployability,## Description; Updates the CodeCov to provide a very low coverage barrier. This should be fixed later once the coverage has been increased to reasonable level.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/636:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/636,1,['Update'],['Updates']
Deployability,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/1723,1,['Update'],['Updates']
Deployability,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1421:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/1421,1,['Update'],['Updates']
Deployability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['Update'],['Updates']
Deployability,## Description; Updates the vmd_cube script. ## Todos; Adds new color schemes and the ability to control image size.; * **Developer Interest**; - [x] Updated vmd_cube.py file; - [x] Updated documentation; - [x] Changed license of vmd_cube to MIT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/601:16,Update,Updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/601,3,['Update'],"['Updated', 'Updates']"
Deployability,## Description; Updating DFOCC module with new features. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ 1 ] DF-CCSD(T) analytic grads are implemented; - [ 2 ] EKT is implemented for DFOCC module. ## Questions; - [x] Question1. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/797:160,Release,Release,160,https://psicode.org,https://github.com/psi4/psi4/pull/797,1,['Release'],['Release']
Deployability,"## Description; Updating codemeta while I've got author info handy. Anyone -- you're welcome to update affiliations. The rule of thumb is affiliation is the most recent place from whence you contributed to psi. @maxscheurer, please supply your latitude and longitude. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1831:96,update,update,96,https://psicode.org,https://github.com/psi4/psi4/pull/1831,1,['update'],['update']
Deployability,"## Description; We often have PRs held up because CI needs fixing. Then all the ""broken"" PRs have to rebase or hit the update button (which means their remotes are out-of-sync with the local branches). The beta GH merge queue might help this, since PRs are built on top of their predecessor, so a CI fix PR can be inserted at the head of the queue. This PR does hopefully the prep work needed and described in:; Following directions at https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:119,update,update,119,https://psicode.org,https://github.com/psi4/psi4/pull/2922,1,['update'],['update']
Deployability,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347:238,install,install,238,https://psicode.org,https://github.com/psi4/psi4/pull/1347,1,['install'],['install']
Deployability,"## Description; When requesting uncoupled induction in RHF-based SAPT0, the final summary still printed Ind20,r instead of Ind20,u as the line title, and no warning was issued about the uncoupled induction stored in the Psi4 variable for coupled induction, contrary to what is happening for open-shell SAPT0.; Solves #907. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Correct printing of titles and warning for uncoupled induction in RHF-based SAPT0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908:426,Release,Release,426,https://psicode.org,https://github.com/psi4/psi4/pull/908,1,['Release'],['Release']
Deployability,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320:324,update,updated,324,https://psicode.org,https://github.com/psi4/psi4/pull/2320,1,['update'],['updated']
Deployability,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/611:386,Release,Release,386,https://psicode.org,https://github.com/psi4/psi4/pull/611,1,['Release'],['Release']
Deployability,"## Description; [My](https://github.com/psi4/psi4/pull/2824) [previous](https://github.com/psi4/psi4/pull/2832) [PRs](https://github.com/psi4/psi4/pull/2834) fixed the bugs making UKS TDDFT and stability analysis incorrect, so let's enable them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Stability analysis is now supported for unrestricted GGAs.; - [x] TDDFT is now supported for unrestricted GGAs. . ## Dev notes & details; - [x] The prohibition against VV10 is not added to this PR, but its enforcement is. The old code would have given incorrect results. ## Checklist; - [x] Tests _mostly_ pass. `test_tdscf_excitations.py` has this PR covered. The one complication is that we're failing the TDA and RPA tests for CH2 with HCTH93. My investigations lead me to suspect the fault is bad reference data, probably involving pruned integration grids. @bgpeyton has confirmed pruning as the issue and volunteered to re-generate proper data. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849:379,release,release,379,https://psicode.org,https://github.com/psi4/psi4/pull/2849,2,"['integrat', 'release']","['integration', 'release']"
Deployability,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:238,Update,Update,238,https://psicode.org,https://github.com/psi4/psi4/pull/2513,2,['Update'],['Update']
Deployability,"## Description; `cc` now uses `Matrix` rather than `block_matrix` for the OPDM and Lagrangian. During the course of this transition, I discovered an indexing bug in the conversion of the UHF densities to Matrix. This dates [back to 2016](https://github.com/psi4/psi4/commit/d4bbb98291afe4b500476d0d46c87ded3821bed6). As-is seen from the test values that had to change, this can lead to dramatic errors in properties. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cc` now stores its Lagrangian and OPDM as `Matrix` objects rather than block_matrices rather than write them to disk; - [x] `cc` now uses the wfn based interface, rather than the disk interface, to gradients ; - [x] Adds a finite difference correctness test to UHF-CCSD one-electron properties; - [x] Much heavier use of slice technology . ## Questions; - [x] Lori, does the test look okay to you?; - [x] Should I do another check on the dipole that changed the most in our test? That change is _massive_. ## Checklist; - [x] `cc` tests pass; - [x] Edited test with incorrect reference values . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818:550,release,release,550,https://psicode.org,https://github.com/psi4/psi4/pull/2818,1,['release'],['release']
Deployability,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856:277,Release,Release,277,https://psicode.org,https://github.com/psi4/psi4/pull/856,2,"['Release', 'configurat']","['Release', 'configuration']"
Deployability,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154:277,install,install,277,https://psicode.org,https://github.com/psi4/psi4/pull/2154,1,['install'],['install']
Deployability,## Description; ambit and simint patching. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Sets simint version at 0.7.; - [x] Fixes ambit static builds. (tied to jturney/ambit cmakelab3 branch); - [x] Pulls Libint ~1.2.1 that can do AM>6; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/704:33,patch,patching,33,https://psicode.org,https://github.com/psi4/psi4/pull/704,2,"['Release', 'patch']","['Release', 'patching']"
Deployability,## Description; as it says on the tin. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] upload Windows package to anaconda.org; - [x] conda.build bool toggles PR conda testing while master is always on. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2123:209,toggle,toggles,209,https://psicode.org,https://github.com/psi4/psi4/pull/2123,1,['toggle'],['toggles']
Deployability,"## Description; as it says on the tin. also, update DOI and add papers in README. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1905:45,update,update,45,https://psicode.org,https://github.com/psi4/psi4/pull/1905,1,['update'],['update']
Deployability,"## Description; believe it or not, every ""fix windows conda package"" commit in the past week has actually fixed the problem at hand. for this round, let's try installing databases on windows and anchoring scripts from module. EDIT:; - [x] confirmed to actually fix windows conda-build; - [x] pytest 7 now on defaults, so let's try lifting constraints. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2540:159,install,installing,159,https://psicode.org,https://github.com/psi4/psi4/pull/2540,1,['install'],['installing']
Deployability,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1006:60,Release,Release,60,https://psicode.org,https://github.com/psi4/psi4/pull/1006,2,"['Release', 'update']","['Release', 'updated']"
Deployability,## Description; docs updates. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Documents conda pkg reorg. ; - [x] Fixes docs build when nbsphinx not around.… …; - [x] Docs feature for getting higher AM Libint conda packages.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/709:21,update,updates,21,https://psicode.org,https://github.com/psi4/psi4/pull/709,2,"['Release', 'update']","['Release', 'updates']"
Deployability,"## Description; effectively, update samples. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148:29,update,update,29,https://psicode.org,https://github.com/psi4/psi4/pull/2148,1,['update'],['update']
Deployability,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:237,integrat,integrated,237,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['integrat'],['integrated']
Deployability,"## Description; improve CI testing. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Use miniconda as a source for cmake, python, numpy, libint, libefp, gdma, libxc; - [x] Add a build case with python 3.5 (the clang 3.6, since it's the shortest); - [x] No more AM<=4 restrictions on quicktests. We should probably continue to keep tests runable w/default (AM=5) integrals, but Travis now using AM=7.; - [x] solicit Release Notes through PR template; - [x] fix up tagline; - [x] make docs build, and thus conda package, py3 compatible. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510:455,Release,Release,455,https://psicode.org,https://github.com/psi4/psi4/pull/510,1,['Release'],['Release']
Deployability,## Description; misc. ## Todos; - [x] adds a specific def2-qzvpp back so we can check aliases are working; - [ ] ~supply `KMP_AFFINITY` if not set by user. untested~; - [x] fix the `omp.h` not found that's breaking all the Azure Clang builds.; - [x] update the Windows image since Azure is canceling VS2015 next month - https://devblogs.microsoft.com/devops/removing-older-images-in-azure-pipelines-hosted-pools/. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1822:250,update,update,250,https://psicode.org,https://github.com/psi4/psi4/pull/1822,2,"['pipeline', 'update']","['pipelines-hosted-pools', 'update']"
Deployability,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:651,Release,Release,651,https://psicode.org,https://github.com/psi4/psi4/pull/767,1,['Release'],['Release']
Deployability,"## Description; more misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CMake: patches OMP detection for conda GCC, coderefinery/autocmake#247; - [x] Adds a script to probe threading; - [x] Mol: output ghosts from E(Gh) --> Gh(E) closes #1016 ; - [x] Fix up some license headers; - [x] repoints GH:loriab/libxc --> GH:psi4/libxc. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017:149,patch,patches,149,https://psicode.org,https://github.com/psi4/psi4/pull/1017,1,['patch'],['patches']
Deployability,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:232,update,update,232,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['update'],['update']
Deployability,## Description; provide immediate warning of upstream or downstream integration failures. ## Todos; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555:68,integrat,integration,68,https://psicode.org,https://github.com/psi4/psi4/pull/1555,1,['integrat'],['integration']
Deployability,"## Description; shorten quicktests for Travis' sake. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] moved `sapt6` and `nbody-he-cluster` out of quicktests; - in tests, make sure you say `#TEST`, not `# TEST`; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/583:297,Release,Release,297,https://psicode.org,https://github.com/psi4/psi4/pull/583,1,['Release'],['Release']
Deployability,"## Description; still pretty ragged, so don't review. useable on linux. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3016:205,release,release,205,https://psicode.org,https://github.com/psi4/psi4/pull/3016,1,['release'],['release']
Deployability,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:160,Update,Update,160,https://psicode.org,https://github.com/psi4/psi4/pull/726,3,"['Release', 'Update', 'toggle']","['Release', 'Update', 'toggle']"
Deployability,## Description; update badges for v1.3 and squashing pre-3.6 python. resisting temptation to add Windows proper. Add release procedures closes #1496 . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1563:16,update,update,16,https://psicode.org,https://github.com/psi4/psi4/pull/1563,2,"['release', 'update']","['release', 'update']"
Deployability,"## Description; updates ixyz2database.py for py3, removes setenv.py, fixes #1367. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1395:16,update,updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/1395,1,['update'],['updates']
Deployability,## Description; updates the `samples/` directory. spare yourself the diff. first commit is the only non-copy change. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1022:16,update,updates,16,https://psicode.org,https://github.com/psi4/psi4/pull/1022,1,['update'],['updates']
Deployability,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:48,update,update,48,https://psicode.org,https://github.com/psi4/psi4/pull/1515,3,['update'],['update']
Deployability,"## Description; w/o this, tests run fine in place but fail upon install. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2263:64,install,install,64,https://psicode.org,https://github.com/psi4/psi4/pull/2263,1,['install'],['install']
Deployability,"## Description; ~Mostly a code demo, so I'll cancel the CI. upstream master isn't quite ready yet, but this works locally on linux.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Add Einsums as optional build dependency via the usual `-D ENABLE_Einsums=ON` arg.; - [x] Added a dummy module that uses Einsums both as a model and so we have something to check in tests w/o imposing on fnocc. Conda packages are available for Linux & Mac (Intel & Silicon); - [x] Tried some docs tweaks again. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3050:267,release,release,267,https://psicode.org,https://github.com/psi4/psi4/pull/3050,1,['release'],['release']
Deployability,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126:356,UPDATE,UPDATE,356,https://psicode.org,https://github.com/psi4/psi4/pull/2126,1,['UPDATE'],['UPDATE']
Deployability,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/777:147,patch,patches,147,https://psicode.org,https://github.com/psi4/psi4/pull/777,2,"['Release', 'patch']","['Release', 'patches']"
Deployability,"## Information:. I have two versions of boost installed on my system. ; - I installed boost 1.59 in a conda env using the ([recipe](https://github.com/conda/conda-recipes/tree/b9570c14d5a25ac88b98c6c597365bfcba4174ce/boost)) from the condo/conda-recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //B",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:46,install,installed,46,https://psicode.org,https://github.com/psi4/psi4/issues/313,5,"['Install', 'install', 'upgrade']","['Installed', 'installed', 'upgraded']"
Deployability,"## Notes on updating your conda distribution of Psi4; There's been a lot of changes to conda defaults channel and the Psi4 conda build since v1.1 c. May 2017. They've all been to the good, but they're drastic enough that a `conda update psi4` is not the right way to go.; #### Changes/Timeline; * July 2017 — Psi4 stops statically linking MKL into the binary and starts dynamically linking `mkl_rt` from conda; * Dec 2017 — Psi4 updates pybind11 from 2.0 to 2.2; * winter/spring 2017/2018 — On Linux, conda defaults channel switches from GCC 4.8.5 to 7.2.0. This means Psi4 doesn't have to ship a potentially interfering 5.2.0 alongside just for C++11 support. On Mac, conda defaults channel switches to a non-AppleClang Clang compiler that supports OpenMP. We can thread again! Also, conda defaults switches their NumPy to link to `mkl_rt` (from a different combination of MKL libs) (so any previous advice to grab NumPy from `-c intel` can be ignored).; * April/May/June 2018 — Psi4 follows defaults channel and incorporates all these improvements. We are currently compatible with defaults to the best of my knowledge (that is, no reason installing psi4 into your up-to-date base environment should cause symbol errors for psi4 or the base). conda-forge channel is still working on their update, so I wouldn't mix psi4 with serious (i.e., compiled) packages from there. #### Updating; * If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, **do not update**. Another clue is if there's a `gcc5` in your `conda list`. Another clue is a `__svml` error.; * Instead, create a new environment for a new Psi4. You may need to `conda update conda` beforehand.; * Then `conda create -n {p4env} python={3.6} psi4 psi4-rt -c psi4/label/dev` You get to choose the `{...}` bits.; * There's at least one report that a fresh Anaconda doesn't work with psi while a fresh Miniconda does. This doesn't sound right to me, but it's worth noting and getting further reports.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-397056473:230,update,update,230,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-397056473,6,"['install', 'update']","['installing', 'update', 'updates']"
Deployability,"## Questions; - [ ] not sure about the `release()`, as not member of class. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1621:40,release,release,40,https://psicode.org,https://github.com/psi4/psi4/pull/1621,1,['release'],['release']
Deployability,"## This will be backported to branch 1.8.x for v1.8.3, but it has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:79,patch,patched,79,https://psicode.org,https://github.com/psi4/psi4/pull/3049,1,['patch'],['patched']
Deployability,"## This will be backported to branch 1.8.x for v1.8.3, but it has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] When running `psi4 --version`, short circuit the `import psi4` command that can be slow on networked drives. Instead, just read the string out of the file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3064:79,patch,patched,79,https://psicode.org,https://github.com/psi4/psi4/pull/3064,2,"['patch', 'release']","['patched', 'release']"
Deployability,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/425:177,rolling,rolling,177,https://psicode.org,https://github.com/psi4/psi4/pull/425,2,"['install', 'rolling']","['install', 'rolling']"
Deployability,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519:448,Release,Release,448,https://psicode.org,https://github.com/psi4/psi4/pull/519,1,['Release'],['Release']
Deployability,## Todos; - [x] bump ambit to v0.3; - [x] enable parallel pytest for CI; - [x] `environment.yaml` to build binder from; - [x] install qcng scripts to the right place. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1612:126,install,install,126,https://psicode.org,https://github.com/psi4/psi4/pull/1612,1,['install'],['install']
Deployability,## Todos; - [x] bump qcel to 0.5.0; - [x] bump qcng to 0.8.2; - [x] bump pb11 to 2.3.0; - [x] update FindPythonLibsNew.cmake from upstream (pb11); - [x] try to fix 0-bit Python travis error -- ended up averting Win problem and letting Lin upstream fix itself. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1697:94,update,update,94,https://psicode.org,https://github.com/psi4/psi4/pull/1697,1,['update'],['update']
Deployability,"## Todos; - [x] internal builds on pybind11 with Intel atop non-system compilers would think compiler broken b/c can't find gcc guts. so we'll pass along the flags. way overkill considering that ""build"" is just a `cp`.; - [x] fix the Azure g2g header trouble; - [x] in the process, update to the new g2g 2.0 (unreleased) interface; - [x] all tests pass; - [x] CPPE testing -- fix ctest and add pytest (latter needed for`psi4-rt`); - [x] qz2p basis from CFOUR. - Q: imminence of g2g 2?. ## Status; - [x] Ready for review; - [x] Ready for merge (except for no packaged g2g)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718:282,update,update,282,https://psicode.org,https://github.com/psi4/psi4/pull/1718,1,['update'],['update']
Deployability,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980:1299,release,release,1299,https://psicode.org,https://github.com/psi4/psi4/pull/1980,1,['release'],['release']
Deployability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added unit labels to density and ESP.; * **User-Facing for Release Notes**. ## Questions; - [ ] @fevangelista, how do the units look to you?; - [ ] Should units be applied to https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.cc#L192-L196. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/822:174,Release,Release,174,https://psicode.org,https://github.com/psi4/psi4/pull/822,1,['Release'],['Release']
Deployability,## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes pcmsolver/scf for py3; - [x] Moves libefp origin upstream ; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/676:201,Release,Release,201,https://psicode.org,https://github.com/psi4/psi4/pull/676,1,['Release'],['Release']
Deployability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:654,Release,Release,654,https://psicode.org,https://github.com/psi4/psi4/pull/576,1,['Release'],['Release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug disabling non-orbital optimized DCT with spin restriction. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] l. 55 keeps the alpha and beta orbitals pointing to the same object.; - [x] l. 142 is the central bugfix. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2860:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2860,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UKS was not properly parallelized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds a lot of comments to `compute_V` in preparation for fixing `compute_Vx` for GGAs; - [x] Fixes _a_ bug in `compute_Vx` for GGAs. There's more to find, but that's beyond-the-scope ; - [x] Things to review: Are the comments comprehensible? Is anything obvious missing, needed to understand `compute_V` up to GGA in either polarization?; - [x] Things to review: I added [this parallelization line](https://github.com/JonathonMisiewicz/psi4/blob/75709af51d7fd68f926d2e28ac2d3ae9a4cea9c9/psi4/src/psi4/libfock/v.cc#L2490), which is the counterpart of [this line](https://github.com/JonathonMisiewicz/psi4/blob/75709af51d7fd68f926d2e28ac2d3ae9a4cea9c9/psi4/src/psi4/libfock/v.cc#L1978) in RKS. Anything obviously wrong with the parallelization?; - [x] Notice to @davpoolechem: per the above, any UKS speed benchmarks need to be redone with this PR. ; - [x] 1.7 preferred but not demanded. ## Checklist; - [x] quick tests passed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2824:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2824,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes a crash when attempting DFMP2 on systems with too few electrons to support MP2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Massively simplified the DFMP2 validation logic. ## Checklist; - [x] dfmp2 tests pass; - [x] Turned the bug report into a new test case. (Thanks for a clean one, Susi.). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2977:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2977,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed typos in comments; - [x] Fixed buggy print information. ## Questions; - [ ] Is it worth testing for the error message explicitly?. ## Checklist; - [x] Confirmed I get the expected error message upon running the example from #2853. ## Status; - [x] Ready for review; - [x] Ready for merge upon @susilehtola approval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2859,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Renamed `build_disp_functor` to `build_functional_and_disp`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Function name more accurately describes what function does. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2874:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2874,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `LINEQ_SOLVER` option for `occ` has been removed. ## Dev notes & details; - [x] `occ` now uses LAPACK to solve Ax=b rather than the `pople` or `flin` algorithms. `LAPACK` just might be more reliable. This was an extremely obscure option, so I'm not worried about breaking anybody's input. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2778:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2778,1,['release'],['release']
Deployability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `wfn.Fa_subset` and `wfn.Fb_subset` now return the correct matrices in the MO basis. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The matrix helper signature is a little uglier now, sadly. ## Checklist; - [x] Tests added for Fa and Fb in MO basis; - [x] Quick tests and new test pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2958:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2958,1,['release'],['release']
Deployability,"### Conda changes since v1.1; * MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; * Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; * (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386708662:343,install,installs,343,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386708662,2,['install'],"['installed', 'installs']"
Deployability,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:183,integrat,integrate,183,https://psicode.org,https://github.com/psi4/psi4/pull/1351,3,"['Integrat', 'Release', 'integrat']","['Integrate', 'Release', 'integrate']"
Deployability,"### System Specs:; ```; OS: MacOS Monterey 12.5.1; 2,6 GHz 6-Core Intel Core i7; 32 GB 2667 MHz DDR4; IDE: PyCharm 2022.3.2 (Community Edition); ```. ### Software Specs:; ```; Virtual Env: Conda env ; Conda version: 23.1.0; Python version: 3.6.13 and 3.7.16 (same error on both versions); PSI4 version: 1.5+e9f4d6d ; PSI4 build: py37ha809fef_0 ; Installed PSI4 using: conda install -c psi4 psi4; ```. ### Minimum reproducible example script:; ```; import psi4; psi4.set_memory('500 MB'); h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); print(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:346,Install,Installed,346,https://psicode.org,https://github.com/psi4/psi4/issues/2930,2,"['Install', 'install']","['Installed', 'install']"
Deployability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:4,Upgrade,Upgrade,4,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['Upgrade'],['Upgrade']
Deployability,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:62,configurat,configuration,62,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,4,"['configurat', 'install', 'release']","['configuration', 'install', 'release']"
Deployability,"#2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#172",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:10262,Update,Update,10262,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Update'],['Update']
Deployability,"%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | [psi4/src/psi4/cc/ccenergy/ccenergy.cc](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9jYy9jY2VuZXJneS9jY2VuZXJneS5jYw==) | `67.49% <0.00%> (-0.17%)` | :arrow_down: |; | ... and [99 more](https://codecov.io/gh/psi4/psi4/pull/1443/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=footer). Last update [e273d32...a90a350](https://codecov.io/gh/psi4/psi4/pull/1443?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-507008299:3344,update,update,3344,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-507008299,1,['update'],['update']
Deployability,%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4532,Install,Install,4532,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:16471,install,install,16471,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:21017,install,install,21017,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:18723,install,install,18723,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:16643,install,install,16643,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the pro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:21189,install,install,21189,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, star",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:18895,install,install,18895,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:4931,install,installed,4931,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"'python=3.6']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; ├─ psi4-rt is installable with the potential options; │ ├─ psi4-rt [1.2|1.3|...|1.7] would require; │ │ └─ v2rdm_casscf [0.8 py27hbddea90_0|0.8 py35hbddea90_0|...|0.9 py39hf915834_9], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.5* , which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.6* with the potential options; │ │ ├─ python 3.6.10 would require; │ │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.10 would require; │",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:2144,install,installed,2144,https://psicode.org,https://github.com/psi4/psi4/issues/2912,1,['install'],['installed']
Deployability,"'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:1767,install,installed,1767,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"'s `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:1120,upgrade,upgrade,1120,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['upgrade'],['upgrade']
Deployability,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5816,Update,Update,5816,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['Update'],['Update']
Deployability,"(B) seconded. All of the tests are total energies / gradients, so I think it's fine to update the reference values, as long as the shifts aren't huge. . Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116:87,update,update,87,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494030116,1,['update'],['update']
Deployability,"(I feel a bit bad for opening so many issues..but here we go..); Hi,. In order to make parallel xcfour work with psi4, I needed to remove the `env` parameter the subprocess: ; `retcode = subprocess.Popen([cfour_executable], bufsize=0,stdout=subprocess.PIPE)`; (compare with [original](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/interface_cfour.py#L213)). Otherwise xinitenv (from cfour) would exist with exit code 265 and then psi4 is upset by the non-existing output. Maybe is has to do with our cfour installation using ""bash"" and not ""sh"" in the various cfour init scripts? But env does not change the shell type, so I am confused.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661:525,install,installation,525,https://psicode.org,https://github.com/psi4/psi4/issues/661,1,['install'],['installation']
Deployability,"(PSI4 1.1); water_opt -7.606667516613838e+01; water+_homo -7.566072290801020e+01; water+_homo-1 -7.558091679634278e+01; water+_homo-2 -7.541230326047109e+01; water+_homo-3 -7.423771580655676e+01; water+_homo-4 -5.571830715553878e+01. Noticeably, pulling an electron from the homo-3 and homo-4 require some crafty work, but **I have managed to converge this calculations with several basis sets and in DFT, too, using damping and other tricks, all in PSI4 1.1. Energies are qualitatively the same alway**s. All the output files are attached, in psython mode (I could not make MOM to work from python). Now then, I wanted to check some things, so I printed the density matrices from .fchk files and plugged them to PySCF, projecting them properly and so on, just to evaluate the energy with UHF on top of those density matrices. I get the same energies for the neutral molecule and the homo, homo-1 and homo-2 cations. I get VERY different energies from the homo-3 and homo-4 states. Now thats weird, because the energies above make sense. So I assumed, okay, maybe there's something odd with the .fchk writer module. I've seen its been updated, so lets try a newer version of PSI4. So I got the 1.4a2.dev78 and tried to run my calculations using the newest available dev release, from scratch. I get exactly the same energies, except for the homo-4 state, for which I get some very funky results:. [psi4_14.tar.gz](https://github.com/psi4/psi4/files/3469641/psi4_14.tar.gz). (Psi4 1.4a2...); water_opt -7.606667516615393e+01; water+_homo -7.566072290809453e+01; water+_homo-1 -7.558091679647397e+01; water+_homo-2 -7.541230326053801e+01; water+_homo-3 -7.423771580754870e+01; water+_homo-4 **9.360901611130924e+00**. And that's the story! I would try to read the .fchk files and see if I can evaluate the UHF energy on top of them with Psi4 intead of PySCF next, but this thing appeared and I guess some checks are due to know what is going on. Thank you for your patience! I hope its nothing serious!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692:1708,update,updated,1708,https://psicode.org,https://github.com/psi4/psi4/issues/1692,2,"['release', 'update']","['release', 'updated']"
Deployability,"(developer or user-interest) that this PR has or will; > accomplish.; >; > - Changes ORBSYM (the symmetry of each orbital) from Psi4's internal; > convention of ordering irreps to the traditional FCIDUMP ordering; > - Adds ISYM (the symmetry of the overall wavefunction); > - Updates the fcidump test to match new ordering; >; > Questions; >; > - Does this change in convention break anything in Psi4? (Or anything; > that uses Psi4?); > - Since I altered the tests to match the output, how to verify; > correctness of this change?; >; > Checklist; >; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1453; > Commit Summary; >; > - added helper function, correct ORBSYM output; > - added isym to fcidump, updated tests; >; > File Changes; >; > - *M* psi4/driver/p4util/fcidump.py; > <https://github.com/psi4/psi4/pull/1453/files#diff-0> (29); > - *M* tests/fcidump/Ne.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-1> (3); > - *M* tests/fcidump/Ne.C1.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-2> (1); > - *M* tests/fcidump/Ne.C1.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-3> (1); > - *M* tests/fcidump/Ne.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-4> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1453.patch; > - https://github.com/psi4/psi4/pull/1453.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1453>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdjvy0hVobCbhOq3qA4biT25rt88rks5u_UxTgaJpZM4ZnaXM>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754:1927,Patch,Patch,1927,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754,2,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"(indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasiriann",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:1433,install,install,1433,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1450,update,updated,1450,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['update'],['updated']
Deployability,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:654,Upgrade,Upgrade,654,https://psicode.org,https://github.com/psi4/psi4/issues/1768,1,['Upgrade'],['Upgrade']
Deployability,") compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4378,Install,Installing,4378,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,") { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:2305,install,install,2305,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['install'],['install']
Deployability,"); > File ""<string>"", line 30, in <module>; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > It looks like die_if_not_converged; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113>; > toggled print-error-msg/die+traceback previously for SCF and DETCI, with; > defaulting toward print-error-msg. I think it's better to default toward; > die (which this PR now does) and ppl can catch the error if they want; > print-error-msg.; >; > For a long time we had geometry optimizations exit smoothly even if failed; > for iterations exceeded. That caused some problems (I think @dsirianni; > <https:/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:1543,patch,patch,1543,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,1,['patch'],['patch']
Deployability,"* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2747,install,installed,2747,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"* Advertised Version: 1.4; * Continuous Version: 1.4; * Release Date: 08 03 2021; * Documentation: http://psicode.org/psi4manual/1.4.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:29,Continuous,Continuous,29,https://psicode.org,https://github.com/psi4/psi4/issues/1562,6,"['Continuous', 'Release', 'install']","['Continuous', 'Release', 'install', 'installers', 'installs']"
Deployability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:703,install,install,703,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['install'],['install']
Deployability,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:35,update,update,35,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,5,"['configurat', 'install', 'update']","['configuration', 'installation', 'update']"
Deployability,"* add to the branch list https://github.com/psi4/psi4/blob/master/.travis.yml#L179; * bump copyright; * tests/runtest.py; * README.md; * https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/doc/sphinxman/source/conf.py.in#L118; * tests/psitest.pl. * (not done) main README updates. * tl;dr for version bump. ```; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-463867007:295,update,updates,295,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-463867007,1,['update'],['updates']
Deployability,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867,4,['release'],['release']
Deployability,"* generating download site directions above; * shift alias to new installs/content file; * NYI commit new files, PR, and upload site. * On GH site ""Draft a New Release"". * grab the 1.3 manual by `cp -pR master 1.3` on godaddy; * NYI adjust the front-matter tags. ## reset; * NYI new ltrt line; * NYI psi4-multi and psi4-docs back to master; * NYI turn off anom and go back to norm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036:66,install,installs,66,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468650036,2,"['Release', 'install']","['Release', 'installs']"
Deployability,"* in final pass before tag, check that `external/` repos and commits match have been updated from conda recipes sources. also check versions with conda_build_config.yaml; * check introduction.rst for any compiler and python min requirements to edit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468092980:85,update,updated,85,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468092980,1,['update'],['updated']
Deployability,"* run `make sphinxman` at least once by hand and check in resulting psifiles.py and all the updated and new `samples/` files and dirs. * figure out any new `Additional Contributors` since last release and edit header.py accordingly. Get their particulars for codemeta.json. invite any >=3 PRs to GH org. * follow the procedure outlined in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py) (I haven't pushed the versions with enhanced comments) to; * update upstream and downstream deps/addons that may have advanced since last release. edit recipes and psi4 `external/` code.; * rebuild the psi4, psi4-rt, psi4-dev, psi4-docs stack on Linux and Mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604:92,update,updated,92,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604,4,"['release', 'update']","['release', 'update', 'updated']"
Deployability,"* when publishing a new installer page, move the ""latest"" alias https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md to the new page so that ""Downloads"" on the naviagtion bar points there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366:24,install,installer,24,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-465437366,2,['install'],"['installer', 'installs']"
Deployability,"******. CC integral sort will use 116.60 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:11881,Configurat,Configuration,11881,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Configurat'],['Configuration']
Deployability,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:38,update,update,38,https://psicode.org,https://github.com/psi4/psi4/issues/1533,2,['update'],['update']
Deployability,"**Update on the Azure CI failures**; The problem seems _not_ to be entirely controllable through flags. Parts of the xtensor stack code base (xtensor itself, xsimd, possibly xtensor-python) need to be changed and I am working on it. Once I have PR submitted to all these projects, they are hopefully merged and new releases minted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211:2,Update,Update,2,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-487287211,2,"['Update', 'release']","['Update', 'releases']"
Deployability,"**Update**. I've completely replaced the C++-based implementation of PE with a light-weight Python-side version.; Further, I had to bump pybind11 to `v.2.2.4` for the CPPE library to work correctly, and I pinned a release version of CPPE in the `ExternalProject`. So I guess this PR will be ready for merge soon. I'm going to add some simple documentation now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-506426047:2,Update,Update,2,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-506426047,2,"['Update', 'release']","['Update', 'release']"
Deployability,**Update**: Tests now pass in Azure Linux builds including a few quicktests for adcc. I'll proceed to add documentation when I get round to it (I'm a bit busy at the moment).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172:2,Update,Update,2,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555941172,1,['Update'],['Update']
Deployability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:906,update,updated,906,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['update'],['updated']
Deployability,*Psi4* 1.3.2 packages for *Windows*!. Installation:; ```; conda install -c raimis -c psi4 -c conda-forge psi4=1.3.2; ```; The 1.3.2 version for *Windows* is actually: https://github.com/psi4/psi4/tree/v1.3.2 + #1648 = https://github.com/raimis/psi4/commit/82e852b7e61f9813a665e1f6f35203d01e5fb1b9. Build logs:; - *Python* 3.6: https://dev.azure.com/raimisg/psi4/_build/results?buildId=737; - *Python* 3.7: https://dev.azure.com/raimisg/psi4/_build/results?buildId=738,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-494354023:38,Install,Installation,38,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-494354023,2,"['Install', 'install']","['Installation', 'install']"
Deployability,*Psi4* debugging is almost finished on *Windows*!. The remaining tasks:; - [x] Streamline testing. A specific *Azure* pipeline can be triggered to run all the tests before release and after significant changes. -- #1527 ; - [x] Production level builds. A specific *Azure* pipeline can be triggered to build optimized binaries with a big `MAX_AM_ERI`. -- #1539 ; - [x] Conda package. A specific *Azure* pipeline can be triggered to create a conda package and publish it on *Azure* artefacts. -- #1560,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-461430448:118,pipeline,pipeline,118,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-461430448,4,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"*kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; > occ_wfn = core.occ(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - CISD/cc-pVDZ via DETCI: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 29, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; > ciwfn = core.detci(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1021#issuecomment-388980081>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdoBl5TkzfuztMHuD5aseZ9qEjGVeks5tygHBgaJpZM4T-hi0>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:12758,install,install,12758,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['install'],['install']
Deployability,"+1 to installing both at the same time, ideally just at environment creation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706690051:6,install,installing,6,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706690051,1,['install'],['installing']
Deployability,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:17674,install,install,17674,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,", it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:1260,install,installation,1260,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['install'],['installation']
Deployability,", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:9048,install,install,9048,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,", post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:2571,install,install,2571,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,", qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKIN",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11925,install,install,11925,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,", the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Matrix const*, double); psi::Matrix::transform(psi::Matrix const&, psi::Matrix const&, psi::Matrix const&); ```. I am not technically knowledgeable enough to interpret the information about the 'A', 'B', and 'C' matrices in the log file, but it seems like the problem is that their dimensions do not match. Additionally, I can also report that the calculation works if ANY of the following changes are made to the input:; 1) The ghost atoms are removed.; 2) The non-augmented basis set is used. (cc-pvtz rather than aug-cc-pvtz); 3) If {'cc_type': 'df'} is passed to psi4.set_options() to do density-fitted coupled cluster. I installed the stable branch of psi4 through anaconda, I have version ""1.7+6ce35a5"". Let me know if there is any more information you need to help solve this issue. The full log file from the CCSD(T)/aug-cc-pvtz calculation:; [psi4_ccsdt.txt](https://github.com/psi4/psi4/files/11144015/psi4_ccsdt.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:3565,install,installed,3565,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['install'],['installed']
Deployability,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:207,install,installing,207,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,2,['install'],"['install', 'installing']"
Deployability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:22,install,install,22,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,4,['install'],['install']
Deployability,"- Look at the procedures dictionary https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L45 . These are the things you can stick into `energy(name)`, `gradient`, etc.; - Look at the docstring tables https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L264 in the energy, optimize, and frequency functions. Those tables aren't so neatly formatted because I'm picky. They're neatly formatted because Sphinx is picky.; - Look at the nice docs those docstrings turn into http://psicode.org/psi4manual/master/opt.html#table-grad-gen . Each line has links to the manual section where you can find more info on the theory.; - Note that there are now a lot fewer entries in the procedures dictionary than there are in the docstring table. The procedures dict is right, and the docstring table is out of date.; - Your mission is to update the docstring tables and the manual links in them to be consistent with the procedures dict and with the table at http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations; - If you're at GaTech, there's Sphinx at `/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv/bin/sphinx-build`. Otherwise, find a sphinx-build >=1.1 and <1.4 .; - [ ] eliminate from the reST tables in driver.py any methods that aren't in the procedures dict. This will mostly be df- and cd- methods; - [ ] for methods in http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations table, add ""[details]"" refs to the approriate part of the table. ""mp2"" is already done, as an example.; - [ ] for all methods, check that the ""[manual]"" link is pointing to the best part of the docs. You can add a `.. _`sec:seclabel`:` anywhere you need in the rst docs to make a more-specific link.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/249:889,update,update,889,https://psicode.org,https://github.com/psi4/psi4/issues/249,1,['update'],['update']
Deployability,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172396551:357,install,installation,357,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551,1,['install'],['installation']
Deployability,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965,1,['release'],['release']
Deployability,"- [ ] Rename the `DFTGrid` class to `IntegrationGrid`. As written, it's confusing that non-DFT classes use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523:37,Integrat,IntegrationGrid,37,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523,1,['Integrat'],['IntegrationGrid']
Deployability,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:760,install,install,760,https://psicode.org,https://github.com/psi4/psi4/pull/2048,2,"['install', 'release']","['install', 'released']"
Deployability,"- [x] integrate proper (non-WSL) Windows downloads; - [ ] integrate some options like base env/conda env and how-to-update instructions into guide so can retire reST docs; - [ ] reST docs should become like traditional `INSTALL` documents to be read only by ppl who want to build psi from source with their choice of compilers, etc. and who relish details, not by everyday user or dev.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1840:6,integrat,integrate,6,https://psicode.org,https://github.com/psi4/psi4/issues/1840,4,"['INSTALL', 'integrat', 'update']","['INSTALL', 'integrate', 'update']"
Deployability,"- [x] need to redirect docs latest and master on sirius to on psicode. Many ways how here: https://css-tricks.com/redirect-web-page/ . Perhaps Apache best? I know that's installed. Want to redirect rather than shutdown so that google and co. don't reset the popularity ratings.; - [x] need to tarball the trac website and stuff it somewhere. Not everything was transferred to the wiki, but most everything _useful_ migrated. Should sirius be decommissioned someday,; - [x] tarball up all the old (beta2 onwards) docs builds, establish them on godaddy or something, and relink on psicode.; - [x] shut down trac page",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112:170,install,installed,170,https://psicode.org,https://github.com/psi4/psi4/issues/112,1,['install'],['installed']
Deployability,"-- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -openmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_CXX: /opt/intel/impi/5.0.1.035/intel64/lib/libmpicxx.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_Fortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:6980,release,release,6980,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['release'],['release']
Deployability,-- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12893,Install,Install,12893,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"---------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:3811,release,releases,3811,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['release'],['releases']
Deployability,---------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3476,Install,Installing,3476,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seconds = 0.17 minutes; Total time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seconds = 0.17 minutes. Psi4 stopped on: Monday, 16 September 2024 10:17PM; Psi4 wall time for execution: 0:00:10.01. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Output file for heptatriyne:; ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.9.1 release. Git: Rev {} zzzzzzz . D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codem",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:15459,release,release,15459,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['release'],['release']
Deployability,"---; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better hous",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:1195,release,release,1195,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['release'],['release']
Deployability,-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1896,install,installing,1896,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"-recipes https://github.com/conda-forge/staged-recipes/pull/22882 ). ## Dev notes & details; - [x] A perhaps obscure point is that psi hasn't been using exactly upstream GDMA, which is a Fortran executable. Instead, Andy Simmonett did lots of I/O conversion and turned it into a library and bound some functions to C so psi could extract results w/o parsing. That's great, but it's meant we've been fixed at upstream v2.2.06.; - [x] I was startled to realize gdma is GPL. For background, roughly speaking, GPL probably does adhere to psi4 if libgdma statically linked, might adhere if dynamically linked (FSF thinks yes; everyone else thinks no; result is that any GPL makes ppl nervous), doesn't adhere if dlopen'ed or runtime optional. Conda-package-wise, we've always dynamically linked to libgdma, and scouring my memory, there was a plan to have an alternate gdma- and chemps2-free conda build of psi4 to remove doubt; that never happened.; - [x] To get past these problems and get a c-f package going, I; - [x] Started with current upstream https://gitlab.com/anthonyjs/gdma/-/tree/master and applied Andy's and Holger's gdma->libgdma changes; - [x] Updated the cmake buildsys with the usual checklist https://github.com/psi4/gdma/issues/6; - [x] Added back the gdma executable so c-f package wouldn't lose functionality from upstream; - [x] pybind11-'d the C functions Andy created; - [x] psi4-side, moved the gdma_interface c-side function over to the driver, so it's pure runtime; - [x] got the conda package going https://github.com/conda-forge/staged-recipes/pull/22882 for L, M, W; - [x] need to add comment notation so the driver qcvars are associated with gdma ; - [x] UNRELATED: fix mrcc addon so that can pass it FNO orbitals again. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2968:1609,Update,Updated,1609,https://psicode.org,https://github.com/psi4/psi4/pull/2968,1,['Update'],['Updated']
Deployability,". * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2832,install,installed,2832,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['install'],['installed']
Deployability,". These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3525,patch,patch,3525,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['patch'],['patch']
Deployability,". Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9; > ; > SET,CHARGE=1; > SET,SPIN=1; > ; > basis=cc-pVDZ; > ; > rhf; > rccsd; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/311.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-195804600:1843,toggle,toggle,1843,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600,1,['toggle'],['toggle']
Deployability,". Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4. These are the range-separated Minnesota functionals by Chai et al, for which we've had a tracker open for a while https://gitlab.com/libxc/libxc/-/issues/180",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:1515,release,released,1515,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,2,['release'],"['release', 'released']"
Deployability,". may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ```. * use command in readme to upload to vergil; * log in to vergil to make windows wsl symlinks. * worth downloading at least one L and M and installing it and running tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:2235,install,installing,2235,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['install'],['installing']
Deployability,.) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6080,Install,Install,6080,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PA,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6521,Install,Install,6521,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-p,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2879,install,installing,2879,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"..; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. For sh/bash command-line use, add to shell or ~/.bashrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.sh; conda activate; export PSI_SCRATCH=/path/to/existing/writable/local-not-network",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3866,install,installing,3866,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,..; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2586,install,installing,2586,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,".1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Adding test cases: Psi4 + CheMPS2; -- Adding test cases: Psi4 + dkh; -- Adding test cases: Psi4 + libefp; -- Adding test cases: Psi4 + gdma; -- Adding test cases: Psi4 + PCMSolver; -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:5232,install,install,5232,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['install'],['install']
Deployability,.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...;,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2339,install,installing,2339,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environme,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3316,install,installing,3316,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,".8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3242,install,install,3242,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['install']
Deployability,".; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1601,install,installing,1601,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16489,Install,Install,16489,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 1.16 seconds = 0.02 minutes; system time = 0.06 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 11.55 seconds = 0.19 minutes; system time = 0.35 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 10 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 10 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1 1 1 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 5 NUM BET = 5; NUM ALP EXPL = 5 NUM BET EXPL = 5; IOPEN = no; RAS1 LVL = 4 A RAS3 MAX = 5; RAS1 MIN = 0 B RAS3 MAX = 5; A RAS1 LVL = 4 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 5 B RAS4 MAX = 0; B RAS1 LVL = 4 RAS4 MAX = 0; B RAS1 MIN = 0 A R,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:11593,UPDATE,UPDATE,11593,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['UPDATE'],['UPDATE']
Deployability,".; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3573,install,installing,3573,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,".get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5412,install,install,5412,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,".py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8866,install,install,8866,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,".so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1797,install,installation,1797,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['installation']
Deployability,".txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1088,configurat,configuration,1088,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['configurat'],['configuration']
Deployability,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4280,upgrade,upgrade,4280,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['upgrade'],['upgrade']
Deployability,"/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8914,install,install,8914,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['install'],['install']
Deployability,"/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:1613,install,install,1613,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['install'],['install']
Deployability,/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3150,Install,Installing,3150,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:2734,install,install,2734,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['install'],['install']
Deployability,"/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; insta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1486,install,installing,1486,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsupported by MBIS !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on !; ! line: 1871 !; ! The most recent 5 function calls were: !; ! psi::OEProp::compute_mbis_multipoles(bool) !; ! psi::OEProp::compute() !; ! !; !----------------------------------------------------------------------------------!; ```. It works fine with `def2-svp`, I doubt whether this is related to an earlier fix for auxiliary basis set for DZVP (https://github.com/psi4/psi4/pull/2134). . Best,; Pavan. Edit: Old PR updated to 2134",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:2572,update,updated,2572,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['update'],['updated']
Deployability,"/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:7331,install,install,7331,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7782,install,install,7782,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:15422,install,install,15422,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2850,Install,Installing,2850,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6392,Patch,Patches,6392,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Patch'],['Patches']
Deployability,"0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3650,install,installing,3650,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:1739,release,release,1739,https://psicode.org,https://github.com/psi4/psi4/issues/1325,1,['release'],['release']
Deployability,019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; insta,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2379,install,installing,2379,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"0395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, this is due to PR #1663, where I fixed an error in the initial displacement for the IRC. At step 22, the geometry is very close to the minimum, so the next step ends up raising the energy. The two IRCs then bounce around, with the reference IRC bouncing in the fourth decimal place and the current IRC bouncing in the fifth. This is enough bounce for the final energies to be outside convergence criteria. Unless somebody has the time and drive to improve the IRC termination cutoff in C-Optking, I recommend changing the reference value for now and investigating this in Py-Optking, whenever that comes out. Meanwhile, I have most of the occ tests fixed locally, but `ocepa-grad2` is proving more difficult. My Psi4Numpy converges with no problems, so the issue probably isn't in the coupled-DIIS approach itself... My current guess is that it's the fact that the ""residuals"" `occ` throws into DIIS aren't the residuals but the residuals divided by the MPPT-like denominators from the standard amplitude update algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:3006,update,update,3006,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,1,['update'],['update']
Deployability,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260131914:675,patch,patch,675,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914,3,"['patch', 'update']","['patch', 'updated']"
Deployability,"1) I would lean towards a Psi compiled one so that we know exactly what its doing and how it works. I think if anyone is tweaking `dftd3` they can handle a python-based system call.; 2) No reason not to patch it IMO, only difference between the two is more keywords after the patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220617126:203,patch,patch,203,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220617126,2,['patch'],['patch']
Deployability,"1-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4162,Install,Installing,4162,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; insta,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2417,install,installing,2417,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"1. Psi doesn't tabulate these, and I've mostly seen them for DFT. Scaling factors handy for getting oriented with a vib spectrum, but they're not uniquely determined for a method/basis.; 2. Yes, IR intensities are available as of psi4 1.6 in late May provided analytic gradients are available (as opposed to Hessian by finite difference of energies).; 3. I'm not sure what ""mode"" you were looking at. I can clarify if you post a link. Once upon a time, there was a `frequency(..., mode=(continuous|sow|reap))` but that had to do with farming out finite difference jobs and is now defunct anyways. There's `irrep` https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1511-L1517 that allows a partial frequency job for only a symmetry subset. Example here https://github.com/psi4/psi4/blob/master/tests/fd-freq-gradient/input.dat#L75 . There's no singling out of particular modes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509:487,continuous,continuous,487,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1225919509,1,['continuous'],['continuous']
Deployability,"1. Thanks for the update! What is the other library that has those capabilities? I can look into this, sounds helpful.; 2. I'm using Psi4 version 1.9.1. Should I be updating it to something else for more stability analysis capabilities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236#issuecomment-2444497182:18,update,update,18,https://psicode.org,https://github.com/psi4/psi4/issues/3236#issuecomment-2444497182,1,['update'],['update']
Deployability,"1.) Thank you, I read it from a graduate student thesis I remember summarizing it with different levels of basis sets and theories but definitely needed some validation on that front. . 2.) Awesome I will give it a shot and check it out, let you know if I run into any problems. . 3.) `mode=(continuous|sow|reap))` ah I think I got confused on the parameter meant. I thought it was a way to single out individual modes. . This is great and moves me a long! Thank you!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577:292,continuous,continuous,292,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577,1,['continuous'],['continuous']
Deployability,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8453,install,installed,8453,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,9,['install'],['installed']
Deployability,1.1.0 release eta,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:6,release,release,6,https://psicode.org,https://github.com/psi4/psi4/issues/608,1,['release'],['release']
Deployability,1.2 release notes updated. As this is likely the final version please read through them and ensure that all changes have been properly added!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-397891870:4,release,release,4,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-397891870,2,"['release', 'update']","['release', 'updated']"
Deployability,"1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6092,install,installed,6092,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,1.2rc2 was tagged last week. Please try it out and report problems here on GitHub. Linux installers and packages available from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-391862109:89,install,installers,89,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-391862109,2,['install'],"['install-', 'installers']"
Deployability,"1.3.1 on 1.3.x branch is assembled [compare](https://github.com/psi4/psi4/compare/v1.3...1.3.x) and its draft RN [here](https://github.com/psi4/psi4/releases/tag/untagged-d9164f626682f599d037). It fully passes CI locally. I'll spin up the c-b stack for testing, but windows for adding stuff is pretty much today, Wednesday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-481804831:149,release,releases,149,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-481804831,1,['release'],['releases']
Deployability,"1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; ├─ psi4-rt is installable with the potential options; │ ├─ psi4-rt [1.2|1.3|...|1.7] would require; │ │ └─ v2rdm_casscf [0.8 py27hbddea90_0|0.8 py35hbddea90_0|...|0.9 py39hf915834_9], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.5* , which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.6* with the potential options; │ │ ├─ python 3.6.10 would require; │ │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.10 would require; │ │ │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; │ │ ├─ python [3.6.10|3.6.12] would require; │ │ │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.13 would require; │ │ │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.13 would require; │ │ │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; │ │ ├─ python [3.6.2|3.6.3] would require; │ │ │ └─ openssl 1.0.* , which can be installed;; │ │ ├─ python 3.6.3 would require; │ │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ │ ├─ python 3.6.4 would require; │ │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ │ ├─ python [3.6.5|3.6.6] would require; │ │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ │ ├─ python 3.6.6 would requi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:2922,install,installed,2922,https://psicode.org,https://github.com/psi4/psi4/issues/2912,1,['install'],['installed']
Deployability,"10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2195,install,installed,2195,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be instal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5359,install,installed,5359,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"12 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible change was made in response to; CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>_.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:1795,Release,Release,1795,https://psicode.org,https://github.com/psi4/psi4/issues/1610,2,"['Release', 'release']","['Release', 'release']"
Deployability,"146fbbc437223786b7c970b50ddd2969be80d3fd.; Sorry, this should be a fully updated psi4. Last commit was 1/6/2017.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271911488:73,update,updated,73,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911488,1,['update'],['updated']
Deployability,14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: ur,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2536,install,installing,2536,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"157 | 53.02 | 0.88 | 7.828; HF | 71 | 116 | 17.96 | 0.30 | 4.081. Timings and Max RAM Usage for DF-MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | NAUX | Total (s) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 290 | 6.24 | 3.219; NH3 | 107 | 198 | 244 | 4.91 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; - [X] Computes disk DF-MP2-F12/3C(FIX) energy. ## Questions; - [ ] I am unsure if I have done the disk implementation correctly.; - [ ] The max RAM usage for the conventional is quite large. I could use some suggestions on how to get this down.; - [ ] The conventional MP2-F12/3C(FIX) is not as usable as I would like with the high max RAM usage and slow integral computation. DF-MP2-F12/3C(FIX) is recommended over the conventional.; - [ ] This version of DF-MP2-F12/3C(FIX) uses a more robust scheme than ORCA and MPQC for the density-fitting. . ##",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:2615,release,release,2615,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['release'],['release']
Deployability,"16:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:2941,install,install,2941,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['install'],['install']
Deployability,19.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2491,install,installing,2491,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1768,install,installing,1768,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3265,install,installing,3265,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2365,patch,patch,2365,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['patch'],['patch']
Deployability,2020 updates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2059:5,update,updates,5,https://psicode.org,https://github.com/psi4/psi4/pull/2059,1,['update'],['updates']
Deployability,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3750,install,installed,3750,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['install'],['installed']
Deployability,2:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3706,Install,Installing,3706,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"2_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5416,install,installable,5416,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installable']
Deployability,"3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9749,Update,Update,9749,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Update'],['Update']
Deployability,"3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:4142,Update,Update,4142,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Update'],['Update']
Deployability,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2079,Release,Release,2079,https://psicode.org,https://github.com/psi4/psi4/issues/1588,3,"['Release', 'configurat', 'install']","['Release', 'configuration', 'installed']"
Deployability,"31B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:8663,install,install,8663,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['install'],['install']
Deployability,"3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIRECT # An out-of-core, presorted algorithm using exact ERIs. # MOLDEN_WRITE true. }. optimize('scf', dertype='energy'). psi4 is installed through miniconda:. [root@titan3 2]# find /app/ -name psi4 -type f; /app/miniconda/pkgs/psi4-0.2.54-py27_gf997694/bin/psi4; /app/miniconda/bin/psi4; [root@titan3 2]# /app/miniconda/bin/psi4 --version; 0.2.54",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:5090,install,installed,5090,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['install'],['installed']
Deployability,"35,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True); Nmol1 = mol.fragments[0][1] - mol.fragments[0][0] + 1; Nmol2 = mol.fragments[1][1] - mol.fragments[1][0] + 1; ; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir37/asdf: (mp2d) git diff ../../psi4/driver/qcdb/psiutil.py; diff --git a/psi4/driver/qcdb/psiutil.py b/psi4/driver/qcdb/psiutil.py; index abb8e76..76eb6a7 100644; --- a/psi4/driver/qcdb/psiutil.py; +++ b/psi4/driver/qcdb/psiutil.py; @@ -291,7 +291,7 @@ def compare_arrays(expected, computed, digits, label, verbose=1):; ; ; def query_yes_no(question, default=True):; - """"""Ask a yes/no question via raw_input() and return their answer.; + """"""Ask a yes/no question via input() and return their answer.; ; *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; @@ -316,7 +316,7 @@ def query_yes_no(question, default=True):; ; while True:; sys.stdout.write(question + prompt); - choice = raw_input().strip().lower(); + choice = input().strip().lower(); if default is not None and choice == '':; return default; elif yes.match(choice):; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:3319,release,release,3319,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,1,['release'],['release']
Deployability,"360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19968,install,install,19968,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['install'],['install']
Deployability,"3AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:8452,install,install,8452,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['install'],['install']
Deployability,"3eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PSI_SCRATCH /path/to/existing/writable/l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3613,install,installing,3613,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ..,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2301,install,installing,2301,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) const (args#1=0,; args#0=std::shared_ptr (count -555219596, weak 1224731640) 0x7ffef53db730, c=0x55948f151ec0, __closure=0x55948e9b84e8) at /home/work/psi4/install/include/pybind11/pybind11.h:62; #3 pybind11::detail::argument_loader<psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int>::call_impl<void, pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, 0ul, 1ul, 2ul>(pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, pybind11::detail::index_sequence<0ul, 1ul, 2ul>) (f=..., this=0x7ffef53db750); at /home/work/psi4/install/include/pybind11/cast.h:1277; ```; so it seems to be crashing in the call; ```; free(mi_ibidx);; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606:3894,install,install,3894,https://psicode.org,https://github.com/psi4/psi4/issues/606,1,['install'],['install']
Deployability,"4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:6521,release,release,6521,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['release'],['release']
Deployability,4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460:2348,Install,Installing,2348,https://psicode.org,https://github.com/psi4/psi4/issues/460,2,['Install'],['Installing']
Deployability,4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/inc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460:1896,Install,Installing,1896,https://psicode.org,https://github.com/psi4/psi4/issues/460,2,['Install'],['Installing']
Deployability,"4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; occ_wfn = core.occ(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - CISD/cc-pVDZ via DETCI: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/pro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:11149,install,install,11149,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2333,Update,Update,2333,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Update'],['Update']
Deployability,4218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1809,install,installing,1809,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:8181,install,install,8181,https://psicode.org,https://github.com/psi4/psi4/issues/3159,2,['install'],['install']
Deployability,"49203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); ```. Input file for heptatriyne:; ```; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); ```. Output file for H2C-C5-CH2:; ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.9.1 release. Git: Rev {} zzzzzzz . D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codem",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:3053,release,release,3053,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['release'],['release']
Deployability,"4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void __cdecl psi::fnocc::DGESV(long &,long &,double *,long &,long *,double *,long &,long &)"" (?DGESV@fnocc@psi@@YAXAEAJ0PEAN0PEAJ100@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,long &)"" (?DGEMV@fnocc@psi@@YAXAEADAEAJ1AEANPEAN131231@Z) 中被引用; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:6385,Release,Release,6385,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['Release'],['Release']
Deployability,"4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2934,install,installed,2934,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; ├─ psi4-rt is installable with the potential options; │ ├─ psi4-rt [1.2|1.3|...|1.7] would require; │ │ └─ v2rdm_casscf [0.8 py27hbddea90_0|0.8 py35hbddea90_0|...|0.9 py39hf915834_9], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.5* , which can be installed;; │ ├─ psi4-rt 1.1 would require; │ │ └─ python 3.6* with the potential options; │ │ ├─ python 3.6.10 would require; │ │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.10 would require; │ │ │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; │ │ ├─ python [3.6.10|3.6.12] would require; │ │ │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.13 would require; │ │ │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; │ │ ├─ python 3.6.13 would require; │ │ │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; │ │ ├─ python [3.6.2|3.6.3] would require; │ │ │ └─ openssl 1.0.* , which can be installed;; │ │ ├─ python 3.6.3 would require; │ │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ │ ├─ python 3.6.4 would require; │ │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ │ ├─ python [3.6.5|3.6.6] would require; │ │ │ └─ open",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:2844,install,installed,2844,https://psicode.org,https://github.com/psi4/psi4/issues/2912,1,['install'],['installed']
Deployability,"55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:1276,install,install,1276,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['install'],['install']
Deployability,"57.a(function.o); > ""_PyDict_Type"", referenced from:; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::get_pytype() in export_mints.cc.o; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::check(_object*) in python.cc.o; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::get_pytype() in python.cc.o; > ; > boost::python::converter::pytype_object_manager_traits<&(PyDict_Type),; > boost::python::dict>::adopt(_object_) in libmints.a(basisset.cc.o); > boost::python::detail::dict_base::call(boost::python::api::object; > const&) in libboost_python-1_57.a(dict.o); > boost::python::detail::(anonymous; > namespace)::check_exact(boost::python::detail::dict_base const_) in; > libboost_python-1_57.a(dict.o); > ; > boost::python::detail::register_dict_pytype_ptr::register_dict_pytype_ptr(); > in libboost_python-1_57.a(dict.o); > ...; > ""_PyDict_Update"", referenced from:; > boost::python::detail::dict_base::update(boost::python::api::object; > const&) in libboost_python-1_57.a(dict.o); > ""_PyDict_Values"", referenced from:; > boost::python::detail::dict_base::values() const in; > libboost_python-1_57.a(dict.o); > ""_PyErr_Clear"", referenced from:; > boost::python::objects::instance_new(_typeobject_, _object_,; > _object_) in libboost_python-1_57.a(class.o); > boost::python::api::getattr(boost::python::api::object const&,; > boost::python::api::object const&, boost::python::api::object const&) in; > libboost_python-1_57.a(object_protocol.o); > boost::python::api::getattr(boost::python::api::object const&, char; > const_, boost::python::api::object const&) in; > libboost_python-1_57.a(object_protocol.o); > boost::python::objects::function::call(_object_, _object_) const in; > libboost_python-1_57.a(function.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131150834:6336,update,update,6336,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834,1,['update'],['update']
Deployability,"5_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. For sh/bash command-line use, add to shell or ~/.bashrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.sh; conda activate; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. installing: snsmp2-1.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3910,install,installing,3910,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"6) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4382,update,updates,4382,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['update'],['updates']
Deployability,"60; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:3480,Update,Updated,3480,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['Update'],['Updated']
Deployability,"64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; inst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1214,install,installing,1214,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"685693; O 2.81552768 -0.50840706 -1.42180252; O 3.61564541 1.27844179 0.09948727; O 2.95557380 -0.82533526 1.00298083; C 2.03019476 -1.93245912 1.04782605; C -1.66037059 -1.05786431 -0.87382233; C -1.39498496 -1.19960129 -2.34816003; C -2.65299201 -1.76249051 -0.27337471; H -2.37740040 -0.54585648 2.90523863; H 2.38954139 -2.56465364 1.84992540; H 1.02863634 -1.57685304 1.27002537; H 2.04236674 -2.46241236 0.09951447; H -2.15541649 -1.82673633 -2.80763054; H -0.41234738 -1.64107180 -2.50716877; H -1.37758315 -0.22482435 -2.83713913; H -3.27599978 -2.43724084 -0.84607768; S -0.34233722 2.35735393 -1.83532763; C 1.36095190 2.94818139 -1.81407535; H 1.71979201 3.09855604 -0.79815280; H 2.02802634 2.25554347 -2.32132745; H 1.39841688 3.90181231 -2.33199310; H 0.52648693 0.85272557 2.39744759; H -0.38901252 2.05630112 1.52833438; H -1.06736839 1.33094835 2.99083304; }. set {; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. gradient(""b97-3c""); ```. And here's what happens when I run the calculation:. ```shell; $ psi4 input.dat; PCMSolver fatal error.; In function computeS at line 51 of file /Users/runner/miniforge3/conda-bld/pcmsolver-split_1696645993753/work/src/bi_operators/IBoundaryIntegralOperator.cpp; S matrix is not positive-definite!; Consider changing the average area of the cavity finite elements.; Please report this issue: https://github.com/PCMSolver/pcmsolver/issues; ```. If I delete the PCM sections, the B97-3c gradient runs just fine. The molecule looks normal:. <img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/afa2ecd1-9890-4dc5-bf99-a1d7ae898d11"">. All calculations run on a MacBook Pro using Psi4 1.9.1 from conda-forge. (I know the message says to report this to [PCMSolver](https://github.com/PCMSolver/pcmsolver/issues) but that repository hasn't had any updates in 3+ years...)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202:2413,update,updates,2413,https://psicode.org,https://github.com/psi4/psi4/issues/3202,1,['update'],['updates']
Deployability,"6_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; install",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1094,install,installing,1094,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"7 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) const (args#1=0,; args#0=std::shared_ptr (count -555219596, weak 1224731640) 0x7ffef53db730, c=0x55948f151ec0, __closure=0x55948e9b84e8) at /home/work/psi4/install/include/pybind11/pybind11.h:62; #3 pybind11::detail::argument_loader<psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int>::call_impl<void, pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}&, 0ul, 1ul, 2ul>(pybind11::cpp_function::cpp_function<v",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606:2730,install,install,2730,https://psicode.org,https://github.com/psi4/psi4/issues/606,1,['install'],['install']
Deployability,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2009,install,install,2009,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['install']
Deployability,"73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2404,patch,patch,2404,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['patch'],['patch']
Deployability,7be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2788,install,installing,2788,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"8137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]; --> psi4.diatomic.anharmonicity(r,eng,'result.out'); ```. where I've added printing of first two lines to help me with debugging. I believe, that the problem occurs in the line `138` of `diatomic.py`, i.e. on the line; ```; we = 5.3088375e-11 * np.sqrt(d2/mu); ```. where, as we can see, is `d2/mu`, which is considered a `nan` by `numpy.sqrt()` function. I've tried it separately from Psi4 and its exhibiting the same behavior. . ```; >>> numpy.sqrt(-0.02414940264774275 / 1.1626325532182573e-26); __main__:1: RuntimeWarning: invalid value encountered in sqrt; nan; ```. Is there anything, that can be done to prevent this problem?. ---. ### My software versions:. * Ubuntu 18.10; * Psi4 1.3; * Python 3.7.3; * Numpy 1.16.2. ---. ### Full output file. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.3 release. Git: Rev {HEAD} 20e5c7e . R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Sunday, 14 April 2019 03:29PM. Process ID: 6064; Host: martin-pc; PSIDATADIR: /home/martin/miniconda/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. ---------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:5417,release,release,5417,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['release'],['release']
Deployability,"8570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:2396,pipeline,pipelines,2396,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['pipeline'],['pipelines']
Deployability,85_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1850,install,installing,1850,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"9 in a conda env using the ([recipe](https://github.com/conda/conda-recipes/tree/b9570c14d5a25ac88b98c6c597365bfcba4174ce/boost)) from the condo/conda-recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:1079,install,install,1079,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['install'],['install']
Deployability,"9 sec; Start 513: dftd3-version; 4/5 Test #513: dftd3-version .................... Passed 27.06 sec; Start 514: dftd3-nbody-cp-gradient; 5/5 Test #514: dftd3-nbody-cp-gradient .......... Passed 33.83 sec. 100% tests passed, 0 tests failed out of 5; ```; version control files have stuff in src and built forms; ```; > cat ../psi4/metadata.py ; __version__ = '1.7'; __version_long = '1.7+6ce35a5'; __version_upcoming_annotated_v_tag = '1.8a1'. def version_formatter(dummy):; return '(inplace)'; > cat stage/lib/psi4/metadata.py ; __version__ = '1.7'; __version_branch_name = ''; __version_cmake = '1.7.0.0'; __version_is_clean = 'True'; __version_last_release = '1.7'; __version_long = '1.7+6ce35a5'; __version_prerelease = 'False'; __version_release = 'True'. def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans. if __name__ == '__main__':; print(version_formatter(formatstring='all')); ```. So I think tarballs are roughly still working. But I can totally believe that either I'm working in an edge case or the two of you have found one. My closest suspects:; * perhaps you're in a repo that isn't the psi repo. I bet that'd defeat https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L50 that switches the version logic from git to tarball; * that version logic is tested for release tarballs only, not tarballs of random commits; * the increasing dependency on qcengine (which arose long after the versioning system design) for finite difference a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:3233,release,release,3233,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['release'],['release']
Deployability,"918142927521 8.89896e+00 1.32672e+01; 2 -44.34471482 -0.768567911 23.703776024 	 |	 @DF-RHF iter 96: -82.09144173388728 -1.58123e+01 2.94455e+00; 3 -54.88950966 10.544794837 5.931629640 	 |	 @DF-RHF iter 97: -71.21731980922226 1.08741e+01 9.71661e+00; 4 -54.22736096 -0.662148697 2.402303868 	 |	 @DF-RHF iter 98: -82.42645027945289 -1.12091e+01 4.89730e+00; 5 -54.39447930 0.167118338 0.473375823 	 |	 @DF-RHF iter 99: -87.52437583967071 -5.09793e+00 1.77052e+00; 6 -54.38119720 -0.013282092 0.077616032 	 |	 @DF-RHF iter 100: -83.77797990808088 3.74640e+00 3.68421e+00; 7 -54.38233829 0.001141084 0.008888873 	 |; 8 -54.38228834 -0.000049947 0.000967141 	 |	PsiException: Could not converge SCF iterations in 100 iterations.; 9 -54.38229124 0.000002894 0.000261106 	 |; 10 -54.38229074 -0.000000492 0.000050723 	 |	 Failed to converge.; ```. can see by adding this to ecosystem; ```; - name: Test Run, Spot, Run ECP; working-directory: ./objdir; run: |; export PATH=../install/bin:$PATH; #export KMP_DUPLICATE_LIB_OK=TRUE; psi4 ../tests/sapt-ecp/input.dat -o stdout; ```. messy output w/ and w/o integrals sharing on Linux; ```; > ll tmpscr; total 4124; -rw-rw-r--. 1 psilocaluser psilocaluser 53974 Nov 7 10:16 input.default.19272.180.npy; -rw-rw-r--. 1 psilocaluser psilocaluser 53994 Nov 7 10:16 input.monomerA.19272.180.npy; -rw-rw-r--. 1 psilocaluser psilocaluser 53994 Nov 7 10:16 input.monomerB.19272.180.npy; -rw-r--r--. 1 psilocaluser psilocaluser 3840 Nov 7 10:16 psi.19272.35; -rw-r--r--. 1 psilocaluser psilocaluser 1197240 Nov 7 10:16 psi.19272.dimer.193; -rw-r--r--. 1 psilocaluser psilocaluser 741624 Nov 7 10:16 psi.19272.dimer.194; -rw-r--r--. 1 psilocaluser psilocaluser 1211704 Nov 7 10:16 psi.19272.dimer.195; -rw-r--r--. 1 psilocaluser psilocaluser 3840 Nov 7 10:16 psi.19272.dimer.35; -rw-r--r--. 1 psilocaluser psilocaluser 3840 Nov 7 10:16 psi.19272.monomerA.35; -rw-r--r--. 1 psilocaluser psilocaluser 3840 Nov 7 10:16 psi.19272.monomerB.35; -rw-r--r--. 1 psilocaluser psilo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:17660,install,install,17660,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['install'],['install']
Deployability,: /home/work/psi4/psi4/include/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4/FCMangle.h; -- Installing: /home/work/psi4/psi4/include/psi4/psi4/psi4/psi4/psi4/psi4/psi4/psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460:1112,Install,Installing,1112,https://psicode.org,https://github.com/psi4/psi4/issues/460,2,['Install'],['Installing']
Deployability,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4807,install,install,4807,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['install'],['install']
Deployability,: LANL2DZ; Blend: LANL2DZ								 Blend: LANL2DZ; Number of shells: 15							 Number of shells: 15; Number of basis functions: 25						 Number of basis functions: 25; Number of Cartesian functions: 25						 Number of Cartesian functions: 25; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 1							 Max angular momentum: 1; 									 >; Core potential: LANL2DZ							 Core potential: LANL2DZ; Number of shells: 3								 Number of shells: 3; Number of ECP primitives: 13						 Number of ECP primitives: 13; Number of ECP core electrons: 10						 Number of ECP core electrons: 10; Max angular momentum: 2							 Max angular momentum: 2; 									 >; => Loading Basis Set <=							 => Loading Basis Set <=; 									 >; Name: (LANL2DZ AUX)								 Name: (LANL2DZ AUX); Role: JKFIT									 Role: JKFIT; Keyword: DF_BASIS_SCF							 Keyword: DF_BASIS_SCF; atoms 1-2 entry H line 18 file /Users/runner/work/psi4	 |	 atoms 1-2 entry H line 18 file D:\a\psi4\psi4\install\; atoms 3 entry O line 318 file /Users/runner/work/psi4	 |	 atoms 3 entry O line 318 file D:\a\psi4\psi4\install\; atoms 4 entry CA line 1250 file /Users/runner/work/psi4	 |	 atoms 4 entry CA line 1250 file D:\a\psi4\psi4\install\; 									 >; ==> Integral Setup <==							 ==> Integral Setup <==; 									 >; ==> DiskDFJK: Density-Fitted J/K Matrices <==					 ==> DiskDFJK: Density-Fitted J/K Matrices <==; 									 >; J tasked: Yes						 J tasked: Yes; K tasked: Yes						 K tasked: Yes; wK tasked: No						 wK tasked: No; OpenMP threads: 1						 OpenMP threads: 1; Integrals threads: 1						 Integrals threads: 1; Memory [MiB]: 375						 Memory [MiB]: 375; Algorithm: Core						 Algorithm: Core; Integral Cache: LOAD						 Integral Cache: LOAD; Schwarz Cutoff: 1E-12						 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12						 Fitting Condition: 1E-12; 									 >; => Auxiliary Basis Set <=							 => Auxiliary Basis Set <=; 									 >; Basis Set: (LANL2DZ AUX)							 Basis Set: (LANL2DZ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:4453,install,install,4453,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['install'],['install']
Deployability,": PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7954,install,install,7954,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,": The custom assignment operator for `Dimension` objects (`Dimension& operator=(const int*)`) is being deprecated. Unless someone speaks up, 1.10 may be the last release to have it.; - [x] API change: Cast-to-pointer operators for `Dimension` objects (`operator int*()` and `operator const int*() const`) are being deprecated. Unless someone speaks up, 1.10 may be the last release to have them.; - [x] Minor API change: Several constructors and member functions of `Dimension` are now using `size_t` instead of `int` for indexing:; −`Dimension::Dimension(int, const std::string&)` is now `Dimension::Dimension(size_t, const std::string&)`; −`void Dimension::init(int, const std::string&)` is now `void Dimension::init(size_t, const std::string&)`; −`int Dimension::n() const` is now `size_t Dimension::n() const`; −`int& Dimension::operator[](int)` is now `int& Dimension::operator[](size_t)`; −`const int& Dimension::operator[](int) const` is now `const int& Dimension::operator[](size_t) const`; −`const int& Dimension::get(int) const` is now `const int& Dimension::get(size_t) const`; −`void Dimension::set(int, int)` is now `void Dimension::set(size_t, int)`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Machine-readable docstrings have been added to `dimension.h` to improve suggestions offered by IDEs like VSCode; - [x] `size_t` is now used instead of `int` when dealing with array indexing. Python bindings have been updated to reflect the change in constructor arguments.; - [x] Local variables have been made `const` where possible; - [x] Deprecation notices have been added to `Dimension& operator=(int*)`, `operator int*()` and `operator const int*() const`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953:2604,update,updated,2604,https://psicode.org,https://github.com/psi4/psi4/pull/2953,1,['update'],['updated']
Deployability,: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:3097,install,installing,3097,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1719,install,installing,1719,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:1999,update,update,1999,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597,2,"['install', 'update']","['installing', 'update']"
Deployability,":call(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyDict_Type"", referenced from:; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::get_pytype() in export_mints.cc.o; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::check(_object*) in python.cc.o; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::get_pytype() in python.cc.o; boost::python::converter::pytype_object_manager_traits<&(PyDict_Type), boost::python::dict>::adopt(_object*) in libmints.a(basisset.cc.o); boost::python::detail::dict_base::call(boost::python::api::object const&) in libboost_python-1_57.a(dict.o); boost::python::detail::(anonymous namespace)::check_exact(boost::python::detail::dict_base const*) in libboost_python-1_57.a(dict.o); boost::python::detail::register_dict_pytype_ptr::register_dict_pytype_ptr() in libboost_python-1_57.a(dict.o); ...; ""_PyDict_Update"", referenced from:; boost::python::detail::dict_base::update(boost::python::api::object const&) in libboost_python-1_57.a(dict.o); ""_PyDict_Values"", referenced from:; boost::python::detail::dict_base::values() const in libboost_python-1_57.a(dict.o); ""_PyErr_Clear"", referenced from:; boost::python::objects::instance_new(_typeobject*, _object*, _object*) in libboost_python-1_57.a(class.o); boost::python::api::getattr(boost::python::api::object const&, boost::python::api::object const&, boost::python::api::object const&) in libboost_python-1_57.a(object_protocol.o); boost::python::api::getattr(boost::python::api::object const&, char const*, boost::python::api::object const&) in libboost_python-1_57.a(object_protocol.o); boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); boost::python::objects::function::add_to_namespace(boost::python::api::object const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); ""_PyErr_ExceptionMatches"", refere",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:5776,update,update,5776,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,1,['update'],['update']
Deployability,":regex. When I didn't specified usage of Python2 in the setup script command line, there were linking errors due to different versions of python in Psi (python3) and python in boost (python2). Without specifying '--chemps2 off' the compilation also fails to start. To help setup script in detecting boost libraries on my computer, I've tried to run setup with '--boost-incdir=/usr/include --boost-libdir=/usr/lib' options. I've also tried to find in automatically generated makefiles the invocation of ld (I wanted to add option '-lboost_regex' to linker), but I have not found.; Could you tell me, please, what is wrong? How can I fix this problem?. Thank you very much!; Alexander. Output of the 'setup' script:; [piton@avo psi4]$ ./setup --chemps2 off --python=/usr/bin/python2; cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3; -- Libraries : /lib64/libblas.so;/lib64/liblapack.so; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_SYSTEM_NATIVE_BLAS;HAVE_SYSTEM_NATIVE_LAPACK;FC_SYMBOL",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:1707,release,release,1707,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['release'],['release']
Deployability,"; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270:1111,install,install,1111,https://psicode.org,https://github.com/psi4/psi4/issues/1270,1,['install'],['install']
Deployability,"; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 .",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:1403,install,installing,1403,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2430,configurat,configuration,2430,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['configurat'],['configuration']
Deployability,; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3debe_0 ...; installing: sqlite-3.28.0-h7b6447c_0 ...; installing: asn1crypto-0.24.0-py36_0 ...; installing: atomicwrites-1.3.0-py36_1 ...; installing: attrs-19.1.0-py36_1 ...; installing: certifi-2019.3.9-py36_0 ...; installing: chardet-3.0.4-py36_1 ...; installing: cvxopt-1.2.0-py36hfa32c7d_0 ...; installing: dataclasses-0.6-py_0 ...; installing: decorator-4.4.0-py36_1 ...; installing: future-0.17.1-py36_0 ...; installing: idna-2.8-py36_0 ...; installing: jsonpickle-0.9.6-py36_0 ...; installing: more-itertools-7.0.0-py36_0 ...; installing: numpy-base-1.16.3-py36hde5b4d6_0 ...; installing: pcmsolver-1.2.1-py36h8733eb9_0 ...; installing: pluggy-0.11.0-py_0 ...; installing: py-1.8.0-py36_0 ...; installing: pycosat-0.6.3-py36h14c3975_0 ...; installing: pycparser-2.19-py36_0 ...; installing: pylibefp-0.4+f42ffb8-py36h5a86982_1 ...; installing: pysocks-1.7.0-py36_0 ...; installing: ruamel_yaml-0.15.46-py36h14c3975_0 ...; installing: six-1.12.0-py36_0 ...; installing: v2rdm_casscf-0.8-py36hc3560e4_6 ...; installing: wcwidth-0.1.7-py36_0 ...; installing: cffi-1.12.3-py36h2e261b9_0 ...; installing: deepdiff-3.3.0-py36_1 ...; installing: mkl_random-1.0.2-py36hd81dba3_0 ...; installing: pydantic-0.23-py36_0 ...; installing: setuptools-41.0.1-py36_0 ...; installing: cryptography-2.6.1-py36h1ba5d50_0 ...; installing: networkx-2.3-py_0 ...; installing: pint-0.9-py36_2 ...; installing: pytest-4.5.0-py36_0 ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:2670,install,installing,2670,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['install'],['installing']
Deployability,"; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2845,install,installed,2845,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"======================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/User",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:1228,install,install,1228,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5347,release,release,5347,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,3,['release'],['release']
Deployability,==================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13056,Install,Install,13056,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"====================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional informat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:9711,release,release,9711,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['release'],['release']
Deployability,"=> /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1955,install,installed,1955,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['installed']
Deployability,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:22,release,release,22,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374,1,['release'],['release']
Deployability,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:644,install,installation,644,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855,2,"['install', 'release']","['installation', 'release']"
Deployability,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:147,install,installs,147,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,5,"['install', 'release']","['install', 'installs', 'release']"
Deployability,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:43,install,installed,43,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,1,['install'],['installed']
Deployability,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:71,install,install,71,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590,2,['install'],"['install', 'installing']"
Deployability,"> > > An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?; > ; > > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.; > ; > I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. OK, you changed my hasty mind on that. What concerns me is that the user may, in some instances, not realize that the default active molecule is the one that optking is acting on and changing. But the upside convenience wins, I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584:91,update,updated,91,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584,4,"['patch', 'update']","['patches', 'updated']"
Deployability,"> > > Could also do an option like MAX_RADIAL_MOMENT, where all orders up to a given max order are computed just in case someone wants something higher than 4.; > ; > > Great suggestions @zachglick @jeffschriber, I will get them changed ASAP; > ; > If 2, 3, 4 are all that's ever wanted and there's trivial additional cost, I advocate always computing and storing them all. Fewer options, more cheap results always better. Good idea, @zachglick. Updated my code, tests all passed :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-767181617:446,Update,Updated,446,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-767181617,1,['Update'],['Updated']
Deployability,"> > > Do you have all the patches installed?; > > ; > > ; > > Define patches; > ; > Sorry, should have clarified. https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches. Wow, talking about a blast from the past.... haven't done this in over 20 years",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216:26,patch,patches,26,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071556216,4,"['install', 'patch']","['installed', 'patches']"
Deployability,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:660,patch,patch,660,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,1,['patch'],['patch']
Deployability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:1226,Release,Release,1226,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,2,['Release'],['Release']
Deployability,"> > Are you also zeroing out the diagonal for FMI in the UHF case? I looks like only the Fmi matrix is cleared there.; > ; > Yes, on lines 75-77. Look for the little patch of green _between_ the red. OK, now I see what you're doing. My only suggestion is that you modify the comment under RHF to read:. // This is because the amplitude update in RHF uses the full residual while the ROHF and UHF updates separate out the diagonal contributions from the Fock matrix [cf. Eqs. (1) and (2) of Stanton et al., J. Chem. Phys. 94, 4334-4345 (1991)].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703#issuecomment-1227100111:166,patch,patch,166,https://psicode.org,https://github.com/psi4/psi4/pull/2703#issuecomment-1227100111,3,"['patch', 'update']","['patch', 'update', 'updates']"
Deployability,"> > Do you have all the patches installed?; > ; > Define patches. Sorry, should have clarified.; https://www.mrcc.hu/index.php/download-mrcc/mrcc-binary-2/category/5-mrcc-patches",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117:24,patch,patches,24,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070626117,4,"['install', 'patch']","['installed', 'patches']"
Deployability,"> > I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more.; > ; > This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated.; > ; > @andyj10224, if you rebase as of this morning, the clang CI lane will work again. @loriab @JonathonMisiewicz I updated my qcel/qcng, and the mp2 hessian tests now pass. Now I just need to compile the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083:227,update,update,227,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083,2,['update'],"['update', 'updated']"
Deployability,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:899,release,release,899,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815,1,['release'],['release']
Deployability,"> > Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.; > ; > Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?. Where are you trying to set this at? The first thing that comes to mind is the functional can be ""locked"" so that when a threaded V matrix is computed we can correctly replicate the `SuperFunctional` to compute on each thread. It may be worth double checking that you have the correct locking guards around this like other setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219:86,update,updated,86,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219,1,['update'],['updated']
Deployability,"> > Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.; > ; > I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals... This seems like a difficult issue to get right.; At this point I'd prefer to give a warning in the manual and output about the orbital energy field and print whatever the respective theory module puts there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-671863488:228,toggle,toggle,228,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-671863488,1,['toggle'],['toggle']
Deployability,"> > Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today.; > ; > Thanks for the update! Psi isn't using the Python frontend, but maybe there's more quirks involved. Oh, that was another bug, which Miguel fixed last night. You should be able to use it now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754868565:31,hotfix,hotfix,31,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754868565,2,"['hotfix', 'update']","['hotfix', 'update']"
Deployability,"> > ah! thanks for that. it looks like it's called in `get_core_size();`, this issue is probably resolved if 229 assigns in both outcomes.; > ; > Um, @schiebermc, you mean you are fine with the patch in #1667 as-is..?. Yes. Although others who are actively moving the code around might want to consider if there are any repercussions to calling `AO_core()` with the default `memory_`. I do not think so. . `get_core_size()` is just used when considering which object to build, MemDFJK or DiskDFJK in: https://github.com/psi4/psi4/blob/a6305a1b251d0812ecc93438bc907a91964b0ca9/psi4/src/psi4/libfock/jk.cc#L172. As you pointed out, this call had the unintended consequence of reassigning `AO_core_`. Another solution could be to make sure `memory_` gets set (so the default is not used) before:; https://github.com/psi4/psi4/blob/a6305a1b251d0812ecc93438bc907a91964b0ca9/psi4/src/psi4/libfock/MemDFJK.cc#L68. Unfortunately, this might have resulted in the wrong code (disk based MemDFJK) being used where `required_core_size_` \in [256M, memory_].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503753281:194,patch,patch,194,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503753281,1,['patch'],['patch']
Deployability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:930,configurat,configurations,930,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,1,['configurat'],['configurations']
Deployability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:1206,Release,Release,1206,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,2,['Release'],['Release']
Deployability,"> @susilehtola, I've switched the build-from-src libxc target to v6.1 somewhere, and I'll make sure that makes it into the psi v1.8 release. c-f packaging is already at v6.1. Is there anything else to do in psi4 libxc-wise? Otherwise, I'll bump this to v1.9. No need to merge this in since the libxc master branch API breakage will still happen at some point. This is just here so that if people want to try out the master branch, they can...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1904#issuecomment-1521696864:132,release,release,132,https://psicode.org,https://github.com/psi4/psi4/pull/1904#issuecomment-1521696864,1,['release'],['release']
Deployability,"> Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's ldd and psi4's (envname/lib/pythonx.x/site-packages/psi4/core.so). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Ah, I ran into this for the first time recently with another module. > Indeed, if I install psi4 the way you listed into p4env and then create another env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (sys.path.append('/path/to/p4env/lib/python3.6/site-packages/), I can import psi4 just fine. Okay, I'll give this a shot. > The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Is there anything actionable with this or do I sit tight until there's a new psi4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345406827:386,install,install,386,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345406827,4,"['install', 'release', 'rolling']","['install', 'release', 'rolling']"
Deployability,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:77,release,release,77,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664,2,"['install', 'release']","['installed', 'release']"
Deployability,"> Are there any Python bindings that hit the deprecated fns?. I don't think so? They are not used in `py::class_<Dimension>` in `export_mints.cc`, if there are other places to look for Python bindings let me know and I will check. > This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. Perhaps, but I delayed it because. 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282:434,release,released,434,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282,1,['release'],['released']
Deployability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:227,integrat,integration,227,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['integrat'],['integration']
Deployability,"> Are you also zeroing out the diagonal for FMI in the UHF case? I looks like only the Fmi matrix is cleared there. Yes, on lines 75-77. Look for the little patch of green _between_ the red.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703#issuecomment-1227086053:157,patch,patch,157,https://psicode.org,https://github.com/psi4/psi4/pull/2703#issuecomment-1227086053,1,['patch'],['patch']
Deployability,"> Are you building Psi4 for packaging or for single-deployment use?. For packaging. > Psi4 does check for external packages . If does, but it falls back on the bundled version when it doesn't find the external package for some reason when it actually exists. There should be a clear way to require to use external packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715965:52,deploy,deployment,52,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715965,1,['deploy'],['deployment']
Deployability,"> As for the others, the samples were last generated pre-1.1. Something else killed the knob, perhaps the Py-side inversion. To clarify, `samples/` are generated for each release and after #2364 will be generated for each PR. It's the `output.ref` set that are largely circa pre-1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010185016:171,release,release,171,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010185016,1,['release'],['release']
Deployability,"> Before we merge, just wanting to confirm if the right conda install libint2 -c psi4/label/dev is available?. I hope so -- they should be: https://anaconda.org/psi4/libint2/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341:62,install,install,62,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730250341,1,['install'],['install']
Deployability,"> Blocking this PR until we can resolve the question of ""is `TwoBodyAOInt` responsible for sieving, or is `ERISieve`""? Happy to talk about this after ACS Chicago. To add an update to this, some of us (Jonathan, I, and others) discussed this issue at PsiCon 2022. We came to the conclusion that TwoBodyAOInt would be responsible for sieving, and that ERISieve will be removed from Psi4. As use of ERISieve is seemingly localized to the PKJK algorithm, I will be the one responsible for its removal. Until then, this PR will likely be further delayed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695#issuecomment-1345254017:173,update,update,173,https://psicode.org,https://github.com/psi4/psi4/pull/2695#issuecomment-1345254017,1,['update'],['update']
Deployability,"> Can you elaborate on how DDD affects our ability to output to file?. Sure. For everything but analytic single points (effectively, any composite, finite difference, or many-body expansion), the individual pieces are sent to qcengine as a qcschema atomicinput job that returns a qcschema atomicresult (that has the usual output file printout as a field). So all the usual output is collected, but some of the most important stuff (the atomicresult) is in a dict, which would be weird for an output file. Also, the psi4 output file isn't a wonderfully behaved object for being opened and closed and reset, potentially for dozens of jobs running at the same time. It looks like the individual pieces outputs are being accumulated in the outfile now in DDD (see below). But logging _is_ a natural object for accumulating the results of potentially multiple libraries into one file or stream, so it seems the right trajectory to get started along for distributed calcs. ```; gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for continuous mode; local_options={; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1082191447:1236,continuous,continuous,1236,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1082191447,1,['continuous'],['continuous']
Deployability,"> Cool, this looks really neat! I was thinking this might take a bit to get in, but looks fairly integrated as is. Thanks! It's the first time I try to contribute to psi4, and I found it actually rather easy to; add my project given the online documentation :+1: . > IIRC Armadillo is header only which makes things significantly easier to interface too. I don't think the inclusion of the library for this extension will be an issue. Unfortunately, it is _not really_ header-only... Probably I'll switch to something header-only (like Eigen) if I find the time. Anyways, the inclusion of armadillo has not been a problem until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668:97,integrat,integrated,97,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668,1,['integrat'],['integrated']
Deployability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:41,install,install,41,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,4,['install'],"['install', 'installation', 'installed']"
Deployability,> Do you have all the patches installed?. Define patches,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070621077:22,patch,patches,22,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070621077,3,"['install', 'patch']","['installed', 'patches']"
Deployability,"> For conda n00bs like myself who want a speclfic command to execute, your Dockerfile would now look like the following (using python3.9 since that is what comes with miniconda3:4.10.3). Can confirm this works. @loriab if you suggest any changes to the command below just let me know. You can do it all at once (in fact for new conda environments, it's always slightly preferred to use a single command line so that the solver knows all the requirements at once. so, `conda install psi4=1.5 python=3.9 libint2=*=hc9558a2_9 pytest=5 pcmsolver=*=py39h6d17ec8_2 -c psi4` should do nicely. >> For solid reproducibility, the psi4conda installers have the advantage. > What exactly do you mean by this? Is there a preferred way to install psi4 other than conda install psi4=1.5 -c psi4? Pardon my lack of depth with the nuances of conda distributions. oh, there's a single-file installer (""installer"" off https://psicode.org/installs/v16/) that fits the analogy `miniconda:""conda install python""::psi4conda:""conda install python psi4""` . Not what you'd want if psi4 is one of many changing envs, but it'd be fine for docker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151767997:474,install,install,474,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151767997,9,['install'],"['install', 'installer', 'installers', 'installs']"
Deployability,"> Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though. Note that SAD hasn't been using those values in a long time; instead it runs spin-restricted calculations. Also, SAD isn't symmetry aware at the moment, which is a problem especially for transition metals and lanthanides and actinides where e.g. the s and d orbitals are very close in energy and the energy differences between different configurations are just eV. The proper way to do it is to impose symmetry, so that the occupations can be controlled. This is the way it is in PySCF; the ground states are from fully numerical calculations I did in https://journals.aps.org/pra/abstract/10.1103/PhysRevA.101.012516",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679:809,configurat,configurations,809,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679,1,['configurat'],['configurations']
Deployability,"> Great!; > ; > If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default. That does not suffice. In addition to setting the grid with e.g. `mf.grids.atom_grid = (100,590)` you need to turn pruning off explicitly with `mf.grids.prune = None`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356:151,integrat,integration,151,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356,1,['integrat'],['integration']
Deployability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:40,update,update,40,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,3,"['install', 'update']","['install-scipy-or-disable-accelerator', 'installing', 'update']"
Deployability,"> Hey all, I have updated the code to account for the two density matrices present in UHF.; > ; > I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance.; > ; > I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz). Link to my tests:. https://docs.google.com/spreadsheets/d/1PDt8LPHo_kWV-ukY3Zm24qJUc-QLf5Cv7CXCKkYzFvs/edit?usp=sharing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847:18,update,updated,18,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847,1,['update'],['updated']
Deployability,"> Hi @kzinovjev just checking over this again and noticed that the [populations](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2099-L2104) and [widths](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2182-L2188) might already be printed can you check they match what you are printing?. Hi @jthorton, currently only the atomic charges (so, the sum of populations of all the shells) and the widths of the last shell for each atom are printed. In contrast, with this patch the full result of MBIS density fitting is printed, so populations and widths of all the shells. This is helpful if one wants to split the atomic charges into core/valence shells, as in [MEDFF](http://dx.doi.org/10.1021/acs.jctc.6b00969), [IPML](https://doi.org/10.1063/1.5009502) or [EMLE](https://doi.org/10.1021/acs.jctc.2c00914) methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943:588,patch,patch,588,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943,1,['patch'],['patch']
Deployability,"> Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`.; > ; > However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; > ; > ```; > (gdb) bt; > #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; > #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; > #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; > #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; > #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; > v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; > v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:420,hotfix,hotfix,420,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['hotfix'],['hotfix']
Deployability,"> Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in [#2154 (comment)](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) were pretty small. Let me know if you need advice for the rebase. I need to run, some tests, if the database after the changes is still fine since I didn't manage to put up automated tests, yet.; Running, whole test set might add significant overhead to the already time-consuming test suite. Are there any recommendations on `pytest.mark` to qualify it for the `heaviest` league?; I imagine, running some small-basis SAPT0 for mb case, and UMP2 for CP/un-CP one. > remove no_com, etc. if not really; - [x] done . > clarify in docstrings whether 1.9 is R_eq or AA; - [x] done, I think. See the latest changes `R=0.9R_eq`. > allow uncp in ACTV rather than hardcoding both it and ACTV_CP to cp, unless there's a good reason not to; - [x] done, TBH I've worked exclusively with mid-bond version with CP, I don't know if unCP with mid-bonds makes even sense. Need someone with `unCP` experience to comment on that. > I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.; - [x] rebased. as for DRYifing two files, I don't think it's desired to couple these two files, as they should be in-principle, runnable standalone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595:140,release,release,140,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595,1,['release'],['release']
Deployability,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:702,install,installations,702,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414,1,['install'],['installations']
Deployability,"> I add to use the conda-forge/label/libint_dev channel for libint. Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Upon importing psi4 I noticed a bunch of prints that wasn't here before:. You guessed correctly -- I'm trying to debug some infernal Windows relative path behavior. > I tested the psi4 package on linux-64 using the staged-recipes artifacts and it works perfectly. . Great, good to hear!. ------. Note to anyone reading this thread seeking Mac packages: most of the iterations I skip Mac, so look for a CI run that took a long time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202:206,release,released,206,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202,2,['release'],['released']
Deployability,"> I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. I agree. We know how to coerce any MKL into a correct answer. Poor cholesky-basis is exonerated and instead lauded as the coal mine canary. Time to get PRs moving again. > (CI runs on intel for now, right?). I don't think we have any guarantee of hardware brand or instruction set. Agree that should try threaded non-MKL again someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633708219:277,canary,canary,277,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633708219,1,['canary'],['canary']
Deployability,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1035,Update,Update,1035,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,1,['Update'],['Update']
Deployability,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:210,configurat,configuration,210,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,2,"['configurat', 'patch']","['configuration', 'patched']"
Deployability,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343774871:383,install,installs,383,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871,2,['install'],"['installed', 'installs']"
Deployability,> I do think we should try to get the changes into one psi4 release cycle. Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070:60,release,release,60,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070,1,['release'],['release']
Deployability,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:150,integrat,integration,150,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,2,['integrat'],['integration']
Deployability,"> I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more. This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated. @andyj10224, if you rebase as of this morning, the clang CI lane will work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530:218,update,update,218,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530,1,['update'],['update']
Deployability,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:71,update,updates,71,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935,1,['update'],['updates']
Deployability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:933,update,updated,933,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,1,['update'],['updated']
Deployability,"> I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started. Hmmmm, I see. Thank you for looking into this! I just rebased and pushed again, so we will see if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983:193,upgrade,upgrades,193,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983,1,['upgrade'],['upgrades']
Deployability,"> I just updated the docs too. One thing I am confused about, why is the `screening` keyword only in the sapt module?. Very good question. @zachglick [added the option](https://github.com/psi4/psi4/commit/e1977af9ae69b77ca518c3169efb23018b51ffb0), so perhaps he can shed some light on this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898701048:9,update,updated,9,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898701048,1,['update'],['updated']
Deployability,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:359,install,installed,359,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,1,['install'],['installed']
Deployability,"> I may not be following this right. I'd say the state of the psi4 active mol during an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on should be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. I want to make sure that the active molecule behavior is as expected. Whatever molecule the driver uses will be updated. This will be either the active molecule OR the passed molecule. If the molecule is passed the active molecule is not updated in any way. All the asserts pass here. ```python; import math. molecule h2o {; pubchem:water; }. molecule h2o2 {; pubchem:hydrogen peroxide; }. # quick comparison. h2o2 is active molecule; h2o2_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_nre, active_nre). # optimize h2o2 (active molecule) expect repulsion energy to match; E = optimize(""scf/sto-3g""); h2o2_opt_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre). # optimize h2o. nuclear repulsion does not match. active molecule is still h2o2; # Currently (next commit will fix) h2o2 would be optimized by this call. (optking side issue); E = optimize(""scf/sto-3g"", molecule=h2o); h2o_opt_nre = h2o.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre); ```; The whole wrong molecule being optimized thing is an optking side issue that is fixed on optking/master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555:263,update,updated,263,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555,3,['update'],['updated']
Deployability,"> I really want to know how you stumbled onto this. :-) Yeah, so ""superbigam"" is now 7-7-4-12-7-5, and when I built that in Dec for 2.8.0 I only set the 12 for eri3, forgetting my own advice to make eri2 equal eri3. So rebuilding for 2.8.2, I knew I had to add symbols to the configuration.cc patch for eri2. Started searching patterns and realized I had P twice in the spdfg string. Then realized libmints (where I thought I had copied it from) had the same trouble. Then realized that libint had a mix of troubles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288:276,configurat,configuration,276,https://psicode.org,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288,2,"['configurat', 'patch']","['configuration', 'patch']"
Deployability,"> I see no problem in bumping to CMake 3.15+: it's quite easy to get a recent version of CMake. I don't either, for users. Anyone successfully updated cmake on lgtm?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-761829181:143,update,updated,143,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-761829181,1,['update'],['updated']
Deployability,"> I see that this PR passes without needing to update any tests. Do you think some QCFractal tests would be helpful to have, especially now that we have the distributed driver? I know psi4 has tests that use QCSchema, QCElemental, and QCEngine. Yeah, I think a QCFractal Snowflake test on each of findif, manybody, composite would good, provided solving the dependency env isn't too painful, since a database, etc. are needed. There's unlikely to be a conda pkg for the `next` qcf until September at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123:47,update,update,47,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123,1,['update'],['update']
Deployability,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:188,install,installing,188,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,1,['install'],['installing']
Deployability,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:66,install,install,66,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418,5,"['install', 'upgrade']","['install', 'installation', 'upgrade']"
Deployability,"> I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; > Please check the updated main post. What do you mean? If you run OO-CC, does the checkpoint file contain the original HF orbitals, or the OO-CC orbitals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939:152,update,updated,152,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670512939,1,['update'],['updated']
Deployability,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:473,update,update,473,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151,1,['update'],['update']
Deployability,"> I would indeed like to, yes. 👍 . > The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?. Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059:328,pipeline,pipelines,328,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059,2,['pipeline'],"['pipelines', 'pipelines-linux']"
Deployability,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:1191,update,update,1191,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,1,['update'],['update']
Deployability,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:738,update,updates,738,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['update'],['updates']
Deployability,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:727,update,updated,727,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966,1,['update'],['updated']
Deployability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:269,release,release,269,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,3,"['release', 'update']","['release', 'updated']"
Deployability,> I'm having second thoughts about this PR now. Should we deprecate the old constructors first? This PR will require changes in Forte as well. options as I see them. I do think we should try to get the changes into one psi4 release cycle. * (n/c) leave convenience fns as-is; * (deprecate) leave convenience fns operable but add deprecation message; * (upgradehelper) leave convenience fn header in place but have it print a message with necessary changes; * (remove) remove convenience fn header and body,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715:224,release,release,224,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715,2,"['release', 'upgrade']","['release', 'upgradehelper']"
Deployability,"> I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself. I fuzzily remember being able to successfully run the tests with a version from a couple years ago, so 2020-22 era MRCC was OK I think, but I remember having to install the patches, otherwise neither Psi4 or Molpro would work with MRCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542:296,install,install,296,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542,2,"['install', 'patch']","['install', 'patches']"
Deployability,"> If we're updating basis sets, I'll need to re-check the PR, and this belongs in 1.5. They're not updated; the sets in the BSE are identical to the ones in Psi4. Only the formatting has been fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-883574735:99,update,updated,99,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-883574735,1,['update'],['updated']
Deployability,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149716:466,patch,patched,466,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716,1,['patch'],['patched']
Deployability,"> In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:128,update,update,128,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,2,['update'],"['update', 'updated']"
Deployability,"> In what way is the copy from <builddir>/objdir/stage to CMAKE_INSTALL_PREFIX going awry?. It installs the files into the inner stage directory location, see above files that retained their directory ```/wrkdirs/usr/ports/science/psi4/work/.build/stage```.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214425842:95,install,installs,95,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214425842,1,['install'],['installs']
Deployability,"> Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?. Yes. Lori's comment was ""trick you can use to prevent accidentally stumbling into this again,"" not a fix. `scf::HF::compute_fcpi` probably needs a validation check...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818:59,patch,patched,59,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818,1,['patch'],['patched']
Deployability,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:883,release,release,883,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956,1,['release'],['release']
Deployability,"> Is there a reason this issue still needs to be open?. Hi, Jonathon. `conda install psi4 -c psi4` will install 1.7 version, not the 1.8. Is there any reson that the default `conda install psi4 -c psi4` not install the latest production version 1.8?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583:77,install,install,77,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583,4,['install'],['install']
Deployability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:704,install,install,704,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,1,['install'],['install']
Deployability,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:46,configurat,configuration,46,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,2,"['configurat', 'install']","['configuration', 'install']"
Deployability,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:54,install,installation,54,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815,3,['install'],"['install', 'installation', 'installed']"
Deployability,"> Let me make sure I understand this:; > ; > The old behavior was that l2_shells_ was being populated at object construct time. This makes perfect sense if various fields used in constructing the libint2::shell were const, but they are not. Instead, we're migrating the libint2 construction to its own function so it can be called if these fields ever get changed, as #3036 does.; > ; > Is that all correct?. Yes. The point is that if you change data in BasisSet, the data in the Libint2 shells don't update, and one needs the ability to refresh that data as well based on the master data in BasisSet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3037#issuecomment-1695975377:501,update,update,501,https://psicode.org,https://github.com/psi4/psi4/pull/3037#issuecomment-1695975377,1,['update'],['update']
Deployability,> Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release. Fine by me.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1337772443:90,release,release,90,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337772443,1,['release'],['release']
Deployability,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:100,update,update,100,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373,1,['update'],['update']
Deployability,"> Not really. The internal stage directory was a compromise so that developers could continue to never have to type make install and was a prerequisite to them approving the transition from GNUMake to CMake at all. This very difficult to relate to. Why can't they just use a simple script like this:; ```; $ cat ~/bin/make-and-install; #!/bin/sh. make ""$@"" && DESTDIR=`pwd`/stage make install; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325804931:121,install,install,121,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325804931,3,['install'],['install']
Deployability,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:209,integrat,integrates,209,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492,2,"['integrat', 'release']","['integrates', 'release']"
Deployability,"> Only things that come to mind are comment out `import forte` as unneeded and fix the quotes around `scf` (may just be font). Posting code by triple backtick rather than screenshot makes it possible to copy. Thank you. I tried what you suggested, but the result is still the same. Also, I ran the example that came with the psi4/tests folder, and it turned out to be the same, so I thought it might be something wrong with my installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665:427,install,installation,427,https://psicode.org,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665,1,['install'],['installation']
Deployability,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:344,rolling,rolling,344,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['rolling'],['rolling']
Deployability,"> Perhaps you've got strict channel priority active?. I would suspect this is the case, if the channel order is changed to ; ```; channels:; - psi4; - conda-forge; ```; , I was able to install on linux and the tests were also passing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164977280:185,install,install,185,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164977280,1,['install'],['install']
Deployability,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:9,update,update,9,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769,1,['update'],['update']
Deployability,"> Psi4 does not have X2C analytic gradients. If a previous version of Psi4 let you calculate them, that was > probably a bug, and they would not have agreed with the numerical gradients. That is really a bad news, I have done some kind of x2c related calculations in Psi4 version 1.4, I will recheck!. > ...It's _probably_ possible to add X2C analytic gradients to Psi4, with updates in Libint. This is good news!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3151#issuecomment-2034324517:376,update,updates,376,https://psicode.org,https://github.com/psi4/psi4/issues/3151#issuecomment-2034324517,1,['update'],['updates']
Deployability,"> Reference values for PCM excitation energies can be found here. ~~I guess for the tests to work, the above stuff with `nonequilibrium` needs to be integrated first~~ 😅; Yes...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292:149,integrat,integrated,149,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292,1,['integrat'],['integrated']
Deployability,"> Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class. Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691:84,update,updated,84,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691,1,['update'],['updated']
Deployability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:997,release,release,997,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,1,['release'],['release']
Deployability,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:1044,update,updated,1044,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,1,['update'],['updated']
Deployability,"> Thanks. The question of ""when do we _use_ an incremental build?"" needs to be settled (which it isn't yet - see Susi's comment) before I can approve this. Hi Jonathon, I just implemented Susi's suggestion about the `d_convergence`. I also updated the necessary tests (`density-screen-1` and `density-screen-2`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-943469458:240,update,updated,240,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-943469458,1,['update'],['updated']
Deployability,"> The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Are you using the latest psi4-dev package (.dev22)? That adds the `mpfr` and `eigen` deps to the build environment. I definitely acknowledge that the `Libint2Config.cmake` is not handling `find_dependency` right for eigen and mpfr (really, gmp) yet. I do have cmake edits for those locally, but I have not yet bent cmake to my will. So having the conda packages in place patches the problem. Does your system package have a `Eigen3Config.cmake`? Maybe expand CMAKE_MODULE_PATH?. > Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. All of Psi4 master is now running Libint2 -- any references to Libint1 or Libint1_t (a hack to allow both to coexist) are only waiting for removal. > (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.). Thanks for the reminder. I've just edited it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125:193,install,installed,193,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125,3,"['install', 'patch', 'update']","['installed', 'patches', 'updated']"
Deployability,"> The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; > ; > ```; > conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; > ```. Dear Philip,. Thanks so much for your information",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136:70,install,install,70,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136,2,['install'],['install']
Deployability,"> The only question I have is about the use of DIIS in e.g. coupled-cluster. There, one typically does bare updates combined with some DIIS iterations in-between. Is this completely unrelated to `DIIS_MIN_VECS`?. No. Correlation methods that use DIIS have their own `DIIS_MIN_VECS` keyword and use that to decide when to call the DIIS extrapolater. This is why I only deprecated the SCF version of the keyword.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010208672:108,update,updates,108,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010208672,1,['update'],['updates']
Deployability,"> The other files are split based on the components. I guess we could in theory split the complete XC functionals exposed by libxc into the other categories, but this way they are all kept together and can be updated easier. So I guess if you want a hybrid, you have to check two files (as opposed to several), which is not that terrible. Yes, and hybrid metas one might look for in three files. Without merging all into one file, I agree the present organization is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454:209,update,updated,209,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454,1,['update'],['updated']
Deployability,"> The other major issue is the docs. I'll need to update the section describing excite state psivars, but @loriab, how do you feel about grouping psivars together? See discussion https://github.com/psi4/psi4/pull/2462#discussion_r822344906. I'd still strongly favor something like the below. It lets the variables (n,m,h,i) be defined in the definition, and new methods can join existing psivar entries. Also just less visual clutter when all but the methods line up. What do you think?. ```; .. psivar:: ADC ROOT n TOTAL ENERGY; TDDFT ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY; CCSD ROOT n TOTAL ENERGY; ... def incl n. .. psivar:: TDDFT ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY; CCSD ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY. def incl n, m, h, i; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593:50,update,update,50,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593,1,['update'],['update']
Deployability,"> The pull has been corrupted with extraneous changes. You're welcome to heal the git history by whatever procedure seems best to you. But if you don't know what that might be, you could do a fresh clone from master locally, set up origin and upstream, update it to psi4/psi4:master (`git pull --rebase upstream master`), check out a new branch (`git checkout -b matsizecheck`), edit just your one function in `matrix.cc`, commit that, then *force push* to the branch associated with this PR. So assuming `git remote -v` has `origin` pointing to GH:aquaticseatard/psi4 and `upstream` pointing to GH:psi4/psi4, then you'd `git push origin matsizecheck:master --force`. That will return this PR to one commit of just your changes. (Note that if you did the previous command without the `--force`, git would complain about history and suggest you pull. Pulling here is fatal and the cause of the history contamination. You *want* to overwrite history. It's fine as it's only your own, not a shared, branch.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1267125697:253,update,update,253,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1267125697,1,['update'],['update']
Deployability,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:942,release,release,942,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012,1,['release'],['release']
Deployability,"> The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule.; > ; > This is the call. `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`; > ; > optking takes the molecule here in the driver and uses a default fallback instead: ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`; > ; > The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655:720,update,updated,720,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655,3,"['patch', 'update']","['patches', 'updated']"
Deployability,"> There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. Interesting. This does not ring a bell for me. I take the question to be ""given a hessian and the current forces (beyond the first step) should you update the hessian with those forces before using them to calculate the step?"" Can you point to the code? IDK, probably best answer is whatever works better in practice and doesn't cause problems. Actually, it's possible I did this because I learned to avoid hessian updating when displacements are very small (or the geometries are very close). Perhaps I didn't want to update hessian until I knew the step size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139:566,update,update,566,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139,2,['update'],['update']
Deployability,"> These release notes will be relative to 4.0beta5 from July 2013. I think it would also be beneficial to have a high-level list of additional methods since PSI3, not necessarily in the Release Notes though, but possible close to the table of methods in the documentation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232778689:8,release,release,8,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232778689,2,"['Release', 'release']","['Release', 'release']"
Deployability,"> This makes sense, but I would highly recommend an explicit test that rebuilds various quantities at this point.; > ; > Thanks for finding and fixing!. That's a good idea, I updated the test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112#issuecomment-782913552:175,update,updated,175,https://psicode.org,https://github.com/psi4/psi4/pull/2112#issuecomment-782913552,1,['update'],['updated']
Deployability,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:834,configurat,configuration,834,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['configurat'],['configuration']
Deployability,"> Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Changes ORBSYM (the symmetry of each orbital) from Psi4's internal; > convention of ordering irreps to the traditional FCIDUMP ordering; > - Adds ISYM (the symmetry of the overall wavefunction); > - Updates the fcidump test to match new ordering; >; > Questions; >; > - Does this change in convention break anything in Psi4? (Or anything; > that uses Psi4?); > - Since I altered the tests to match the output, how to verify; > correctness of this change?; >; > Checklist; >; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1453; > Commit Summary; >; > - added helper function, correct ORBSYM output; > - added isym to fcidump, updated tests; >; > File Changes; >; > - *M* psi4/driver/p4util/fcidump.py; > <https://github.com/psi4/psi4/pull/1453/files#diff-0> (29); > - *M* tests/fcidump/Ne.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-1> (3); > - *M* tests/fcidump/Ne.C1.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-2> (1); > - *M* tests/fcidump/Ne.C1.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-3> (1); > - *M* tests/fcidump/Ne.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-4> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1453.patch; > - https://github.com/psi4/psi4/pull/1453.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1453>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdjvy0hVobCbhOq3qA4biT25rt88rk",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754:1346,update,updated,1346,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754,1,['update'],['updated']
Deployability,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347904720:404,install,installing,404,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720,1,['install'],['installing']
Deployability,"> Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before. Done",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322:2,Update,Update,2,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1074139322,1,['Update'],['Update']
Deployability,"> Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?; > ; > If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case. I don't know what behavior is expected; energy expectation value might be one option but there might be different definitions for the Fock operator. Most of all, you can't reorder the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670696518:228,toggle,toggle,228,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670696518,1,['toggle'],['toggle']
Deployability,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-183429072:33,install,installed,33,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072,2,"['install', 'release']","['installed', 'releases']"
Deployability,"> What happens if a user runs a computation, toggles whether X2C is on, and then calls the wavefunction's compute_gradient method?. Apparently even the non-rel returns a `psi4.core.RHF`, and since that hasn't had it's `compute_gradient` implemented, the parent `Wavefunction`'s `Analytic gradients are not available for this wavefunction.` is thrown. Not what I was expecting (or probably what someone using a C++ API was expecting), but it does shut down a way to get the wrong answer by evading the Py APi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875:45,toggle,toggles,45,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869752875,1,['toggle'],['toggles']
Deployability,> What happens if you use a tighter integration grid?. Thanks for your quick reply. I set it to a pretty large number (I have no experience in it) and got better results:. ```; set dft_spherical_points 1202; set dft_radial_points 150; ```. ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 6 x 3 . 1 2 3. 1 0.01761265286365 -0.03021731225771 -0.01636085243187; 2 -0.00198025542796 0.00069379354137 -0.01217743689404; 3 -0.00684467846030 0.00863180515130 0.01631841052017; 4 -0.00782888971966 0.00500566642863 0.00531395359842; 5 -0.00015059931846 0.01071543959728 0.00493669924504; 6 -0.00080880896432 0.00517347208476 0.00197251031653; ```. This seems to resolve the problem. XC:. ```; -XC Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.023415204354 -0.034617520267 0.016571065968; 2 0.004264668622 -0.082393045737 0.110542261946; 3 0.057056513665 -0.084998504340 -0.155592261007; 4 -0.165444201018 0.054818800402 -0.007755576608; 5 0.081555904871 0.141482887041 0.033036030615; 6 -0.000848669520 0.005710247436 0.003201763433; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978,1,['integrat'],['integration']
Deployability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:45,integrat,integration,45,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,2,"['integrat', 'release']","['integration', 'release']"
Deployability,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:155,integrat,integrating,155,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908,1,['integrat'],['integrating']
Deployability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:1799,update,updated,1799,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,1,['update'],['updated']
Deployability,"> Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Please update `.ref` files. Probably not worth adding `.log` files, but that's a @loriab question. > There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. . Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318:38,update,updated,38,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318,2,['update'],"['update', 'updated']"
Deployability,"> Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today. Thanks for the update! Psi isn't using the Python frontend, but maybe there's more quirks involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754748537:29,hotfix,hotfix,29,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754748537,2,"['hotfix', 'update']","['hotfix', 'update']"
Deployability,"> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083:140,release,released,140,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483940083,2,['release'],['released']
Deployability,"> Yes, this is all due to the switch to L2. L2 can't be bundled with Psi4 since it doesn't come bundled with Psi4 in the first place. All libraries are dynamic in Fedora, and everything has to be compiled from pristine sources. Caveat: my current L2 knowledge is the equivalent of on-a-tape-drive-in-a-basement-archive, so don't hold me to anything. I think Psi4 could be built against pristine source, latest release L2 with a little cmake patching psi4-side. But producing and hosting two variants (gss/sss) isn't something you/Fedora want to get into, I expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203246662:410,release,release,410,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203246662,2,"['patch', 'release']","['patching', 'release']"
Deployability,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:211,release,releases,211,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932,1,['release'],['releases']
Deployability,"> Your internal stage directory isn't copied properly into the real stage directory for some reason. That's strange -- it's a pretty straightforward copy, https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L318 from internal <builddir>/stage/ to final $PREFIX. Though Windows requires a little more https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32. > Are you able to make the internal stage directory optional based on a cmake option?. Afraid not. In the CMake superbuild, that's where all the component installs accumulate. And devs like it because they never need install. The internal stage is defined here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L204 , and you could try manipulating that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214291922:594,install,installs,594,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214291922,2,['install'],"['install', 'installs']"
Deployability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:466,install,installation,466,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,3,['install'],"['installation', 'installed']"
Deployability,"> `${DESTDIR}` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:444,install,installation,444,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,3,"['Install', 'install']","['Installing', 'install', 'installation']"
Deployability,"> ah! thanks for that. it looks like it's called in `get_core_size();`, this issue is probably resolved if 229 assigns in both outcomes. Um, @schiebermc, you mean you are fine with the patch in #1667 as-is..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503734011:185,patch,patch,185,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503734011,1,['patch'],['patch']
Deployability,"> hello, I'll try to work on the replies and changes to have it completed by the end of the week, might I ask what's the timeframe we're working here before 1.4 stable release?. We're probably looking at rc3 asap and stable 1.4 next week. So end-of-the-week is fine. As I see it, the items are:; * remove no_com, etc. if not really needed; * clarify in docstrings whether 1.9 is R_eq or AA; * allow uncp in `ACTV` rather than hardcoding both it and `ACTV_CP` to cp, unless there's a good reason not to; * the suggestion about deduplicating the two files might be possible, but I don't think it's worth it for a db; * I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272:168,release,release,168,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-870728272,1,['release'],['release']
Deployability,> is this a 1.4 target?. Not sure. Maybe better for a 1.4.x release since it's not a bug fix but a quality of life change.; edit: Well it does fix a bug with providing `npy` files for restarts.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-871427517:60,release,release,60,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-871427517,1,['release'],['release']
Deployability,"> long int? Why not just size_t which is quite literally the size type. No reason, I guess. Some modules used `long int` before we went on a `size_t` fest a few years ago. I can switch them (and update the printouts from M*B to G*B) if folks concur. It would be shorter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212073307:195,update,update,195,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212073307,1,['update'],['update']
Deployability,"> oh no, not again. Yes, one had to download patched files for the previous version from their homepage. See [the issue about the 2020 release](https://github.com/psi4/psi4/issues/1866) for additional information on ""the previous version"" and Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645:45,patch,patched,45,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077599645,2,"['patch', 'release']","['patched', 'release']"
Deployability,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:138,install,install,138,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648,1,['install'],['install']
Deployability,"> that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running get_funcs.pl. The easiest way to force the list to be regenerated is to remove the build directory and rebuild. aha, thanks. you can also just add a blank line to top-level CMakeLists.txt to retrigger cmake config. LRC-BOP now working. >> I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc. > What do you mean?. I mean I'm trying to build out the conda-forge arch matrix for libxc (https://github.com/conda-forge/libxc-feedstock/pull/8) so that psi4 windows can pull a pre-built libxc instead of doing an internal build. So I may have merge requests in your intervening week before v5.1 tagging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197:92,update,updated,92,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197,1,['update'],['updated']
Deployability,"> the read_options blurb needs an update https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1418-L1424 . If you want to save for a later PR, ok with me.; > ; > otherwise, lgtm. Ah, nice catch. Updating that now. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2924#issuecomment-1520037369:34,update,update,34,https://psicode.org,https://github.com/psi4/psi4/pull/2924#issuecomment-1520037369,1,['update'],['update']
Deployability,> this needs a new pcmsolver release and a merge of [DEShawResearch/sns-mp2#7](https://github.com/DEShawResearch/sns-mp2/pull/7). The PCMSolver release will most likely happen this evening.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037#issuecomment-735641889:29,release,release,29,https://psicode.org,https://github.com/psi4/psi4/pull/2037#issuecomment-735641889,2,['release'],['release']
Deployability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:41,integrat,integratorxx,41,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,2,['integrat'],['integratorxx']
Deployability,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:563,Integrat,Integration,563,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['Integrat'],['Integration']
Deployability,">. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix for BrianQC in #3185 as suggested by @wszs. ## CI Fixes; - [x] mac eco: with cmake v3.30.0, FindPython got seemingly unrelated updates, and now it `Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS NumPy)` as tested with longstanding np v1. I suspect an interaction with pb11 (hasn't greenlit 3.30 yet). so codedeps is restraining cmake to <=3.29; - [x] win eco, Part 1: so after the GHA win image issue (`Unexpected compiler version, expected Clang`) got fixed, we started seeing `error: capturing a structured binding is not yet supported in OpenMP`. That seems to be https://github.com/llvm/llvm-project/pull/80216 where a syntax warning in clang v18 collides with a MSVC header that L2 includes. That warning was shifted in clang v19 to only fire within OMP loops rather than generically, but v19 isn't released and the fix hasn't ported back to v18, so the only sol'n is to use v17, which we're now requesting from conda. Note that the Azure Win is asking for v17 directly from Chocolatey, so that's why it was ok.; - [x] win eco, Part 2: so we have clang v17 from conda and can get past libmints, then we hit `error: use of undeclared identifier 'omp_set_max_active_levels'` in sapt.cc . This is the only use of this in the code, and the error probably has to do with limited omp support by windows. Fortunately, it seems that passing the path to the `intel-openmp`-provided `omp.h` which is in the weird dir `${PREFIX}\opt\compiler\include` rather than letting it find the clang-provided omp.h did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link against the random lib stashed on GH, and the build can be far more self-contain",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:1072,release,released,1072,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['release'],['released']
Deployability,">/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 115, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 79, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(; ^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/libmintsbasisset.py"", line 635, in pyconstruct; mol = Molecule(mol); ^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 143, in __init__; self._internal_from_dict(molrec, verbose=verbose); File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 1529, in _internal_from_dict; fragment_separators = np.array(molrec['fragment_separators'], dtype=np.int); ^^^^^^; File ""/usr/lib/python3/dist-packages/numpy/__init__.py"", line 284, in __getattr__; raise AttributeError(""module {!r} has no attribute ""; AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. The important part (I think) being `AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?`. According to the Debian bug (<https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1027216>), ""This is because, numpy upstream in; 1.24.0, finally decided to expire <https://numpy.org/doc/stable/release/1.24.0-notes.html#:~:text=The%20deprecation%20for%20the%20aliases> some deprecations introduced in 1.20.0 <https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated> (released almost 2 years ago)."". It this a known problem, and possibly already fixed in master or later branches? At least the one quoted above got changed for master in f5b7cf967 (with a rather unhelpful commit message)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:2724,release,release,2724,https://psicode.org,https://github.com/psi4/psi4/issues/2865,3,['release'],"['release', 'released']"
Deployability,">= 1.12 is very reasonable as it's a few years old, and I think pins like >= 1.16 are likely to happen elsewhere. Following your suggestion, conda chokes with more errors than fit on my terminal's history, but mamba complains about . ```; Problem: package ambertools-20.0-py37h18738c5_0 requires netcdf-fortran >=4.5.2,<4.6.0a0, but none of the providers can be installed; ```. yet here's a 4.5.3 online: https://anaconda.org/conda-forge/netcdf-fortran/files / https://anaconda.org/conda-forge/netcdf-fortran/files/modal/info/5f8e0b60a58f0d0a54b46bb2. hdf5 1.10.6 seems to be in the recent psi4 builds, so that shouldn't be the issue. Maybe it's the fortran stuff, it's confusing how and why `libgfortran`/`libgfortran4`/`libgfortran5` all coexist at once.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532:362,install,installed,362,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718357532,1,['install'],['installed']
Deployability,">> An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way. I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808:88,update,updated,88,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808,4,"['patch', 'update']","['patches', 'updated']"
Deployability,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:507,release,released,507,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600,1,['release'],['released']
Deployability,">> I do think we should try to get the changes into one psi4 release cycle. > Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?. I think deprecation warnings (with code still functional) need to be in at least one release. So the code can be broken as soon as ~Dec (after 1.7.0 release). But what I was meaning to say with ""get the changes into one psi4 release cycle"" was let's aim to get all the immediate-breaks and/or notifications in before 1.7.0 so that downstream users have the info to do a single overhaul after 1.7.0. Keep pinging me if this doesn't make sense :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160:61,release,release,61,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160,4,['release'],['release']
Deployability,">> Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release. > Fine by me. Me, too. Only TODO is the options semi-reversion. Sorry for the extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1337785055:91,release,release,91,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337785055,1,['release'],['release']
Deployability,">> Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Ok no problem and I understand your point. Would that prevent you from merging psi4 in staged-recipes before that?. I don't think it should be a problem; there's no software barrier to merging, and I think I have good arguments if there's reviewer concerns. Possibly I'll try to arrange to merge psi4 from staged-recipes into a `conda-forge/label/psi4_dev` channel so there isn't a funny psi4 `v1.8a1.dev80` around.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111:141,release,released,141,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483943111,2,['release'],['released']
Deployability,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276211311:546,install,installation,546,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311,1,['install'],['installation']
Deployability,@BradenDKelly Any updates?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-956201019:18,update,updates,18,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-956201019,1,['update'],['updates']
Deployability,"@CDSherrill . Oh, and if an error's raised but not caught, it just shows the traceback and triggers coffee:. ```; PsiException: Could not converge SCF iterations in 4 iterations. Failed to converge. Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:384,patch,patch,384,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,4,['patch'],['patch']
Deployability,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260128691:127,patch,patch,127,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691,3,"['patch', 'update']","['patch', 'updated']"
Deployability,"@CDSherrill Here's a numpy-free input, should you want to test. Problem is NUM_ROOTS, not loop or zmat. ```; memory 20 Gb. molecule H2 {; 0 1; He; He 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; ## NUM_ROOTS 5; basis cc-pvdz; num_roots 2 # toggle this on/off for badness; }. rlist = [1.00, 10.1, 0.5]. for r in rlist:; H2.R = r; energy('fci') # or cisd; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-96099675:262,toggle,toggle,262,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96099675,1,['toggle'],['toggle']
Deployability,"@CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound. | program | fc | scf | singles | mp2corl | mp2tot |; | --- | --- | --- | --- | --- | --- |; | occ | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | detci | fc | -25.94361432 | | -0.06094168 | -26.00455600 |; | qchem | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | molpro | fc | -25.94361432 | -0.00054735 | -0.05936497 | -26.00297929 |. ```; $molecule; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; $end. $rem; JOBTYPE sp; unrestricted false; n_frozen_core fc; scf_guess sad; BASIS cc-pVdZ; basis2 6-31g; correlation mp2; THRESH 12; SCF_CONVERGENCE 8; SYM_IGNORE TRUE; SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end; ```. ```; molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7; set reference rohf. set qc_module detci # toggle detci/occ; energy('mp2'); ```. ```; memory,200,m; nosym; noorient; angstrom; geometry={; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9. SET,CHARGE=1; SET,SPIN=1. basis=cc-pVDZ. rhf; rccsd; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311:1580,toggle,toggle,1580,https://psicode.org,https://github.com/psi4/psi4/issues/311,1,['toggle'],['toggle']
Deployability,"@ChayaSt As explained [here](https://github.com/psi4/psi4public/wiki/1_Obtaining#clonepsi4public) you should be cloning using the `--recursive` flag. If you cloned without that flag, you should run `git submodule update --init --recursive` **prior** to running the `setup` script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169077006:213,update,update,213,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169077006,1,['update'],['update']
Deployability,"@Diazonium, you are right. Is there any way can solve this problem without upgrade?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788#issuecomment-578132699:75,upgrade,upgrade,75,https://psicode.org,https://github.com/psi4/psi4/issues/1788#issuecomment-578132699,1,['upgrade'],['upgrade']
Deployability,"@Harvey the immediate answer is you need to update your compiler; however; the repeated occurrence of this problem suggests it may be necessary to; revisit the decision to use C++11. @developers what versions of compilers are we willing to support? The; decision to start using C++11 limits us to Intel15 for full compliance (or; Intel13 for about 90% compliance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:44,update,update,44,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['update'],['update']
Deployability,"@Hassenky , I now have considerable confidence that a `conda update/install psi4 pychemps2 hdf5=1.8.16` will work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-229992074:61,update,update,61,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-229992074,2,"['install', 'update']","['install', 'update']"
Deployability,"@Ioriab https://github.com/xianyi/OpenBLAS/pull/1536 will work accurately only if your compiler support C11, other wise it will fall back to former behavier.; Ubuntu 14.04 doesn't support C11, but Ubuntu 16.04 support this.; What's your compiler's version? If it is too low, please upgrade it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-392238207:282,upgrade,upgrade,282,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-392238207,1,['upgrade'],['upgrade']
Deployability,@JonathonMisiewicz I just updated the docstring. Thanks for the poke!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744#issuecomment-1282959715:26,update,updated,26,https://psicode.org,https://github.com/psi4/psi4/pull/2744#issuecomment-1282959715,1,['update'],['updated']
Deployability,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:771,release,releases,771,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,1,['release'],['releases']
Deployability,"@JonathonMisiewicz This PR is ready for review. I added linK tests for RHF, UHF, and ROHF, updated the documentation on LinK in scf.rst, as well as sources in bibliography.rst, and ran all C-Tests. Doc Compilation and Pytests pending.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945:91,update,updated,91,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945,1,['update'],['updated']
Deployability,"@JonathonMisiewicz looks like most things worked except one of the linux builds failed for an issue that I don't think is related to my patch:. ```CMake Error at /usr/local/share/cmake-3.24/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS Interpreter; NumPy) (found suitable version ""3.8.10"", minimum required is ""3.8""); ```. Not sure how to proceed here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317:136,patch,patch,136,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317,1,['patch'],['patch']
Deployability,"@JonathonMisiewicz you're correct. All coordinates below 1 were brought to zero. A quick update should fix it, or you may be able to wrangle the output of `mol.print_out()` to suit your needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1954#issuecomment-658158803:89,update,update,89,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658158803,1,['update'],['update']
Deployability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:117,install,installed,117,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,7,"['configurat', 'deploy', 'install', 'patch', 'update']","['configuration', 'deploy-preview', 'installed', 'patch-', 'update', 'updates']"
Deployability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:147,install,installation,147,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,3,['install'],"['installation', 'installs']"
Deployability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:36,update,update,36,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['update'],['update']
Deployability,"@PhillCli thank you very much for your detailed answer. The material you pointed me to is exactly what I needed and it's leading to good results. I will provide an update with the details of my implementation for anyone who might find it useful later, but I will close the issue for now. Thanks again from a new grad student!. Best, . hypefolder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3124#issuecomment-1912263189:164,update,update,164,https://psicode.org,https://github.com/psi4/psi4/issues/3124#issuecomment-1912263189,1,['update'],['update']
Deployability,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:223,deploy,deployment,223,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,1,['deploy'],['deployment']
Deployability,"@TiborGY is right. Even though you've set ""uhf"", that switches to ""uks"" behind the scenes (so you're not having to set DFT in two places). When I release the error you hit, the further error shows: . ```. Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uks', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !-----------------------------------------------------------!; ! !; ! Stability analysis not yet supported for XC functionals. !; ! !; !-----------------------------------------------------------!; ```. Agree that the existing error looks contradictory. I've adjusted it to show:. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; --> psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol). !----------------------------------------------------------------------------------!; ! !; ! Stability analysis root following is only available for unrestricted Hartree-- !; ! Fock, not present UKS !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718:146,release,release,146,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1125639718,1,['release'],['release']
Deployability,"@amjames Could you modify `ccdensity` so that it writes the AO density to `ref_wfn`'s Da/Db?. @tovrstra Creation of the OPDM is not standardized across the different modules at the moment. Typically, setting `set opdm true` will build the OPDM; however, it is not always clear if `Da` is updated. If @amjames can update the Da/Db attributes for the `cc` modules we may be able guarantee that all Wavefunctions coming from a `property` call have a Da/Db that is associated with the called method. This should be guaranteed for all valid `property` modules besides `cc` at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258843529:288,update,updated,288,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258843529,2,['update'],"['update', 'updated']"
Deployability,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182886143:55,release,released,55,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143,7,['release'],"['release', 'released']"
Deployability,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235422113:113,configurat,configuration,113,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113,1,['configurat'],['configuration']
Deployability,"@andysim I agree that `size_t` is probably a better solution, but I will have to take a closer look to say for sure. . @lazaroid I agree that there are probably more int overflows to be tracked down in DPD, any that you find you are welcome to patch I will go hunting as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685#issuecomment-297214526:244,patch,patch,244,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297214526,1,['patch'],['patch']
Deployability,"@andysim I believe this is correct, do you concur?. @SebWouters You seem to have a pretty good handle on exactly where this error occurs, would you mind making a PR to patch this up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158:168,patch,patch,168,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449605158,1,['patch'],['patch']
Deployability,"@andysim Thanks, I added the path to this library but it doesn't fix the issue:; ```; export DYLD_LIBRARY_PATH=/opt/intel/lib:/usr/local/lib/gcc/8/; source ~/.bash_profile; ```. I'm now trying the installation suggested by @hokru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614787323:197,install,installation,197,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614787323,1,['install'],['installation']
Deployability,"@andysim Updated your algorithm, please review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231352079:9,Update,Updated,9,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231352079,1,['Update'],['Updated']
Deployability,"@andysim We may have run out of people able to review this. Going to pull it in as this is this is a versioned WIP. We should be minting the ""version 1"" Schema soon so can update this in a week or so under the guise of a bug fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-387221219:172,update,update,172,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-387221219,1,['update'],['update']
Deployability,"@andysim Yes. The 'installed' simint library should have a file `include/simint/vectorization/vector_config.h`. There is also one under the (simint) build directory under `stage`. This should define which vectorization you are using. @loriab Maybe you didn't completely clear out the build directory before switching the vectorization type? I still think that would work, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356793933:19,install,installed,19,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356793933,1,['install'],['installed']
Deployability,"@andysim the potential provided by @MartinBeseda (see figure) has a slight dip at around 4.50 angstrom, and the mean of the provided radii puts it around 3.5 there. That's my take on this.; ![issue-1600](https://user-images.githubusercontent.com/5336995/56111506-82ef6a80-5f58-11e9-8435-3803035cb374.png). As for the plotting issue - I wouldn't know, as I didn't install matplotlib into that environment. I can have a look later, but it is confusing that it wouldn't work, when it calculates all spectroscopic constants properly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483124279:363,install,install,363,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483124279,1,['install'],['install']
Deployability,@ashutoshvt If you are delayed with other things it might be wise for us to just patch up first derivates and get that in. We can work on the rest in other PR's.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-347011768:81,patch,patch,81,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-347011768,1,['patch'],['patch']
Deployability,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198786718:339,deploy,deploying,339,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718,1,['deploy'],['deploying']
Deployability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:77,install,install,77,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,7,['install'],"['install', 'installation', 'installations']"
Deployability,"@bozkaya Yes, we updated this file and `molden_write true` works for all OO and DCFT methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-190775724:17,update,updated,17,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-190775724,1,['update'],['updated']
Deployability,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-193199034:834,TOGGLE,TOGGLE,834,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034,2,['TOGGLE'],['TOGGLE']
Deployability,"@bwb314 : Your recent update (a5facd8) to libpsio/filemanager.cc causes a build error with icpc 15.3:. ```; /home/crawdad/src/psi4/src/lib/libpsio/filemanager.cc(82): error: more than one instance of overloaded function ""std::to_string"" matches the argument list:; function ""std::to_string(long long)""; function ""std::to_string(unsigned long long)""; function ""std::to_string(long double)""; argument types are: (int); std::string filenum = std::to_string(fileno);; ```. std::to_string is C++11 and **should** accept an `(int)` argument, so I'm wondering if this is an inconsistent implementation in the Intel 15+ compiler.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/220:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/issues/220,1,['update'],['update']
Deployability,@cdsgroup Can you double check that the above patch would be correct? If so we can go ahead and make this change.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/621#issuecomment-280013153:46,patch,patch,46,https://psicode.org,https://github.com/psi4/psi4/issues/621#issuecomment-280013153,1,['patch'],['patch']
Deployability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:96,install,installed,96,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,4,"['configurat', 'install', 'update']","['configuration', 'installed', 'update', 'updates']"
Deployability,"@chrinide, @patrashantigopal, @sjayellis, I've built a new dftd3 that fixed segfaults on a Linux system (whereas many linux systems were fine with the existing `3.2.1_<stuff>_0` dftd3 pkg). Would you `conda update dftd3 -c psi4/label/dev` to get the new executable (it'll be a `_0` to `_1`) update, try it, and report back success or still failing, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587#issuecomment-481897683:207,update,update,207,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-481897683,2,['update'],['update']
Deployability,"@devinamatthews Thanks for sharing the patch. Speaking of science, I am not sure if your example was a test or production job but I would be careful with third-order correlation energies in cc-pVDZ basis. See [https://www.ncbi.nlm.nih.gov/pubmed/17186479](url) for details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491:39,patch,patch,39,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491,1,['patch'],['patch']
Deployability,@devinamatthews This sounds great until @bozkaya can respond here. Would you mind patching this into Psi4 master?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562578029:82,patch,patching,82,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562578029,1,['patch'],['patching']
Deployability,"@dgasmith . Yes, because:; - OpemMP 2.0 need signed integers for the loops, but `size_t` is `unsigned long int`, so it does not compile.; - OpenMP 2.0 doesn't have `update` clauses for `omp atomic`, but it is implicit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419084243:165,update,update,165,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419084243,1,['update'],['update']
Deployability,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-351739145:664,pipeline,pipeline,664,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145,1,['pipeline'],['pipeline']
Deployability,"@dgasmith I do not know. But probably not. If that is the case, patches are welcome, the project tends to be very receptive to PRs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390205517:64,patch,patches,64,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390205517,1,['patch'],['patches']
Deployability,"@dgasmith I never did. I was playing with fixes, but those got stymied by direction dependent subgroups. Still, this is item number three on my hit list of bugs, and by far easier to fix than items one and two. I have a paper to prioritize, but I can hopefully include this as a bug fix between the feature freeze and 1.3 release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488:322,release,release,322,https://psicode.org,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488,1,['release'],['release']
Deployability,@dgasmith I updated to support MDI 1.0 in commit 736ac2c. The build failed due to reasons that I believe are independent of this PR. I'll rebase and see if that fixes things.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-593419816:12,update,updated,12,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-593419816,1,['update'],['updated']
Deployability,"@dgasmith MSVC is not a must for building stuff on Windows. So far I have only had negative experiences with it, and I tend to use GCC on Windows as well. (MinGW-w64, in the form of TDM-GCC, sadly TDM-GCC seems abandoned, but as long as GCC 5.1.0 is OK, it is probably one of the easiest solutions). . At the moment I do not have time to look into this, but in general it should be doable, make and CMake does work on Windows, so as far as the C++/Fortran side is concerned I expect no issues that would be impossible to overcome. (I/O may or may not need some ifdefs and Windows specific code). I have no idea though how the python integration would work, maybe it would work relatively painlessly, maybe it would turn out to be a nightmare. The world of python dependencies and especially numpy/BLAS/LAPACK interactions can be a royal pain in the arse to work out, even on Linux, in my experience.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381751281:633,integrat,integration,633,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381751281,1,['integrat'],['integration']
Deployability,"@dgasmith OK, that works. Just trying to get things sorted for an upcoming workshop (mid-July) and come up with an ""authoritative"" set of commands for the students to install everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492357454:167,install,install,167,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492357454,1,['install'],['install']
Deployability,@dgasmith The example output in PR description is the corresponding print out for updated `v.cc` in 8 threads.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-313728409:82,update,updated,82,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-313728409,1,['update'],['updated']
Deployability,"@dgasmith To bring OEProp out to python should probably wait for another update. This one was to address problems related to #504 and I think that is satisfied. The OEProp code is being called for (possibly) multiple states, and in order to move the OEProp stuff out to python would mean storing the OPDM for each state. I would rather move the OEProp stuff out to python at a point where the loop over states can be dealt with in python as well. . So yes, I am going to wait for another update to move the OEProp Python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259133221:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259133221,2,['update'],['update']
Deployability,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818205:108,integrat,integration,108,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205,1,['integrat'],['integration']
Deployability,@dgasmith no idea; the problem is that since Psi4 has been picking up new dependencies left and right I haven't had the opportunity to update the Fedora package...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822:135,update,update,135,https://psicode.org,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822,1,['update'],['update']
Deployability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:30,upgrade,upgrade,30,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['upgrade'],['upgrade']
Deployability,"@dgasmith, do you need me to update the branch to the current master ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387#issuecomment-222881740:29,update,update,29,https://psicode.org,https://github.com/psi4/psi4/pull/387#issuecomment-222881740,1,['update'],['update']
Deployability,"@dgasmith, rolling back to 1.1 is fairly involved. Can commenting out the three `pragma omp`s in superfunctional.cc test the same effect?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395093963:11,rolling,rolling,11,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395093963,1,['rolling'],['rolling']
Deployability,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:137,release,release,137,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088,3,"['patch', 'release', 'update']","['patch', 'release', 'update']"
Deployability,"@dgasmith, what do you think of going ahead and merging this in now, with a follow-up in a couple days addressing 150, the binary, and keyword tweaks? This PR itself works nicely in its own right, and it'd be easier to test the outlying binary w/o having to apply this PR as a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223824090:277,patch,patch,277,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824090,1,['patch'],['patch']
Deployability,"@drhaney I made a few comments to your work, a few notes:; - Your comments only have the new basis sets, was the new G3 module intended as well?; - Most of the comments are aimed at removing global options. Globals are now semi-deprecated within Psi4 and will be completely removed in an update. ; - This is one of the first modules that will take extensive use of our option passing update, you will probably collide with a few errors. Let us know and we will get them fixed up.; - Thanks for writing this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-205789593:288,update,update,288,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205789593,2,['update'],['update']
Deployability,"@edeustua Good to know. I think #442 should fix this, but we can certainly test it out after that patch drops.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232528562:98,patch,patch,98,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232528562,1,['patch'],['patch']
Deployability,@fevangelista A-ha! You did not run `git submodule update --init --recursive` your submodule is still pointing to the previous revision of the PCM module. ; I wrote some notes on the workflow when submodules are involved [here](https://github.com/psi4/psi4public/wiki/External-subprojects-using-Git-and-CMake),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171442967:51,update,update,51,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171442967,1,['update'],['update']
Deployability,"@fevangelista yes that would be easy, but it would still be numerically unstable. Wait for a few hours for the next arXiv update to see the correct solution ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1759#issuecomment-558278222:122,update,update,122,https://psicode.org,https://github.com/psi4/psi4/pull/1759#issuecomment-558278222,1,['update'],['update']
Deployability,"@hmacdope happy to. I am currently working on a similar PR for r2scan-3c and others: https://github.com/psi4/psi4/pull/2842 you can have a look to get an idea what would be needed. Until the new ORCA is released we don't have good reference values for tests, but I was planning to write to the Grimme group.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948:203,release,released,203,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948,1,['release'],['released']
Deployability,"@hokru I made a few changes beyond what you had in your patch and it seems to work correctly now, for this molecule at least. MP2 and MP3 correlation energies are non-zero and in line with what I expect from smaller systems.; [patch.txt](https://github.com/psi4/psi4/files/3924255/patch.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561872174:56,patch,patch,56,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561872174,3,['patch'],['patch']
Deployability,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273803591:68,release,release,68,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591,5,"['install', 'release', 'update']","['installation', 'release', 'update']"
Deployability,"@hokru, can we get a status update on this? I'd like to start hacking up ADIIS/EDIIS, so I'd appreciate being able to rebase onto this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-876678713:28,update,update,28,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-876678713,1,['update'],['update']
Deployability,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:235,update,update,235,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670,1,['update'],['update']
Deployability,"@hokru, psi won't be able to update to 3.0.1 in general because the cmake buildsys wasn't backported. But so long as you can get a v3 `libxc.a` or `.so` out of libtools and stuff things in the right place, the ""hand update"" you describe should be perfectly legit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345783270:29,update,update,29,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345783270,2,['update'],['update']
Deployability,"@hokru, respective the memory estimate: I did some experiments and came up with a very rough estimate for the lower bound of a computation. I'll add a check and a warning in the next adcc release if the estimate is a substantial fraction of the main memory. Thanks for your suggestion in the first place. The respective change in adcc will be transparent to the interface needed for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921:188,release,release,188,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921,1,['release'],['release']
Deployability,@j3mdamas Any update on this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347015850:14,update,update,14,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347015850,1,['update'],['update']
Deployability,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356771661:19,update,update,19,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661,1,['update'],['update']
Deployability,"@jgonthier The driver has been in an out of Python 3 compatibility, considering the recent changes im not surprised that quite a few fail. . Probably a good TODO item after the inversion goes through is to update the driver to Python 3 standards and add a Travis case to ensure it stays there. From SciPy this year it appears that there is quite a bit of momentum to actually get everyone on board with Python 3, so its probably a good time to officially support it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252875803:206,update,update,206,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252875803,1,['update'],['update']
Deployability,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218387805:114,install,installing,114,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805,5,['install'],"['installed', 'installing', 'installs']"
Deployability,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:380,install,installed,380,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474,3,['install'],"['installdir', 'installed']"
Deployability,@jturney Switched the names and updated the branch. Is there anything else needed here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532#issuecomment-265630868:32,update,updated,32,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-265630868,1,['update'],['updated']
Deployability,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938,1,['integrat'],['integration']
Deployability,"@kannon92 I patched up the changes I suggested and fixed the frozen orbital issue. . Instead of building densities I switched back to the standard Cl/Cr mechanics as this will save you from computing the densities as `D = D I` and instead compute them as `D = Cl * Cr.T`. This will lower the density building step from `nact^2N^3` to `nact^2N^2` as `Cl/Cr` isnt really a Matrix, but a simple column vector. Please review the changes and make sure they look ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264982081:12,patch,patched,12,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264982081,1,['patch'],['patched']
Deployability,@keipertk Did you experience anything like this after the libERD patch the other day?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-135746478:65,patch,patch,65,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-135746478,1,['patch'],['patch']
Deployability,@kis-gergely-dzsi this patch to sphinx fixes that https://github.com/loriab/sphinx/commit/fa5fa5ce56aaa7f5d45c5923c6da34382ee4bce2 . I haven't fully investigated to see if it's been fixed in pybind11 or if I need to submit that to sphinx itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-654310111:23,patch,patch,23,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654310111,1,['patch'],['patch']
Deployability,"@konpat looking at first stable release that had USAPT solvers (v1.1), there is no ```wfn.semicanonicalize()``` in driver's ```run_sapt``` function, so it might be the case that the code was always like this. I'll try to set up a SAPT2020 package locally, with Piotr's SAPT(ROKS/ROHF) (http://dx.doi.org/10.1063/1.2968556) to compare how much impact this has on existing test cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193:32,release,release,32,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193,1,['release'],['release']
Deployability,"@konpat you may need to `-D ENABLE_Einsums=ON`. You can toggle the value in objdir/CMakeCache.txt, then rebuild.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1865219125:56,toggle,toggle,56,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1865219125,1,['toggle'],['toggle']
Deployability,"@liye0005, you may want to proceed more gradually toward a Windows, OpenMP, AMD build, especially as the Windows build is newer. I've never needed to change `FC_SYMBOL` from default. Be sure to turn off any Fortran addons (gdma, dkh, erd) so that at most you're dealing with blas/lapack. I notice you're using openblas, which as the build docs note, has some problems. MKL is preferred, and you can use the azure-pipelines script to setup a useable build env. Then make modifications from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504624701:413,pipeline,pipelines,413,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504624701,1,['pipeline'],['pipelines']
Deployability,"@loriab - many, but I think I might be nearing the end of these updates. I apparently hadn't used this plugin since the days of boost ... it probably would have been easier to rewrite the stupid thing from scratch than to repair it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373:64,update,updates,64,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373,1,['update'],['updates']
Deployability,@loriab . It looks like cmake doesn't support inner stage directories.; When it installs files for the ExternalProject psi4-core it uses DESTDIR (real stage directory) to install files into your stage directory. DESTDIR should be unset for all operations related to ExternalProject. Why do you need to use the ExternalProject with an internal stage directory that is really not supported by cmake?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325590525:80,install,installs,80,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325590525,2,['install'],"['install', 'installs']"
Deployability,@loriab . Python modules are installed into ```lib/psi4``` when the correct location is ```lib/python3.9/site-packages```. I believe the correct location can be read from the python executable. Then there is some logic in ```psi4/__init__.py``` calculating paths which is completely wrong when the modules are installed into proper location.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2800:29,install,installed,29,https://psicode.org,https://github.com/psi4/psi4/issues/2800,2,['install'],['installed']
Deployability,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:60,pipeline,pipeline,60,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214,3,"['Pipeline', 'pipeline']","['Pipeline', 'pipeline']"
Deployability,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-317918961:273,Install,Install,273,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961,2,['Install'],['Install']
Deployability,"@loriab @dgasmith Thanks for merging PR #880, the tests are very helpful. All of the original funcs pass with this `dict_func` patch - only wB97X doesn't match the old pre-libxc psi4 value. Unfortunately, wB97X-D3 requires tweaks to the underlying functional and I'm not sure whats wrong with O3LYP, both of which are expected fails against Q-Chem. . From the funcs I implemented in the meantime (SOGGA, SOGGA11, revPBE, MN12-L, M06-L, MN15-L, SOGGA11-X, MN12-SX), all pass against Q-Chem and only SOGGA fails against old psi4, but we knew that already. A lot of the other functionals, especially DSD-hybrids, do not have a reference value for the water ionisation energy. This is related to the crash in the `dft-smoke` test, as DSD-PBEP86 is part of it. Gaussian 2016 implements the ""Kozuch 2011"" version of DSD-PBEP86, I am not sure it includes any dispersion in their form: it would be prudent to have our implementation of that one match G16. Alternatively, we can stick to Kozuch's 2013 paper (where he supplies non-, D2-, D3- and D3BJ- forms of at least 10 DSD functionals); but then we're on our own. . In any case I suggest replacing DSD-PBEP86 in `dft-smoke` by a more widely used functional - B2PLYP or PBE0-2 or PBE0-DH come to mind; even though they are not spin-component-scaled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371075180:127,patch,patch,127,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371075180,1,['patch'],['patch']
Deployability,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:38,update,update,38,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534,1,['update'],['update']
Deployability,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343716686:319,install,installs,319,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686,3,['install'],"['install', 'installed', 'installs']"
Deployability,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:621,update,updated,621,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['update'],['updated']
Deployability,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:282,install,installation,282,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['install'],['installation']
Deployability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:15,integrat,integrated,15,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['integrat'],['integrated']
Deployability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:92,install,installed,92,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,2,['install'],['installed']
Deployability,@loriab I pushed a 1.2.0 release candidate with the desired license change. Please let me know if you see any additional issues. I will then tag it to release-1-2-0.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298445553:25,release,release,25,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298445553,2,['release'],"['release', 'release-']"
Deployability,"@loriab I was able to port the patches to the newest snapshot, good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301918665:31,patch,patches,31,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301918665,1,['patch'],['patches']
Deployability,"@loriab I'm not sure this does what we want as the packages in the main label are not yet updated. I can do that now, however, if you want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598790998:90,update,updated,90,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598790998,1,['update'],['updated']
Deployability,"@loriab I've added the internal build like you suggested (drawing from the previous add-on installation files). It seems to compile without issues on my machine, but let me know if anything looks awry!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644526678:91,install,installation,91,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644526678,1,['install'],['installation']
Deployability,"@loriab I've merged your PR into DEShawResearch/sns-mp2, and updates the testing code to work better outside of desres internal infrastructure (no `import garden)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865#issuecomment-347565056:61,update,updates,61,https://psicode.org,https://github.com/psi4/psi4/pull/865#issuecomment-347565056,1,['update'],['updates']
Deployability,@loriab Is there any reason we shouldn't just update the conda install instructions to have `pydantic >= 1.10` and then close issue?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106:46,update,update,46,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106,2,"['install', 'update']","['install', 'update']"
Deployability,"@loriab It might be just because I recently updated my workstation and I don't have a recent version of psi4 compiled. Psi4 1.1 runs energy('cisd') through fnocc.; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1 release. Git: Rev {} zzzzzzz . R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:44,update,updated,44,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,2,"['release', 'update']","['release', 'updated']"
Deployability,"@loriab No problems, I just pushed the change. I'd rather have it done right now than forgetting to patch it later :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253992072:100,patch,patch,100,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253992072,1,['patch'],['patch']
Deployability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:524,update,update,524,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,4,"['Release', 'patch', 'update']","['Release', 'patch', 'update']"
Deployability,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:692,release,release,692,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,1,['release'],['release']
Deployability,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288529918:98,install,installed,98,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918,5,['install'],"['install', 'installed', 'installs']"
Deployability,"@loriab Roger that. Everything updated and gau2grid re-pinned. Ill probably do another release or two before Psi4 1.2(?) ships, but I can update those versions pins then. @psi4/maintainers This is ready to go. Id like to get this out soon so that we can start hammering on the library. There should be no bugs, but it's a low-level change so best to really check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/869#issuecomment-351577847:31,update,updated,31,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-351577847,3,"['release', 'update']","['release', 'update', 'updated']"
Deployability,"@loriab Sure, can we turn off nightly builds until the ChemPS2 module is updated as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223824404:73,update,updated,73,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824404,1,['update'],['updated']
Deployability,"@loriab Thank you! We are still using 3.7 for this release, I'm planning to upgrade python in the next one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1152600316:51,release,release,51,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1152600316,2,"['release', 'upgrade']","['release', 'upgrade']"
Deployability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:1236,install,installation,1236,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,1,['install'],['installation']
Deployability,"@loriab This looks ok to me, thanks for getting it working. Regarding CI_FILE_START, the current handling for this is for historical reasons. It should be updated to switch from an option to a PSIF number like everything else, and the default could certainly change to a non-conflicting value. I do not mind trying to make those changes if you want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926#issuecomment-642240983:155,update,updated,155,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642240983,1,['update'],['updated']
Deployability,@loriab What's the problem with PCMSolver? The nonstandard install paths?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249113857:59,install,install,59,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249113857,1,['install'],['install']
Deployability,"@loriab [This line](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1382) for hess-by-energies and [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1529) for hess-by-grad. The mechanism is the same in both cases. The reinterpretation-forbidden-molecule eventually goes to the density-fitted energy/gradient step. To force the computation to be done in c1, the scf helper gets called in the [energy case](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1591) and in the [gradient case](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1669). Now the two mechanisms unify. The atom_/full_atom_ mirroring gets broken at the [clone step](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1436), which would be re-synced during [update geometry](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1440) if not for that forbidding of reinterpretation. We might be able to forgive reorienting in the case of hess-from-energies, but I don't see a way for difference of gradients. We need all our gradient vectors to be in the same coordinate system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108#issuecomment-408954158:842,update,update,842,https://psicode.org,https://github.com/psi4/psi4/pull/1108#issuecomment-408954158,1,['update'],['update']
Deployability,"@loriab `v1.2.1` tagged. With all necessary fixes this time, at least from my testing. I've updated docs and tests. The DALTON inputs and output files for the geometry optimization test are also included.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-386082337:92,update,updated,92,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-386082337,1,['update'],['updated']
Deployability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:707,update,update,707,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,1,['update'],['update']
Deployability,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196536537:180,toggle,toggled,180,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537,1,['toggle'],['toggled']
Deployability,"@loriab ah, it's a minimal basis issue; I already ran into the same issue in ERKALE but forgot to put the patch in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-455379347:106,patch,patch,106,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-455379347,1,['patch'],['patch']
Deployability,@loriab aren't you still using your own libxc repo? You can just update those files to 3.0.1...?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818613:65,update,update,65,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818613,1,['update'],['update']
Deployability,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:24,pipeline,pipeline,24,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249,1,['pipeline'],['pipeline']
Deployability,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:32,pipeline,pipeline,32,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339,1,['pipeline'],['pipeline']
Deployability,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:46,pipeline,pipeline,46,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398,1,['pipeline'],['pipeline']
Deployability,"@loriab did you have an easy fix for the svml error? psi4 was working until I installed rdkit and ambertools, and during the process it seems to have over-rode something. now I have the . ```; Traceback (most recent call last):; File ""/home/user/psi4conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/home/user/psi4conda/lib//python3.8/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/user/psi4conda/lib//python3.8/site-packages/psi4/core.cpython-38-x86_64-linux-gnu.so: undefined symbol: __svml_exp4_mask_e9; ```; error. Thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460:78,install,installed,78,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460,1,['install'],['installed']
Deployability,"@loriab it does; though I kinda agree with @susilehtola that maybe the `.bin` files could be done with entirely. Also, the binary renaming in 2926990 won't work for the Debian package as it requires `git apply`, the usual Debian machinery just runs `patch` with preset options which can't handle it. So would have to wait for 1.2.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451911135:250,patch,patch,250,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451911135,1,['patch'],['patch']
Deployability,"@loriab not yet, I think? Are there any more api changes that need to be included? I'm sure Miguel and Micael could be persuaded to make a stable release. However, Miguel is probably still working on porting the functionals into a new Maple interface, so I don't know how much sense it would be to release now, or how difficult it would be to cherrypick that stuff away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575:146,release,release,146,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575,2,['release'],['release']
Deployability,"@loriab ok. Micael Oliveira said he'd do the release next week, with the fixes to the MVS and TM functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-384512147:45,release,release,45,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384512147,1,['release'],['release']
Deployability,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:791,toggle,toggle,791,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,1,['toggle'],['toggle']
Deployability,@loriab that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running `get_funcs.pl`. The easiest way to force the list to be regenerated is to remove the build directory and rebuild,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443:98,update,updated,98,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443,1,['update'],['updated']
Deployability,"@loriab the `install(FILES ""${headers_list} include/lib*)` directives are everywhere in all subdirectories in `src/lib-bin` since we are using the `make_cmake_files.py` script to generate the leaf `CMakeLists.txt`. Most of them are most likely not needed in a proper installation.; Possibly the include directory layout in robertodr/psi4public@d5a193f1 is good enough?; See also #218",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-172786390:13,install,install,13,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-172786390,2,['install'],"['install', 'installation']"
Deployability,"@loriab these were all `bin`-type modules, so the install rule was not added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253#issuecomment-424835232:50,install,install,50,https://psicode.org,https://github.com/psi4/psi4/pull/1253#issuecomment-424835232,1,['install'],['install']
Deployability,"@loriab, #843 is related but not fixed: see attached calculations with (a relatively old) master and patched versions:; [master.txt](https://github.com/psi4/psi4/files/2246477/master.txt); [patched.txt](https://github.com/psi4/psi4/files/2246478/patched.txt); ```; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" master.txt ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033523; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" patched.txt ; @DF-RHF Final Energy: -594.38702051366886; @DF-RHF Final Energy: -297.22774750056516; ```; While the current patch fixes _a_ bug, it doesn't fix _the_ bug. I'll have a look if I can figure out why ghosts still posess ECP's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750:101,patch,patched,101,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750,5,['patch'],"['patch', 'patched']"
Deployability,"@loriab, I noticed that you posted a fix for my Psi4/Cfour problem at https://github.com/psi4/psi4/pull/2615. Thank you for that! As I understand correctly, you have the updated files using which all Cfour test jobs run successfully. If so, could you please help me which files have been modified, and from where I can download them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201:170,update,updated,170,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201,1,['update'],['updated']
Deployability,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1229,TOGGLE,TOGGLE,1229,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980,2,['TOGGLE'],['TOGGLE']
Deployability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:244,install,installations,244,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,1,['install'],['installations']
Deployability,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:136,update,updated,136,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['update'],['updated']
Deployability,"@loriab: Ah, thanks so much! I didn't see that install page. Very helpful! I'll close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098:47,install,install,47,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098,1,['install'],['install']
Deployability,"@loriab: This sounds good --- I think die+traceback is probably the right; default if the exception isn't caught. On Wed, Aug 8, 2018 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>; >; > Oh, and if an error's raised but not caught, it just shows the traceback; > and triggers coffee:; >; > PsiException: Could not converge SCF iterations in 4 iterations.; >; > Failed to converge.; >; > Traceback (most recent call last):; > File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:640,patch,patch,640,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,3,['patch'],['patch']
Deployability,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305862396:466,update,updated,466,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396,2,['update'],"['update', 'updated']"
Deployability,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593#issuecomment-293693404:23,patch,patches,23,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404,1,['patch'],['patches']
Deployability,"@loriab: what happens if you set MKL_NUM_THREADS instead of calling the Psi function?. Sent from my iPhone. > On Jun 30, 2017, at 5:29 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just different ones:; > ; > Psi4 libmkl_rt.so of a local c.2016 Intel install; > NumPy libmkl_core.so, thread, lp64 of default-channel c.2017 conda install; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312382898:351,install,install,351,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312382898,2,['install'],['install']
Deployability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:94,install,installed,94,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,4,"['configurat', 'install', 'update']","['configuration', 'installed', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:106,install,installed,106,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,7,"['configurat', 'deploy', 'install', 'patch', 'update']","['configuration', 'deploy-preview', 'installed', 'patch-', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,5,"['configurat', 'deploy', 'install', 'update']","['configuration', 'deploy-preview', 'installed', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,6,"['configurat', 'deploy', 'install', 'patch', 'update']","['configuration', 'deploy-preview', 'installed', 'patch-', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,6,"['configurat', 'deploy', 'install']","['configuration', 'deploy-preview', 'installed']"
Deployability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:616,release,release,616,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,1,['release'],['release']
Deployability,"@lothian I am just happy that I remembered this! . I updated some CC output printing to align a bit better and checked over a few CC test cases. I think everything looks ok, but if someone else could eye ball a couple that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205340495:53,update,updated,53,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205340495,1,['update'],['updated']
Deployability,"@lothian I fixed cc5 in this branch. cc5 now runs, passes, and the output.ref is updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205297042:81,update,updated,81,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205297042,1,['update'],['updated']
Deployability,@mbanck you can easily patch out the few lines of code in Psi4 that require a newer version of libxc. I did it in Fedora a few months ago. See https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450826912:23,patch,patch,23,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450826912,2,['patch'],['patch']
Deployability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:79,install,installations,79,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,2,"['configurat', 'install']","['configuration', 'installations']"
Deployability,"@mfherbst , there's a couple of the ddx tests failing now https://github.com/psi4/psi4/actions/runs/4703123664/jobs/8341938828?pr=2906#step:23:739, and I suspect it's because of the v0.4.1 released yesterday since it was working fine with v0.3.0 after your #2918 . Does this sound right? If so, we can pin to v0.3 unless you have a PR in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521:189,release,released,189,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521,1,['release'],['released']
Deployability,"@mhlechner Can you please update your fork with directions from [here](https://github.com/psi4/psi4/wiki/1_Obtaining#get-updates-3). Also, let us know if any of the directions are misleading!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258734207:26,update,update,26,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258734207,2,['update'],"['update', 'updates-']"
Deployability,@obrien951 Can you patch this up for 1.4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628#issuecomment-643792621:19,patch,patch,19,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-643792621,1,['patch'],['patch']
Deployability,@obrien951 Lets patch this up or close this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628#issuecomment-683466334:16,patch,patch,16,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-683466334,1,['patch'],['patch']
Deployability,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:59,hotfix,hotfix,59,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['hotfix'],['hotfix']
Deployability,"@psi4 (we'll see who that reaches). ## Attention. When this is merged:; * `psi4/core.so` won't be named that. It'll be something like `psi4/core.cpython-36m-x86_64-linux-gnu.so`; * `{objdir}/stage/${CMAKE_INSTALL_PREFIX}/bin/psi4`, `/lib`, `share/`, etc. won't be named that. It'll be just `{objdir}/stage/bin/psi4`, `{objdir}/stage/lib`, etc. Any symlinks to `bin/psi4` will need adjusting.; * Next time you build, I recommend `rm -rf {objdir}/stage/*` beforehand so you don't have multiple staged installs lying around.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-416293233:499,install,installs,499,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-416293233,1,['install'],['installs']
Deployability,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:662,install,install,662,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['install'],['install']
Deployability,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:233,install,installs,233,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479,1,['install'],['installs']
Deployability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:67,install,install,67,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,1,['install'],['install']
Deployability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,configurat,configuration,145,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['configurat'],['configuration']
Deployability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,integrat,integration,404,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,3,"['Release', 'integrat']","['Release', 'integration']"
Deployability,"@robertodr A gentle poke here, can you provide a status update?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810#issuecomment-533552543:56,update,update,56,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-533552543,1,['update'],['update']
Deployability,@robertodr I have moved the Windows configuration to FindTargetOpenMP.cmake and made some clean up while debugging.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235:36,configurat,configuration,36,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235,1,['configurat'],['configuration']
Deployability,"@robertodr Made a PR a bit ago, any updates there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-351387637:36,update,updates,36,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351387637,1,['update'],['updates']
Deployability,"@robertodr's PR fixes the urgent problem. @jturney, @CDSherrill, @lothian: is there any support for namespacing the includes (e.g., in the conda package, python, chemps, psi4, hdf5, possibly gcc headers are all installed to `prefix/include`). If anyone thinks this isn't a problem, just close the ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173789229:211,install,installed,211,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173789229,1,['install'],['installed']
Deployability,"@shannonhouck Gentle poke here, let us know if this will be make the Psi4 1.4 release or needs to be pushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-643792312:78,release,release,78,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-643792312,1,['release'],['release']
Deployability,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-178215766:191,update,update,191,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766,1,['update'],['update']
Deployability,"@susilehtola . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The behavior of the `DFT__RHO_V2_CUTOFF` keyword has been slightly modified for UKS.; - [x] The `DFT__RHO_V2_CUTOFF` default has been changed to the LibXC default. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] RKS and closed-shell UKS now screen out the same points.; - [x] Hermiticity of the UKS energy hessian (should) be restored.; - [x] Test references changed to use tighter density thresholds. (Still derived from Psi.) . ## Questions; - [x] Do we want to tighten the `DFT__RHO_V2_CUTOFF` default?. ## Checklist; - [x] `tdscf` ctests pass; - [x] `test_tdscf_excitations` pytest passes; - [x] SVWN analytic hessian pytests pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834:148,release,release,148,https://psicode.org,https://github.com/psi4/psi4/pull/2834,1,['release'],['release']
Deployability,"@susilehtola Right, I was just trying to work out the settings to get an AM=8 build, which is as high as I ever expect to go. This mostly (for me) affects the conda build (which I can patch), but it will also place a hard limit on the AM that Psi4 can build internally. I suppose I should look at your Fedora build to see what's useful. I agree that I don't see why a large constant in the generator should harm the efficiency of the built libraries. I just wish I would have thought of this issue _before_ declaring everything was ready to go this morning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300335205:184,patch,patch,184,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300335205,1,['patch'],['patch']
Deployability,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:289,update,update,289,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717,1,['update'],['update']
Deployability,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345706660:141,install,installation,141,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660,1,['install'],['installation']
Deployability,"@susilehtola, I've switched the build-from-src libxc target to v6.1 somewhere, and I'll make sure that makes it into the psi v1.8 release. c-f packaging is already at v6.1. Is there anything else to do in psi4 libxc-wise? Otherwise, I'll bump this to v1.9.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600:130,release,release,130,https://psicode.org,https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600,1,['release'],['release']
Deployability,"@susilehtola, is there a xc4 release with the tweaks in public api?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450763852:29,release,release,29,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450763852,1,['release'],['release']
Deployability,@taylor-a-barnes Can you update this PR for the MDI 1.0 release? We are looking to get Psi4 1.4 out soon and love to get this in!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986:25,update,update,25,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986,2,"['release', 'update']","['release', 'update']"
Deployability,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:49,pipeline,pipeline,49,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304,2,['pipeline'],['pipeline']
Deployability,"@tgaillard This bug has been fixed by #1299, so it will be fixed in Psi 1.3 and all future alpha/beta versions of 1.3. If you need this issue fixed for your current research, let us know, and we'll help you get Psi updated in the least painful way possible. (Warning: Psi 1.3 includes updates to physical constants, so results will differ slightly from those in Psi 1.2.) Otherwise, we'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1282#issuecomment-431684933:215,update,updated,215,https://psicode.org,https://github.com/psi4/psi4/issues/1282#issuecomment-431684933,2,['update'],"['updated', 'updates']"
Deployability,@timostrunk BTW can you update your issue showing that your points are complete?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133#issuecomment-414423326:24,update,update,24,https://psicode.org,https://github.com/psi4/psi4/pull/1133#issuecomment-414423326,1,['update'],['update']
Deployability,"@tobirolinew, pretty much all you need for runtime are the changes in this file, https://github.com/psi4/psi4/pull/2615/files#diff-3ca8e1e030771d01af412b9603a6f8e06d4c04e44dbcb40a4f7248ff8120efdd . So, you could either make those edits in your local install, or compile psi4 from master, or grab the latest conda package next week after I build them again. I'll also probably back-port these fixes into v1.6.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1169479941:250,install,install,250,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1169479941,1,['install'],['install']
Deployability,@tsexton Any update on this? I can do a quick fix if you are busy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/713#issuecomment-308200699:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/issues/713#issuecomment-308200699,1,['update'],['update']
Deployability,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783977:503,install,installed,503,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977,1,['install'],['installed']
Deployability,@xiexr151e you should install the BLAS/LAPACK development package using your linux distribution's package manager. (Note that you should install an optimized implementation such as ATLAS or OpenBLAS instead of the reference BLAS/LAPACK implementation.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380550429:22,install,install,22,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380550429,2,['install'],['install']
Deployability,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:17,update,update,17,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,2,['update'],['update']
Deployability,A SAD update,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400:6,update,update,6,https://psicode.org,https://github.com/psi4/psi4/pull/400,1,['update'],['update']
Deployability,"A consequence of @loriab's changes in #2764 is that `SphericalGrid::order_` no longer means ""Order of spherical harmonics in spherical grid (integrates products up to L_tot = 2 * order_ + 1)"", as the docstring claims. This seems to be used for printing and nothing else, so it may be better to just remove this field entirely. Removing such things from `cubature.cc` is directly in scope of #2736.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2765:141,integrat,integrates,141,https://psicode.org,https://github.com/psi4/psi4/issues/2765,1,['integrat'],['integrates']
Deployability,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:48,release,released,48,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['release'],['released']
Deployability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:154,update,updated,154,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,1,['update'],['updated']
Deployability,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:66,install,installer,66,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,4,['install'],"['install', 'installer', 'installers']"
Deployability,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234470967:55,install,installing,55,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967,11,['install'],"['install', 'installation', 'installed', 'installing']"
Deployability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:6,update,updates,6,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,2,"['Install', 'update']","['Installation', 'updates']"
Deployability,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330907649:297,release,release,297,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649,1,['release'],['release']
Deployability,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1511:476,update,update,476,https://psicode.org,https://github.com/psi4/psi4/issues/1511,2,['update'],"['update', 'updated']"
Deployability,"A molecule like the one below with charged monoA and neutral monoB gets confused when monoB ghosted b/c charge (interpreted as ""overall charge"") applied to each of monomers, but no electrons in monoB to even up count. This has bitten at least four users and developers and been declared to be bug, not feature. This is not a beginner's ticket, as it involves the dreaded `Molecule::create_molecule_from_string` function, but it needs to be fixed. I'd recc. writing the test cases first. ```; molecule mol {; units Angstrom; no_com; no_reorient; -1 1; C 0.033732944853 -1.125511797114 1.580406987928; C 0.784732944853 -1.165511797114 0.291406987928; O 0.666732944853 -0.174511797114 -0.463593012072; O 1.521732944853 -2.153511797114 0.048406987928; H -1.041267055147 -1.075511797114 1.390406987928; H 0.317732944853 -0.230511797114 2.136406987928; H 0.264722944853 -2.016378797114 2.182900987928; -- # toggle this line to comment to fix; #0 1; Gh(C) -2.103267055147 2.116488202886 -0.821593012072; Gh(O) -0.712267055147 2.192488202886 -0.525593012072; Gh(H) -0.329267055147 1.293488202886 -0.603593012072; Gh(H) -2.471267055147 1.129488202886 -0.531593012072; Gh(H) -2.632087055147 2.887778202886 -0.242406012072; Gh(H) -2.239007055147 2.240855802886 -1.906078012072. }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114:901,toggle,toggle,901,https://psicode.org,https://github.com/psi4/psi4/issues/114,1,['toggle'],['toggle']
Deployability,"A month ago, I installed PSI4 from miniconda. Everything was fine and PSI4 finished a lot of calculations. Recently I have updated PSI4 with the command ""conda update psi4"" and PSI4 cannot run anymore because of library omission. Using command ""conda inspect linkages psi4"", I obtained this output:; ""not found:; libgsl.so.0 (not found); libgslcblas.so.0 (not found); libhdf5.so.10 (not found); libhdf5_hl.so.10 (not found)"". What should I do to sovle this problem? It will take me much time if I compile PSI4 and it's dependencies from the beginning.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154:15,install,installed,15,https://psicode.org,https://github.com/psi4/psi4/issues/154,3,"['install', 'update']","['installed', 'update', 'updated']"
Deployability,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:955,patch,patched,955,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['patch'],['patched']
Deployability,"A patch in format-patch format is here: https://gist.github.com/mbanck/7292871. I don't feel like cloning psi4 on github right now, but if this is a requirement for getting the patch applied, I'll do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26#issuecomment-27649815:2,patch,patch,2,https://psicode.org,https://github.com/psi4/psi4/issues/26#issuecomment-27649815,3,['patch'],['patch']
Deployability,"A place to stash ""next-release"" items that come up that don't fit elsewhere. Who knows what the next release will be called — ""1.3"" shall be used as placeholder. This is for opinions as well as consensus, so don't read this and consider anything BDFL-PEP-Approved. Similarly, if you're posting for more than yourself, try to convey a notion of the breadth of agreement. Also, separate issues by post so up/downvotes have a chance to mean something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972:23,release,release,23,https://psicode.org,https://github.com/psi4/psi4/issues/972,2,['release'],['release']
Deployability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:216,install,installed,216,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,1,['install'],['installed']
Deployability,A snapshot that will be used as the first 1.2 release candidate will happen on May 1st. On May 1st the master branch will undergo a new feature freeze and will only accept bug fixes. The target release date of Psi4 1.2 is May 18th if no major bugs are found in the intervening period. - The Psi4 Dev Team,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960:46,release,release,46,https://psicode.org,https://github.com/psi4/psi4/issues/960,2,['release'],['release']
Deployability,"ARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:1116,install,install,1116,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,['install'],['install']
Deployability,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7167,install,install,7167,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['install'],['install']
Deployability,"About time to start patch notes again. As always please modify or comment as permissions allow. Please understand that these notes are not complete.; ## . The Psi4 1.1 update contains large changes to the internal infrastructure. The primary result of the internal changes is that Psi4 is now a normal Python module instead of a executable that calls Python. While these changes are substantial it should be stressed that the current Psi4 input including calling the executable `/bin/psi4` should behave in an identical way to the Psi4 1.0 release. A discussion and overview of the current changes can be found [here](https://github.com/psi4/psi4/issues/468). Points of interest:; - Psi4 is now a Python module (e.g. `python -c ""import psi4""`). [details](https://github.com/psi4/psi4/pull/481); - The build system has been rewritten to allow for more flexibility for external projects in the future. [details](https://github.com/psi4/psi4/pull/442). # New Features; - High-spin open-shell SAPT0 computations are now available.; - MCSCF now has Augmented Hessian as an additional convergence option.; - If Psi4 fails, users are now suggested to purchase developers coffee instead of beer. # Developer notes; - Psi4 now requires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:20,patch,patch,20,https://psicode.org,https://github.com/psi4/psi4/issues/485,3,"['patch', 'release', 'update']","['patch', 'release', 'update']"
Deployability,"According to Jet ""The segfault occurs on some systems because Python has already been shutdown but Boost Python objects still exists."" This is fixed and the fix will come out in the next minor release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8#issuecomment-19999150:193,release,release,193,https://psicode.org,https://github.com/psi4/psi4/issues/8#issuecomment-19999150,1,['release'],['release']
Deployability,"Acknowledged. Two problems, one solved, one not. * First issue is for v1.5 you have to grab a certain libint2 build as described here: https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791 Probably you didn't get to the segfault the ""newest"" L2 would cause because the missing symbol got in the way. :-(; * Second issue is the missing symbol. I've seen it myself with py38. (It can incidentally be solved by preloading `libirc` if you've an Intel installation lying around (`LD_PRELOAD=/psi/gits/software/intel/oneapi/compiler/2021.1.1/linux/compiler/lib/intel64_lin/libirc.so python -c ""import psi4""` is clean), but that's not a worthy solution. But clearly the missing symbol wasn't happening in the earlier issue. Current theories:; * some newer version/build of a package got uploaded in the past week or so that throws off this env; * py37 _did not_ get updated versions of packages on the psi4 channel with the 1.6 release, so it's getting old, compatible versions of some psi4-channel based package and is fine, while py38 and py39 got a fresh package and got broken.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059:458,install,installation,458,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059,3,"['install', 'release', 'update']","['installation', 'release', 'updated']"
Deployability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,configurat,configuration,475,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['configurat'],['configuration']
Deployability,"Actually, that wasn't it either. Starting from scratch with a fixed install location still results in the failed install. The command I used now was; ./setup --cc gcc --cxx g++ --fc gfortran --blas /usr/lib64/libopenblaso.a --lapack /usr/lib64/libopenblaso.a --pcmsolver on --chemps2 on --ambit off --prefix /home/work/psi4/install -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib objdir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239647371:68,install,install,68,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239647371,3,['install'],['install']
Deployability,"Actually, you still do have to pass `--accelerate` to `setup`, as it's not on by default. @robertodr , is there a reason accelerate shouldn't be on by default for release builds?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122120131:163,release,release,163,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122120131,1,['release'],['release']
Deployability,Add Appveyor configuration to compile and tests on Windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:13,configurat,configuration,13,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['configurat'],['configuration']
Deployability,"Add a little additional documentation about the SAPT related Psi variables. ## Description; Clarify a little about the construction of the SAPT Psi variables. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] ; ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Clarification of SAPT Psi variables for developers (function documentation only, no code change); - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3017:292,release,release,292,https://psicode.org,https://github.com/psi4/psi4/pull/3017,1,['release'],['release']
Deployability,Add some documentation for 1.4 release,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:31,release,release,31,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['release'],['release']
Deployability,Add the option for SAPT to compute the second order exchange-dispersion term without the Single-Exchange Approximation. ## Todos; * __User-Facing for Release Notes__; - [ ] Add Sinf option to second order exchange-dispersion,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490:150,Release,Release,150,https://psicode.org,https://github.com/psi4/psi4/pull/1490,1,['Release'],['Release']
Deployability,"Add the option for SAPT to compute the second order exchange-induction term, coupled or uncoupled, without the Single-Exchange Approximation. ## Todos; * __User-Facing for Release Notes__; - [ ] Add Sinf option to second order exchange-induction",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921:172,Release,Release,172,https://psicode.org,https://github.com/psi4/psi4/pull/921,1,['Release'],['Release']
Deployability,"Added dashparams for -D3(0) and -D3(BJ) for 7 functionals from L. Goerigk (JPC:L 6 (2015) 3891).; Added three functionals from Peverati and Truhlar (PCCP 14 (2012) 16187; JCTC 8 (2012) 2310). The functionals still need tests. ## Description; Added missing dashparams and functionals. Could someone please run the Q-Chem tests for N12, N12-SX and MN12-SX?. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Added -D3(0) and -D3(BJ) params for M11-L, MN12-L, N12, SOGGA11-X, and M11; - [ ] Added functionals N12, N12-SX and MN12-SX; - [x] Added -D3(0) and -D3(BJ) params for N12-SX and MN12-SX. ## Status; - [ ] Tests for N12, N12-SX and MN12-SX; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916:459,Release,Release,459,https://psicode.org,https://github.com/psi4/psi4/pull/916,1,['Release'],['Release']
Deployability,Added some more docs warning and a release note item. Thanks for the approval!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464:35,release,release,35,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464,1,['release'],['release']
Deployability,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232781392:10,release,releasenotes,10,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392,3,['release'],"['release', 'releasenotes', 'releases']"
Deployability,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/770:262,update,updates,262,https://psicode.org,https://github.com/psi4/psi4/pull/770,2,"['Release', 'update']","['Release', 'updates']"
Deployability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:39,update,updated,39,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,1,['update'],['updated']
Deployability,After chatting with the LibXC dev's I think we can do a few workarounds so that LibXC 4 works for us. If I get a second I might work on getting that upgrade through.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345250225:149,upgrade,upgrade,149,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345250225,1,['upgrade'],['upgrade']
Deployability,"After each exit of any run the following crash happens:. ``` bash; Program received signal SIGSEGV, Segmentation fault.; subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:315,install,install,315,https://psicode.org,https://github.com/psi4/psi4/issues/8,1,['install'],['install']
Deployability,"After installing the binary patches, I get the error; ```; psi4.driver.p4util.exceptions.MissingMethodError: Method=ccsdt is not available for any derivative level. Did you mean? ccd ccsd ccsd(t) cisd cisdt cisdtq lccsd ksdt; ```; with the above input as well as `tests/mrcc/ccsdt/input.dat`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524:6,install,installing,6,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524,2,"['install', 'patch']","['installing', 'patches']"
Deployability,"After installing the psi4, I ran a simple test. By looking at the output file, I found that the program seemed to stop after reading the contents of the input file, the program did not stop, but it did not continue and did not report an error. Also, there were no errors during the compilation of psi4, and it's not clear to me what went wrong.; ![1678955019941](https://user-images.githubusercontent.com/99332231/225558169-d53d12b0-5c8b-4f6e-86e7-bb18e630ec4e.jpg)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900:6,install,installing,6,https://psicode.org,https://github.com/psi4/psi4/issues/2900,1,['install'],['installing']
Deployability,"After my conversation with Lori Burns on the slack channel, he noticed that there are one-number lines. So I added the 1.0 to the Rubidium basis set where it is necessary. ```; F 1 1.00; .07658 1.0; F 1 1.00; .48744 1.0; F 1 1.00; 1.18448 1.0; ```. ## Description; Update the basis set so they can be used in calculations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1743:265,Update,Update,265,https://psicode.org,https://github.com/psi4/psi4/pull/1743,1,['Update'],['Update']
Deployability,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:422,release,release,422,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124,2,"['install', 'release']","['installed', 'release']"
Deployability,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:50,release,release,50,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Ah, nevermind - now I see that the problem is in the **install** directory, which I did not remove after my last OS upgrade. Why does the build even use that?!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256#issuecomment-424017716:55,install,install,55,https://psicode.org,https://github.com/psi4/psi4/issues/1256#issuecomment-424017716,2,"['install', 'upgrade']","['install', 'upgrade']"
Deployability,"Ah, nevermind, the pybind11 issue is because it had been updated and I just needed a recompile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1694#issuecomment-520789143:57,update,updated,57,https://psicode.org,https://github.com/psi4/psi4/issues/1694#issuecomment-520789143,1,['update'],['updated']
Deployability,"Ah, ok. I think I see the problem in the code. Patch coming shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171#issuecomment-133544723:47,Patch,Patch,47,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133544723,1,['Patch'],['Patch']
Deployability,"Ah, recent releases are now on c-f, including through py311. please use ` conda install psi4 python=3.11 -c conda-forge/label/libint_dev -c conda-forge` from https://psicode.org/installs/v18/ with choices conda/3.11/stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743:11,release,releases,11,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743,3,"['install', 'release']","['install', 'installs', 'releases']"
Deployability,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-301264612:38,release,releases,38,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612,3,"['install', 'release']","['install', 'releases']"
Deployability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:363,update,update,363,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,2,"['install', 'update']","['install', 'update']"
Deployability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:80,configurat,configurations,80,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['configurat', 'continuous']","['configurations', 'continuously']"
Deployability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:350,install,install,350,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,3,['install'],"['install', 'installation']"
Deployability,"Alert: After a conda update on linux, psi4 segfaults ... don't panic",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:21,update,update,21,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['update'],['update']
Deployability,"All requested changes made. I have also run the _entire_ test suite, modulo plugins and dft benchmarks. I stumbled across a rather critical bug that way: empirical_dispersion needed to be updated with the new FINDIF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426:188,update,updated,188,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426,1,['update'],['updated']
Deployability,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:492,configurat,configuration,492,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['configurat'],['configuration']
Deployability,"All right, I moved the location of the `FORCE_PEDANTIC` definition, as per the suggestion of @loriab. This seems to work, as when I compile a local instance of this Psi4 branch with an internally-built IntegratorXX, it now compiles, whereas it did not previously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402:202,Integrat,IntegratorXX,202,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402,1,['Integrat'],['IntegratorXX']
Deployability,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241014675:166,update,updated,166,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675,1,['update'],['updated']
Deployability,All the build type and Python version combinations works:; - `cmake.build_type=Debug` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=515; - `cmake.build_type=Release` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=517; - `cmake.build_type=Debug` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=518; - `cmake.build_type=Release` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=519,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433:196,Release,Release,196,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433,2,['Release'],['Release']
Deployability,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157470643:407,update,update,407,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643,1,['update'],['update']
Deployability,"All worked well. I'll check with the student to make sure he is happy too. So this is my mindless list of commands, including the suggested correction and a few small changes to install inside the p4dev environment:. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; source miniconda3/bin/activate; conda create -n p4dev psi4-dev python=3.7 -c psi4/label/dev -y; conda activate p4dev; conda install libint am8 -c psi4/label/dev -y; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8 -DENABLE_simint=OFF -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DPYMOD_INSTALL_LIBDIR=/python3.7/site-packages; cd objdir && make install -j`getconf _NPROCESSORS_ONLN`; ```. Few notes for the casual reader:. - The suggested option ` -DENABLE_simint=OFF` may no longer be needed at some point in the future.; - Installing in `${CONDA_PREFIX}` is only safe when you don't install the PSI4 package with conda in the same environment. Edits:; - Added activate line.; - Added -y options; - Updated to py3.7; - Install Python modules in the canonical location.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249:178,install,install,178,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249,7,"['Install', 'Update', 'install']","['Install', 'Installing', 'Updated', 'install']"
Deployability,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:144,install,install,144,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,5,['install'],"['install', 'installation', 'installing']"
Deployability,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:96,release,release,96,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,1,['release'],['release']
Deployability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:117,release,release,117,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,4,"['install', 'release']","['installed', 'release']"
Deployability,"Alright, I made the changes. I am now uncertain why Azure Pipelines was unhappy with one of the commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089#issuecomment-768401902:58,Pipeline,Pipelines,58,https://psicode.org,https://github.com/psi4/psi4/pull/2089#issuecomment-768401902,1,['Pipeline'],['Pipelines']
Deployability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,integrat,integrated,151,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['integrat'],['integrated']
Deployability,Also install general headers in include directory #215,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/218:5,install,install,5,https://psicode.org,https://github.com/psi4/psi4/pull/218,1,['install'],['install']
Deployability,Also updates the unit tests for DF_Helper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-308568798:5,update,updates,5,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-308568798,1,['update'],['updates']
Deployability,"Also, I note that your latest cdash build named LAB-intel15.0.3-mkl-release-conda doesn't show a cc54 crash. Strangeness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121981549:68,release,release-conda,68,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981549,1,['release'],['release-conda']
Deployability,"Also, please `grep` for comments related to `dftd3` in the code and update them as needed. `proc.py::scf_helper` certainly needs to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-896096206:68,update,update,68,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-896096206,2,['update'],"['update', 'updated']"
Deployability,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:226,install,install,226,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['install'],"['install', 'installed']"
Deployability,Always `git pull --rebase upstream master` to update. I've [experienced](https://github.com/psi4/psi4/pull/1010#issuecomment-390319253) this pain before.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450866105:46,update,update,46,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450866105,1,['update'],['update']
Deployability,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:21,install,install,21,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854,2,['install'],['install']
Deployability,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:3,update,update,3,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967,2,"['patch', 'update']","['patches', 'update']"
Deployability,"An updated script that works with current master:; ```; from qcengine.programs.dftd3 import get_dispersion_aliases; from qcengine.programs.dftd3 import dashcoeff; from psi4.driver.procrouting.dft import dft_builder; from psi4.driver import procedures; import psi4. for dtype in dashcoeff.keys() :; for func in dashcoeff[dtype][""definitions""]:; check=func in procedures['energy']; if check == False:; check=""{0:s}-{1:s}"".format(func,dtype) in procedures['energy']; if check == False:; alt= psi4.p4util.find_approximate_string_matches(func,dft_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-481998433:3,update,updated,3,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-481998433,1,['update'],['updated']
Deployability,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288530704:85,install,installed,85,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704,1,['install'],['installed']
Deployability,"And toggle https://github.com/psi4/psi4/blob/master/external/upstream/pcmsolver/CMakeLists.txt#L41 off, as you recommended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385191049:4,toggle,toggle,4,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385191049,1,['toggle'],['toggle']
Deployability,"And, updated. This'll be good to go once tests pass. Sphinx build was clean, and the edited files looked good when viewed locally. This is a bigger change than I expected, so I'll leave it to somebody else to double-check my work and merge in. The dark blue vs. light blue thing turned out not to be related to section headers, but to whether I had clicked on a specific subsection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326,1,['update'],['updated']
Deployability,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183717105:111,continuous,continuous,111,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105,1,['continuous'],['continuous']
Deployability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,configurat,configuration,153,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,1,['configurat'],['configuration']
Deployability,Andysim patch 1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1086:8,patch,patch,8,https://psicode.org,https://github.com/psi4/psi4/pull/1086,1,['patch'],['patch']
Deployability,Another set of instructions installing numpy+vecLib:; https://developer.apple.com/forums/thread/695963?answerId=697568022#697568022,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779:28,install,installing,28,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779,1,['install'],['installing']
Deployability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:1099,install,install,1099,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,3,['install'],['install']
Deployability,Any chance the rc2 installer behaves differently?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-874964763:19,install,installer,19,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-874964763,1,['install'],['installer']
Deployability,"Any chance you're building CMAKE_BUILD_TYPE=Debug? That's been seen, and healed upon switch to Release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286:95,Release,Release,95,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286,1,['Release'],['Release']
Deployability,Any status update on this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/842#issuecomment-433958214:11,update,update,11,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-433958214,1,['update'],['update']
Deployability,Any update on whats wrong with this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-345243568:4,update,update,4,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-345243568,1,['update'],['update']
Deployability,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152804235:130,release,release,130,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235,1,['release'],['release']
Deployability,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:111,update,updates,111,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916,1,['update'],['updates']
Deployability,"Anyway, does this look like a Boost installation problem? If so I would certainly want to fix that for my other users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226008003:36,install,installation,36,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226008003,1,['install'],['installation']
Deployability,"Apologies if this is off the development timeline or out of left field. The psi4 plugin system is excellent, and it's one of the really cool unique features of the package. One way to make it even better would be if it didn't require having access to the source to compile a plugin. Currently, all the static archives stay inside the object directory and are not installed to `prefix`, which means that when the plugins need to link against psi4, they link against the archives in the object directory, and the psi4 binary embeds the location of the source and build directory to use when generating an example plugin makefile. It would be nice to copy the archives to `$PREFIX/lib` instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:363,install,installed,363,https://psicode.org,https://github.com/psi4/psi4/issues/162,1,['install'],['installed']
Deployability,"Are all of these really necessary for a 1.0 release? Some of them seem to me to be design-/feature-related issues that could wait until 1.X or 1.0.X. For example, are we worried at this point that general users are going to run EFP calculations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191517725:44,release,release,44,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191517725,1,['release'],['release']
Deployability,"Are you able to make the internal stage directory optional based on a cmake option?. The internal stage directory adds complexity without providing any benefit - with or without it the files should be installed into the real stage directory, but internal stage directory makes the process more complex and error prone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555:201,install,installed,201,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555,1,['install'],['installed']
Deployability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:50,deploy,deployment,50,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,4,"['deploy', 'install']","['deployment', 'install', 'installed']"
Deployability,"Are you definitely selecting the libint2 via `conda install psi4=1.5 libint2=*=hc9558a2_9 python=3.7 -c psi4`? I can definitely see a ""latest"" libint2 causing a segfault. The above cmd is from https://psicode.org/installs/v16/ with linux/conda/py37/previous selected. It's admittedly unexpected to not be able to use the installs/v15 cmd.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791:52,install,install,52,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791,3,['install'],"['install', 'installs']"
Deployability,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320452824:165,install,install,165,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824,2,['install'],['install']
Deployability,"Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want to stick to DMRG-SCF?. If you would like to, I can release an intermediate version v1.7, and you can use the plugin (or copy parts of) https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc to run the CASPT2 calculations...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384:52,release,release,52,https://psicode.org,https://github.com/psi4/psi4/issues/384,2,['release'],['release']
Deployability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:32,release,release,32,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,4,"['configurat', 'release']","['configuration', 'release']"
Deployability,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:92,update,update,92,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['update'],['update']
Deployability,"As I said, my current take is idiotic. The only thing kept around is the Conda installation itself, not the environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444496031:79,install,installation,79,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444496031,1,['install'],['installation']
Deployability,"As a matter of fact, I was confused too :smile: What is the policy you plan on following for external projects? Upgrade the `GIT_TAG` anytime the external project is updated or a more conservative approach? I assumed the latter, hence the lack of changes in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225985713:112,Upgrade,Upgrade,112,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225985713,2,"['Upgrade', 'update']","['Upgrade', 'updated']"
Deployability,"As an update, these will be enabled in the Psi4 1.2 patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/39#issuecomment-274263328:6,update,update,6,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-274263328,2,"['patch', 'update']","['patch', 'update']"
Deployability,"As for Debian and 1.2(.1), I have patched out libxc similar to what @susilehtola suggested in https://github.com/psi4/psi4/issues/1302#issuecomment-450826912 - for the next development cycle I guess psi4 will be able to use a system ilbxc, but time was running out. 1.2.1 is currently bulding here: https://buildd.debian.org/status/package.php?p=psi4 - there are a couple fo test suite failures I have not diagnosed yet, I'll try to find time over the weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547:34,patch,patched,34,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547,1,['patch'],['patched']
Deployability,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1019:54,update,update-dfocc-requires-scf-type-disk-df,54,https://psicode.org,https://github.com/psi4/psi4/issues/1019,1,['update'],['update-dfocc-requires-scf-type-disk-df']
Deployability,"As of last July when I made the psi PR and xc issue, the current api changes were sufficient (though there were some further tweakers that could get us a couple more functionals). If you think there’s hope of a tag, I can update the PR on this side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450767109:222,update,update,222,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450767109,1,['update'],['update']
Deployability,As the code is in place and we have a long test for it I say lets go ahead and get this in. This is a good unit of work currently and I think the discussion on how to integrate this properly into Psi4 is a long one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369678429:167,integrat,integrate,167,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369678429,1,['integrat'],['integrate']
Deployability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:28,install,install,28,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,4,['install'],['install']
Deployability,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288472702:340,install,install,340,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702,1,['install'],['install']
Deployability,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:295,release,release,295,https://psicode.org,https://github.com/psi4/psi4/pull/2788,2,"['release', 'toggle']","['release', 'toggled']"
Deployability,"At various times Psi4 has been made python3-compatible, and then that compatibility diminishes as the developers don't use py3. We're in the middle of an infrastucture update at present (build and python bindings). After that, python3 support and/or switch is likely, so probably this calendar year. I'm sorry it probably can't be this month, but there's so many under-the-hood changes that we want to decouple them as much as possible. A py35 package is definitely a target (and will be far easier when we don't have to deal with Boost).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-246136990:168,update,update,168,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246136990,1,['update'],['update']
Deployability,"Awesome. Thanks for all the info. I hadn't realized the ""main"" user-facing basis set files were formed by scripts that composed other files, so I wouldn't have done this properly had I not asked :). I'll do this tomorrow. Sent from my iPhone. > On Jun 1, 2017, at 7:00 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Thanks! Could you instead just update the files tight-cc-pwcvXz.gbs and tight-cc-pwcvXz-ri.gbs that live here? Those are the ""w-core"" and ""w-core-ri"" that get composed (e.g., here and here) into the actual basis set files to keep everything consistent. I'll run the scripts afterward to do the composing, so don't feel you need to follow the README in primitives/ . Let me know if you've any questions – I wasn't an experienced scripter when I put this together.; > ; > On Andy's comments, any comment that you add about the origin to the top of the primitives/*.gbs files will get carried through to the final basis set file. And you're not (I think) creating new basis sets, just adding elements to existing basis sets, so there shouldn't be any need to set fitting defaults for orbital bases.; > ; > @susilehtola, I am exceedingly grateful for EMSL. But if I trusted their internal consistency on basis sets that should contain the same info, I wouldn't have the crazy basis file summing scheme in Psi4. Admittedly, I haven't reexamined EMSL in a few years.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305644835:359,update,update,359,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305644835,1,['update'],['update']
Deployability,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3448,install,installation,3448,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['install'],['installation']
Deployability,BSE installs in the wrong place,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:4,install,installs,4,https://psicode.org,https://github.com/psi4/psi4/issues/3067,1,['install'],['installs']
Deployability,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356990910:270,pipeline,pipeline,270,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910,1,['pipeline'],['pipeline']
Deployability,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:648,release,release,648,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,3,['release'],['release']
Deployability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:797,update,update,797,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,1,['update'],['update']
Deployability,"Basic documentation is now added. I think the only thing missing is to push a recent version of CPPE (0.0.8) to conda, @loriab .; Then, one could install CPPE in the travis procedure. Other than that, this is ready for merge, in my opinion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-507618854:146,install,install,146,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-507618854,1,['install'],['install']
Deployability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:527,install,install,527,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['install'],['install']
Deployability,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:121,Upgrade,Upgrade,121,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875,1,['Upgrade'],['Upgrade']
Deployability,"Before I start reviewing, is this a 1.4 target? Lori [has decreed](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) that the target 1.4 release date is next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-871423573:150,release,release,150,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-871423573,1,['release'],['release']
Deployability,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057,2,"['install', 'update']","['installs', 'update']"
Deployability,Before the release of 1.4 we should ensure that these monomer calculations are not included by default and are opt-in only to keep currently released behavior.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867:11,release,release,11,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867,2,['release'],"['release', 'released']"
Deployability,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182945585:189,patch,patch,189,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585,4,"['patch', 'release']","['patch', 'release', 'releases']"
Deployability,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383182397:806,install,install-libxc,806,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397,2,['install'],['install-libxc']
Deployability,"Boost compilation is really a royal pain... Can you try this:. ```; using intel-linux : : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. it is supposed to work, but I tried on my laptop with two different versions of GCC installed and it's always the default version that gets picked.; You might want to give a shot also to the suggestion in the third post in this forum thread:; http://boost.2283326.n4.nabble.com/MPI-how-to-compile-Boost-MPI-on-Cray-Linux-td4634179.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163389379:234,install,installed,234,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163389379,1,['install'],['installed']
Deployability,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356713683:516,release,release,516,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683,1,['release'],['release']
Deployability,"Btw does the x2c code actually do the exact treatment, i.e. update the transformation matrices at (every) iteration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868#issuecomment-347519616:60,update,update,60,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-347519616,1,['update'],['update']
Deployability,"Btw, @dgasmith , I didn't `pull --rebase` this one because the sequential patching hits a merge conflict that I resolved some time ago (we'd both messed with scf_grad.cc at some point). When this is ready to go I'll squash the commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230533062:74,patch,patching,74,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230533062,1,['patch'],['patching']
Deployability,Build directory used in INCLUDES instead of installation directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410:44,install,installation,44,https://psicode.org,https://github.com/psi4/psi4/issues/410,1,['install'],['installation']
Deployability,Build plugins without psi installed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91:26,install,installed,26,https://psicode.org,https://github.com/psi4/psi4/pull/91,1,['install'],['installed']
Deployability,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:638,patch,patch,638,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['patch'],['patch']
Deployability,"Bump `adcc` version, update reference data, check runtime version",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2944:21,update,update,21,https://psicode.org,https://github.com/psi4/psi4/pull/2944,1,['update'],['update']
Deployability,Bump required/built ADCC version to latest release,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:43,release,release,43,https://psicode.org,https://github.com/psi4/psi4/pull/2785,1,['release'],['release']
Deployability,Bundled packages sholdn't be installed as part of psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854:29,install,installed,29,https://psicode.org,https://github.com/psi4/psi4/issues/854,1,['install'],['installed']
Deployability,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:103,install,installing,103,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,5,['install'],"['install', 'installed', 'installing']"
Deployability,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,integrat,integrate,192,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['integrat'],['integrate']
Deployability,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:149,patch,patch,149,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,3,['patch'],"['patch', 'patch-AuthenticAMD']"
Deployability,"By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code... I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232787398:96,release,release,96,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232787398,2,['release'],['release']
Deployability,"By the way, you're quite right to leave the PSIDATADIR business to conda. I only mentioned it because having that set is a way to lead the conda binary astray. I didn't have any problem with the SAPT test case upon install onto a fresh machine. Closing, but do reopen or start another issue if you've any further problems. Or for just questions about the new information-passing, try out forum.psicode.org . Thanks for helping us debug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182669910:215,install,install,215,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182669910,1,['install'],['install']
Deployability,C++11 support for release 1.0,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238:18,release,release,18,https://psicode.org,https://github.com/psi4/psi4/issues/238,1,['release'],['release']
Deployability,"CF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauXC interface to support GPU execution. Additionally, for internally-build GauXC instances, setting `gauxc_ENABLE_GPU` to `ON` will build the internal GauXC install with GPU support. For external GauXC installs, `gauxc_ENABLE_GPU` will ensure that the external GauXC install supports GPU execution. ; - [X] Adds a new `SplitJK` derived class, `snLinK`. When Psi4 is built with GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comprehensive_jk_screening.py` pytests to test sn-LinK functionalities, given that GauXC is installed.; - [X] Adds a new",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:4335,install,install,4335,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['install'],['install']
Deployability,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:25,update,updates,25,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406,1,['update'],['updates']
Deployability,CI: Turns off v2RDM and PCM in Travis until conda modules are updated.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/930:62,update,updated,62,https://psicode.org,https://github.com/psi4/psi4/pull/930,1,['update'],['updated']
Deployability,CIWave: Minor CI patches.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/566:17,patch,patches,17,https://psicode.org,https://github.com/psi4/psi4/pull/566,1,['patch'],['patches']
Deployability,CIWave: Patches up zero indexing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/551:8,Patch,Patches,8,https://psicode.org,https://github.com/psi4/psi4/pull/551,1,['Patch'],['Patches']
Deployability,CIWavefunction updates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372:15,update,updates,15,https://psicode.org,https://github.com/psi4/psi4/pull/372,1,['update'],['updates']
Deployability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:639,update,updated,639,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,1,['update'],['updated']
Deployability,"CMake is still back magic too me, but i just tried again from scratch and actually the error occurs when making psi4-core. The Simint library is installed before and cmake finds it in the correct path. ```; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/gshell.cc.o; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/integral.cc.o; In file included from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_avx.h:7:0,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/vectorization.h:11,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/ostei/ostei_config.h:3,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/simint.h:4,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/siminteri.h:34,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/integral.cc:55:; /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_sse.h:7:35: fatal error: simint/cpp_restrict.hpp: No such file or directory; #include ""simint/cpp_restrict.hpp""; ^; compilation terminated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356928723:145,install,installed,145,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356928723,1,['install'],['installed']
Deployability,"CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1931,Install,Installing,1931,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,Can we rebase and patch up this PR now that #1591 is in as well. Be good to look at migrating this change in as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-497955232:18,patch,patch,18,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-497955232,1,['patch'],['patch']
Deployability,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276601209:146,update,update,146,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209,1,['update'],['update']
Deployability,Can you just remove the internal stage directory and make it install like all other cmake based projects?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325758134:61,install,install,61,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325758134,1,['install'],['install']
Deployability,"Can you update the description of the PR to say what it does? Plus, if it is ready to merge when the testing is complete please click ""Ready to go"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220310110:8,update,update,8,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220310110,1,['update'],['update']
Deployability,"Can you update the test to also test using MOs obtained from an SCF that did _not_ finish successfully?. I like the interface, but it'd be best to get more opinions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925:8,update,update,8,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925,1,['update'],['update']
Deployability,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:185,release,release,185,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['release'],['release']
Deployability,"Carried forward from [forums](http://forum.psicode.org/t/setting-dft-integration-grid-based-on-atom-identity/2609/2). Request that we be able to set the `DFT_SPHERICAL_POINTS` and `DFT_RADIAL_POINTS` keyword on a per-atom basis, as we do for basis sets or frozen core.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2732:69,integrat,integration-grid-based-on-atom-identity,69,https://psicode.org,https://github.com/psi4/psi4/issues/2732,1,['integrat'],['integration-grid-based-on-atom-identity']
Deployability,Cd sherrill patch 3,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3035:12,patch,patch,12,https://psicode.org,https://github.com/psi4/psi4/pull/3035,1,['patch'],['patch']
Deployability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:152,install,installed,152,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,4,['install'],"['installation', 'installed']"
Deployability,Changed opt10 TS-optimization test case to a 6-31G basis. Updated the associated test files. This runs in ~20 minutes on one core with only 1gb of memory. It's ready to go.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/255:58,Update,Updated,58,https://psicode.org,https://github.com/psi4/psi4/pull/255,1,['Update'],['Updated']
Deployability,"CheMPS2 is the latest version released today, since i need CASPT2.; Sorry, no idea how to verify tags of CheMPS2. I separately compiled psi4.0.5 and latest version of CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185853311:30,release,released,30,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185853311,1,['release'],['released']
Deployability,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:561,upgrade,upgrade,561,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,1,['upgrade'],['upgrade']
Deployability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:253,install,installed,253,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,2,['install'],"['install', 'installed']"
Deployability,"Closing this as there's nothing to be done on Psi4's side, and this will resolve naturally when Fedora package updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-272725891:111,update,updated,111,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-272725891,1,['update'],['updated']
Deployability,Closing this out as the 1.1 release is imminent. Several places link back to this thread for reference.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-301263002:28,release,release,28,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-301263002,1,['release'],['release']
Deployability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['update'],['updated']
Deployability,"Comments by @lothian in #307:. >I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. ### Notes; - Add tests for these types of EOM cases ; - If there is a bug under here it can probably be fixed in the up coming DPD update",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/502:551,update,update,551,https://psicode.org,https://github.com/psi4/psi4/issues/502,1,['update'],['update']
Deployability,CompositeJK Part 2.5: Update Reference Outputs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2954:22,Update,Update,22,https://psicode.org,https://github.com/psi4/psi4/pull/2954,1,['Update'],['Update']
Deployability,"Conda development packages updated to psi4-1.4a1.dev163 - thanks @loriab ! I must have gotten confused above, it is actually #1607 that resolves the issue. It is also marked as backport, so in case 1.3.2 is planned, we shouldn't forget. Closing this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-490665325:27,update,updated,27,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-490665325,1,['update'],['updated']
Deployability,Conda install not work,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2894:6,install,install,6,https://psicode.org,https://github.com/psi4/psi4/issues/2894,1,['install'],['install']
Deployability,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415:137,install,install,137,https://psicode.org,https://github.com/psi4/psi4/issues/415,2,['install'],['install']
Deployability,Confirmed - builds succesfully with gcc7 with this patch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/633#issuecomment-283692563:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/pull/633#issuecomment-283692563,1,['patch'],['patch']
Deployability,Confirmed fixed with the latest patch files for MRCC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1176411227:32,patch,patch,32,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1176411227,1,['patch'],['patch']
Deployability,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458:230,update,update,230,https://psicode.org,https://github.com/psi4/psi4/issues/2458,1,['update'],['update']
Deployability,Consolidated and expanded in RN: https://github.com/psi4/psi4/releases/tag/v1.3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-468774358:62,release,releases,62,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-468774358,1,['release'],['releases']
Deployability,Continuous Fast Multipole Method (CFMM),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311:0,Continuous,Continuous,0,https://psicode.org,https://github.com/psi4/psi4/pull/2311,1,['Continuous'],['Continuous']
Deployability,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295384269:42,patch,patched,42,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269,1,['patch'],['patched']
Deployability,"Cool, I think this looks great! Thank you for patching SAD up. @psi4/maintainers @CDSherrill Any last comments here before merging?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454390292:46,patch,patching,46,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454390292,1,['patch'],['patching']
Deployability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['update'],['updates']
Deployability,"Cool, thanks for the update. Big fan of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881#issuecomment-351773593:21,update,update,21,https://psicode.org,https://github.com/psi4/psi4/pull/881#issuecomment-351773593,1,['update'],['update']
Deployability,"Correct, @ryanmrichard , what you describe is what's going on. One could get confused, though, if changes to `objdir/../psi4/share` sometimes had an effect (if there had been a `make` (changes applied to `stage/...` through internal install)) and sometimes didn't. It wasn't hard to figure out, just trying to fend off others' confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240472831:233,install,install,233,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240472831,1,['install'],['install']
Deployability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,integrat,integration,271,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['integrat'],['integration']
Deployability,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:335,install,install,335,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,3,"['install', 'rolling']","['install', 'rolling']"
Deployability,Culprit identified: Boost. So _some_ non-custom-install boost libraries on _some_ architectures go haywire on _some_ DGEMMs. I'd feel better if such things announced themselves at link-time rather than run-time. My apologies for raising an overly general alarm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199094163:48,install,install,48,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094163,1,['install'],['install']
Deployability,"Currently, psi4 installs bin/xc-info, include/libxc/xc.h, lib/libxc.a that conflict with standalone libxc package.; It also installs include/libint/libint.h and lib/libint.a that conflict with standalone libint package.; Etc. If psi4 needs those packages, it should either use bundled versions internally, during build, or use external versions. Installing bundled packages causes conflicts with standalone versions. I suggest:; 1. have USE_EXTERNAL_LIBXC, USE_EXTERNAL_LIBINT, etc, that will make build to use external packages; 2. Bundled versions should only be used internally, and not installed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854:16,install,installs,16,https://psicode.org,https://github.com/psi4/psi4/issues/854,4,"['Install', 'install']","['Installing', 'installed', 'installs']"
Deployability,"D.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so -D Boost_CHRONO_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/libboost_chrono.so -D Boost_FILESYSTEM_LIBRARY_RELEASE=/cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2799,release,release,2799,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['release'],['release']
Deployability,"DEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:1888,Release,Release,1888,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Release'],['Release']
Deployability,DFT: Fixes parallel atomic update collocation_build bug,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1387:27,update,update,27,https://psicode.org,https://github.com/psi4/psi4/pull/1387,1,['update'],['update']
Deployability,DF_Helper Updates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742:10,Update,Updates,10,https://psicode.org,https://github.com/psi4/psi4/pull/742,1,['Update'],['Updates']
Deployability,"Daniel Smith <notifications@github.com>; wrote:. > Description; >; > The DFT_CUSTOM_FUNCTIONAL keyword died at some point so I started to; > examine how to re-enable it (@loriab <https://github.com/loriab>) and I; > was also bugged about HF-3C gradients (@bwb314 <https://github.com/bwb314>).; > Luckily it turns out I had already done most of the work at some point (I; > have 3 more of these branches apparently that I need to merge). Basically; > this works finishes the movement of trying to distinguish between DFT and; > SCF where SCF is now a very basic DFT ""functional"". This could lead it; > towards ""functionals"" are just SCF + stuff where the stuff could be XC,; > PCM, -D, external potentials, etc.; >; > I recall @adabbott <https://github.com/adabbott> is willing to document; > this.; > Todos; >; > Notable points that this PR has either accomplished or will accomplish.; >; > - *Developer Interest*; > - SCF is now basically a very vanilla case of DFT; > - Adds finite difference Hessians from gradients for -D corrections; > - *User-Facing for Release Notes*; > - Enables HF-3C gradients and Hessians.; >; > Status; >; > - Ready to go; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/799; > Commit Summary; >; > - XC: Work towards the UKS XC derivative kernel; > - Driver: Removes extraneous _dft_* funcs in favor of _scf_*; > - fd: Can quite fd funcs with print=0; > - gcp: Fixes analytical Hessians with fd gcp; > - proc: workaround for post-scf methods; > - xc: removes dft_functional keyword; > - Hess: Finishes up HF3C Hessians; > - DFT: Allows arbitrary dft_functionals to be called with SCF; > - DFT: Adds dft-custom test; > - DFT: Adds a MP2 example using a DFT reference; >; > File Changes; >; > - *M* psi4/driver/driver_util.py; > <https://github.com/psi4/psi4/pull/799/files#diff-0> (8); > - *M* psi4/driver/p4util/optproc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/799#issuecomment-330258817:1155,Release,Release,1155,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817,1,['Release'],['Release']
Deployability,"Dean Jonathon,. Thank you for your quick reply. I installed Psi4 by executing the bash script `Psi4conda-1.6-py38-Linux-x86_64.sh` (with the command `bash Psi4conda-1.6-py38-Linux-x86_64.sh -b -p /xstorage/tobias/bin/psi4`). I guess I installed the 1.6 version:. ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.6 release; ```; Thanks again. Best regards,. Roland",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155136649:50,install,installed,50,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155136649,3,"['install', 'release']","['installed', 'release']"
Deployability,"Dear Bartek,. FYI, I did some additional investigating and discovered that some problems were introduced in PSI4 regarding restarts. You do need to set ""force_restart true"" (that will be corrected in the next release), but you also need to specify the file numbers assigned to the binary files so that PSI4 knows where the necessary wfn data is stored. Normally the files are named using the process ID number of the psi4 parent process, which changes from run to run. However, for a restart, you need to tell PSI4 which number to use using the ""filename"" keyword. For example, if your binary files were named, e.g., psi.60235.h2o.35, the process ID was 60235. To restart, place the following line at the TOP of your input file:. filename 60235. If you also set force_restart = true, then the CC codes will try to grab the amplitudes from the appropriate file. I'll be interested in hearing if this works for you. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 4, 2013, at 10:22 AM, sbart76 notifications@github.com wrote:. > Thanks for the quick reply. I am running these jobs on my local workstation with only one drive and of which I am the only user. I keep all scratch files in the job directory by setting:; > ; > psi4_io.set_default_path('./'); > ; > in my .psi4rc file. I will check the force_restart keyword. Does the program print the information about the reason of not using the restart files somewhere? That would be useful I guess...; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29866542:209,release,release,209,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29866542,1,['release'],['release']
Deployability,"Dear Developers, . I like to know (before doing a full installation of the code) whether the new PSI4 for generation of FCIDUMP file for a subsequent dmrg calculation takes advantage of density fitting or not ?. I remember it performed a full 2-electron integral calculation in serial before entering dmrg calculation in the older version of the code. . Bests; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/458:55,install,installation,55,https://psicode.org,https://github.com/psi4/psi4/issues/458,1,['install'],['installation']
Deployability,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:368,update,update,368,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532,2,['update'],['update']
Deployability,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:455,configurat,configuration,455,https://psicode.org,https://github.com/psi4/psi4/issues/796,2,['configurat'],['configuration']
Deployability,"Dear Pis4 developers. I've got in issue when link psi4 binary:. ```; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tempnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; builtin_converters.cpp:(.text+0x1286): undefined reference to `PyUnicodeUCS4_AsWideChar'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; builtin_converters.cpp:(.text+0x455): undefined reference to `PyUnicodeUCS4_FromEncodedObject'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Ошибка 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; make: *** [all] Ошибка 2; ```. I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x. Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; http://packages.ubuntu.com/trusty/libboost-all-dev. My python interpreter support UCS-4. python -c ""import sys; print(sys.maxunicode)""; returns 1114111. python3 -c ""import sys; print(sys.maxunicode)""; returns 1114111. Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; in particular, I only need to generate MOLDEN file from SCF calculations. With respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94:1267,install,installed,1267,https://psicode.org,https://github.com/psi4/psi4/issues/94,1,['install'],['installed']
Deployability,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:823,release,release,823,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['release'],['release']
Deployability,"Dear all,. I am trying to compile psi4 on a supercomputer, which i don't have a root access to. It is based on Xeons and has the following software avaliable: . gcc/5.2.0, pgi/12.9. intel/13.1.0, intel/15.0.090. mkl/4.0.2.146, mkl/11.2.0. impi/4.0.3, impi/4.1.0-32bit, impi/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:555,release,release,555,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['release'],['release']
Deployability,"Dear all,. ```; I tried to install the latest PSI4 on my PC, whose operating system is Fedora 14. I have passed the steps ""./configure --with-opt=-O2"" and ""make"" successfully according to PSI4's manual. However, I met a trouble in ""make tests"". One of the error report is pasted below:; ```. ---. echo ""Testing omp2_5-grad1...""; Testing omp2_5-grad1...; make -C omp2_5-grad1; true; make[2]: Entering directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'; PSIO_ERROR: unit = 32, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); Traceback (most recent call last):; File ""<string>"", line 38, in <module>; File ""/usr/local/src/psi4/lib/python/driver.py"", line 671, in gradient; procedures['gradient'][lowername](lowername, **kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 459, in run_omp2_5_gradient; run_omp2_5(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 440, in run_omp2_5; scf_helper(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 757, in scf_helper; e_scf = psi4.scf(precallback, postcallback); RuntimeError: PSIO Error; file: /usr/local/src/psi4/src/lib/libpsio/error.cc; line: 116P; make[2]: **\* [omp2_5-grad1.passed] Error 1; ## make[2]: Leaving directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'. There are also many other error report which are similar to this. I am wondering what cause these errors and how can I fix them. Can you help me to install PSI4 successfully? . Looking forward to any comments and suggestions! Many thanks!. Best Regards; Xin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56:27,install,install,27,https://psicode.org,https://github.com/psi4/psi4/issues/56,2,['install'],['install']
Deployability,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/744:265,install,installed,265,https://psicode.org,https://github.com/psi4/psi4/issues/744,1,['install'],['installed']
Deployability,"Default 1.2 conda install. Even a very simple HF calculation creates and leaves behind an empty file named ""fort.56"", right next to the input file. I do not know what this file is used for (it looks like something a Fortran program would create), but I see no reason why Psi4 should leave behind litter in the working directory. Probably the easiest solution would be to just delete it at exit. PS: It seems like I have accidentally installed 1.2 instead of 1.3...oops.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584:18,install,install,18,https://psicode.org,https://github.com/psi4/psi4/issues/1584,2,['install'],"['install', 'installed']"
Deployability,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:176,update,updated,176,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700,1,['update'],['updated']
Deployability,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:2374,Release,Release,2374,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,2,"['Release', 'install']","['Release', 'install']"
Deployability,"Diagnosis: simint is sly (or, you can't defeat the header search). Completely fresh build dir, configured from the start to build simint locally with sse (`-DCMAKE_DISABLE_FIND_PACKAGE_simint=ON -DSIMINT_VECTOR=sse`). Consequently every signal in sight (see below) is set to local build and sse. _But_, there's still a simint installed alongside libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:326,install,installed,326,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['install'],['installed']
Deployability,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:320,release,release,320,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,1,['release'],['release']
Deployability,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235903234:34,install,install,34,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234,1,['install'],['install']
Deployability,Didn't we use to install the psi4 headers into `prefix/include/psi4` ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173890912:17,install,install,17,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173890912,1,['install'],['install']
Deployability,"Different keywords that do the same thing really isnt in the Psi4 keyword ethos. I would suggest simply setting the `qc_module detci` keyword as you have done in the past. FNO code is toggled [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L918). However, without some kind of overhaul to support attributes this is unlikely to help you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598#issuecomment-276377431:184,toggle,toggled,184,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276377431,1,['toggle'],['toggled']
Deployability,Difficulty building release 1.6 with MAX_AM_ERI=7,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586:20,release,release,20,https://psicode.org,https://github.com/psi4/psi4/issues/2586,1,['release'],['release']
Deployability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:344,update,updated,344,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,1,['update'],['updated']
Deployability,Do you have all the patches installed?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070618193:20,patch,patches,20,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070618193,2,"['install', 'patch']","['installed', 'patches']"
Deployability,"Doc some changes after the OCC open-heart surgery series of #1789 (series), even up scs treatment between mp2-capable modules. * [ ] test scs, sns(n), sos somewhere on a closed-shell and open-shell; * [ ] even up custom-scs-mp2 commands to dfmp2, cc, maybe dfocc; * [ ] table. | | 2 | o2 | 2.5 | o2.5 | 3 | o3 | lccd | olccd |; | --- | --- | --- | --- | --- | --- | --- | --- | --- |; | plain | y | y | y | y | y | y | y | y |; | scs | y | y | | | y | y | | |; | scs(n) | y | | | | | | | |; | scsvdw | y | | | | | | | |; | sos | y | y | | | | y | | |; | sos-pi | y | | | | | | | |; | custom | y | y | y | y | y | y | y | y | . * [ ] the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796:666,update,updated,666,https://psicode.org,https://github.com/psi4/psi4/issues/1796,2,['update'],['updated']
Deployability,Docs Update: Molecule Reading,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2105:5,Update,Update,5,https://psicode.org,https://github.com/psi4/psi4/issues/2105,1,['Update'],['Update']
Deployability,Docs Update: NumPy Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:5,Update,Update,5,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['Update'],['Update']
Deployability,Documentation Updates for CompositeJK,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3079:14,Update,Updates,14,https://psicode.org,https://github.com/psi4/psi4/pull/3079,1,['Update'],['Updates']
Deployability,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:248,install,install,248,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,2,['install'],['install']
Deployability,Dont forget you can just `conda create -n cformat -c conda-forge clangdev`. Really recommend a venv for this as it installs a lot of things you may not want floating around.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-345269703:115,install,installs,115,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-345269703,1,['install'],['installs']
Deployability,"Dunning basis updates for Li, Be, Na, Mg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1559:14,update,updates,14,https://psicode.org,https://github.com/psi4/psi4/pull/1559,1,['update'],['updates']
Deployability,ED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2109,Install,Install,2109,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,ED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not det,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3670,Install,Install,3670,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,ED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detect,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4012,Install,Install,4012,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4072,configurat,configuration,4072,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['configurat'],['configuration']
Deployability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4371,configurat,configuration,4371,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['configurat'],['configuration']
Deployability,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Integrat,Integrate,729,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['Integrat'],['Integrate']
Deployability,"Error:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:3268,install,install,3268,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"Every link I've tried on the [home page](https://psicode.org/psi4manual/master/index.html) gives me a ""Page Not Found"" error. Here's just one example: https://psicode.org/introduction. If I add /psi4manual/master between psicode.org and /introduction, I can get the correct page: https://psicode.org/psi4manual/master/introduction. I also tried the links in the releases page, and all of them also gave ""Page Not Found"" errors:; - https://psicode.org/psi4manual/1.8.1/; - https://psicode.org/psi4manual/1.7.0/; - https://psicode.org/psi4manual/1.6.1/; - https://psicode.org/psi4manual/1.6.0/. The links for 1.4 and 1.5 actually do work, so maybe everything before that does too.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3042:362,release,releases,362,https://psicode.org,https://github.com/psi4/psi4/issues/3042,1,['release'],['releases']
Deployability,Everything looks good to me for the SAPT output. Do you think we need to update the SAPT tests reference output files so that they look the same than the new output format ?; (And the example in the SAPT doc ?); It's only minor changes so we may just leave these alone.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/330#issuecomment-205082377:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205082377,1,['update'],['update']
Deployability,Everything works fine for me. The only issue I noticed in my small series of test jobs was that `nan` is printed for the user and system time. I installed via:; `conda create -n psi4env python=3.7`; `conda activate psi4env`; `conda install -c raimis -c psi4 -c conda-forge psi4=1.3.2`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-499999284:145,install,installed,145,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-499999284,2,['install'],"['install', 'installed']"
Deployability,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:46,release,release,46,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382,3,"['install', 'release']","['install', 'installs', 'release']"
Deployability,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:441,release,release,441,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323,1,['release'],['release']
Deployability,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:27,update,updated,27,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681,1,['update'],['updated']
Deployability,"Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone yesterday, but haven't heard back. He is retired now, so I don't know if his Cambridge email is active; his seminal red book was updated last year so I think he's still doing some work. I doubt he will object to our distribution idea; I think he would've chosen a different license to GPL if he didn't want his code to be used in this way. Regardless, I think we should wait a week to hear back and merge the PR if we don't get a response. He deserves to have a say in how we handle his code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201122403:202,update,updated,202,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201122403,1,['update'],['updated']
Deployability,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-260094686:561,Update,Update,561,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686,1,['Update'],['Update']
Deployability,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2136:384,Install,Installation,384,https://psicode.org,https://github.com/psi4/psi4/issues/2136,2,"['Install', 'install']","['Installation', 'install']"
Deployability,"FWIW, I'm crudely patching out the internal libint on Debian/Ubuntu: http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup. I wasn't 100% sure this was kosher, but am glad it's going to (properly) happen upstream as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-221837384:18,patch,patching,18,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-221837384,3,['patch'],"['patch', 'patches', 'patching']"
Deployability,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:149,install,install,149,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,2,['install'],['install']
Deployability,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-272589229:117,update,update,117,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229,4,"['install', 'update']","['installed', 'update']"
Deployability,Fail to install with mamba,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:8,install,install,8,https://psicode.org,https://github.com/psi4/psi4/issues/2621,1,['install'],['install']
Deployability,Failed v1.5 install from Conda in Docker,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596:12,install,install,12,https://psicode.org,https://github.com/psi4/psi4/issues/2596,1,['install'],['install']
Deployability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:438,update,update,438,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,1,['update'],['update']
Deployability,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:47,install,installed,47,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,5,['install'],"['install', 'installed', 'installing']"
Deployability,"Figured it out. The problem occurs in a few areas, so I'll fix them all and send a patch. Or I can push directly to your repo if you prefer; I'd need permissions to do that. It's just a case of including some of the Boost headers in different orders.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235115266:83,patch,patch,83,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235115266,1,['patch'],['patch']
Deployability,"File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1386, in select_mrcc; return func(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 4935, in run_mrcc; ref_wfn = scf_helper(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 223, in scf_initialize; self.guess(); KeyboardInterrupt; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:9310,install,install,9310,https://psicode.org,https://github.com/psi4/psi4/issues/3159,7,['install'],['install']
Deployability,Final release notes at: https://github.com/psi4/psi4/releases/tag/v1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485#issuecomment-305368061:6,release,release,6,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-305368061,2,['release'],"['release', 'releases']"
Deployability,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:747,install,install,747,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['install'],['install']
Deployability,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:238,patch,patch,238,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438,1,['patch'],['patch']
Deployability,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2265:348,A/B,A/B,348,https://psicode.org,https://github.com/psi4/psi4/issues/2265,2,['A/B'],['A/B']
Deployability,"First step is it'll replace `psi4/label/dev`. The timing of a new official release and hence `psi4/label/main` is beyond my control (that is, effectively I can veto but not assert). But absolutely, the plan is for `gcc_linux-64`-built Psi to trickle ever upward and replace the `gcc-5` presently distributed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347223179:75,release,release,75,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347223179,1,['release'],['release']
Deployability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:109,patch,patch,109,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['patch'],['patch']
Deployability,Fix bug in lpb fock routine and update tests,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2963:32,update,update,32,https://psicode.org,https://github.com/psi4/psi4/pull/2963,1,['update'],['update']
Deployability,Fix diffuse external potential after L2 upgrade,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2068:40,upgrade,upgrade,40,https://psicode.org,https://github.com/psi4/psi4/pull/2068,1,['upgrade'],['upgrade']
Deployability,Fix memory leak of all DFT integration coordinates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2352:27,integrat,integration,27,https://psicode.org,https://github.com/psi4/psi4/pull/2352,1,['integrat'],['integration']
Deployability,"Fixed a bug in the stability analysis: some rotation parameters for the orbitals were not correct, it should be easier to converge on a stable solution now. SAPT: changed the output according to Friday's meeting. Updated the tests for SAPT and the Sphinx manual as well.; @CDSherrill : you can have a look at the updated output.ref to make sure the output looks good to you.; @loriab : I did not modify the Psivars yet. Do you want to do it by passing a SCALE_FACTOR PsiVars to your code computing all the other variables, or do you prefer some other way?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248:213,Update,Updated,213,https://psicode.org,https://github.com/psi4/psi4/pull/248,2,"['Update', 'update']","['Updated', 'updated']"
Deployability,Fixed after psi4/psi4#801 after I properly installed dot/graphviz on the building computer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792#issuecomment-331600219:43,install,installed,43,https://psicode.org,https://github.com/psi4/psi4/issues/792#issuecomment-331600219,1,['install'],['installed']
Deployability,"Fixes #2493 . ## Description; <!-- Provide a brief description of the PR's purpose here. -->. For memory safety, the integrals in libmints should be returned as unique_ptrs rather than raw pointers. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All integrals in libmints now return a unique_ptr rather than a raw pointer; - [x] Call sites refactored to match; ## Questions; - [x] Are my refactors to the call sites correct? Many are just an immediate release of the unique_pointer, with the assumption that the memory management / pointer deletion occurs elsewhere; - [x] Should iterators eg `CartesianIter` also return unique_ptrs?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775:332,release,release,332,https://psicode.org,https://github.com/psi4/psi4/pull/2775,2,['release'],['release']
Deployability,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1906:508,release,releases,508,https://psicode.org,https://github.com/psi4/psi4/issues/1906,1,['release'],['releases']
Deployability,"Footnote [2] of the capabilities table in the manual is a little unclear about what methods are available:. RHF and UHF reference are available, however the latter one should be; requsted from DFOCC module. DF-MP2 is recommended as a faster; alternative. Update and revise manual. Check with Ugur about ROHF. Make appropriate defaults.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106:255,Update,Update,255,https://psicode.org,https://github.com/psi4/psi4/issues/106,1,['Update'],['Update']
Deployability,"For MKL, I did not install the development package yet.; As for psi4, I was using the conda distribution, but I am trying to build from source.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380478391:19,install,install,19,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380478391,1,['install'],['install']
Deployability,"For `conda` n00bs like myself who want a speclfic command to execute, your `Dockerfile` would now look like the following (using python3.9 since that is what comes with `miniconda3:4.10.3`). Can confirm this works. @loriab if you suggest any changes to the command below just let me know. ```docker; FROM continuumio/miniconda3:4.10.3; RUN conda install psi4=1.5 -c psi4 && \; conda install psi4::libint2=*=hc9558a2_9 pytest=5 psi4::pcmsolver=*=py39h6d17ec8_2 -c psi4; ```. > For solid reproducibility, the psi4conda installers have the advantage. What exactly do you mean by this? Is there a preferred way to install psi4 other than `conda install psi4=1.5 -c psi4`? Pardon my lack of depth with the nuances of conda distributions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151756100:346,install,install,346,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151756100,5,['install'],"['install', 'installers']"
Deployability,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:265,install,install,265,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789,1,['install'],['install']
Deployability,"For example, there seems no tag that corresponding to the dev package ""linux-64/psi4-1.2a1.dev419+809f363-py36_0.tar.bz2"". How can I find the code, commits or release notes? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/763:159,release,release,159,https://psicode.org,https://github.com/psi4/psi4/issues/763,1,['release'],['release']
Deployability,"For final release:. ### Repo/GH state. * follow tagging procedure; * before reengaing the ""include admin"" button, push a branch at the tag commit (not the records commit). ```; >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x; ```. * set up new branch as protected branch. ### conda stage. * edit and switch to specific `git_tag` instead of `master` for psi4-multiout (L&M) and psi4-docs (L); * in `ltrtver` in `conda_build_config.yaml`, make a new non-dev line (probably a ditto)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517:10,release,release,10,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517,1,['release'],['release']
Deployability,"For fitting basis sets, SAPT mostly uses `DF_BASIS_SAPT`, which defaults to RI (http://psicode.org/psi4manual/master/sapt.html#df-basis-sapt). The Elst10 and Exch10 are governed by `DF_BASIS_ELST`, which defaults to `DF_BASIS_SAPT` (which defaults to RI). However, this can go awry for heavy elements, whereupon it is recommended to use JK for `DF_BASIS_ELST`. An important bit of the reasoning behind this is that for the small basis sets used for SAPT0, RI is smaller than JK (for cc-pVDZ, 28 to 46). If we're going to change the defaults so that everything works at its best without intervention, now is the time to do it.; - [ ] Run a A·T 0/jadz with SAPT/ELST RI/RI, RI/JK, JK/JK to see if there's significant time penalties; - [ ] If that's not significant, should ELST always be JK to suppress failure mode?; - [ ] Do we want consistent fitting basis used across all terms?; - [ ] If any changes made, update Note in docs about changes in Spring 2016. sapt2 is the most relevant test case",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317:909,update,update,909,https://psicode.org,https://github.com/psi4/psi4/issues/317,1,['update'],['update']
Deployability,"For future reference, the commented out test is causing Ecosystem build fails. We don't understand why, but it's holding up the rest of the development pipeline, so we're commenting it out temporarily. This should be fixed by the next full release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738:152,pipeline,pipeline,152,https://psicode.org,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. But yes, I can reproduce this on Fedora 24 and Fedora 25, although I'm not sure why this happens: I have been able to run jobs with the Fedora package before. I'm waiting on the 1.1 release to update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263449298:303,release,release,303,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263449298,2,"['release', 'update']","['release', 'update']"
Deployability,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:356,upgrade,upgrade,356,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,2,"['install', 'upgrade']","['installs', 'upgrade']"
Deployability,"For information of my system, it was mkl 2018.3 update 3 and gcc 5.4.0 (probably it does not have icpc). Here is the result of `ldd -v /share/psi4/lib/psi4/core.so` (my prefix install path = /share/psi4):; ```; linux-vdso.so.1 => (0x00007fffbe1a5000); libmkl_rt.so => not found; libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fe75a99a000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fe75a691000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fe75a48d000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fe75a10b000); libgomp.so.1 => /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00007fe759ee9000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fe759cd3000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe759909000); /lib64/ld-linux-x86-64.so.2 (0x00007fe75de8f000). Version information:; /share/psi4/lib/psi4/core.so:; libgcc_s.so.1 (GCC_3.0) => /lib/x86_64-linux-gnu/libgcc_s.so.1; libpthread.so.0 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libpthread.so.0; libgomp.so.1 (OMP_2.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_4.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (OMP_1.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (OMP_3.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_1.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_2.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libm.so.6 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libm.so.6; libc.so.6 (GLIBC_2.3) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.4) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.3.4) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.14) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libc.so.6; libstdc++.so.6 (GLIBCXX_3.4.14) => /usr/lib/x86_64-linux-gnu/libstdc++.so.6; libstdc++.so.6 (GLIBCXX_3.4.18) => /usr/lib/x86_64-linux-gnu/libstdc++.so.6; libstdc++.so.6 (CXXABI_1.3.1) => /usr/lib/x86_64-linux-gnu/l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397094612:48,update,update,48,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397094612,2,"['install', 'update']","['install', 'update']"
Deployability,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:188,install,installed,188,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['install'],['installed']
Deployability,For note: I have enabled the installation of adcc (via pip) on Travis via `-DENABLE_adcc=ON` for testing purposes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043:29,install,installation,29,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043,1,['install'],['installation']
Deployability,"For reference, Debian fixed this slightly differently: https://salsa.debian.org/debichem-team/psi4/-/blob/master/debian/patches/cmake_pymodulesuffix.patch. ```; --- a/cmake/FindPythonLibsNew.cmake; +++ b/cmake/FindPythonLibsNew.cmake; @@ -78,7 +78,7 @@; print(sys.prefix);; print(s.get_python_inc(plat_specific=True));; print(s.get_python_lib(plat_specific=True));; -print(s.get_config_var('SO'));; +print(s.get_config_var('SO') or s.get_config_var('EXT_SUFFIX'));; print(hasattr(sys, 'gettotalrefcount')+0);; print(struct.calcsize('@P'));; print(s.get_config_var('LDVERSION') or s.get_config_var('VERSION'));; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1407774402:120,patch,patches,120,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1407774402,2,['patch'],"['patch', 'patches']"
Deployability,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263048284:712,patch,patch,712,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284,2,"['install', 'patch']","['installation', 'patch']"
Deployability,"For the long-term we have the required Hessian-vector products. We need #886 would allow us to optimize them, planned for 1.3 when Python-SCF iterations go live. Please do make a PR for 1) and 2) as they are quite needed before 1.2 is released.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973#issuecomment-383228055:235,release,released,235,https://psicode.org,https://github.com/psi4/psi4/issues/973#issuecomment-383228055,1,['release'],['released']
Deployability,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:807,install,install,807,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,1,['install'],['install']
Deployability,"For this I plan on setting the `DOCC` keyword in the test case and then printing a warning in `UHF` and `CUHF` that if a singlet is requested these things *can* go wonky in the presence of degeneracies. There are better solutions that range greatly in time, but I think this at least covers it. Ill update #736 unless anyone has objections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-308200161:299,update,update,299,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-308200161,1,['update'],['update']
Deployability,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783553:53,pipeline,pipeline,53,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553,1,['pipeline'],['pipeline']
Deployability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:395,update,updates,395,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,1,['update'],['updates']
Deployability,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:414,update,updated,414,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031,1,['update'],['updated']
Deployability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:291,release,release,291,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,3,['release'],['release']
Deployability,"From my perspective, we need to figure out the tuple data type in `index.cc` before I can flatten the `tuple` member of the `IndexIterator`, before I can run final speed tests. I was hoping Jet could show me VTune by then, but if that doesn't happen, I'll just run some computations from Allen's recent paper using Mk-MRCC with both versions and see if the update causes notable slowdowns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573:357,update,update,357,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573,1,['update'],['update']
Deployability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:387,update,updated,387,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,2,"['install', 'update']","['installed', 'updated']"
Deployability,"From the text on this issue, it is not entirely clear to what the release notes are relative to. Is this 3.4.0 or 4.0beta2? This should be mentioned in the opening paragraph of the final version I think",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220827431:66,release,release,66,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220827431,1,['release'],['release']
Deployability,Frozen natural orbitals shouldn't be toggled with nat_orbs true,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598:37,toggle,toggled,37,https://psicode.org,https://github.com/psi4/psi4/issues/598,1,['toggle'],['toggled']
Deployability,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:336,update,update,336,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858,1,['update'],['update']
Deployability,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277145466:408,update,update,408,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466,1,['update'],['update']
Deployability,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5298,configurat,configuration,5298,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['configurat'],['configuration']
Deployability,Further CI update - it seems the ddd-deriv test fails with this PR... but only on Windows.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138:11,update,update,11,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138,1,['update'],['update']
Deployability,"GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comprehensive_jk_screening.py` pytests to test sn-LinK functionalities, given that GauXC is installed.; - [X] Adds a new file, `gauxc_writer.py` to generate HDF5 files as input for GauXC's `standalone_driver` functionality. Reference files for benzene at the cc-pVDZ, cc-pVTZ, and cc-pVQZ basis set have been added, and a `test_gauxc_writer.py` file has been added to test the writer's functionality, given that GauXC is installed. . ## Notes; - Unlike COSX, which has a two-grid scheme currently, sn-LinK uses a single-grid scheme, simply converging the SCF on a single grid and leaving it at that. A multi-grid sn-LinK scheme is a potential idea for the future, but it is likely to be added as a separate PR.; - In terms of interfacing to GauXC, this PR only handles interfacing to the GauXC sn-LinK exact exchange algorithm through `CompositeJK`. GauXC, as I understand, also has capabilities for providing features such as standardized grids and functionals, but that is beyond the scope of this PR. ; - Currently, there is a an issue in the code wherein the code will break for cases where `SNLINK_FORCE_CARTESIAN` is turned on for calculations with symmetry enabled (i.e., non-C1 symmetry). For now, I simply have the code throw an exception for such cases, but it's worth noting. . ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] All or relev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:5590,install,installed,5590,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['install'],['installed']
Deployability,General MCSCF updates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/482:14,update,updates,14,https://psicode.org,https://github.com/psi4/psi4/pull/482,1,['update'],['updates']
Deployability,"Geom looks reasonable, and the calculation performed with the ghost atoms as *real* atoms goes just fine. Just this portion of the counterpoise-corrected intene goes off the rails. I've tested in both 1.6.x and 1.7.x; I don't have 1.8.x installed but if someone else does it's a very light weight calc to try. . Input:; ```set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); ```. Output:. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (inplace). Git: Rev (inplace). D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:237,install,installed,237,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['install'],['installed']
Deployability,Geometry not updated for energy surface scan with dummy atoms,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:13,update,updated,13,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['update'],['updated']
Deployability,Get 1.3 from here: https://admiring-tesla-08529a.netlify.com/installs/v13/. I have no fort.56 files with it,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475855410:61,install,installs,61,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855410,1,['install'],['installs']
Deployability,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968:182,install,installed,182,https://psicode.org,https://github.com/psi4/psi4/issues/1968,1,['install'],['installed']
Deployability,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2220:309,upgrade,upgrade,309,https://psicode.org,https://github.com/psi4/psi4/issues/2220,1,['upgrade'],['upgrade']
Deployability,"Glad it's out there. Needs some patching up, will do in another pass. . -Daniel Smith; Sent from my iPhone. . > On Jun 24, 2016, at 22:04, Lori A. Burns notifications@github.com wrote:; > ; > @dgasmith, n-body docs now show up – http://psicode.org/psi4manual/master/nbody.html; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/426#issuecomment-228502764:32,patch,patching,32,https://psicode.org,https://github.com/psi4/psi4/pull/426#issuecomment-228502764,1,['patch'],['patching']
Deployability,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:459,update,updates,459,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147,1,['update'],['updates']
Deployability,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263098427:104,release,release,104,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427,6,"['install', 'release', 'update']","['install', 'release', 'releases', 'update']"
Deployability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:354,update,update,354,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['update'],['update']
Deployability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:23,update,updated,23,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,4,['update'],"['update', 'updated']"
Deployability,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:50,update,updated,50,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249,2,['update'],['updated']
Deployability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:1390,update,update,1390,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,1,['update'],['update']
Deployability,"Good news: it works fine for me. The patch below (n/c from @mlestep, I don't think) gives the output below (it just needed to be told to compute something).; ```; -; - outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + if (title_ == """") {; + outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; + } else {; + outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + }; ```; ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn, ""MULTIPOLES(1)""); ```; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; OEProp: No title given, name of density matrix used for the following properties is SCF density. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electric (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417462300 to convert to Debye; Dipole X : 0.0000000 0.0000000 0.0000000; Dipole Y : 0.0000000 0.0000000 0.0000000; Dipole Z : -0.2704549 1.1770271 0.9065722. --------------------------------------------------------------------------------; ```. Bad news: we [lost a test](https://github.com/psi4/psi4/commit/71bf174e60bc54b6a7424ce13dd28cef264fa850) (one of the two cc properties ones) and it fails. @amjames or TDC group, could you take a look?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904:37,patch,patch,37,https://psicode.org,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904,1,['patch'],['patch']
Deployability,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232799162:245,release,release,245,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162,4,['release'],['release']
Deployability,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220846631:27,release,release,27,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631,2,['release'],['release']
Deployability,"Good question. The todo list is [here](https://github.com/psi4/psi4/projects/3). Except for a couple things (basis set and dkh changes), it's mainly a task of finishing up the interfacing of other software that works with Psi4, rather than Psi4 itself. I'd venture a RC w/i 3 weeks. What's your software release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278019226:304,release,release,304,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278019226,1,['release'],['release']
Deployability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:220,install,install-libefp-so,220,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,3,['install'],"['install-libefp-so', 'install-libint-', 'install-pcmsolver']"
Deployability,"Good to know, I updated my comment... Would be good to have tests for these integrals though. @andysim could the pseudospectral ints be handled by M-D somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101:16,update,updated,16,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101,1,['update'],['updated']
Deployability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:1403,Install,Install,1403,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,1,['Install'],['Install']
Deployability,Got it!. I created the p4env via `conda create -n p4env psi4 -c psi4` and then used pip to install rdkit via `pip install rdkit`. closing issue,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530:91,install,install,91,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530,2,['install'],['install']
Deployability,"Great idea! I still have some concerns about potential ways to abuse `compute_gradient`, but my test cases won't even run for reasons far beyond the scope of this PR. Issue list is about to grow, but I'll be happy with the PR once the tests are updated. Thanks for this, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948:245,update,updated,245,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948,1,['update'],['updated']
Deployability,Great to hear. I've updated the `psi4-dev` package with the extra flags. Please let me know if it gives further trouble.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386861610:20,update,updated,20,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386861610,1,['update'],['updated']
Deployability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:311,patch,patch,311,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['patch'],['patch']
Deployability,Great! Can you also update `output.ref` in `tests/dft1`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453#issuecomment-236929158:20,update,update,20,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-236929158,1,['update'],['update']
Deployability,"Great! If you're not already, adding `--solver libmamba` to the solve can improve the speed considerably. (You may need to install `conda-libmamba-solver` to base env https://conda.github.io/conda-libmamba-solver/getting-started/ .)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469:123,install,install,123,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469,1,['install'],['install']
Deployability,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,integrat,integration,143,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380,1,['integrat'],['integration']
Deployability,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275136191:49,patch,patch,49,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191,2,"['patch', 'update']","['patch', 'update']"
Deployability,"Great, thanks for patching this up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/553#issuecomment-267800015:18,patch,patching,18,https://psicode.org,https://github.com/psi4/psi4/pull/553#issuecomment-267800015,1,['patch'],['patching']
Deployability,"Great, thanks for working on this. I merged in those patches, lets see what the CI brings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619543286:53,patch,patches,53,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619543286,1,['patch'],['patches']
Deployability,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171668610:398,integrat,integrated,398,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610,1,['integrat'],['integrated']
Deployability,"Great. And it looks like everything in `lib/scripts` gets installed, so no special action needed there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/142#issuecomment-171780349:58,install,installed,58,https://psicode.org,https://github.com/psi4/psi4/issues/142#issuecomment-171780349,1,['install'],['installed']
Deployability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:59,integrat,integration,59,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,2,['integrat'],['integration']
Deployability,"Greetings to all. I've build the latest v1.7 release successfully but met some problem when running the test suites.; Test 243 failed with the following error:. ```bash; 243: psi4.driver.p4util.exceptions.TestComparisonError: root; 243: Arrays differ.	_compare_recursive: computed value does not match to atol=1e-06 (o-e: RMS 5.0e-01, MAX 1.6e+00, RMAX 2.0e+00).; 243: Expected:; 243: [[ 0.0291933 -0.3287121 0.7914111 -0.5145527]; 243: [ 0.1791863 -0.7419178 0.1002281 0.6382825]; 243: [ 0.5820757 -0.3705022 -0.5095786 -0.5140483]; 243: [ 0.7926083 0.4519231 0.3224164 0.2521612]]; 243: Observed:; 243: [[-0.029193323165 0.328712055763 -0.791411145833 0.514552749997]; 243: [ 0.179186290535 -0.741917790628 0.100228136947 0.638282528194]; 243: [ 0.582075699497 -0.370502185067 -0.509578634502 -0.514048272222]; 243: [ 0.792608291164 0.451923120902 0.322416398582 0.252161169688]]; 243: Difference (passed elements are zeroed):; 243: [[-0.058386623165 0.657424155763 -1.582822245833 1.029105449997]; 243: [ 0. 0. 0. 0. ]; 243: [ 0. 0. 0. 0. ]; 243: [ 0. 0. 0. 0. ]]; ```. It seems the first row is completely negated?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2828:45,release,release,45,https://psicode.org,https://github.com/psi4/psi4/issues/2828,1,['release'],['release']
Deployability,Guess you are looking for these: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273774074:62,release,releases,62,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273774074,1,['release'],['releases']
Deployability,"HECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate them back to libmints instead of SCF (#1759); - Let the `Deriv` class be instructable in the flavor it computes, rather than trying to devine SCF vs correlated (#1756); - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:6557,Update,Update,6557,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Update'],['Update']
Deployability,"HI @loriab,. I'm still having this issue with psi 1.2 (the released, not the dev one). It's quite erratic - sometimes it works, sometimes it doesn't.; I was trying to do some reproducible tests, but I couldn't in the end. I suspect the size of the path to the file is somehow relevant, but I really couldn't prove it with those tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442801726:59,release,released,59,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442801726,1,['release'],['released']
Deployability,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:211,release,release,211,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991,1,['release'],['release']
Deployability,Have you modeled on the examples [here](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4)? . You can work from conda mkl nowadays with `conda install mkl-devel`. cmake commands are https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-dev-src/psi4DepsMKLCache.cmake#L15-L16,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380309166:197,install,install,197,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380309166,1,['install'],['install']
Deployability,"Have you pulled tags after the latest release? `git fetch upstream ""refs/tags/*:refs/tags/*""`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919:38,release,release,38,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919,1,['release'],['release']
Deployability,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:15,install,installing,15,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540,6,"['install', 'release']","['install', 'installation', 'installed', 'installing', 'releases']"
Deployability,"Haw can I update my basis set list?. BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 2 for key BASIS among:; Shell Entries: [u'AU']; Basis Sets: [(u'DEF2-QZVP', u'DEF2-QZVP', None)]; File Path: /lustre/home/drninko19/RESTORED/naftalen/SAPT, /lustre/home/drninko19/RESTORED/naftalen/SAPT, /lustre/home/drninko19/psi4conda/share/psi4/basis; Input Blocks:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/issues/917,1,['update'],['update']
Deployability,"Hear ye, hear ye, the `1.3a1` tag is released. Commits after and including it may generate slightly different results due to the CODATA 2010 --> 2014 change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-425681815:37,release,released,37,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-425681815,1,['release'],['released']
Deployability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,configurat,configuration,1065,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,1,['configurat'],['configuration']
Deployability,"Hello Psi4. I have been doing some `oeprop` calculations and noticed that the `oeprop` module is case-sensitive, meaning some properties are not computed if requested from `oeprop` in lower case. Perhaps it is a common knowledge, but since this was not mentioned in the `oeprop` documentation - I bring it here. However, my issue is related to `MBIS_VOLUME_RATIOS`. When given in lower case to `oeprop` - Psi4 performs free-atom calculations for each atom type in the molecule (confirmed by `.log` file contents too), but does not perform (or at least does not print) the MBIS volume ratios. Thus, it seems like it does some premilinary MBIS calculations to get free-atom volumes, which is a bit surprising since I would expect it to ignore the `mbis_volume_ratios` option whatsoever (since it's lower-case). When given in upper case - Psi4 runs and prints as expected. The issue is really when the option is given in lower case. Observed with both Psi4 v.1.8 and 1.8.2 installed via `conda-forge`. Code to reproduce:. ```python; molecule lig {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. set basis def2-TZVPPD; set print 2. grad, wfn = gradient('wb97m-d3bj', return_wfn=True); oeprop(wfn, 'dipole', 'quadrupole', 'mbis_volume_ratios'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3085:970,install,installed,970,https://psicode.org,https://github.com/psi4/psi4/issues/3085,1,['install'],['installed']
Deployability,"Hello!. I'm trying to compile Psi4 on my laptop and I have a problem. As described here [https://github.com/psi4/psi4/wiki/3_Building#builddetailed], I've run setup script, then I've entered $top/objdir and typed 'make -j8'. Compilation was successful, but I've got a linking error. Operating system is ArchLinux 4.2.5. I have Python2.7 and Python3.5 both installed on my computer, LAPACK, BLAS, boost, perl are also installed. It seems like ld cannot link psi4 with boost::regex. When I didn't specified usage of Python2 in the setup script command line, there were linking errors due to different versions of python in Psi (python3) and python in boost (python2). Without specifying '--chemps2 off' the compilation also fails to start. To help setup script in detecting boost libraries on my computer, I've tried to run setup with '--boost-incdir=/usr/include --boost-libdir=/usr/lib' options. I've also tried to find in automatically generated makefiles the invocation of ld (I wanted to add option '-lboost_regex' to linker), but I have not found.; Could you tell me, please, what is wrong? How can I fix this problem?. Thank you very much!; Alexander. Output of the 'setup' script:; [piton@avo psi4]$ ./setup --chemps2 off --python=/usr/bin/python2; cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:356,install,installed,356,https://psicode.org,https://github.com/psi4/psi4/issues/312,2,['install'],['installed']
Deployability,"Hello, . I install psi4 from github in Ubuntu 16.04 with most recent version of intel MKL library, then I test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of outp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038:11,install,install,11,https://psicode.org,https://github.com/psi4/psi4/issues/1038,1,['install'],['install']
Deployability,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:80,install,installed,80,https://psicode.org,https://github.com/psi4/psi4/issues/2060,6,"['configurat', 'install']","['configuration', 'installed']"
Deployability,"Hello, ; I work at OpenEye Scientific Software where we use psi4 in a couple of our products. This week one of our development packages started failing for no reason I could identify. We have been working with version 1.5, planning to deploy our packages with that next week (upgrading to 1.6 next time). Despite no changes I can find on your end something in the last week seems to make it impossible to build a conda environment with psi4 1.5 anymore. . I get the same failures with a very minimal conda environment that we do on our more complex cloud platform. @zachglick is interning with my team this summer and was also able to replicate this. ; Below is the commands we used to build a new conda enviroment:; `conda create -n test_env -c conda-forge -c psi4 -c psi4 python=3.7 psi4==1.5+e9f4d6d dftd3==3.2.1 --yes`; (note, I've tried python 3.7, 3.7.12, and 3.8 on my mac). This script results in a segmentation fault ; ```; import psi4. # make output file; psi4_output = ""minimal_env.dat""; print(""set output file path""); psi4.set_output_file(psi4_output). # make molecule; print(""create molecule...""); molecule = psi4.geometry(""""""O 1.6406245231628418 2.186539888381958 0.3502783477306366; C 0.8303495645523071 1.106687068939209 0.17728924751281738; C 0.26523858308792114 0.47432053089141846 1.2845896482467651; C -0.5650492906570435 -0.6324407458305359 1.1073246002197266; C -0.8302973508834839 -1.1067066192626953 -0.17723894119262695; N -1.6608778238296509 -2.2135820388793945 -0.3546023368835449; C -2.3128416538238525 -2.9721903800964355 0.626854419708252; O -2.283581256866455 -2.8034048080444336 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.284630060195",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:235,deploy,deploy,235,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['deploy'],['deploy']
Deployability,"Hello, I am just trying to test my new installation of Psi4 and i see that It cannot find my `conda` installation for some reason. I am using Ubuntu 19.04 and installed Psi4 using `apt-get`. the python installation i have should be in my `conda` install, and should be in my system path, but psi4 is not picking up on it. . Do i need to install psi4 with `conda`, or can i keep my current installation as it is? I'd rather not install psi4 using `conda-forge` as it is really slow, while the PPA is pretty fast. Advice?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705:39,install,installation,39,https://psicode.org,https://github.com/psi4/psi4/issues/1705,8,['install'],"['install', 'installation', 'installed']"
Deployability,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:472,configurat,configuration,472,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['configurat'],['configuration']
Deployability,"Hello, I've downloaded conda and Psi4 into my Ubuntu, along with Jupyter Notebook, but when I go to run the following code into my jupyter-notebook:. ```; import psi4; psi4.__version__. I receive this error:. ModuleNotFoundError Traceback (most recent call last); /tmp/ipykernel_2200/2591947057.py in <module>; ----> 1 import psi4; 2 psi4.__version__. ModuleNotFoundError: No module named 'psi4'; ```; I have conda installed psi4 and conda -V works properly. When I do Psi4 test I recieve: ""64 passed, 39 skipped, 7746 deselected, 2 xfailed"". The two that have failed are: . psi4conda/lib/python3.10/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp XFAIL (EFP not transm...) [ 32%]; psi4conda/lib/python3.10/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput ...) [ 58%]. Any recommendations on what I can do to resolve these issue(s) or what I can check would be very helpful, thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188:415,install,installed,415,https://psicode.org,https://github.com/psi4/psi4/issues/3188,1,['install'],['installed']
Deployability,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329:18,install,installed,18,https://psicode.org,https://github.com/psi4/psi4/issues/2329,2,"['configurat', 'install']","['configurated', 'installed']"
Deployability,"Hello,. **Question 1**. I was wondering if you could give me the scaling factors for `mp2` level of theory and basis sets: `aug-cc-pvdz` and `cc-pvqz` for harmonic analysis. . **Question 2**. I read a lot about IR intensities in our previous threads about it being released in psi4 1.5, is this feature released yet?. **Question 3**. There is a keyword called ""mode"" to specify the frequency of interest and I saw it in the documentation but didn't know what parameters I could specify. Is there a way to isolate only anharmonic if that makes sense. . Thank you,; -Sulstice",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698:265,release,released,265,https://psicode.org,https://github.com/psi4/psi4/issues/2698,2,['release'],['released']
Deployability,"Hello,. I am trying to compile a plug-in as described in http://www.psicode.org/psi4manual/master/plugins.html .; The plug-in is one of those used as example (https://github.com/psi4/psi4/tree/master/plugins/mointegrals). All I did is: ; 1. Create a directory. ; 2. Copy into it the files from the last link.; 3. Execute: `psi4 --new-plugin myplugin +mointegrals`; 3''. Alternatively I tried `psi4 --new-plugin myplugin mointegrals`; 4. Change dir to the new directory and execute `make`. It returns:; `Makefile:15: /build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars: No existe el archivo o el directorio; make: *** No hay ninguna regla para construir el objetivo «/build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars». Alto.`; (The file or directory doesn't exist. There is no rule to build the target. Stop.). What I'm doing wrong?. My work station is running linux Ubuntu LTS 14.04. The psi4 version is the last stable release. . I'm trying to compile the plug-in with the hope it helps me to build the full CI matrix. If Psi4 provides a simple way to generate the Hamiltonian matrix elements it would be even more useful to me. Thank you very much for your time and the opportunity of using your software.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:938,release,release,938,https://psicode.org,https://github.com/psi4/psi4/issues/308,1,['release'],['release']
Deployability,"Hello,. I am working on a university project and want to confirm that Psi4 is running correctly. When I run the test that the binary installation guide specifies I get the following error:. ![image](https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675:133,install,installation,133,https://psicode.org,https://github.com/psi4/psi4/issues/675,1,['install'],['installation']
Deployability,"Hello,. I'm a developer at Schrodinger working on our QM engine, Jaguar. Recently I implemented wB97X-D3 and was using PSI4 to check my results. Interestingly, I found discrepancies in our SCF energies (difference of 0.003 Ha on a methane molecule), but the dispersion corrections matched to 1e-6. . After some investigation, I believe PSI4's wB97X-D3 functional is using the wrong parameters for the functional (the dispersion correction seems fine). . If you look in the output file, you can see . > ==> DFT Potential <==; >; > => Composite Functional: WB97X-D3ZERO <= ; >; > wB97X-d3zero Hyb-GGA Exchange-Correlation Functional; >; > J.-D. Chai and M. Head-Gordon, J. Chem. Phys. 128, 084106 (2008); >; > ....; > => Exchange-Correlation Functionals <=; >; > 1.0000 wB97X range-separated functional; >; > => Exact (HF) Exchange <=; >; > 0.8423 HF,LR [omega = 0.3000]; > 0.1577 HF . The HF exchange and omega printouts indicate that you are using wB97X parameters in the functional. But note that wB97X and wB97X-D3 differ in their functional parameters (for instance in wB97X-D3, omega=0.25. Other parameters differ as well. See Chai et al, dx.doi.org/10.1021/ct300715s, Table 1 for the full list). I did some testing by substituting wB97X parameters into Jaguar's wB97X-D3 call. Indeed, Jaguar then returns matching SCF energies with PSI4's wB97X-D3. I was comparing to PSI4 version: Psi4 1.4a2.dev723, Git: Rev {master} fb499f4. If you guys have fixed this in a newer version of PSI4, then great! If not, perhaps the parameters could be updated to match the paper? Of course, if I'm mistaken please let me know as well. Cheers,; Alan Chien",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2206:1541,update,updated,1541,https://psicode.org,https://github.com/psi4/psi4/issues/2206,1,['update'],['updated']
Deployability,"Hello,. Somehow the `pytest` module is imported during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/mi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:169,install,installing,169,https://psicode.org,https://github.com/psi4/psi4/issues/3003,4,"['install', 'patch']","['install', 'installed', 'installing', 'patch']"
Deployability,"Hello,. The short answer is, at the moment, no. As said above, nothing in these equations prevents parallelism, but the equations are extremely complex and so is the code...; Improving the parallelism of SAPT0, which is much simpler, is on the pipeline though.; Sorry we can't help more for now, but if you know someone who can code, contributions are welcome!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-135840223:244,pipeline,pipeline,244,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-135840223,1,['pipeline'],['pipeline']
Deployability,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:236,install,installed,236,https://psicode.org,https://github.com/psi4/psi4/issues/2747,1,['install'],['installed']
Deployability,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:169,release,released,169,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['release'],['released']
Deployability,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222644633:10,install,installed,10,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633,1,['install'],['installed']
Deployability,"Hello,; it works fine for me with a relatively recent psi4 (Git: Rev {master} a3d8d93). It also works with the latest dev. conda package (837e345). Which psi4 version are you using? If it's anything older, try [updating](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary).; Peter. Log: [{master} a3d8d93](https://github.com/psi4/psi4/files/1811137/master.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373012577:280,update,update-a-,280,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373012577,1,['update'],['update-a-']
Deployability,"Here are release notes for PRs 1765-2246 (I have all of this in a .md file, if it would be easier to just send that file along instead):. New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:9,release,release,9,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['release'],['release']
Deployability,"Here's an update on the effects of your #1988, @JonathonMisiewicz. On the OCC LCCD bullet, no change, since it doesn't hit that mograd code. On the OCC OLCCD bullet, you can see the before and after below of the final iteration of nine cases. No change in number of iterations (final integer) because convergence is energy limited (first inequality) rather than mograd limited (second inequality). Do you think adjusting https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L144-L155 is in order?. ### olccd conv ae r/u/ro dz/adz/qz2p. pre-1988 WRONG; ```; iter: abs( 3.92e-07) < 1.00e-06 9.61e-08 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.68e-07 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.32e-08 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 4.03e-07 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.84e-07 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.62e-07 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 8.37e-07 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 1.17e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 1.04e-07 < 1.00e-04 11; ```; post-1988 RIGHT; ```; iter: abs( 3.92e-07) < 1.00e-06 8.04e-07 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.11e-06 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.03e-07 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 2.32e-06 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.45e-06 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.03e-06 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 4.81e-06 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 9.22e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 9.10e-07 < 1.00e-04 11; ```. By the way, there's more of those rms formulas. Look suspicious to you, too?. ```; >>> grep sqrt ../psi4/src/psi4/occ/* | grep rms_; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2 = std::sqrt(rms_t2 / nElements);; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2AA = std::sqrt(rms_t2AA) / nElements;; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2BB = std::sqrt(rms_t2BB",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500,1,['update'],['update']
Deployability,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:20,patch,patch,20,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['patch'],['patch']
Deployability,"Hey all, I have updated the code to account for the two density matrices present in UHF. I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance. I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713:16,update,updated,16,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713,1,['update'],['updated']
Deployability,"Hey there! I've been working with @averyparr and wanted to chime in on the _specific_ issue of omega in wb97m-v. I'm don't think this is worth promoting to a bigger issue, but at least so if someone else is searching and finds this issue, there's some context. In _addition_ to the patches made in #2643, there's another change that needs to happen to enable one to set `omega` in wb97m-v. Specifically, the version of libxc that psi4 pulls in is 5.1.5 (https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L18) . This version is old enough that the C file for wb97m-v is missing a _lot_ of content compared to it's other wb97 cousins (see https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_mgga_xc_wb97mv.c#L38 and compare to, e.g., https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_gga_xc_wb97.c#L145). Because `xc_func_info_get_n_ext_params` ends up returning 0 (since it's not properly set in wb97m-v), psi4 thinks there's nothing it can set (`NPAR` is 0 and the names are NULL). . Unfortunately this isn't fixed until version 5.3 (https://gitlab.com/libxc/libxc/-/blob/release-5.3.0/src/hyb_mgga_xc_wb97mv.c), which isn't yet a stable release. It's pretty easy to monkey-patch your own libxc 5.2.3+, which _seems_ to work just fine with psi4, but I haven't run any tests besides the basic ones that run during installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773:282,patch,patches,282,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773,5,"['install', 'patch', 'release']","['installation', 'patch', 'patches', 'release', 'release-']"
Deployability,"Hi @bozkaya, glad you're continuing to work on this. I worry that we're combining too many things here. I can see that saving the deltaMP2 energies are relevant to getting the FNO energies working, but changes to the tensor class and UHF-DF-CCSD perhaps are not. . For the latter two, I suggest a separate PR. If you send git patches of the commits where you added those features/fixes (can add `.patch` to end of GH commit view like https://github.com/psi4/psi4/commit/28caec54bff4a0ef39f01269cb94a930f6bd7223.patch or can do on the command line, https://stackoverflow.com/questions/6658313/generate-a-git-patch-for-a-specific-commit), I can get that PR started for you. The changes in those diffs/patches should be new work on, for example, the tensor class, not historical changes. For this PR, mainly what's needed are the deltaMP2 changes (again, if you'll send a patch, I'll add it to this PR) and tests. For the tests, it'll be straightforward to start from this branch and add new files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483:326,patch,patches,326,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483,6,['patch'],"['patch', 'patch-for-a-specific-commit', 'patches']"
Deployability,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:39,update,updated,39,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,1,['update'],['updated']
Deployability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:38,update,update,38,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,1,['update'],['update']
Deployability,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:50,update,updates,50,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175,1,['update'],['updates']
Deployability,"Hi @loriab,. Just did a fresh conda installation, and this problem does not exist. I'm going to close it for now then. Sorry to bother!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-336332157:36,install,installation,36,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-336332157,1,['install'],['installation']
Deployability,"Hi @mkrompiec, thanks! I'm still working on local correlation methods in Psi4. This pull request is effectively done, and is only waiting on the official Psi4 1.4 release to be merged. I expect that to happen relatively soon, but I'm not sure of the exact timeline. . Once this pull request is merged in, it would be straightforward to expose PNOs and integrals to the Python layer. By the way, if you're interested in regular (non-DLPNO) two-electron integrals, those are easily accessible through the `MintsHelper` class, [as is done here.](https://github.com/psi4/psi4numpy/blob/1233d1af2d168f91065e4f7dbb1a96e02b95b6e1/Tutorials/01_Psi4NumPy-Basics/1e_mints-helper.ipynb)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414:163,release,release,163,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414,1,['release'],['release']
Deployability,"Hi @ndattani, I'm sorry you weren't linked in with this thread. Unfortunately, the situation at the moment isn't much better than this issue reflects. Between branch and API updates (see #2442), the specific requirements of psi (see https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L26), and the quirk that I can't yet myself get past a symbol limit with larger AM and the Intel linker to build a big-AM L2 conda package, building bigger Libint2's hasn't been something we recommend casually. As far as I know, it can be done with gcc, though. Any generation or build step will take hours in parallel. I don't suggest you do this, esp. if you're most accustomed to single-line builds. Nevertheless, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:174,update,updates,174,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,2,"['INSTALL', 'update']","['INSTALL', 'updates']"
Deployability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:187,update,updated,187,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['update'],['updated']
Deployability,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:411,hotfix,hotfix,411,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['hotfix'],['hotfix']
Deployability,"Hi All,. Trying to build from source here but I get the following errors:. ```; [ 11%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Opt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:238,update,updater,238,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['update'],['updater']
Deployability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:632,release,release,632,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,3,['release'],['release']
Deployability,"Hi Eugene, Any update on this one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-37975681:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-37975681,1,['update'],['update']
Deployability,"Hi Jonathon,. This type of behavior is known, I am not sure if there is an easy solution to this. When iterative solution does not converge, the DCT code attempts to solve the quadratic equation for tau directly by completing a square and taking a square root. This usually works fine, but in some problematic cases (for example, multi-reference situations or converging SCF on an excited state) the matrix under the square root becomes non-positive-semidefinite and its square root becomes undefined. This is the most likely reason why the code produces NaNs. There is a number of possible solutions to this, but for now one can just check the eigenvalues of the matrix under the square root and throw an exception when one of the eigenvalues becomes negative. I can look into this in the next few days and add a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117#issuecomment-410071671:814,patch,patch,814,https://psicode.org,https://github.com/psi4/psi4/issues/1117#issuecomment-410071671,1,['patch'],['patch']
Deployability,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73297994:624,update,update,624,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994,1,['update'],['update']
Deployability,"Hi Konrad,; Thanks for bringing this up. Do you know the magnitude of the change that this will introduce? We will likely need to make the fix and then highlight this heavily in our patch notes. @ehohenstein2 any thoughts here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677#issuecomment-510926629:182,patch,patch,182,https://psicode.org,https://github.com/psi4/psi4/issues/1677#issuecomment-510926629,1,['patch'],['patch']
Deployability,"Hi Lori,. I am sorry that I am really confused. How about this, I send you the dfocc module, you add it to the present psi4. Then, I will update my psi4 and my fork and proceed as usual. If it is okay for you I will send the whole module as a zip file to you via e-mail. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-462781952:138,update,update,138,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-462781952,1,['update'],['update']
Deployability,"Hi Lori,. Now, the dfocc source code is properly clang-formatted. I also update the docs. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/797#issuecomment-328286189:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/797#issuecomment-328286189,1,['update'],['update']
Deployability,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:52,update,updated,52,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,1,['update'],['updated']
Deployability,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:426,deploy,deployment,426,https://psicode.org,https://github.com/psi4/psi4/issues/2300,2,['deploy'],['deployment']
Deployability,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501:113,release,release,113,https://psicode.org,https://github.com/psi4/psi4/issues/1501,1,['release'],['release']
Deployability,"Hi Rob, great to hear from you!. I'll patch up https://github.com/psi4/psi4/pull/2135 so that psi is using libecpint rather than internal ecp code. That'll be a better starting point for debugging. Thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1112962032:38,patch,patch,38,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1112962032,1,['patch'],['patch']
Deployability,"Hi Rolling,. Thank you very much for the explanation. I have calculated number of perturbed geometries assuming 3-point formulas are used for the Hessian. Therefore the calculated number of 930 appeared to me too large. However, considering the formula used for off-diagonal elements, it is no more a 3-point formula. . For efficient computation of frequencies we need to implement mode=sow for findif of gradients, which would dramatically decrease the cost of frequencies. @loriab @psi-rking",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122027995:3,Rolling,Rolling,3,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122027995,1,['Rolling'],['Rolling']
Deployability,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83085867:626,continuous,continuous,626,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867,1,['continuous'],['continuous']
Deployability,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152814498:364,release,release,364,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498,4,['release'],"['release', 'released']"
Deployability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,configurat,configurations,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,['configurat'],['configurations']
Deployability,"Hi all, . I just updated the density screening code with the UHF/ROHF cases. I also added a test in the test_erisieve.py pytest file that ensures the same number of shell quartets are being screened out with RHF and UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589:17,update,updated,17,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589,1,['update'],['updated']
Deployability,"Hi all, ; I followed the tutorial to install the latest PSI4. However, when I used the cp command, it would show ""name 'cp' is not defined"". (if I use other function, such as energy, then there is no this kind of issue). could you help me solve this problem? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/653:37,install,install,37,https://psicode.org,https://github.com/psi4/psi4/issues/653,1,['install'],['install']
Deployability,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:24,update,updated,24,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,2,['update'],['updated']
Deployability,"Hi all,. I am installing software on a HPC cluster. In general, I always install from source (whenever it is possible to get source code). I would like to ask if it is possible to get PSI 4 source code tarballs with a release number, because we use environment modules to manage different versions of a software. For a release 1.1 of PSI 4, I would for instance create a module named psi4/1.1. If I would start creating modules named after git commit tags, like. psi4/e0a3eb254d184eed69ab8f598c8601cab12c610b￼. users would not understand what version they are actually using. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580:14,install,installing,14,https://psicode.org,https://github.com/psi4/psi4/issues/580,4,"['install', 'release']","['install', 'installing', 'release']"
Deployability,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:334,patch,patch,334,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405,3,"['patch', 'update']","['patch', 'update']"
Deployability,"Hi all,. I have installed psi4-1.3 in Win10/WSL-Ubuntu18.04 successfully, and when run 'psi4 --test', only _dftd3_ and _grimme_3c_ failed. I have found that psi4-v1.3 integrated dftd3 shown error when run ""dftd3""under WSl:. **_Segmentation fault (core dumped)_**. Then I rebuild _dftd3_ under WSL and use the newly build _dftd3_, then the 'psi4 --test' show all pass. So, this is just a build-bug report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587:16,install,installed,16,https://psicode.org,https://github.com/psi4/psi4/issues/1587,2,"['install', 'integrat']","['installed', 'integrated']"
Deployability,"Hi all. I've been using psi4 inside of a docker container for over a year. Suddenly, the same build process fails to produce a usable psi4 install. I get the following exception when trying to run `psi4 --version` (or any other psi4 command) inside the container: ; ```sh; (base) root@3434e5974c7f:/# psi4 --version; Traceback (most recent call last):; File ""/opt/conda/lib//python3.9/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: /opt/conda/lib//python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: undefined symbol: __intel_sse4_strlen. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib//python3.9/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /opt/conda/lib//python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: undefined symbol: __intel_sse4_strlen; ```. The simplest repro can use the following `Dockerfile`:. ```; FROM continuumio/miniconda3:4.10.3; RUN conda install psi4=1.5 -c psi4; ```. Then:; `docker build -t psi4-test .`. Then to enter the container:. `docker run -it psi4-test bash`. Then inside the containter run:. `psi4 --version`. Has something changed on the conda repos that now results in missing libraries, specifically those containing `__intel_ss34_strlen`? Strange that this very simple build processes worked for one year+ and now fails... Have repro'd on multiple systems. Thanks so much!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596:139,install,install,139,https://psicode.org,https://github.com/psi4/psi4/issues/2596,2,['install'],['install']
Deployability,"Hi all. Thanks for the quick response! :). I implemented b86bpbe in; nwchem back in the day, but psi4's results are a bit off (not too; much, a bit over 1e-3). I'll try to figure out what's going on when I; have some time (attending a conference right now), add b86bpbe to; the dft1 test, and update the pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/438#issuecomment-230823292:293,update,update,293,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230823292,1,['update'],['update']
Deployability,"Hi everyone!. It was [my forum thread](http://forum.psicode.org/t/building-with-high-am/936) that Toon linked in the first comment of this GitHub Issue. I never got a response there, so I never ended up using Psi4. Today I searched on Google to see if anything changed in the last 4.5 years, and found this page for the first time. I wonder why Toon, and then Lori, continued the discussion here rather than in that forum thread (or why no link to this page was provided there), because for that reason I didn't see this until more than 4 years later. Anyway, it looks like unresolved issues remained in May 2022. **Does anyone have a set of instructions for building with `AM=10`, that is safe for 2023 (preferably without Conda)?** I just need to calculate energies (no need for the Hessian, for example). Is it not possible to just install Psi4 with a sequence like the one below, that I use to install OpenMolcas?; ```; cmake .. ; make -j; ```; Or like the command that is used for MRCC:; ```; build.mrcc Intel -pOMP; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428:835,install,install,835,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428,2,['install'],['install']
Deployability,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:509,Release,Release,509,https://psicode.org,https://github.com/psi4/psi4/issues/905,2,"['Release', 'install']","['Release', 'installed']"
Deployability,"Hi guys,. I was dealing with some compilation issues on some C code we have that was relying on standard libraries coming from conda, and after discussion with the conda guys (https://github.com/ContinuumIO/anaconda-issues/issues/6215), it seems like they have a newer version of gcc (under the package `gcc_linux-64`, for Linux). I assume you were using your own gcc version 5 because version 4 on the defaults was not sufficient for you. Do you have any plans on relying on the gcc from conda?. I'm also concerned about psi4 `gcc-5` and defaults `libgcc` ""writing"" to the same .so files. I.e., if I have both `libgcc` and `gcc-5` installed, running `conda inspect linkages --all` gives me lots of warnings like these:. ```; WARNING:conda_build.inspect:Warning: /home/joao/miniconda3/lib/libgcc_s.so.1 comes from multiple packages: defaults::libgcc-5.2.0-0, psi4::gcc-5-5.2.0-1, and defaults::libgcc-ng-7.2.0-hcbc56d2_1; ```; Thanks a lot!. (cc @raimis)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812:632,install,installed,632,https://psicode.org,https://github.com/psi4/psi4/issues/812,1,['install'],['installed']
Deployability,"Hi guys,; What is the status on this? I see [here](https://anaconda.org/psi4/psi4/files) that the dev has the py35 and py36. Any idea of when this dev version will be definitive (released)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-289740614:179,release,released,179,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289740614,1,['release'],['released']
Deployability,"Hi hokru,. Thank you very much, this is exactly what I am looking for. Is this documented anywhere ? Or is there a link on the main page of the psi4 github repository pointing to this release page ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273778973:184,release,release,184,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273778973,1,['release'],['release']
Deployability,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274027886:675,update,update,675,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886,1,['update'],['update']
Deployability,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273809137:68,update,update,68,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137,6,"['install', 'release', 'update']","['installation', 'installations', 'installed', 'release', 'update']"
Deployability,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390:67,install,install,67,https://psicode.org,https://github.com/psi4/psi4/issues/2390,2,['install'],"['install', 'installed']"
Deployability,"Hi!. An issue: different results are printed when running the attached files: ; a) python tst.py; It prints [ 2.00000335e+00 2.00000331e+00 ..... -6.65828772e-04 -2.38015245e-03]; for the custom output which I request; (notice that tst.py is attached as tst.py.txt); [tst.py.txt](https://github.com/psi4/psi4/files/1790987/tst.py.txt). b) /opt/anaconda3/bin/psi4 file.dat; which prints; [ 1.99922250e+00 1.99922249e+00 ....... -6.83682794e-04 -2.43598746e-03] ; (notice that file.dat is attached as file.dat.txt); [file.dat.txt](https://github.com/psi4/psi4/files/1790991/file.dat.txt). There is a clear difference in first two values, although tst.py is almost **identical** to file.dat !. PS. Psi4 was installed via Anaconda. Now I'm using a 64-bit Anaconda Python 3.6.3 with the following modules:; [root@*** ***]# conda list | grep ""psi""; chemps2 1.8.4 0 psi4/label/dev; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gau2grid 0.1 0 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; libefp 1.5b1 0 psi4/label/dev; libint 1.2.1 1 psi4/label/dev; libxc 3.0.0 6 psi4/label/dev; pcmsolver 1.1.10 py36_1 psi4/label/dev; psi4 1.2a1.dev781+837e345 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev5 py36_0 psi4/label/dev; simint 0.7 0 psi4. PPS. I've previously followed advices to solve the https://github.com/psi4/psi4/issues/927#issuecomment-370240121 issue which I encountered earlier. Could I have not updated anything ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/932:704,install,installed,704,https://psicode.org,https://github.com/psi4/psi4/issues/932,2,"['install', 'update']","['installed', 'updated']"
Deployability,Hi!. Just a few minor changes to fix python 3 compatibility. The fifth beta is great--I couldn't figure out how to get boost python and python 3 to play nicely in the previous beta whereas it seems to work perfectly (bar the minor changes in the attached patches) out of the box now. Also: would you prefer to receive patches via github or via email or...?. Thanks!,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9:255,patch,patches,255,https://psicode.org,https://github.com/psi4/psi4/pull/9,2,['patch'],['patches']
Deployability,"Hi!; I am new to QM calculation, and I found your software really helpful! Your works are absolutely amazing!; These days I am trying to do LMO analysis and get centers for each orbitals. I am using Boys localizer and I get an matrix L. I was told that centers are given by <LMO_i|r|LMO_i>, where LMO_i is the i th LMO, and r is the eletron position operator. I wonder how should I calculate this integration? Thanks a lot!; Look forward to hearing from you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3015:397,integrat,integration,397,https://psicode.org,https://github.com/psi4/psi4/issues/3015,1,['integrat'],['integration']
Deployability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,integrat,integrated,1378,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['integrat'],['integrated']
Deployability,"Hi, . I was doing the Energy surface scan in PSI4. . The surface scan worked well when there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:199,update,updated,199,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['update'],['updated']
Deployability,"Hi, ; For electron correlation methods like MP2 used in your double-hybrid functional you need at least 2 electrons. . Older psi4 versions didn't catch this case gracefully. I assume you use v1.3.2?; This has been patched earlier this year in the development version (https://github.com/psi4/psi4/pull/1857 by @PeterKraus ).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682052040:214,patch,patched,214,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682052040,1,['patch'],['patched']
Deployability,"Hi, ; I am trying to install and use Psi4 on Google colab but unable to do so. Here is what I've been trying:; ```; #Installing conda ; !wget -c https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh; !chmod +x Miniconda3-py37_4.12.0-Linux-x86_64.sh; !bash /content/Miniconda3-py37_4.12.0-Linux-x86_64.sh -bfp /usr/local. !conda install --channel defaults conda python=3.8 --yes; !conda update --channel defaults --all --yes. #Installing Psi4; !conda install psi4 python=3.8 -c psi4. import psi4; ```; Error:; ```; ImportError Traceback (most recent call last); [<ipython-input-18-ae2916a96900>](https://localhost:8080/#) in <module>(); ----> 1 import psi4. [/usr/local/lib/python3.8/site-packages/psi4/__init__.py](https://localhost:8080/#) in <module>(); 52 ; 53 # Init core; ---> 54 from . import core; 55 ; 56 from psi4.core import get_num_threads, set_num_threads. ImportError: cannot import name 'core' from 'psi4' (/usr/local/lib/python3.8/site-packages/psi4/__init__.py); ```; [Here](https://github.com/psi4/psi4/files/8878265/conda_list.txt) is a text file that contains the results of `conda list`. Versions in use:; Psi4: v1.6; Python: v3.8.13; conda: v4.13.0. ```; which conda python psi4; /usr/local/bin/conda; /usr/local/bin/python; /usr/local/bin/psi4; ```. Please suggest where I might be going wrong. Regards,; Hemant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598:21,install,install,21,https://psicode.org,https://github.com/psi4/psi4/issues/2598,6,"['Install', 'install', 'update']","['Installing', 'install', 'update']"
Deployability,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984:53,install,installed,53,https://psicode.org,https://github.com/psi4/psi4/issues/1984,3,"['install', 'update']","['install', 'installed', 'update']"
Deployability,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:6,install,installed,6,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864,5,"['install', 'release', 'update']","['install', 'installed', 'release', 'update']"
Deployability,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:182,release,release,182,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['release'],['release']
Deployability,"Hi, Sorry for your trouble. I haven't used Colab myself, but your commands look reasonable, and I don't see any red flags in your `conda list` (thanks for including that). Since you're seeing trouble, here's a few suggestions:; * I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory; * You're pulling a py37 miniconda, then updating everything, then installing a py38 psi4 into its base environment. That's not the smoothest path. I'd choose a py38 or py39 installer https://docs.conda.io/en/latest/miniconda.html#linux-installers, then don't update all the packages, and do install the psi4 of matching python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152453242:560,install,installing,560,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152453242,5,"['install', 'update']","['install', 'installer', 'installers', 'installing', 'update']"
Deployability,"Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in https://github.com/psi4/psi4/pull/2154#issuecomment-870728272 were pretty small. Let me know if you need advice for the rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878487254:138,release,release,138,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878487254,1,['release'],['release']
Deployability,"Hi, thank you very much for your response. > I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory. I tried this and am able to install psi4 and even import it without any errors. [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test`; kindly let me know if this mean that psi4 is in functional state.; Here is the `conda list` output in case it is needed.; [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use. Just to make sure, psi4 is no longer supported on python3.7, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724:337,install,install,337,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724,1,['install'],['install']
Deployability,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:69,install,installed,69,https://psicode.org,https://github.com/psi4/psi4/issues/948,3,['install'],"['install', 'installed']"
Deployability,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656:444,install,installation,444,https://psicode.org,https://github.com/psi4/psi4/issues/656,1,['install'],['installation']
Deployability,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:67,release,release,67,https://psicode.org,https://github.com/psi4/psi4/issues/608,2,['release'],['release']
Deployability,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878:194,release,release,194,https://psicode.org,https://github.com/psi4/psi4/issues/1878,1,['release'],['release']
Deployability,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:20,install,install,20,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['install'],['install']
Deployability,"Hi,. I am wondering why these are linked explicitly by cmake alongside the intel mkl*?:; /usr/lib/x86_64-linux-gnu/libpthread.so; /usr/lib/x86_64-linux-gnu/libm.so; /usr/lib/x86_64-linux-gnu/libdl.so. If I want to use a local gcc installation, I have to delete them from the CMakeCache.txt or else I will; have problems with missing symbols in core.so later on. E.g. If the above libs are linked, then I end up with libstdc++.so and libgomp from /usr/lib/x86_64-linux-gnu/ instead of my local install (/home/kruse/gcc-4.9.4/lib64/). . cheers. [*] MKL2017",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657:230,install,installation,230,https://psicode.org,https://github.com/psi4/psi4/issues/657,2,['install'],"['install', 'installation']"
Deployability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:76,install,installation,76,https://psicode.org,https://github.com/psi4/psi4/issues/1902,12,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"Hi,. I have been using psi4 on its own for a while and now I am looking to extend its utility by adding more optional plugins as displayed in the https://psicode.org/installs/v182/# such as ambit, chemps2, etc. I am a bit confused about how these are implemented. Do I have to manually reinstall psi4 from source? I am asking since I could not find a straightforward way add those to my existing psi4.; ![conda_ovals installer](https://github.com/psi4/psi4/assets/137749626/6e189615-b2c2-4d67-8fcb-d4eeeb54ae06). Many thanks in advance!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:166,install,installs,166,https://psicode.org,https://github.com/psi4/psi4/issues/3094,2,['install'],"['installer', 'installs']"
Deployability,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:302,release,release,302,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['release'],['release']
Deployability,"Hi,. I just started to use PSI4 and wanted to test whether my installation is able to work with CFOUR. When running PSI4 with the following input:. ```. #!CFOUR test. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {; cfour_CALC_level=CCSD(T); cfour_BASIS=AUG-PVQZ; cfour_SCF_CONV=12; cfour_CC_CONV=12; }. energy(‘cfour’); ```. Psi4 is complaining about the basis set:. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: [‘O’]; Basis Sets: [(’(AUTO)’, ‘(AUTO)’, None)]; File Path: /scr/tobias/psi.1379622…cfour.14c28cc5, /scr/tobias/psi.1379622…cfour.14c28cc5, /xstorage/tobias/bin/psi4/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File “/xstorage/tobias/bin/psi4/bin/psi4”, line 338, in; exec(content); File “”, line 31, in; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/driver.py”, line 501, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 185, in run_cfour; cfour_infile.write(write_zmat(lowername, dertype, molecule)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 461, in write_zmat; qbs = core.BasisSet.build(molecule, “BASIS”, core.get_global_option(‘BASIS’)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py”, line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 918, in construct; raise BasisSetNotFound(f’BasisSet::construct: Unable to find a basis set for atom {at + 1} fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608:62,install,installation,62,https://psicode.org,https://github.com/psi4/psi4/issues/2608,1,['install'],['installation']
Deployability,"Hi,. I just updated my psi4 conda installation using:. `conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `. imports seem to work fine:. ```; import psi4; import forte; ```; however, when I run the following:. ```; psi4.set_memory('500 MB'); numpy_memory = 2 # No NumPy array can exceed 2 MB in size; psi4.core.set_output_file('output.dat', False); # specify the basis; basis = 'cc-pVTZ'; # Set computation options; psi4.set_options({'basis': basis,; 'scf_type': 'pk',; 'save_jk': 'true',; 'guess': 'core',; 'print' : 5,; 'FREEZE_CORE' : 'True',; 'e_convergence': 1e-8,; 'd_convergence': 1e-10,; 'LOCAL_MAXITER':10000}); geometry = '''; O -4.6674893014 0.2942847846 3.0623807031; H -3.892960984 0.903739148 3.0964143699; H -4.4005368234 -0.1221007613 2.241525046; '''; mol = psi4.geometry(geometry+""symmetry c1""); SCF_E_psi = psi4.energy('scf'); ```; it fails with:. ```; File ~/opt/miniconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/p4util/procutil.py:531, in prepare_options_for_set_options(); 529 current_module = psi_options.get_current_module(); 530 # Get the current Forte options from Forte; --> 531 forte_options = forte.ForteOptions(); 532 forte.register_forte_options(forte_options); 533 psi_options.set_current_module(""FORTE""). AttributeError: module 'forte' has no attribute 'ForteOptions'; ```. I can minimally reproduce the error with:. ```; mport forte; forte_options = forte.ForteOptions(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); Cell In[7], line 2; 1 import forte; ----> 2 forte_options = forte.ForteOptions(); AttributeError: module 'forte' has no attribute 'ForteOptions'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010:12,update,updated,12,https://psicode.org,https://github.com/psi4/psi4/issues/3010,3,"['install', 'update']","['install', 'installation', 'updated']"
Deployability,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:16,install,install,16,https://psicode.org,https://github.com/psi4/psi4/issues/581,4,"['configurat', 'install', 'release']","['configuration', 'install', 'installation', 'release']"
Deployability,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556:463,update,update,463,https://psicode.org,https://github.com/psi4/psi4/issues/556,1,['update'],['update']
Deployability,"Hi,. Since 0.3.530 or so, all of the difficulties that I've had about compiling plugins have been worked out. I'm sure there are other possible schemes, but the one I have now is a `configure` shell script that writes a `Makefile` using some information from the new `psi4-config` ([link](https://github.com/rmcgibbo/resp2/blob/master/configure)). The remaining plugin-related question I have now is about ""installation"". If I want to distribute this plugin to other users (it's really just the `<plugin_name>.so` file, I don't have any obligatory Python code), and make it easy for them to install, I'd like to make something like `conda install -c rmcgibbo <my_plugin>` work. If this were a standard Python module, I'd install the package with a Pyton wrapper to `lib/python2.7/site-packages/`, since that'll definitely be on `sys.path` -- is that what I should do here too? Or is there an alternative more psi4-specific location in `share/psi4/` where they would ideally go?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:407,install,installation,407,https://psicode.org,https://github.com/psi4/psi4/issues/229,4,['install'],"['install', 'installation']"
Deployability,"Hi,. The input file for the problem described below:. ```; molecule C6H6 {; 0 1; C 0.0 1.855 0.0; C 0.0 -1.855 0.0; C 1.6064771240201337 0.9275 0.0; C 1.6064771240201337 -0.9275 0.0; C -1.6064771240201337 0.9275 0.0; C -1.6064771240201337 -0.9275 0.0; H 0.0 3.289 0.0; H 0.0 -3.289 0.0; H 2.848357553047019 1.6445 0.0; H 2.848357553047019 -1.6445 0.0; H -2.848357553047019 1.6445 0.0; H -2.848357553047019 -1.6445 0.0; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:663,update,updated,663,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['update'],['updated']
Deployability,"Hi,. When I submit a wB97M-V calculation using the SG-1 grid (recommended in the wB97M-V paper: http://aip.scitation.org/doi/10.1063/1.4952647), I receive the following error:. ```RuntimeError: ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /tmp/garden-install.fcce11d8cfbe/psi4-1.1-desres05-c7/psi4/src/psi4/libfock/cubature.cc on line: 2488; The most recent 5 function calls were:. psi::MolecularGrid::buildGridFromOptions(psi::MolecularGrid::MolecularGridOptions const&); psi::DFTGrid::buildGridFromOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:309,install,install,309,https://psicode.org,https://github.com/psi4/psi4/issues/827,1,['install'],['install']
Deployability,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648:300,install,install,300,https://psicode.org,https://github.com/psi4/psi4/issues/648,3,['install'],"['install', 'installation']"
Deployability,"Hi,. src/bin/psi4/python.cc seems to be inconsistent with src/bin/psi4/version.cc and the header generated by gitversion.py. Here's a patch to solve the issue. --- psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/bin/psi4/python.cc.gitversion 2015-08-05 10:37:14.000000000 -0700; +++ psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/bin/psi4/python.cc 2015-09-06 12:57:40.213173096 -0700; @@ -742,12 +742,20 @@ double py_psi_thermo(). char const *py_psi_version(); {; +#ifdef PSI_VERSION ; return PSI_VERSION;; +#else; - return """";; +#endif; }; ; char const *py_psi_git_version(); {; +#ifdef GIT_VERSION ; return GIT_VERSION;; +#else; - return """";; +#endif; }; ; void py_psi_clean()",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/176:134,patch,patch,134,https://psicode.org,https://github.com/psi4/psi4/issues/176,1,['patch'],['patch']
Deployability,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:411,install,install,411,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['install'],['install']
Deployability,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:687,configurat,configurations,687,https://psicode.org,https://github.com/psi4/psi4/issues/1907,2,['configurat'],"['configuration', 'configurations']"
Deployability,"Hi,; I have created a brand new environment with psi4 1.6.1 on windows10 machine using:; ```; conda create -n psi4 python=3.8; activate psi4; conda install psi4 -c conda-forge -c psi4; ```; I had problems with psi4.core.be_quiet(), so I thought that maybe I need to set paths.; I tried to use psi4_io to set paths, but get an error:; ```; >>>import psi4; >>>import os; >>> psi4_io.set_default_path; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'psi4_io' is not defined; ```; Cheers,; M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668:148,install,install,148,https://psicode.org,https://github.com/psi4/psi4/issues/2668,1,['install'],['install']
Deployability,"Hi,; Please, if possible, kindly let me ask a question as follows:. Recently, I lost my Psi4 code and had to again install its newest version 1.9.1 through ""Conda-Forge"". Moreover, I did build a scratch folder for Psi4 in the Home directory and its path was truly included in "".bashrc""; i.e.; export PATH=/home/saeed/miniconda3/bin:$PATH; export PSI_SCRATCH=/home/saeed/Scratch_PSI4. When a given Psi4 task is ran, the scratch folder is filled and empty alternately. But, after finishing calculations, this folder remains full and there are several files in it that must be deleted manually, while there was no such problem before. Please also let me state that the problem mentioned above only exists for ""CBS-extrapolations"" calculations while ""SAPT"" calculations are never encountered such a problem. Could you please let me know how I can resolve this problem so that this folder, when a task is over, to be emptied automatically as before?. In advance, too many thanks for your highly valuable guidance. Sincerely,; Saeed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245:115,install,install,115,https://psicode.org,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245,1,['install'],['install']
Deployability,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:1471,install,install,1471,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,1,['install'],['install']
Deployability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:122,install,installs,122,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,3,['install'],"['install', 'installed', 'installs']"
Deployability,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:84,install,installed,84,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424,1,['install'],['installed']
Deployability,"Hmm, I see the same – `.h` are installing but `.hpp` are not. @bennybp, [this line](https://github.com/simint-chem/simint-generator/blob/master/skel/simint/CMakeLists.txt#L92) doesn't seem to be functioning. The simint conda package has the cpp_restrict.hpp file installed, though, so once upon a time it worked. ```; >>> (objdir) find . -name ""cpp_restrict.hpp""; ./external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp; >>> (objdir) ll ./external/upstream/simint/simint_external-prefix/src/simint_external/simint; total 64; -rw-r--r-- 1 loriab staff 2451 Mar 22 2017 CMakeLists.txt; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 boys; -rw-r--r-- 1 loriab staff 332 Jan 24 2017 constants.h; -rw-r--r-- 1 loriab staff 165 Mar 22 2017 cpp_restrict.hpp; drwxr-xr-x 14 loriab staff 476 Mar 28 2017 ostei; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 shell; -rw-r--r-- 1 loriab staff 138 Feb 2 2017 simint.h; -rw-r--r-- 1 loriab staff 831 Feb 2 2017 simint_eri.c; -rw-r--r-- 1 loriab staff 1927 Mar 22 2017 simint_eri.h; -rw-r--r-- 1 loriab staff 253 Jan 24 2017 simint_init.c; -rw-r--r-- 1 loriab staff 1148 Mar 22 2017 simint_init.h; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 vectorization; >>> objdir: ll stage/usr/local/psi4/include/simint/; total 32; drwxr-xr-x 7 loriab staff 238 Jan 11 01:05 boys; -rw-r--r-- 1 loriab staff 332 Jan 24 2017 constants.h; drwxr-xr-x 8 loriab staff 272 Jan 11 01:05 ostei; drwxr-xr-x 5 loriab staff 170 Jan 11 01:05 shell; -rw-r--r-- 1 loriab staff 138 Feb 2 2017 simint.h; -rw-r--r-- 1 loriab staff 1927 Mar 22 2017 simint_eri.h; -rw-r--r-- 1 loriab staff 1148 Mar 22 2017 simint_init.h; drwxr-xr-x 8 loriab staff 272 Jan 11 01:05 vectorization; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-357041900:31,install,installing,31,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-357041900,2,['install'],"['installed', 'installing']"
Deployability,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:93,install,installs,93,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,3,"['install', 'patch', 'update']","['installs', 'patch', 'update']"
Deployability,"Hmm, looks like I missed this option. Ill create a patch for it. For now you can do the following:. ``` python; e, wfn = energy('detci', return_wfn=True); wfn.get_opdm(-1, -1, ""SUM"", False).print_out(); wfn.get_tpdm(""SUM"", False).print_out(); ```. OPDM signature is as follows:. ```; /**!; * Obtains the OPDM <Iroot| Epq |Jroot> from the ciwave object. If Jroot is; * negative then Iroot == Jroot, if both roots are -1 then the ""special"" CI; * OPDM is returned.; * @param Iroot Left root; * @param Jroot Right root; * @param spin Selects which spin to return: A, B, or SUM; * @param full_space If false return only the active OPDM else return full OPDM; * @return OPDM or TDM shared matrix; **/; SharedMatrix get_opdm(int Iroot=-1, int Jroot=-1, const std::string& spin=""SUM"",; bool full_space=false);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/477#issuecomment-251968634:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/issues/477#issuecomment-251968634,1,['patch'],['patch']
Deployability,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:75,install,installing,75,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008,1,['install'],['installing']
Deployability,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:291,update,updated,291,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,1,['update'],['updated']
Deployability,"Holger's comment stands. Build fail is due to an environment, not this PR, and will be automatically fixed once the commit is updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1230376809:126,update,updated,126,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1230376809,1,['update'],['updated']
Deployability,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,integrat,integration,372,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,3,"['integrat', 'update']","['integration', 'updated']"
Deployability,How can I match conda package to source code and release notes?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/763:49,release,release,49,https://psicode.org,https://github.com/psi4/psi4/issues/763,1,['release'],['release']
Deployability,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:89,install,install,89,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,7,['install'],"['install', 'installation', 'installed', 'installing']"
Deployability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:420,install,install,420,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['install'],['install']
Deployability,"How soon do you need this? This bug is an easy fix, and I can include it in the Psi4 1.8 release coming out in a couple weeks. If you need this sooner, the ""workaround"" is simple.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405:89,release,release,89,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405,1,['release'],['release']
Deployability,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Configurat,Configuration,502,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557,1,['Configurat'],['Configuration']
Deployability,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265466569:96,install,installed,96,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569,3,['install'],"['install', 'installed']"
Deployability,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:322,patch,patch,322,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282,1,['patch'],['patch']
Deployability,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:197,install,install,197,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219,1,['install'],['install']
Deployability,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182946562:520,patch,patch,520,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562,4,"['patch', 'release']","['patch', 'release', 'releases']"
Deployability,"I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just _different_ ones:; * Psi4 `libmkl_rt.so` of a local c.2016 Intel install; * NumPy `libmkl_core.so`, thread, lp64 of default-channel c.2017 conda install",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377006:157,install,install,157,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377006,2,['install'],['install']
Deployability,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273472426:169,install,installed,169,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426,1,['install'],['installed']
Deployability,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126183761:154,install,installing,154,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761,1,['install'],['installing']
Deployability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:84,release,release,84,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,5,"['install', 'release']","['installed', 'release', 'released']"
Deployability,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:781,update,update,781,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919,1,['update'],['update']
Deployability,"I am interfacing LibERD with GAMESS and would like to use the Psi4 interface as a reference. Psi4 does not call LibERD, even when compiled with it. This issue has been confirmed via email by @ryanmrichard. I first invoke:; setup --erd on --fc gfortran --type debug; and install normally, verifying that DENABLE_LIBERD is set for CMake. Then I tried debugging and setting a breakpoint at the ERD entry point, erd__gener_eri_batch. I tried a variety of sample input files, and that function is never reached. Next, I went to the ERD wrapper code at ./psi4public/src/lib/libmints/erd_eri.cc and enabled the DEBUG preprocessor macro which adds print statements for ERD parameters. The print statements are not printed, even if I remove the IF statements. Third, I figured LibInt might be called instead of ERD, so I recompiled with --max-am-eri 0 in an attempt to disable LibInt. There was no change in the behavior of the code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171:270,install,install,270,https://psicode.org,https://github.com/psi4/psi4/issues/171,1,['install'],['install']
Deployability,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:16,update,update,16,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,1,['update'],['update']
Deployability,I am not sure what the rc2 installer is or what it could be compared to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-874965917:27,install,installer,27,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-874965917,1,['install'],['installer']
Deployability,"I am running some psi4 jobs which involve modifying the parameters DFT_VV10_B and DFT_VV10_C for various benzene dimer configurations. For several dimer configurations and several values of (b,c), I get an error telling me that ADIIS minimization failed, and asking me to file a bug report. I've prepared an example and put my input and output files below. Any help I could get would be wonderful—and please let me know if I can provide any more information that would be helpful! . Input file:; ```; set num_frozen_docc 12; set {; dft_vv10_b 0.06022547162926983; dft_vv10_c 0.7450476605857299; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.260781259973 -0.714012941782 1.022641061033; C 0.448798235138 -0.584866555587 1.116392879147; C 0.671191593804 0.158609920222 1.104026912627; C 0.177969561551 0.681404978559 1.093307893756; C -0.560580808895 0.542719215332 1.056079456761; C -0.776583606603 -0.133446136243 1.103859872549; H -0.442720873003 -1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.3724813932",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:119,configurat,configurations,119,https://psicode.org,https://github.com/psi4/psi4/issues/2641,2,['configurat'],['configurations']
Deployability,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279:104,install,installations,104,https://psicode.org,https://github.com/psi4/psi4/issues/2279,5,['install'],"['install', 'installation', 'installations', 'installing']"
Deployability,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:589,install,installed,589,https://psicode.org,https://github.com/psi4/psi4/issues/775,8,"['configurat', 'install']","['configuration', 'installation', 'installed']"
Deployability,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1313,release,release,1313,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['release'],['release']
Deployability,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989:339,install,installed,339,https://psicode.org,https://github.com/psi4/psi4/issues/989,1,['install'],['installed']
Deployability,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:15,install,install,15,https://psicode.org,https://github.com/psi4/psi4/issues/3031,4,['install'],"['install', 'installation', 'installed']"
Deployability,"I am trying to install the package using conda/mamba in a fresh environment, I get the following error using `mamba install -c psi4 psi4`:. `nothing provides mpc 1.0.1 needed by gcc-5-mp-5.2.0-0`. Am I doing something wrong or does the feedstock need updating?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898:15,install,install,15,https://psicode.org,https://github.com/psi4/psi4/issues/2898,2,['install'],['install']
Deployability,"I am working in an environment where I can `pip` install anything, but installation via conda is not possible. . Is there any interest among the Psi4 developer community to support this installation method? I have no experience in this, so I don't really know if it's a huge undertaking or just a matter of bundling all the binaries currently distributed via conda and package them up into a ""wheel"" to be uploaded to PyPI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3091:49,install,install,49,https://psicode.org,https://github.com/psi4/psi4/issues/3091,3,['install'],"['install', 'installation']"
Deployability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:69,Integrat,IntegratorXX,69,https://psicode.org,https://github.com/psi4/psi4/issues/3004,3,['Integrat'],['IntegratorXX']
Deployability,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253958928:244,patch,patch,244,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928,1,['patch'],['patch']
Deployability,"I assume you already know, but you might want to update/disable the links on github at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342:49,update,update,49,https://psicode.org,https://github.com/psi4/psi4/issues/342,1,['update'],['update']
Deployability,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979:15,install,install,15,https://psicode.org,https://github.com/psi4/psi4/issues/1979,4,"['Install', 'install']","['Install', 'install', 'installation']"
Deployability,I believe the patch for pydantic v2 support should be in the psi4 1.8.1 build. Try `psi4==1.8.1` in your conda install.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545:14,patch,patch,14,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545,2,"['install', 'patch']","['install', 'patch']"
Deployability,I build in the FreeBSD ports framework and it sets ```CMAKE_BUILD_TYPE=Release``` by default.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853:71,Release,Release,71,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853,1,['Release'],['Release']
Deployability,"I can answer more fully later, but check where the `GENBAS` file lives in your CFOUR installation. It looks like it's looking for it at `/xstorage/tobias/bin/cfour/basis/GENBAS`. (This could be the trouble in the Psi4/Cfour route, too.) I don't remember the exact fallback procedure for GENBAS, but if it's missing from that spot, you could copy it to there or copy the one from the psi4 install (approx <install>/share/psi4/basis/GENBAS).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774:85,install,installation,85,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774,3,['install'],"['install', 'installation']"
Deployability,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:34,install,install,34,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,3,['install'],"['install', 'installed']"
Deployability,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:121,release,release,121,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,2,['release'],['release']
Deployability,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355082034:274,patch,patch,274,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034,2,"['patch', 'update']","['patch', 'update']"
Deployability,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343717373:292,release,release,292,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373,2,"['install', 'release']","['installing', 'release']"
Deployability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:322,update,updated,322,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,1,['update'],['updated']
Deployability,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377598:44,install,installation,44,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598,1,['install'],['installation']
Deployability,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:9,install,install,9,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['install'],['install']
Deployability,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:148,update,updated,148,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,1,['update'],['updated']
Deployability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,configurat,configurations,606,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['configurat'],['configurations']
Deployability,"I did have a PR, but it didn't seem to work in you case. The alternate change (not in addition to my PR, but instead of it) was to force lock_frame_ to false just before the call to update geometry. I don't know if you attempted that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-193477050:182,update,update,182,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193477050,1,['update'],['update']
Deployability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:93,patch,patch,93,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,4,"['install', 'patch']","['install', 'install-lib', 'patch']"
Deployability,"I didn't know about the new external repo - we are using the upstream libint-1.1.5 package, as it is required by several other codes as well, most notably CP2K. Did you officially take over maintainership of the libint-1 branch from evaleev? Do you plan to make regular releases? Is there a big code-difference between the new repo and the last libint1 tarball from Sourceforge and/or https://github.com/evaleev/libint/releases/tag/release-1-1-6 ? . I'll take a look at that repo once I have time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249515051:270,release,releases,270,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249515051,3,['release'],"['release-', 'releases']"
Deployability,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230548237:395,release,release,395,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237,1,['release'],['release']
Deployability,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,integrat,integrated,867,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168,1,['integrat'],['integrated']
Deployability,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22985263:539,release,release,539,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263,1,['release'],['release']
Deployability,"I don't have an approximate delay. Nightly gets updated whenever @loriab updates it. There's no deeper pattern, that I'm aware of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539:48,update,updated,48,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539,2,['update'],"['updated', 'updates']"
Deployability,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:160,update,updated,160,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['update'],['updated']
Deployability,"I don't have enough memory to complete these jobs, but I note that the first env example is using package `dftd3` from the psi4 channel, and the second env has no dftd3-related packages, suggesting a local binary. That older implementation of dftd3 with a fairly recent psi4 (1.7 from late 2022) could manifest the incompatibility you saw. I'd suggest using the latest version of psi4 (1.8.1) and the newer `dftd3-python` package instead. A new env from `conda create -n p4env psi4 python=3.10 dftd3-python -c conda-forge/label/libint_dev -c conda-forge` (variations as needed from https://psicode.org/installs/v18/ with `*/conda/*/stable` selections).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520:602,install,installs,602,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520,1,['install'],['installs']
Deployability,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,integrat,integration,80,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990,1,['integrat'],['integration']
Deployability,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:69,update,updates,69,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923,1,['update'],['updates']
Deployability,"I don't see differences in the `openblas_config.h` file between both of my; versions (or in other .h files). `ldd` shows one has `libgomp.so.1` linked,; the other not. On Fri, May 18, 2018 at 3:23 PM Diazonium <notifications@github.com> wrote:. > @dgasmith <https://github.com/dgasmith> I do not know. But probably not.; > If that is the case, patches are welcome, the project tends to be very; > receptive to PRs.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1009#issuecomment-390205517>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABkoABawYkG1NwY7Iqub-m5Nf6uQiuB3ks5tzstogaJpZM4T0MLO>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390206167:344,patch,patches,344,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390206167,1,['patch'],['patches']
Deployability,"I don't think the inferring of grid order from `lebedev_mapping` was *ever* correct, to be clear. I believe (but am not 100% sure) that the new way of gaining the information (using information from `LebedevGridMgr`) proposed in #2736 works?. I can test -- do you have a simple input I can test with my build of that patch?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264:317,patch,patch,317,https://psicode.org,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264,1,['patch'],['patch']
Deployability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:835,deploy,deploy-preview,835,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,1,['deploy'],['deploy-preview']
Deployability,"I figure this was probably caught already, but I thought I should submit a report just in case. I was running some test calculations in psi4 (v 0.4.0, Ubuntu) and I got the following error while trying to calculate Mulliken charges:. ```; [Screen output]. Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/home/kratz/bin/miniconda/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); Boost.Python.ArgumentError: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(P7_object, N5boost10shared_ptrIN3psi12WavefunctionEEE); ```. The DFT calculation that ran before the Mulliken charges completed. Just the oeprop command failed. This did not happen with an older copy on a different computer (PSI4 v 0.3.593, CentOS). As I was typing this report I tried to reinstall psi4 from conda on my CentOS machine, and I got a failure during the SAPT0 test calculations as well:. ```; [Conda output]. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 3072, in run_sapt; e_dimer = scf_helper('RHF', **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 1972, in scf_helper; e_scf = psi4.scf(precallback, postcallback); Boost.Python.ArgumentError: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(N5boost10shared_ptrIN3psi12WavefunctionEEE, P7_object, P7_object); ```. -kratz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240:1046,update,update-,1046,https://psicode.org,https://github.com/psi4/psi4/issues/240,1,['update'],['update-']
Deployability,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:16,install,installation,16,https://psicode.org,https://github.com/psi4/psi4/issues/710,4,['install'],"['install-a-', 'installation', 'installer-command-line', 'installing']"
Deployability,"I forget the exact PR, but this was fixed in one of the JSON updates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/944#issuecomment-394477556:61,update,updates,61,https://psicode.org,https://github.com/psi4/psi4/issues/944#issuecomment-394477556,1,['update'],['updates']
Deployability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:198,patch,patch,198,https://psicode.org,https://github.com/psi4/psi4/issues/199,2,"['patch', 'update']","['patch', 'update']"
Deployability,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:233,install,installed,233,https://psicode.org,https://github.com/psi4/psi4/issues/1820,2,"['install', 'update']","['installed', 'update']"
Deployability,"I got a high AM version generated. It built all its files (some indiv files take 10h to compile) and then it failed on the link step. I've still got the directory, so I'm hoping to investigate more next week. The generated code is at [Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz](https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz) if you're feeling adventurous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539:310,release,releases,310,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539,1,['release'],['releases']
Deployability,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:191,upgrade,upgrades,191,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894,1,['upgrade'],['upgrades']
Deployability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:825,configurat,configuration,825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,2,"['configurat', 'install']","['configuration', 'install']"
Deployability,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:960,release,releases,960,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['release'],['releases']
Deployability,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:251,Update,Update,251,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,2,"['Update', 'install']","['Update', 'installing']"
Deployability,I had to install `conda-forge` not psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154#issuecomment-2048342556:9,install,install,9,https://psicode.org,https://github.com/psi4/psi4/issues/3154#issuecomment-2048342556,1,['install'],['install']
Deployability,"I hadn't seen exactly this manifestation of the BLAS issue, but yes, it's why I was strongly advising against statically linking MKL in the other thread. . * ""MKL Trio"" := `mkl_intel_lp64` `mkl_intel_thread` `mkl_core`; * ""MKL RT"" := `libmkl_rt`; * if the Psi4 CMake can find MKL RT, that's what it'll link to for BLAS rather than MKL trio; * current NumPy from defaults conda channel links against MKL RT. (until recently, it linked against MKL Trio, which was why we sometimes advised getting numpy from the Intel conda channel, which has long linked against RT); * so it's safe to get psi4 & numpy via `conda install psi4 -c psi4/label/dev` because that'll pull numpy from defaults and psi4 from psi4 and both have the same BLAS linking. (may want to `conda update numpy` to make sure your numpy is the recent build.) can always `ldd` them to inspect.; * for the same reasons as above, it's safe to build psi4 from source against the conda `psi4-dev` package. That package provides MKL from conda and instructs psi4 cmake to use MKL RT. It also provides NumPy which (so long as recent build) uses MKL RT.; * unless you want to build NumPy yourself, the numpy you have pretty much determines how you must build or use psi4. So it's dangerous to:; * use statically linked MKL in psi4 and use NumPy with dynamically linked MKL; * use system BLAS like Apple's Accelerate with psi4 and use NumPy with dynamically linked MKL; * use MKL RT with psi4 and use NumPy with MKL trio. Since PPA probably doesn't have license to distribute MKL, it's likely that Psi4 w/MKL RT plus their NumPy is also dangerous. What are they linked against, if you can find out easily through `ldd` (have to burrow pretty deep into numpy to find a `.so`)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677:612,install,install,612,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677,2,"['install', 'update']","['install', 'update']"
Deployability,"I have a dimer complex in z-matrix form that I am calculating the interaction energy. I have two scripts, one is the an object that lives inside my software and the other is an external script that I use for testing the configurations for psi4. . When I run the python on the external script, the function returns the total energy:. ```python; dimer_energy = psi4.energy(; theory,; molecule=dimer2,; bsse='cp'; ); ```; However, if I run this programmatically, although the same result in terms of the output file but the dimer energy returned is the interaction energy. . I am running this on `hf/6-31g*' so not SAPT. Is there something that I am missing where psi4 decides to return the interaction energy over the dimer energy and why would I see this inconsistency in my code. Kind of lost on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:220,configurat,configurations,220,https://psicode.org,https://github.com/psi4/psi4/issues/2730,1,['configurat'],['configurations']
Deployability,"I have a patch written -- I can see that `initialize_lebedev` actually gets called, and when I inspect `lebedev_mapping_`'s values at a breakpoint, things look reasonable. ...I also see no changes in the energy anywhere. In fact, I don't see any evidence of any use of `order_` at all, except in one printing function. Is this intentional? . Anyway, PR incoming. I am OK not understanding the mysteries of `order_`, as long as I no longer get 1/1000 hangs when trying to run large workflows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055:9,patch,patch,9,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055,1,['patch'],['patch']
Deployability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:642,configurat,configuration,642,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,1,['configurat'],['configuration']
Deployability,I have built *Psi4* 1.3 packages for *Windows*!. You can install:; ```; conda install -c raimis -c conda-forge psi4=1.3; ```; The 1.3 version for *Windows* is actually: `v1.3` + #1560 + #1571 = https://github.com/raimis/psi4/commit/a13da3b642abd02b943abce4984876070e85473b. For reference: ; - Build for *Python* 3.6: https://dev.azure.com/raimisg/psi4/_build/results?buildId=606; - Build for *Python* 3.7: https://dev.azure.com/raimisg/psi4/_build/results?buildId=607. We try to deploy and see how do they behave in comparison with the *Linux* packages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-474864291:57,install,install,57,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-474864291,3,"['deploy', 'install']","['deploy', 'install']"
Deployability,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:181,install,installation,181,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['installation']
Deployability,I have download the Psi4conda-1.3.2-py37-Linux-x86_64.sh and install it on a scientific Linux 6 computer with ldd (GNU libc) 2.12.; The installation finish without any error and I got a `Segmentation fault` when running `psi4 --test`. `conda list` gives. ```; # packages in environment at /users/grte2001/psi4conda:; #; # Name Version Build Channel; ambit 0.3 h137fa24_1 psi4; asn1crypto 0.24.0 py37_0 ; atomicwrites 1.3.0 py37_1 ; attrs 19.1.0 py37_1 ; blas 1.0 mkl ; ca-certificates 2019.1.23 0 ; certifi 2019.3.9 py37_0 ; cffi 1.12.3 py37h2e261b9_0 ; chardet 3.0.4 py37_1 ; chemps2 1.8.9 h8c3debe_0 psi4; conda 4.6.14 py37_0 ; cryptography 2.6.1 py37h1ba5d50_0 ; cvxopt 1.2.0 py37hfa32c7d_0 ; decorator 4.4.0 py37_1 ; deepdiff 3.3.0 py37_1 psi4; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; future 0.17.1 py37_0 ; gau2grid 1.3.1 h035aef0_0 psi4; gcp 2.0.2 h84218bc_1 psi4; gdma 2.2.6 h0e1e685_6 psi4; glpk 4.65 h3ceedfd_2 ; gmp 6.1.2 h6c8ec71_1 ; gsl 2.4 h14c3975_4 ; h5py 2.8.0 py37h989c5e5_3 ; hdf5 1.10.2 hba1933b_1 ; idna 2.8 py37_0 ; intel-openmp 2019.3 199 ; jsonpickle 0.9.6 py37_0 psi4; libedit 3.1.20181209 hc058e9b_0 ; libefp 1.5.0 h84097be_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 hb4a4fd4_6 psi4; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.3.4 h7b6447c_0 psi4; metis 5.1.0 hf484d3e_4 ; mkl 2019.3 199 ; mkl_fft 1.0.12 py37ha843d7b_0 ; mkl_random 1.0.2 py37hd81dba3_0 ; more-itertools 7.0.0 py37_0 ; ncurses 6.1 he6710b0_1 ; networkx 2.3 pypi_0 pypi; numpy 1.16.3 py37h7e9f1db_0 ; numpy-base 1.16.3 py37hde5b4d6_0 ; openfermion 0.9 py37hd763080_1 psi4; openfermionpsi4 0.4 py37h934b37d_0 psi4; openssl 1.1.1b h7b6447c_1 ; pcmsolver 1.2.1 py37h142c950_0 psi4; pint 0.9 py37_2 psi4; pip 19.1.1 py37_0 ; pluggy 0.11.0 pypi_0 pypi; psi4 1.3.2+ecbda83 py37h31b3128_0 psi4; psi4-rt 1.3.2 py37ha6b60c8_0 psi4; py 1.8.0 py37_0 ; pycosat 0.6.3 py37h14c3975_0 ; pycparser 2.19 py37_0 ; pydantic 0.23 py37_0 psi4; pylibefp ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:61,install,install,61,https://psicode.org,https://github.com/psi4/psi4/issues/1792,2,['install'],"['install', 'installation']"
Deployability,"I have installed mkl-devel, but now I have a new issue:. ```; CMake Error at tests/fsapt-terms/CMakeLists.txt:4 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-terms/../../psi4/share/psi4/fsapt/fsapt.py"". CMake Error at tests/fsapt-allterms/CMakeLists.txt:6 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-allterms/../../psi4/share/psi4/fsapt/fsapt.py"".; ```. Is there a cmake comment I should look at in the psi4 documentation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-381277308:7,install,installed,7,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-381277308,1,['install'],['installed']
Deployability,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:7,install,installed,7,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['install'],['installed']
Deployability,"I have made one final commit here to update the comment, this should be OK to merge unless someone else wants to chime in. The tests run by the CI are passing, here is hoping there will no surprises the next time someone runs the full test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992:37,update,update,37,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992,1,['update'],['update']
Deployability,I have now updated in the information above under software specs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433:11,update,updated,11,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433,1,['update'],['updated']
Deployability,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-213409294:557,integrat,integrated,557,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294,1,['integrat'],['integrated']
Deployability,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106#issuecomment-119739035:388,Update,Update,388,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035,1,['Update'],['Update']
Deployability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,2,"['install', 'update']","['install', 'updated']"
Deployability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['update'],['updated']
Deployability,I have updated the call points for the new signature of `triplet/doublet` and tests pass locally with warnings converted to errors. So this is ready for final review + merge. @psi4/maintainers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587,1,['update'],['updated']
Deployability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['update'],['updated']
Deployability,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189#issuecomment-157114525:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525,2,['update'],['updated']
Deployability,"I have vague memories about some of the DSD methods changing parameters; from one paper to another. I discussed this with Jan Martin way back when; via email, and thought the situation was somewhat confusing. Without; remembering this any more clearly than I do, I suppose Holger's idea of; using the more recent paper is probably a good one. On Wed, Mar 7, 2018 at 12:43 PM, Holger Kruse <notifications@github.com>; wrote:. > i remember the omega issue from a forum post: http://forum.psicode.org/t/; > wb97x-definition-bug/480; >; > I think ORCA was used for all the DSD developments. There you can defined; > DHDF compositions in the input file (see e.g. my reference outputs). If; > manual defining parameters for another program really counts as a good test; > is perhaps debatable because typos never come alone ;); >; > Are the non-dispersion forms of DSD-PBEP86 from both papers really; > different? I hope not...; > Anyway, I'd stick with the 2013 paper in doubt because it is the latest; > ""update"".; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/922#issuecomment-371221109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdkpodkciT2JkrcNFW-gbLDLpUy4Mks5tcBwzgaJpZM4SJ0Uw>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371240538:1001,update,update,1001,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371240538,1,['update'],['update']
Deployability,"I haven't heard anything over at https://github.com/psi4/psi4/issues/2940, so I think a ""hard pin"" is in order for the release. That is, not just prevent CI from using the new 0.4 but update the external/ddx/CMakeLists.txt to avert users grabbing it. I'll fix this PR up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954:119,release,release,119,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954,2,"['release', 'update']","['release', 'update']"
Deployability,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286563411:104,update,update,104,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411,1,['update'],['update']
Deployability,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:43,install,installer,43,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349,6,['install'],"['install', 'installations', 'installer']"
Deployability,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/2084,2,['install'],"['installed', 'installer']"
Deployability,"I installed anaconda and psi4 independently. does the code below help?. ```; (base) C:\Users\erikc>where conda; C:\Users\erikc\anaconda3\Library\bin\conda.bat; C:\Users\erikc\anaconda3\Scripts\conda.exe; C:\Users\erikc\psi4conda\condabin\conda.bat; C:\Users\erikc\psi4conda\Scripts\conda.exe. (base) C:\Users\erikc>where python; C:\Users\erikc\anaconda3\python.exe. (base) C:\Users\erikc>where psi4; C:\Users\erikc\psi4conda\Scripts\psi4.exe. (base) C:\Users\erikc>conda create -n psi4env psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError:. (base) C:\Users\erikc>; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101,1,['install'],['installed']
Deployability,"I installed psi4 1.8.2 from conda-forge on macOS. Here is the package information:. ```; psi4 1.8.2 py39h9c1326d_0 conda-forge; ```. When I try to launch it, it immediately fails with an exception. ```; $ psi4; Traceback (most recent call last):; File ""/Users/peastman/miniconda3/envs/qcportal/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/Users/peastman/miniconda3/envs/qcportal/lib/python3.9/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/Users/peastman/miniconda3/envs/qcportal/lib/python3.9/site-packages/psi4/driver/__init__.py"", line 56, in <module>; from psi4.driver import gaussian_n; File ""/Users/peastman/miniconda3/envs/qcportal/lib/python3.9/site-packages/psi4/driver/gaussian_n.py"", line 31, in <module>; from psi4.driver import driver; File ""/Users/peastman/miniconda3/envs/qcportal/lib/python3.9/site-packages/psi4/driver/driver.py"", line 49, in <module>; from psi4.driver import driver_nbody; File ""/Users/peastman/miniconda3/envs/qcportal/lib/python3.9/site-packages/psi4/driver/driver_nbody.py"", line 830, in <module>; class ManyBodyComputer(BaseComputer):; File ""pydantic/main.py"", line 204, in pydantic.main.ModelMetaclass.__new__; File ""pydantic/fields.py"", line 488, in pydantic.fields.ModelField.infer; File ""pydantic/fields.py"", line 419, in pydantic.fields.ModelField.__init__; File ""pydantic/fields.py"", line 534, in pydantic.fields.ModelField.prepare; File ""pydantic/fields.py"", line 728, in pydantic.fields.ModelField._type_analysis; File ""pydantic/fields.py"", line 778, in pydantic.fields.ModelField._create_sub_type; File ""pydantic/fields.py"", line 419, in pydantic.fields.ModelField.__init__; File ""pydantic/fields.py"", line 534, in pydantic.fields.ModelField.prepare; File ""pydantic/fields.py"", line 728, in pydantic.fields.ModelField._type_analysis; File ""pydantic/fields.py"", line 778, in pydantic.fields.ModelField._create_sub_type; File ""pydantic/fields.py"", line 419, in pydantic.fields.Mod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/3062,1,['install'],['installed']
Deployability,I installed psi4 from miniconda.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124953379:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124953379,1,['install'],['installed']
Deployability,"I installed the latest version of psi4 via conda using the following command: ; ```conda install psi4=1.2rc2 psi4-rt python=3.6 -c psi4/label/dev```. When I try to import psi4, I get the following error:; ```; In [1]: import psi4; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 53 try:; ---> 54 from . import core; 55 except ImportError as err:. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); <ipython-input-1-becb93fbd2ca> in <module>(); ----> 1 import psi4. ~/anaconda3/lib/python3.6/site-packages/psi4/__init__.py in <module>(); 57 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in [DY]LD_LIBRARY_PATH"".format(err)); 58 else:; ---> 59 raise ImportError(""{0}"".format(err)); 60 ; 61 from psi4.core import set_output_file, get_variable, set_variable, get_num_threads, set_num_threads. ImportError: /home/chayas/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sincos4_l9; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/1036,2,['install'],"['install', 'installed']"
Deployability,"I just added a small section to the manual, advertising the new functionality. A number of samples got updated during my local docs build. With that in place, I think this is good to go. Given that this is a bug fix, I think we should try to cherrypick it into the tagged release version, if that's not too much hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234756317:103,update,updated,103,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234756317,2,"['release', 'update']","['release', 'updated']"
Deployability,"I just compiled this branch and it looks like the test that I have still doesn't work. I think I remember trying to flip this as well and eventually concluded that the issue was ""something weird"" because `update_geometry` _should_ update the symmetry information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191828792:231,update,update,231,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191828792,1,['update'],['update']
Deployability,"I just pushed this up so that others can play with it - there has been a lot of interest in getting it implemented. The current system is very janky from a build point of view. I currently just `conda install pugixml -c conda-forge` first, and build LibECPInt as a standalone library. From there, you can hardwire the location to those libraries by something awful like ` cmake .. -DCMAKE_CXX_FLAGS=""-L/Users/simmonettac/programming/libecpint/installdir/lib -lFaddeeva -lecpint /Users/simmonettac/opt/anaconda3/envs/psi4dev/lib/libpugixml.a -I/Users/simmonettac/programming/libecpint/installdir/include -I/Users/simmonettac/opt/anaconda3/envs/psi4dev/include""`. As things stand, the implementation looks very straightforward but the answers don't appear to be correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802760259:201,install,install,201,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802760259,3,['install'],"['install', 'installdir']"
Deployability,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:302,install,install,302,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270,2,"['install', 'update']","['install', 'update']"
Deployability,"I just ran your input as copied from your posted output, and it runs cleanly. That was a mkl 2018.0.2, icpc 2018.0.3, gcc 7.2.0 Release build. Not sure what's going on for you. What's your `ldd -v psi4/core.so`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397012149:128,Release,Release,128,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397012149,1,['Release'],['Release']
Deployability,"I just updated the docs too. One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692,1,['update'],['updated']
Deployability,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:123,integrat,integrating,123,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,2,['integrat'],"['integrating', 'integrator']"
Deployability,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183784922:15,continuous,continuous-integration,15,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922,1,['continuous'],['continuous-integration']
Deployability,"I know havoc and epochs and non-sortability ensue. We're actually trying to be _more_ versioning standards compliant, since if we went with project `psi` and version `4.0` we couldn't ever make an API change w/o bumping to psi5. So the plan is that the stable release will be project `psi4` and version `1.0`, as in https://github.com/psi4/psi4public/wiki/Versioning#how-to-get-and-interpret-the-version-number .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182772882:260,release,release,260,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182772882,1,['release'],['release']
Deployability,"I know how to fix this myself, but let's pretend I'm a stupid Mac user that has Xcode and, by the grace of god, managed to install gfortran without losing a limb. Don't I deserve for CMake to throw me a bone and auto-detect the fast system BLAS/LAPACK?. I am surprised that CMake doesn't do this already btw. Seems dirt-simple for them. Cheers,. Jeff. Jeffs-MacBook-Pro:build jhammond$ cmake ..; -- The C compiler identification is Clang 4.2.0; -- The CXX compiler identification is Clang 4.2.0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:123,install,install,123,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['install'],['install']
Deployability,"I know the code used `P::e` before I touched it, but I don't think any of the code I added uses `P::e`. If that's not the case, let me know, and I'll see if I can remove the offending code, to help eliminate globals. I'm holding off on documentation update until I know if I need to make other changes while I'm at it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-448039186:250,update,update,250,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-448039186,1,['update'],['update']
Deployability,"I know, it's this issue: https://github.com/PCMSolver/pcmsolver/issues/206 . An additional check was added to pcmsolver that hits larger molecules, and when I updated from v1.2.1 to v1.2.3 when doing the conda-forge transition, that check got turned on. I should do a new binary version commenting out that check so that calcs at least run as before, even if they're slightly less to be trusted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2276260506:159,update,updated,159,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2276260506,1,['update'],['updated']
Deployability,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,configurat,configuration,658,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640,1,['configurat'],['configuration']
Deployability,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:32,install,installing,32,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052,4,['install'],"['install', 'installing']"
Deployability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:174,patch,patch,174,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,2,"['install', 'patch']","['installed', 'patch']"
Deployability,"I need to run bin/psi4 from bash on different cloud nodes, and instead of having to figure out to mount mkl install on all nodes in the same way as on build server, it would just be alot easier to have mkl linked static in to psi4.... What would it take for me to make psi4 compile with static mkl, so I more easy can share my psi4 install dir between calculation nodes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386415227:108,install,install,108,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386415227,2,['install'],['install']
Deployability,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205097386:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386,1,['update'],['update']
Deployability,"I now have a version that compiles at home, though I'm not getting the narrowing warning-as-error that the auto-builder is. Still I've patched for it. This *should work* now...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459:135,patch,patched,135,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459,1,['patch'],['patched']
Deployability,"I overlooked this when previously checking the documentation. The CI/MCSCF example from the following page does not work: http://www.psicode.org/psi4manual/1.3/molden.html. A minor issue is that `'ci'` is not a valid method. The second problem is that the `wfn.opdm` method should be replaced by `wfn.get_opdm`. (A useful example can be found in the source tree: `tests/molden2/input.dat`). I believe this is a correct example, but it would be nice if someone more familiar with the CI code could confirm and explain a few questions below. (I would be happy to make a PR with updated documentation.). ```; molecule {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; }. set basis cc-pVTZ; set opdm true. E, wfn = energy('fci', return_wfn=True); molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)); ```. Main questions:; - Is this example correct? It runs and seems to give sensible results.; - Which levels of theory (other than FCI and CASSCF) can be used? (CISD gives an error: `AttributeError: 'psi4.core.Wavefunction' object has no attribute 'get_opdm'`.); - How can one use the first two arguments to `get_opdm`? They are documented here in the source code: https://github.com/psi4/psi4/blob/880f87f5b2765ed00efaf6dd63c406b574c40157/psi4/src/psi4/detci/ciwave.h#L141 but setting anything else than `0, 0` for the first two arguments does not work: `Fatal Error: CIWavefunction::get_opdm: Requested OPDM was not formed!` I tried to add `set tdm true`, but this had no effect. (Also, I guess writing out a transition density matrix to a Molden file makes little sense.); - When the last argument is `True`, does this mean the frozen-core is included in the density matrix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1638:576,update,updated,576,https://psicode.org,https://github.com/psi4/psi4/issues/1638,1,['update'],['updated']
Deployability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:475,release,release,475,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['release'],['release']
Deployability,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38212166:8,patch,patch,8,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166,1,['patch'],['patch']
Deployability,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:707,install,install,707,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,4,['install'],['install']
Deployability,"I put in a patch so that this should soft fail now. SOSCF is quite a new module, out of curiosity have you used it for any other systems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256#issuecomment-184814615:11,patch,patch,11,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184814615,1,['patch'],['patch']
Deployability,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22983952:562,release,release,562,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952,1,['release'],['release']
Deployability,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:796,Install,Install,796,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:1693,patch,patches,1693,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,1,['patch'],['patches']
Deployability,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:816,release,release,816,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['release'],['release']
Deployability,"I ran into another issue during the `make install` step.; I kept getting the `ImportError: No module named mpmath`. I have attempted to install `mpmath` through conda, and the issue still persists.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382179737:42,install,install,42,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382179737,2,['install'],['install']
Deployability,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346434514:24,hotfix,hotfix,24,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514,2,['hotfix'],['hotfix']
Deployability,"I ran your command but I get pydantic v1.3 again by default. Here is the output of `conda list`:. ```; # Name Version Build Channel; pydantic 1.3 py38hfa6e2cd_0 psi4; ```. Edit: Now it tells me that a newer conda version exists. ; ```; ==> WARNING: A newer version of conda exists. <==; current version: 4.12.0; latest version: 4.13.0. Please update conda by running; $ conda update -n base conda; ```. Having updated the base conda, it still gives me the default version of 1.3, however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1161383668:343,update,update,343,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1161383668,3,['update'],"['update', 'updated']"
Deployability,"I realize it was only released recently, but is there any possibility of supporting the [DM21 functionals](https://github.com/deepmind/deepmind-research/tree/master/density_functional_approximation_dm21) ([paper](https://doi.org/10.1126/science.abj6511))?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2380:22,release,released,22,https://psicode.org,https://github.com/psi4/psi4/issues/2380,1,['release'],['released']
Deployability,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239042342:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342,2,"['install', 'update']","['install', 'update']"
Deployability,"I really couldn't care less about pluralization in function names, but this is going to break the three findif related tests in `cookbook`. Expected timeline on getting this in? The changes to read/write wavefunction syntax will impact the updated orbital guess code I should be submitting tomorrow. I also never thought I'd see you _remove_ hand-formatting. See the read/write wavefunction code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379:240,update,updated,240,https://psicode.org,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379,1,['update'],['updated']
Deployability,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:11,update,updated,11,https://psicode.org,https://github.com/psi4/psi4/issues/971,1,['update'],['updated']
Deployability,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222506368:128,patch,patches,128,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368,2,['patch'],"['patch', 'patches']"
Deployability,"I reinstalled with the rc2 installer and the same error persists. I am looking in the psi4 python module and the ""core"" file seems to not have been compiled correctly? I am guessing it should be a .py file but in my directory its a .pyd file and has a name ""core.cp38-win_amd64.pyd"". Can anyone confirm this and/or point me to where the corrrect file is here so I can download and replace?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336:27,install,installer,27,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336,1,['install'],['installer']
Deployability,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:1204,install,installed,1204,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['install'],['installed']
Deployability,I reran the input file from the OP with a newly updated version of Psi. The large basis computation gives the same result as before. #1456 does not fix this issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-451590172:48,update,updated,48,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-451590172,1,['update'],['updated']
Deployability,I say review and pull this in. We can patch it up based on @ajmisquitta's comments at a later date.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942#issuecomment-378368134:38,patch,patch,38,https://psicode.org,https://github.com/psi4/psi4/pull/942#issuecomment-378368134,1,['patch'],['patch']
Deployability,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:228,patch,patch,228,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537,1,['patch'],['patch']
Deployability,"I see a 3c smoke test in here, so I think it's best for me to update the branch with the 3c PR contents, before merging. Thoughts, @loriab ? Excellent stuff in this one - sorry for the delayed review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-283403855:62,update,update,62,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283403855,1,['update'],['update']
Deployability,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355077662:120,patch,patch,120,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662,2,"['patch', 'update']","['patch', 'update']"
Deployability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:1838,update,update,1838,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,1,['update'],['update']
Deployability,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:31,install,installed,31,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,2,"['install', 'update']","['installed', 'update']"
Deployability,"I should add that the reason I point to conda in the first step of the above is because I installed boost, Eigen and gmp in there. Those are all needed for libint2, and are easily obtained via conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537946083:90,install,installed,90,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537946083,1,['install'],['installed']
Deployability,"I should have read this first before replying on twitter. That 7-7-4-8-8-5 file was a trial I was making (https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539). And in generating the tarball, I caught some uncommitted local changes that I was trying to fix a separate issue of paths in Windows. Thanks for the report, and I'm sorry for the trouble. I'll certainly patch it up before officially recommending that larger AM tarball. Out of curiosity, what architecture/threads were you using that you got that tarball to build in 3 hours?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133782381:376,patch,patch,376,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133782381,1,['patch'],['patch']
Deployability,"I skimmed the functionality for new goodies, I dont see too many that effects us (and nothing in a major way). So nothing too promising there. Do the PyBind11 folks have an official stance on cross version compatibility. I dont see a huge reason for major releases not to work together at the moment. Although I do see possible issues as they tweak things like `py::keep_alive` between 2.1 and 2.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-335233936:256,release,releases,256,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-335233936,1,['release'],['releases']
Deployability,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:197,install,installed,197,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,5,['install'],"['install', 'install-dir', 'installed']"
Deployability,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:180,install,installation,180,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,1,['install'],['installation']
Deployability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:152,install,installing,152,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,3,['install'],"['install', 'installing']"
Deployability,"I suppose I should add my setup is kind of unusual in that I don't develop with or for python, only C++, so never have that stuff installed. So it caught me out for a minute, but easy to fix. Not critical by any means, but If one were a stickler for good cmake practices code compilation should never fall over because of cmake missing dependency checks, . Perhaps I'll try and port psi4 build to meson one day .. famous last words. :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067:130,install,installed,130,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067,1,['install'],['installed']
Deployability,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:70,install,install,70,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330,1,['install'],['install']
Deployability,"I suspect it's a stray forte somewhere. However, I have not installed forte as part of this separate environment, I do have a failed compilation of it around so that could be the reason. The call appears to be coming from this function in psi4:; `PSI4.DRIVER.P4UTIL.PROCUTIL`. is this forte:. ```; def prepare_options_for_set_options() -> Dict[str, Any]:; """"""Collect current state of :py:class:`psi4.core.Options` information for; reloading by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; fort",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:60,install,installed,60,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['install'],['installed']
Deployability,"I sympathize, but enough would break that a non-psi-theme-psi-docs is probably best built by hand. psi_theme has a couple sphinx extensions, and psi_theme is a light tweak on cloud_theme which also has extensions psi uses. And all the api autodoc-ing uses extensions from astropy. So if you change the theme and comment out enough from [here](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L67-L86), you can get a docs build with a built-in theme (I've done it), but it's definitely incomplete. There came to be so many external requirements that I thought it was better practice to add psi_theme to the list and just make sure they were all easily installable (https://github.com/psi4/psi4/blob/master/doc/sphinxman/CMakeLists.txt#L18-L21). How intent are you on evading psi_theme?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/892#issuecomment-356276924:675,install,installable,675,https://psicode.org,https://github.com/psi4/psi4/issues/892#issuecomment-356276924,1,['install'],['installable']
Deployability,"I tested my code after rebasing, still looks just like it did before. I updated the timings and errors graphs based on the results of my rebased code (I used an intel compiler this time, rather than GCC)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767:72,update,updated,72,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767,1,['update'],['updated']
Deployability,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:50,update,updated,50,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644,2,['update'],"['updated', 'updates']"
Deployability,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:734,update,update,734,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,1,['update'],['update']
Deployability,I think I updated my post while you wrote back to me.... for some reason --intel fails in cmake (se previous post),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386438642:10,update,updated,10,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386438642,1,['update'],['updated']
Deployability,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:16,update,update,16,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,2,['update'],['update']
Deployability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:64,install,install,64,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,3,"['install', 'update']","['install', 'update']"
Deployability,I think in terms of changes for this particular patch this is all ready to go. Any objections?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747#issuecomment-312716724:48,patch,patch,48,https://psicode.org,https://github.com/psi4/psi4/pull/747#issuecomment-312716724,1,['patch'],['patch']
Deployability,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:261,update,update,261,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314,1,['update'],['update']
Deployability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:159,toggle,toggle,159,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,2,"['install', 'toggle']","['installed', 'toggle']"
Deployability,"I think that is likely the way to go, I believe you will still need to merge some of the new integral code. It may be worth splitting that off into a another PR to get a digestible component there. We usually can merge small chunks quicker and expanding functionality through python is usually quite preferred if that level of integration is sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983:327,integrat,integration,327,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983,1,['integrat'],['integration']
Deployability,"I think that looks good, @dgasmith. @jturney, how about a weekly build/test for the full matrix (and OSX) using the Docker solution that @dgasmith proposed before. That would give us complete coverage of compilers and debug/release, but on a slight delay. We'd catch most bugs before that stage with the limited Travis builds. Just a thought.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893800:224,release,release,224,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893800,1,['release'],['release']
Deployability,"I think that should be sufficient, the differences are nominal enough. On this note can you quantify the energy differences (both absolute and relative) so that we can mention this in the release notes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194:188,release,release,188,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194,1,['release'],['release']
Deployability,"I think that sounds right, Jet. David. On Fri, Jan 22, 2016 at 6:31 AM, Justin Turney notifications@github.com; wrote:. > Didn't we use to install the psi4 headers into prefix/include/psi4 ?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/215#issuecomment-173890912.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173925344:139,install,install,139,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173925344,1,['install'],['install']
Deployability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,configurat,configuration,123,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['configurat'],['configuration']
Deployability,"I think the name `ncore` is ok, since it's still asking for the number of core electrons (maybe `n_ecp_core` is more explicit?). The docstring certainly needs an update - good catch! If you have a suggestion on `ncore` nomenclature, fire away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307966347:162,update,update,162,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307966347,1,['update'],['update']
Deployability,"I think this could be due to the fact that Matrix::copy() will reallocate the matrix if the matrix being copied has a different size or number of irreps:. void Matrix::copy(const Matrix\* cp); {; // Make sure we are the same size as cp; bool same = true;; if (nirrep_ != cp->nirrep_ || symmetry_ != cp->symmetry_) {; same = false;; }; else {; if (colspi_ != cp->colspi_ || rowspi_ != cp->rowspi_); same = false;; }. ```; if (same == false) {; release();; nirrep_ = cp->nirrep_;; symmetry_ = cp->symmetry_;; rowspi_ = Dimension(nirrep_);; colspi_ = Dimension(nirrep_);; for (int i=0; i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:443,release,release,443,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['release'],['release']
Deployability,"I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; Please check the updated main post. I am not 100% sure what I did with the `Vector.copy()` is fully correct, please have a close look. It works for my use case.; (https://github.com/psi4/psi4/pull/1884/files#diff-ce944be82d781507cd2bfa56fdb26af1R323)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670485596:148,update,updated,148,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670485596,1,['update'],['updated']
Deployability,"I think this is pretty close pending the review comments, any chance we can get this patched up and in?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-497955312:85,patch,patched,85,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-497955312,1,['patch'],['patched']
Deployability,"I think this may be similar to a recent issue. I can install psi4 into a new environment, but I would like to have rdkit available in the same env too. Is it possible to do a conda or mamba install psi4?. I obviously tried this and I am running into many conflicts. not sure if conda-forge or conda in general is getting tripped up because in the past I was able to install rdkit into a env with psi4 but not now apparently. from `mamba install psi4 psi4-rt python=3.6 -c psi4'; `. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4-rt', 'python=3.6']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:53,install,install,53,https://psicode.org,https://github.com/psi4/psi4/issues/2912,4,['install'],['install']
Deployability,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173961471:60,Install,Installed,60,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471,2,"['Install', 'install']","['Installed', 'install']"
Deployability,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:696,install,install,696,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['install'],['install']
Deployability,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:763,Install,Installing,763,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693,1,['Install'],['Installing']
Deployability,I updated the `energy` function docstring to include the boolean option of write_orbitals,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074,1,['update'],['updated']
Deployability,I updated the graph at the start of the pull request to reflect the `DGAS Victory` commit,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1749#issuecomment-551189913:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/1749#issuecomment-551189913,1,['update'],['updated']
Deployability,"I updated the input file to the [new syntax](https://github.com/psi4/psi4/issues/150#issuecomment-228951911), and it does the SCF and seemingly gets into the DMRG. Is this any improvement to what you experienced?. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg_irrep 1; set dmrg_multiplicity 2; set restricted_docc [ 9, 0 ]; set active [ 38, 9 ]. set dmrg_sweep_states [ 250, 250 ]; set dmrg_sweep_energy_conv [ 1e-8, 1e-8 ]; set dmrg_sweep_max_sweeps [ 10, 10 ]; set dmrg_sweep_noise_prefac [ 0.05, 0.00 ]; set dmrg_sweep_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg_print_corr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###################################################",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['update'],['updated']
Deployability,"I updated the title and posted some blurb describing the issue. I approve the PR, but I'm a part author so maybe another reviewer would be good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444471200:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444471200,1,['update'],['updated']
Deployability,"I updated thermo.cc so that only 1 warning message is printed when the frequencies are checked for low and imaginary values. I also added a newline after the low frequency mode warning. Previous output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```. New output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/197:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/197,1,['update'],['updated']
Deployability,"I used the MKL DEBUG flag. The compiler penalties you mentioned were removed at one point (https://github.com/jimenezrick/patch-AuthenticAMD), currently I don't worry about them unless there is a new report on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633678203:122,patch,patch-AuthenticAMD,122,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633678203,1,['patch'],['patch-AuthenticAMD']
Deployability,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:10,install,install,10,https://psicode.org,https://github.com/psi4/psi4/issues/3046,16,['install'],"['install', 'installable', 'installation', 'installed', 'installing']"
Deployability,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:1830,release,release,1830,https://psicode.org,https://github.com/psi4/psi4/issues/1095,2,"['install', 'release']","['install', 'release']"
Deployability,I was running `mp2/cc-pvqz-ri` and also `mp2/cc-pvqz` and saw the difference in the energy and was thinking I needed to explicitly set ri. . Thanks for clarifying that. Really helps before I scale. . Will update soon with some test results.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432:205,update,update,205,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432,1,['update'],['update']
Deployability,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:617,upgrade,upgrade,617,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289,1,['upgrade'],['upgrade']
Deployability,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:463,continuous,continuous,463,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['continuous'],['continuous']
Deployability,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/724:675,patch,patch,675,https://psicode.org,https://github.com/psi4/psi4/issues/724,1,['patch'],['patch']
Deployability,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:188,install,installed,188,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,2,['install'],['installed']
Deployability,"I wonder if this is obvious, but there's no Psi4 for python 3.8 in the main channel:; ```; linux-64/psi4-1.3.2+ecbda83-py37h06ff01c_1.tar.bz2; linux-64/psi4-1.3.2+ecbda83-py36h34e5639_1.tar.bz2; ```; That being said, unless you really want the current release version (1.3.2), I'd strongly suggest you go for Psi4 from the `dev` channel using `conda create -n p4env python=3.8 psi4 -c psi4/label/dev`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671664349:252,release,release,252,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671664349,1,['release'],['release']
Deployability,I would not mind trying to fix this. ; I am not very familiar with the manual. I have identified the .rts file on the repo. But I am uncertain if any other files need to be updated as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087#issuecomment-764948136:173,update,updated,173,https://psicode.org,https://github.com/psi4/psi4/issues/2087#issuecomment-764948136,1,['update'],['updated']
Deployability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:39,patch,patch,39,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['patch'],['patch']
Deployability,"I'd appreciate some feedback, especially on the docs. There's one or two items where I'd like @loriab to weigh in further: function aliases and zero-if-not-present for VV10 and empirical dispersion. The failing build seems to be a random crash of the windows pipeline, not related to this PR as far as I can tell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200:259,pipeline,pipeline,259,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200,1,['pipeline'],['pipeline']
Deployability,I'd be for using `psi4` since psi3 is still out in the wild and uses `psi`. Looking at that cmake url it looks like only `DOCDIR` is automatically namespaced. We'd only need to namespace `INCLUDEDIR` and `DATADIR`. Maybe now is a good time to rename the `lib` in our top source directory to `share/psi4` since that is where the items will be installed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173950354:342,install,installed,342,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173950354,1,['install'],['installed']
Deployability,"I'd like to be able to use Psi4 in a Jupyter notebook, but part of my workflow involves feeding the output into `cclib` for conversion to CJSON. Unfortunately, the truncated output from PsiAPI can't be parsed by the `cclib` parsers. Is there (or can there be) a way to toggle a ""full"" output using `psi4.set_output_file()`?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893:269,toggle,toggle,269,https://psicode.org,https://github.com/psi4/psi4/issues/2893,1,['toggle'],['toggle']
Deployability,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:346,install,installed,346,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,3,['install'],"['installed', 'installing']"
Deployability,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:47,release,release,47,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243,1,['release'],['release']
Deployability,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:169,update,update,169,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,1,['update'],['update']
Deployability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:224,update,updated,224,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,1,['update'],['updated']
Deployability,I'll be the first to admit that the RPATHs in this version are a little wanky. I just give it both its install and build locations. I really like the relative RPATHS @jturney brought up and that's probably the way to do it if we can find a Mac solution as well. [Site with the CMake commands to pull this off](https://www.semipol.de/2012/02/16/relative-rpath-settings-with-cmake.html),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236021130:103,install,install,103,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236021130,1,['install'],['install']
Deployability,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130124191:248,install,installed,248,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191,2,['install'],['installed']
Deployability,I'll have time tomorrow to update the docs and tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-283811506:27,update,update,27,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-283811506,1,['update'],['update']
Deployability,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-289815684:78,release,release,78,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684,1,['release'],['release']
Deployability,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-37993139:345,update,updated,345,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139,2,['update'],['updated']
Deployability,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183540864:358,install,install,358,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864,1,['install'],['install']
Deployability,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:649,update,updated,649,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744,1,['update'],['updated']
Deployability,"I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449:93,release,release,93,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449,2,"['release', 'update']","['release', 'updated']"
Deployability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:18,update,updated,18,https://psicode.org,https://github.com/psi4/psi4/issues/1118,2,"['install', 'update']","['installation', 'updated']"
Deployability,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1425:428,release,release,428,https://psicode.org,https://github.com/psi4/psi4/issues/1425,1,['release'],['release']
Deployability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:528,configurat,configuration,528,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,1,['configurat'],['configuration']
Deployability,I'm fine with leaving the sample updates in. Looks good to me so far.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-426228182:33,update,updates,33,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-426228182,1,['update'],['updates']
Deployability,"I'm fine with this. We should mention it in release notes, and perhaps make sure the ""Description"" and ""Citation"" elements are filled in properly for both new B97 and B97-0 (not sure they currently are).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1403#issuecomment-444398462:44,release,release,44,https://psicode.org,https://github.com/psi4/psi4/pull/1403#issuecomment-444398462,1,['release'],['release']
Deployability,"I'm glad to hear you're using an external libint; I hope everyone will be soon. If you've switched from the [patch](https://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup) to the [new external repo](https://github.com/psi4/libint) and it gives you any problems, please let us know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249428766:109,patch,patch,109,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249428766,3,['patch'],"['patch', 'patches']"
Deployability,"I'm going to put together a psi-hosted libxc 4.0 + patch for psi to build from, in case that's helpful. Congrats for tracking that down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379371277:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379371277,1,['patch'],['patch']
Deployability,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269,1,['update'],['update']
Deployability,"I'm having trouble getting everything copied into the install location. I generally configure with `mkdir build; cd build; ccmake ..;`, and then customize the CMAKE_INSTALL_PREFIX and other options from the curses gui. I think maybe `CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT` doesn't get updated here: https://github.com/psi4/psi4public/blob/master/CMakeLists.txt#L103-L114. What's the purpose of that section explicitly changing the install prefix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161:54,install,install,54,https://psicode.org,https://github.com/psi4/psi4/issues/161,3,"['install', 'update']","['install', 'updated']"
Deployability,"I'm inclined to force an update, given that GCC5 hasn't been supported for years, but as I'm not familiar with cluster management, my opinion isn't very strong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-767187015:25,update,update,25,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-767187015,1,['update'],['update']
Deployability,I'm kind of surprised this hasn't been caught sooner. Looks like we're using a decently old version of a file similar to the one that you linked to. Might be time to upgrade the checks to the modern style.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743284249:166,upgrade,upgrade,166,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743284249,1,['upgrade'],['upgrade']
Deployability,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343783023:933,release,release,933,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023,1,['release'],['release']
Deployability,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:530,update,update,530,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['update'],['update']
Deployability,"I'm not sure if it's related but I just ran a conda upgrade an a fresh, clean anaconda install, and this happened:; ```; QuickSilver:~ > conda update --prefix /Users/andysim/anaconda3 anaconda; Solving environment: done. ## Package Plan ##. environment location: /Users/andysim/anaconda3. added / updated specs: ; - anaconda. The following packages will be downloaded:. package | build; ---------------------------|-----------------; mkl-2018.0.3 | 1 149.2 MB. The following packages will be DOWNGRADED:. mkl: 2019.0-118 --> 2018.0.3-1; ```; Maybe this means that there's a known problem with mkl2019 and it's being rolled back?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710:52,upgrade,upgrade,52,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710,4,"['install', 'update', 'upgrade']","['install', 'update', 'updated', 'upgrade']"
Deployability,"I'm ok with linking to a PDF manual or external website for GDMA, but I; think we would also at least need a little paragraph in our manual; explaining that the capability is there, and giving any Psi keywords that; are used to access GDMA. On Thu, Mar 24, 2016 at 11:38 PM, Andy Simmonett notifications@github.com; wrote:. > Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone; > yesterday, but haven't heard back. He is retired now, so I don't know if; > his Cambridge email is active; his seminal red book was updated last year; > so I think he's still doing some work. I doubt he will object to our; > distribution idea; I think he would've chosen a different license to GPL if; > he didn't want his code to be used in this way. Regardless, I think we; > should wait a week to hear back and merge the PR if we don't get a; > response. He deserves to have a say in how we handle his code.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/323#issuecomment-201122403",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201297358:534,update,updated,534,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201297358,1,['update'],['updated']
Deployability,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:586,integrat,integrated,586,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Deployability,"I'm still confused. You say that `D_in` is the density matrix ""after mixing"". What exactly is ""mixing""? My best guess is that this is related to what we call ""update damping"", but I don't know. I'm only vaguely familiar with plane wave methods, so I'm not qualified to explain what exactly the differences are. What I meant was that ""ten minutes of Google reading has me convinced that the approach to mixing there is very different from quantum chemistry.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230:159,update,update,159,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230,1,['update'],['update']
Deployability,I'm still figuring out the caching of Conda-installed dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268:44,install,installed,44,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268,1,['install'],['installed']
Deployability,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893146:48,release,releases,48,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146,1,['release'],['releases']
Deployability,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:312,Release,Release,312,https://psicode.org,https://github.com/psi4/psi4/issues/1426,2,['Release'],['Release']
Deployability,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410:14,install,install,14,https://psicode.org,https://github.com/psi4/psi4/issues/410,3,['install'],"['install', 'installation']"
Deployability,"I'm trying to remember if there was a reason to duplicate the install path under the stage dir, but I don't think there is. I feel like it was a cmake recommendation, as maybe it could handle non-standard install directories (some stuff in /bin, /usr/bin, or something). At least right now, I can't think of a reason to keep it that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411824471:62,install,install,62,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411824471,2,['install'],['install']
Deployability,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:772,install,install,772,https://psicode.org,https://github.com/psi4/psi4/issues/464,2,['install'],['install']
Deployability,"I'm trying to run a CI calculation within an active space to get a natural orbital guess for a smaller subspace CASSCF. However, when nat_orbs = true, the FNO code is triggered. In some cases I might want this to happen, but; a) I might want to get NOs with a canonical frozen core; b) the FNO code that insists on running currently crashes with; ```; ==> Build MP2 amplitudes, OPDM, and NOs <==. LIBDPD: Out-of-core algorithm not yet coded for rpqs sort.; Error in: buf4_sort; ```; on my system with roughly 300 basis functions. Frozen natural orbitals should only be triggered if the method explicitly specifies fno- or if a special keyword (I propose frz_nat_orbs) is specified. Normally I'd supply a pull request, but I still haven't figured out where the fno code is toggled in this case...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598:772,toggle,toggled,772,https://psicode.org,https://github.com/psi4/psi4/issues/598,1,['toggle'],['toggled']
Deployability,"I'm trying to use Psi4 in a `jupyter notebook` and getting an immediate crash. I didn't see anything in documentation or issues about running inside a notebook, so I'm not sure if this is supported behavior. I installed Psi4 using `conda` in its own environment, following the instructions [here](http://psicode.org/psi4manual/1.1/conda.html?highlight=conda) with `conda create -n p4env python=3.6 psi4 psi4-rt -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kerne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:210,install,installed,210,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['install'],['installed']
Deployability,I'm using the latest version according to `conda update psi4`. Is there a dev version for me to use?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344080503:49,update,update,49,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344080503,1,['update'],['update']
Deployability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:528,update,update,528,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,2,['update'],['update']
Deployability,"I've been battling intermittent (read: ~1/1000 runs) hangs of DFT runs that I think I've traced back to some rather mystifying bits of code in cubature.cc... (h/t for @rmcgibbo for lots of help here). The problems begin here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5106. (Don't mind the mismatch between line numbers I quote and line numbers in my gdb outputs -- there's some edits in a local version of psi4 we're using but I pinkie-promise they're not at all related to the code in-question! ...but to be very sure, I'll check that the same things happen with a truly vanilla build when I get home and have access to my ""normal""/vanilla psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:977,install,install,977,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['install'],['install']
Deployability,"I've been trying to build a version of psi4 1.6 (based on the release from a day or so ago) with MAX_AM_ERI=7, and run into various issues. I think at this point I've solved all my issues, but wanted to document my steps here in case any of these can help others. **Overall**: Is MAX_AM_ERI=7 meant for use on 1.6? Is https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz the right file to use (with patches described below)?. **Problem 1**: psi4/external/upstream/libint2/CMakeLists.txt refers to a single libint2 file regardless of MAX_AM_ERI (https://github.com/psi4/psi4/blob/1.6.x/external/upstream/libint2/CMakeLists.txt#L63) . **Solution 1**: Grab https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz instead. **Problem 2**: The CMakeLists.txt in Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz has an incorrectly quoted macro, which results in a build error when trying to compile using header files from libint2. The original correct quoting appears commented out? Which makes me worried maybe it was that way for a Reason, but it would not build that way. **Solution 2**: Uncomment line 303 and remove line 304 of libint-2.7.1/CMakeLists.txt, then (re)build. (this makes it look like the CMakeLists.txt in the default https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586:62,release,release,62,https://psicode.org,https://github.com/psi4/psi4/issues/2586,5,"['patch', 'release']","['patches', 'release', 'releases']"
Deployability,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:304,update,updated,304,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067,1,['update'],['updated']
Deployability,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98488186:751,install,install,751,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186,1,['install'],['install']
Deployability,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:117,pipeline,pipelines,117,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628,4,"['continuous', 'integrat', 'pipeline']","['continuous', 'integration', 'pipelines', 'pipelines-linux']"
Deployability,"I've got all the parts that affect REMP ready. Final stage is to persuade dfocc to converge simple molecules to default tolerance under default conditions :-) . I'll update this PR as the amalgamation, then break off just `occ` changes for you and other to look over, @behnle. A couple easy questions:; * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call.; * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727:166,update,update,166,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727,1,['update'],['update']
Deployability,"I've installed `psi4` according to the [Quick install tutorial](http://www.psicode.org/psi4manual/1.3/conda.html#sec-quickconda) on Ubuntu 18.10. I want to compute spectroscopic constants for vibrational levels of N2+, so I've written a following input:. ```; memory 2GB . molecule dinitrogen_cation {1 2; N1 ; N2 N1 1; units angstrom; symmetry d2h}. r=[0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.4, 2.45, ; 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95, 3.0, 3.05, 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95, 4.0, 4.05, 4.1, ; 4.15, 4.2, 4.25, 4.3, 4.35, 4.4, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85, 4.9, 4.95, 5.0, 30.0]. eng=[-108.20769157984833, -108.40283941756965, -108.5304405614308, -108.60907987217198, -108.65255814638125, -108.67615436957043, -108.67796355601384, -108.6687799248285, ; -108.6529295435983, -108.63448928177459, -108.61710861201114, -108.60250322145204, -108.59095590797817, -108.5816692775646, -108.57377233673783, -108.56672198956738, ; -108.56024733808314, -108.55422338322172, -108.54858992543426, -108.54332586487885, -108.53838700188666, -108.53376273653713, -108.52943746894715, -108.52539739922014, ; -108.5216299274505, -108.5181229537289, -108.51486517814001, -108.51184580076476, -108.50905562167209, -108.50648624092493, -108.504130358578, -108.50003198928782, -108.4982747024555, ; -108.49670061425044, -108.49529952474904, -108.49406023403529, -108.49297114219605, -108.49202014932202, -108.4911954555016, -108.49048556082097, -108.48987916536481, ; -108.48936536921477, -108.48893387244806, -108.4885456753569, -108.48825797751267, -108.48802517925705, -108.48783928065005, -108.48769318174477, -108.48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:5,install,installed,5,https://psicode.org,https://github.com/psi4/psi4/issues/1600,2,['install'],"['install', 'installed']"
Deployability,"I've just merged the new code in libxc master. Libxc4 is going to be released tomorrow, after which you can switch over.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-331278345:69,release,released,69,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-331278345,1,['release'],['released']
Deployability,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:49,release,release,49,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,1,['release'],['release']
Deployability,"I've just tested the following:; * cloned to `/external_disk/gits/psi4`; * from there, configured to `/tmp` via `cmake -S. ... -DCMAKE_INSTALL_PREFIX=/home/auser/installs/psi4 -B/tmp/compile-psi4`; * build in `/tmp/compile-psi4` via `cmake --build .`; * test internal install via `/tmp/compile-psi4/stage/bin/psi4 --test`; * install via `cmake --build . --target install` to `/home/auser/installs/psi4`; * test external install via `/home/auser/installs/psi4/bin/psi4 --test`. That spans an external disk, an account home, and `/tmp/`, and I don't observe the mis-installed quadratures files you report. You are using CMake variables, not environment variables to configure this, right? Do you have a link to the recipe you're using? This is what I use for conda, if that's any help. https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/build.sh#L120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867:162,install,installs,162,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867,8,['install'],"['install', 'installed', 'installs']"
Deployability,"I've made a new PR #2743 to JUST fix the hang bug, and then we can keep bikeshedding here on what we actually want to do about `RadialGrid` and `SphericalGrid` but have a fix in the codebase that actually stops the nasty hang that took me down this rabbit hole in the first place. - @susilehtola this initializes with an initializer list like you requested; - @hokru this loses NO information over the prior state-of-the-world like you suggested was desirable (if I was reading correctly); - @JonathonMisiewicz I guess you won't like it because spaghetti didn't go away but it's short and sweet, at least. Obviously this patch would undo all of that patch but I think the scope of this discussion exceeded the original PR statement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391:621,patch,patch,621,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391,2,['patch'],['patch']
Deployability,"I've made a nofortran py37 Mac build accessible through `conda create -n amber3 ambertools=20 blas=*=mkl psi4/label/dev::libxc psi4 -c conda-forge -c psi4/label/nofortran -c psi4/label/dev`. It won't get automatically updated regularly, but I can do so upon pinging. Hopefully this'll do for CI. lmk if a different python preferred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235:218,update,updated,218,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235,1,['update'],['updated']
Deployability,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20587095:354,release,release,354,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095,1,['release'],['release']
Deployability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:264,release,release,264,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,"['install', 'release']","['install', 'release']"
Deployability,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:108,install,installed,108,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['install'],['installed']
Deployability,"I've tried installation on my personal laptop (the issue was in the first place on my desktop at work) and accidentally did something different and it worked, so the issue might be solved. We'll figure out what's different and post the solution or further questions. Thanks for the quick reply.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437585280:11,install,installation,11,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437585280,1,['install'],['installation']
Deployability,"I've written a patch to allow for a custom frozen policy that is a bit clunky but safer than `num_frozen_docc` (because it applies per-atom rules, so works properly for cases like SAPT, MBIS_VOLUME_RATIOS, etc) -- once I can be sure this builds in vanilla psi4 (trying now) I will re-run my test jobs and submit the patch. . Still not sure what to do about `scf::HF::compute_fcpi` because I'm still a newbie to the code base (and this patch does NOT fix that issue).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402:15,patch,patch,15,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402,3,['patch'],['patch']
Deployability,IMHO the smartest SCF solver would be the augmented Roothaan-Hall method described in https://doi.org/10.1063/1.2974099 which uses a trust-region method to update the orbitals.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-468628046:156,update,update,156,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-468628046,1,['update'],['update']
Deployability,"ING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2231,Release,Release,2231,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Release'],['Release']
Deployability,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9284,install,install,9284,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['install'],['install']
Deployability,"IS_TRANSITION', 'SCF_INITIAL_START_DIIS_TRANSITION', 'SCF_MEM_SAFETY_FACTOR', 'SCF_PROPERTIES', 'SCF_SUBTYPE', 'SCF_TYPE', 'SCHMIDT_ADD_RESIDUAL_TOLERANCE', 'SCREENING', 'SCSN_MP2', 'SCS_CCSD', 'SCS_CEPA', 'SCS_MP2', 'SCS_TYPE', 'SEKINO', 'SEMICANONICAL', 'SF_RESTRICT', 'SIGMA_OVERLAP', 'SIMPLE_STEP_SCALING', 'SINGLES_PRINT', 'SMALL_CUTOFF', 'SOCC', 'SOLVER_CONVERGENCE', 'SOLVER_MAXITER', 'SOLVER_N_GUESS', 'SOLVER_N_ROOT', 'SOLVER_PRECONDITION', 'SOLVER_ROOTS_PER_IRREP', 'SOSCF', 'SOSCF_CONV', 'SOSCF_MAX_ITER', 'SOSCF_MIN_ITER', 'SOSCF_PRINT', 'SOSCF_START_CONVERGENCE', 'SOS_TYPE', 'SPIN_SCALE_TYPE', 'SSAPT0_SCALE', 'SS_E_CONVERGENCE', 'SS_R_CONVERGENCE', 'SS_SCALE', 'SS_SKIP_DIAG', 'SS_VECS_PER_ROOT', 'STABILITY_ADD_VECTORS', 'STABILITY_ANALYSIS', 'STABILITY_AUGMENT_SPACE_TOL', 'STABILITY_CHECK', 'STABILITY_CONVERGENCE', 'STABILITY_MAX_SPACE_SIZE', 'STABILITY_N_EIGENVALUES', 'STABILITY_N_GUESS_VECTORS', 'STEP_TYPE', 'SUMMATION_FIELDS', 'SYMMETRIZE', 'S_CHOLESKY_TOLERANCE', 'S_CUT', 'S_ORTHOGONALIZATION', 'S_TOLERANCE', 'T', 'T2_COUPLED', 'T3_WS_INCORE', 'TDM', 'TDSCF_COEFF_CUTOFF', 'TDSCF_GUESS', 'TDSCF_MAXITER', 'TDSCF_PRINT', 'TDSCF_R_CONVERGENCE', 'TDSCF_STATES', 'TDSCF_TDA', 'TDSCF_TDM_PRINT', 'TDSCF_TRIPLETS', 'TEST_B', 'TEST_DERIVATIVE_B', 'THETA_POINTS', 'THICKNESS', 'THREE_PARTICLE', 'TIKHONOW_MAX', 'TIKHONOW_OMEGA', 'TIKHONOW_TRIPLES', 'TILE_SZ', 'TPDM', 'TPDM_ABCD_TYPE', 'TRANSLATE_PSI4', 'TREE_EXPANSION_ORDER', 'TREE_THETA', 'TRIPLES_ALGORITHM', 'TRIPLES_DIIS', 'TRIPLES_IABC_TYPE', 'TRIPLES_LOW_MEMORY', 'TURN_ON_ACTV', 'T_AMPS', 'T_CUT_CLMO', 'T_CUT_CPAO', 'T_CUT_DO', 'T_CUT_DO_IJ', 'T_CUT_DO_PRE', 'T_CUT_MKN', 'T_CUT_PNO', 'T_CUT_PRE', 'UHF_NOONS', 'UPDATE', 'USE_DF_INTS', 'USE_SPIN_SYM', 'USE_SPIN_SYMMETRY', 'VAL_EX_LEVEL', 'VECS_CC3', 'VECS_PER_ROOT', 'WABEI_LOWDISK', 'WCOMBINE', 'WFN', 'WFN_SYM', 'WFN_TYPE', 'WRITER_FILE_LABEL', 'WRITE_NOS', 'WRITE_OPT_HISTORY', 'WRITE_OPT_RESULT', 'WRITE_TRAJECTORY', 'XI', 'XI_CONNECT', 'ZERO_INTERNAL_AMPS', 'ZETA'].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:23285,UPDATE,UPDATE,23285,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['UPDATE'],['UPDATE']
Deployability,"I_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3; -- Libraries : /lib64/libblas.so;/lib64/liblapack.so; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_SYSTEM_NATIVE_BLAS;HAVE_SYSTEM_NATIVE_LAPACK;FC_SYMBOL=2;HAVE_MM_MALLOC_H; WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; -- The CXX compiler identification is GNU 5.2.0; -- The C compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:2584,install,install,2584,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['install'],['install']
Deployability,If @loriab can update current status post-#2655?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1230383695:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1230383695,1,['update'],['update']
Deployability,"If I build psi4 and then run make distclean, I do not get the initial tarball content again, as the script doc/sphinxman/document_tests.pl overwrites samples/SUMMARY and some samples with new content. This makes Debian source package building fail after a build:. dpkg-source: info: local changes detected, the modified files are:; psi4.0b5/samples/SUMMARY; psi4.0b5/samples/dcft1/input.dat; psi4.0b5/samples/dcft4/input.dat; psi4.0b5/samples/dcft5/input.dat; psi4.0b5/samples/dcft6/input.dat; psi4.0b5/samples/pywrap-alias/input.dat. I think it would be best if (i) the samples are written to the builddir, or (ii) the samples are not shipped in the tarball in the first place, assuming all of samples/ is being autogenerated during doc-creation/installation anyway.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14:747,install,installation,747,https://psicode.org,https://github.com/psi4/psi4/issues/14,1,['install'],['installation']
Deployability,"If I have different compilations such as a Debug and a Release version, how do I make sure the correct PSIDATADIR is being found?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271979443:55,Release,Release,55,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271979443,1,['Release'],['Release']
Deployability,"If I read this correctly, this patch does not specify the auxiliary jkfit and ri basis sets for SAPT calculations for aug-cc-pV5Z or cc-pV5Z, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1559#issuecomment-469008343:31,patch,patch,31,https://psicode.org,https://github.com/psi4/psi4/pull/1559#issuecomment-469008343,1,['patch'],['patch']
Deployability,"If I run `conda list`, it tells me that I installed the `py39h1f3b974_0` NumPy 1.21.0 build from conda-forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961484165:42,install,installed,42,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961484165,1,['install'],['installed']
Deployability,"If I'm remembering where I left off and performing the diffs correctly, there's no more changes to be made to those 4 array/tensor files in the dfocc saga. And none of the yet-to-be-PRd code uses `davidson`, `cdsyev`, `cdgesv`, `lineq_flin`, or `lineq_pople`. There is new code with `diagonalize`, though, listed below. If the changes in this PR don't interfere with the calls below, or we can work around them, I think we can release the hold and merge this. Thanks for your patience, @TiborGY. ```; # HciA is Tensor2d (or sharedptr to it); cis.cc: HciA->diagonalize(CciA, EciA, cutoff);. # G is Tensor2d; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);. # Gamma* and Fock* are Tensor2d; fno.cc: Gamma_->diagonalize(Tvv_, diag_n_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: GammaA_->diagonalize(TvvA_, diag_nA_, cutoff_, false);; fno.cc: GammaB_->diagonalize(TvvB_, diag_nB_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: FockfvB->diagonalize(UfvB, eigfvB, cutoff_);; fno.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff_);. # a_opdm, etc. are Matrix; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: b_opdm->diagonalize(bevecs, bevals, descending);. # FockooA, etc. are Tensor2d; semi_canonic.cc: FockooA->diagonalize(UooA, eigooA, cutoff);; semi_canonic.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff);; semi_canonic.cc: FockooB->diagonalize(UooB, eigooB, cutoff);; semi_canonic.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138:427,release,release,427,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138,1,['release'],['release']
Deployability,If Intel were to release 18.0.1 for instance?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/931#issuecomment-370890288:17,release,release,17,https://psicode.org,https://github.com/psi4/psi4/pull/931#issuecomment-370890288,1,['release'],['release']
Deployability,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:164,install,install,164,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646,5,"['install', 'update']","['install', 'installation', 'updated']"
Deployability,"If anybody needs this immediately, the patch to get threaded gradients working is. ```; --- a/psi4/src/psi4/libmints/mintshelper.cc; +++ b/psi4/src/psi4/libmints/mintshelper.cc; @@ -2469,11 +2469,12 @@ SharedMatrix MintsHelper::three_idx_grad(const std::string& aux_name, const std:; auto idx3p = idx3_matrix->pointer();; #pragma omp parallel for; for (int aux = 0; aux < np; aux++) {; + auto elt = &data[ntri * aux];; for (int p = 0; p < nprim; p++) {; for (int q = 0; q <= p; q++) {; - idx3p[aux][p * nprim + q] = *data;; - idx3p[aux][q * nprim + p] = *data;; - data++;; + idx3p[aux][p * nprim + q] = *elt;; + idx3p[aux][q * nprim + p] = *elt;; + elt++;; }; }; }; ```. I want to make sure that the quick tests pass with threading before submitting the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877:39,patch,patch,39,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877,1,['patch'],['patch']
Deployability,If conda is used you will likely need to run this:; `update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev` or else; you will get this error: http://forum.psicode.org/t/psi4-error-after-upgrade/662/2. (I happend to run into this today morning),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373034538:53,update,update,53,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373034538,2,"['update', 'upgrade']","['update', 'upgrade']"
Deployability,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:316,release,release,316,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['release'],['release']
Deployability,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281110156:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156,1,['release'],['release']
Deployability,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:329,patch,patch,329,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['patch'],['patch']
Deployability,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235914479:17,install,installing-untested-prog,17,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479,5,['install'],"['install', 'installed', 'installing', 'installing-untested-prog']"
Deployability,"If someone can confirm what the units are, or how they should be described,; I'm happy to update the docs and the code. On Mon, Oct 2, 2017 at 7:31 AM, Daniel Smith <notifications@github.com>; wrote:. > Sounds like a good plan, looks like the units should be in natural units; > since we are not applying conversion factors. @fevangelista; > <https://github.com/fevangelista> may be a better person to comment.; >; > 1. Docs for cube prop can be found here; > <https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/cubeprop.rst>; > .; > b) Looks like editing these keys or lines here; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.cc#L202>; > will change the name header.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/815#issuecomment-333534925>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABxha7tvsa0oDGt2ZE-ABO63Yg54lRgqks5soOW8gaJpZM4Ppvfg>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-333552997:90,update,update,90,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333552997,1,['update'],['update']
Deployability,"If the SCF calculation raises a ``ConvergenceError``, the default ``SCF_TYPE`` option is not restored to the previous value. This means that if the exception is catched, and the program continues, all subsequent calculations might use a different SCF algorithm. I'm using ``psi4 1.8`` installed through ``conda-forge``. Minimal reproducible example; ```python; import numpy as np; import psi4; from psi4.driver.p4util import OptionsState. # Create water molecule.; positions = np.array([; [-0.2950, -0.2180, 0.1540],; [-0.0170, 0.6750, 0.4080],; [0.3120, -0.4570, -0.5630],; ], dtype=np.double); molecule = psi4.core.Molecule.from_arrays(geom=positions, units='angstrom', elem=['O', 'H', 'H']). # Configure.; psi4.core.be_quiet(); psi4.core.set_active_molecule(molecule); psi4.set_options(dict(basis='sto-3g', reference='RHF')). # Check scf type.; scf_type1 = psi4.core.get_global_option('SCF_TYPE'). # Run calculation.; psi4.energy(name='scf'). # Check scf type after converged calculation.; scf_type2 = psi4.core.get_global_option('SCF_TYPE'). # Now run an unconverged calculation.; option_stash = OptionsState(['MAXITER']); psi4.set_options(dict(maxiter=1)); try:; psi4.energy(name='scf'); except psi4.ConvergenceError:; pass; option_stash.restore(). # Check scf type after unconverged calculation.; scf_type3 = psi4.core.get_global_option('SCF_TYPE'). print(scf_type1, scf_type2, scf_type3); ```; output; ```; PK PK DF; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000:285,install,installed,285,https://psicode.org,https://github.com/psi4/psi4/issues/3000,1,['install'],['installed']
Deployability,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:94,install,install,94,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515,1,['install'],['install']
Deployability,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279088836:14,patch,patches,14,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836,4,"['install', 'patch']","['installation', 'installations', 'patches']"
Deployability,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/667:19,install,installation,19,https://psicode.org,https://github.com/psi4/psi4/issues/667,1,['install'],['installation']
Deployability,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262370710:210,patch,patched,210,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710,1,['patch'],['patched']
Deployability,"If you are doing an update of the documentation for Molecule.Z, it might be useful to consider possible user confusion between Molecule.Z (capital, gives the charge) and Molecule.z (lowercase, gives the z-coordinate). Both return floats, so no type mismatch, and it's not an obvious typo visually. Maybe a warning in the API would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363502006:20,update,update,20,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363502006,1,['update'],['update']
Deployability,"If you like, we have conda boost packages for py3 in the omnia suite https://github.com/omnia-md/conda-recipes, https://anaconda.org/omnia/boost/files. Feel free to copy / take. Note that if yoy use boost 1.58.0, there is a bug in the py3 support that you need to patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/111#issuecomment-122005457:264,patch,patch,264,https://psicode.org,https://github.com/psi4/psi4/issues/111#issuecomment-122005457,1,['patch'],['patch']
Deployability,"If you update your code (`git pull origin master` if you direct cloned or `git pull upstream master` if you forked, then cloned, then added a remote; look at `git remote -v` to see which is pointing to psi4/psi4), no `mpmath` should now be needed. Remove your `<objdir>/` and reissue `cmake` and recompile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382411619:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382411619,1,['update'],['update']
Deployability,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345422371:220,install,install,220,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371,1,['install'],['install']
Deployability,"If you would, @robertodr, please go over this file and see if anything can be updated or elaborated. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385086549:78,update,updated,78,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385086549,1,['update'],['updated']
Deployability,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230762763:242,install,installing,242,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763,3,"['install', 'patch']","['install', 'installing', 'patch']"
Deployability,"If your final target is Linux, I'd advise starting there now, as it's going to have more software and be better behaved than Windows. If you do continue with Win, I think there was a geometric-on-win bug that was patched this year, so make sure you're getting the `_1` build https://anaconda.org/conda-forge/geometric/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389:213,patch,patched,213,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389,1,['patch'],['patched']
Deployability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:264,update,update,264,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['update'],['update']
Deployability,Improve build configuration for MSVC,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1182:14,configurat,configuration,14,https://psicode.org,https://github.com/psi4/psi4/pull/1182,1,['configurat'],['configuration']
Deployability,"In `intrinsics_sse.h` and `simint_eri.h` i get errors like: ; ` fatal error: simint/cpp_restrict.hpp: No such file or directory`. The file is located in my installation here:; `[..]/external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp`. For now I can hotfix this for myself by setting the correct path manually.; This issue suddenly appeared, it worked fine before.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890:156,install,installation,156,https://psicode.org,https://github.com/psi4/psi4/issues/890,2,"['hotfix', 'install']","['hotfix', 'installation']"
Deployability,"In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828:126,update,update,126,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828,2,['update'],"['update', 'updated']"
Deployability,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218519582:16,install,install,16,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582,7,['install'],"['install', 'installed', 'installing', 'installs']"
Deployability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1392,update,update,1392,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['update'],['update']
Deployability,"In the process of debugging $#748 I noticed that after following the install instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier), that some of the install_name_tool / placeholder / rpath'y stuff for some of the dependencies looks wrong. I don't know if this is causing any issues or not, but it looks potentially incorrect. ```; $ otool -L /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib; /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/Users/ray/mc-x64-3.5/conda-bld/gcc-4.8_1477649012852/_b_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/749:69,install,install,69,https://psicode.org,https://github.com/psi4/psi4/issues/749,1,['install'],['install']
Deployability,"In triples and low_memory_triples, fnocc has been susceptible to the MEMORY keyword owned by builtin ADC. When that was removed in #2737, the fnocc lines were commented. Investigate why fnocc wanted triples memory controlled outside the total memory and whether another keyword needs to be added for the user. Maybe this was just to deliberately toggle the memory algorithms.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2742:346,toggle,toggle,346,https://psicode.org,https://github.com/psi4/psi4/issues/2742,1,['toggle'],['toggle']
Deployability,"Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348:57,patch,patched,57,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348,1,['patch'],['patched']
Deployability,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:44,install,install,44,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,3,['install'],['install']
Deployability,Install adcc from main label,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1826:0,Install,Install,0,https://psicode.org,https://github.com/psi4/psi4/pull/1826,1,['Install'],['Install']
Deployability,Installation issue on Linux,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390:0,Install,Installation,0,https://psicode.org,https://github.com/psi4/psi4/issues/2390,1,['Install'],['Installation']
Deployability,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173956800:0,Install,Installed,0,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800,1,['Install'],['Installed']
Deployability,"Installed changes:; - agreed; - agreed (yes, that's what I meant to write). Source changes:; The extra psi4 dir in source wouldn't be expected in includes (i.e., we're not moving `top-source-dir/include/` to `top-source-dir/include/psi4` so I don't see that the shareables folder in source needs the namespace protection either. And setting `PSIDATADIR` is a slightly advanced topic. If the concensus is for mirroring the dir structure of shareables, I'm fine with it, but I mildly favor as is or `share`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173967734:0,Install,Installed,0,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173967734,1,['Install'],['Installed']
Deployability,Installing Optional Plugins for Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/3094,1,['Install'],['Installing']
Deployability,Installing Psi4 in Conda with Python3.8,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/1979,1,['Install'],['Installing']
Deployability,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/2024,1,['Install'],['Installing']
Deployability,"Installing `networkx` fixes `pywrap-align` and `pywrap-align-chiral`. However, the other tests still fails for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760,1,['Install'],['Installing']
Deployability,"Installing `psi4` via `conda`/`mamba` with:. ```; $ mamba create -n psi4-env -c conda-forge -c conda-forge/label/libint_dev psi4; ```; when the env directory is in a symlinked directory, such as on an HPC cluster where `/home` is a symlink, gives something like the following when attempting to run `psi4`:. ```; $ mamba activate psi4-env; $ psi4 --version; Traceback (most recent call last):; File ""/lila/home/dotson/mambaforge/envs/psi4-env/bin/psi4"", line 205, in <module>; with (psi4_module_loc / ""metadata.py"").open() as fp: verline = fp.readline(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/lila/home/dotson/mambaforge/envs/psi4-env/lib/python3.12/pathlib.py"", line 1014, in open; return io.open(self, mode, buffering, encoding, errors, newline); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; FileNotFoundError: [Errno 2] No such file or directory: '/lila/home/conda/feedstock_root/build_artifacts/psi4_1698452227439/work/build/stage/lib/python3.12/site-packages/psi4/metadata.py'; ```. Working with @bennybp to troubleshoot, it appears that adding use of `.resolve()` to [these Path constructions](https://github.com/psi4/psi4/blob/e3d46319d3a11d571c1c362eeaf7f6641978515c/psi4/run_psi4.py#L129-L131) solves this issue. This resolves (heh) the mismatch that otherwise happens between the paths that were `.resolve()`ed and these that weren't, which causes problems further down.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3084:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/3084,1,['Install'],['Installing']
Deployability,"Installing `share/` files into `<builddir>/stage` is normal from https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L358 . If the `%%DATADIR%%` is literal, could you be not getting `CMAKE_INSTALL_DATADIR` set correctly from `GNUInstallDirs`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214284697:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214284697,1,['Install'],['Installing']
Deployability,"Installing psi4 on an openff environment - 'blas * mkl' and 'mkl >=2022.2.1,<2023.0a0' conflicts.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/3046,1,['Install'],['Installing']
Deployability,"Installing user add-ons into the normal tree would be alarming for things like basis sets into `share/psi4/basis` because that could deviously rename common data. But talking it over with a few people, we think that the normal installation tree is fine for conda packages with binaries going to `bin` and python packages going to `lib/python-2.7/site-packages`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176997138:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176997138,2,"['Install', 'install']","['Installing', 'installation']"
Deployability,"Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; mak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4677,Install,Installing,4677,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,Installs pseudopotentials twice,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301:0,Install,Installs,0,https://psicode.org,https://github.com/psi4/psi4/issues/1301,1,['Install'],['Installs']
Deployability,Integrating adcc with Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:0,Integrat,Integrating,0,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['Integrat'],['Integrating']
Deployability,"Intel 16.0.2 compilers with MKL 11.3.2 seems to work fine on the i7-5930 with parallel enabled. Not sure whether it was the compiler or the MKL upgrade that fixed it, but either way, I can run my calculations again. Yay. I'm going to chock this up to a compiler bug and close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/209#issuecomment-200522653:144,upgrade,upgrade,144,https://psicode.org,https://github.com/psi4/psi4/issues/209#issuecomment-200522653,1,['upgrade'],['upgrade']
Deployability,Intel released 2016 update 2 today (16.0.2) and it resolves this header file issue. We may need to note this someplace for others to find: Intel C++ version 16.0.0 and 16.0.1 with GCC 5 C++ standard library has problems. Either use Intel 16.0.0 and 16.0.1 with pre-GCC 5 or update your Intel compiler to 16.0.2. Closing the issue as it was a compiler and not a Psi4 bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262#issuecomment-185960794:6,release,released,6,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185960794,3,"['release', 'update']","['released', 'update']"
Deployability,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:90,release,released,90,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836,1,['release'],['released']
Deployability,Intriguing. I had the reverse problem last week where a MKL-linked numpy was inoperable in psi4 when an openblas was installed in same conda env. I'll see about recreating your env locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311490565:117,install,installed,117,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311490565,1,['install'],['installed']
Deployability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:296,configurat,configuration,296,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['configurat'],['configuration']
Deployability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:351,install,install,351,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,2,['install'],"['install', 'installation']"
Deployability,"Is there a 0.4.0 already out? I can't see one tagged here... When you make a new stable release, I'll update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182755475:88,release,release,88,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182755475,2,"['release', 'update']","['release', 'update']"
Deployability,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:11,release,release,11,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,2,['release'],['release']
Deployability,"Is there a way to disable libxc in psi4-1.2, maybe with minimal patching? As this issue does not look like it is going to be addressed (by the libxc maintainers) in due short, it'd be good to be able to disable libxc entirely if still possible, or would that mean no DFT at all?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450760485:64,patch,patching,64,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450760485,1,['patch'],['patching']
Deployability,"Is this PR still relevant? We're already using a released version of LibXC, no?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-529100279:49,release,released,49,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-529100279,1,['release'],['released']
Deployability,"Is this on cerebro? We discussed this issue some time ago, since it's the same hiccup that hinders compilation of PCMSolver on cerebro. Intel relies on the standard headers from some installation of GCC. The only non-conflicting GCC on cerebro is 4.4.6 which implemented just those 3 overloads for `std::to_string`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/220#issuecomment-173222692:183,install,installation,183,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173222692,1,['install'],['installation']
Deployability,Is this the same issue as in #1724? You can try your own workaround or update to the development version.; This has been addressed in PR #1725.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960#issuecomment-660487256:71,update,update,71,https://psicode.org,https://github.com/psi4/psi4/issues/1960#issuecomment-660487256,1,['update'],['update']
Deployability,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793:477,update,updated,477,https://psicode.org,https://github.com/psi4/psi4/issues/793,1,['update'],['updated']
Deployability,It appears the problem is that `Tensor1d` (used e.g. in `Tensor2d::write_symm()`) uses `int` for the size--I'll have to update the whole class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562356814:120,update,update,120,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562356814,1,['update'],['update']
Deployability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:628,install,install,628,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,2,['install'],"['install', 'installed']"
Deployability,"It does work if you copy the PG directly like your update has done. Since this seems kosher and we have explained away the `update_geometry` issues I think everything is fine. So if you can replace those lines and run it through travis id say we have covered the primary issue. If it doesn't fix everything we can come back to it, but at least we can make some improvement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-193482535:51,update,update,51,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193482535,1,['update'],['update']
Deployability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:186,install,install,186,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['install'],['install']
Deployability,"It installs files like these into $PREFIX:; ```; /wrkdirs/usr/ports/science/psi4/work/.build/stage/%%DATADIR%%/quadratures/1_sqrtx/1_sqrtxk11_4E6; /wrkdirs/usr/ports/science/psi4/work/.build/stage/%%DATADIR%%/quadratures/1_sqrtx/1_sqrtxk11_4E7; /wrkdirs/usr/ports/science/psi4/work/.build/stage/%%DATADIR%%/quadratures/1_sqrtx/1_sqrtxk11_5E1; ```; , so that their paths are ```/usr/local/wrkdirs/usr/ports/science/psi4/work/.build/stage/...```.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683:3,install,installs,3,https://psicode.org,https://github.com/psi4/psi4/issues/2683,1,['install'],['installs']
Deployability,"It looks like [SL6 was release back in 2011 and is going to be end-of-life later this year](https://en.wikipedia.org/wiki/Scientific_Linux). Upgrading to SL7 (released 2014) should give the sys admins a familiar environment and it looks like it comes with glibc 2.17, which is known to work for Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556:23,release,release,23,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556,2,['release'],"['release', 'released']"
Deployability,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122294961:169,install,installation,169,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961,2,['install'],"['installation', 'installations']"
Deployability,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,configurat,configurations,36,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['configurat'],['configurations']
Deployability,It might well be you've downloaded the stable version (psi4 version 1.1) and the mid-bond functionality might have been introduced afterwards (so it's available only in the dev releases). What does `psi4 --version` return?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373018664:177,release,releases,177,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373018664,1,['release'],['releases']
Deployability,It seems so ... actually already in the first `conda install` it does not pick up the hdf5 from the psi4 channel but uses a default one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598821323:53,install,install,53,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598821323,1,['install'],['install']
Deployability,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:198,Install,Install,198,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,4,['Install'],['Install']
Deployability,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240470127:141,install,installed,141,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127,2,['install'],['installed']
Deployability,"It shouldn't take a bit of time to execute. The implementation symbols are currently not exported but will be from the PR. I just want to expose the interface and not the implementation. Ultimately, I will move to keep the implementation header files from being installed as the interface headers are the only ones that should be used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208:262,install,installed,262,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208,1,['install'],['installed']
Deployability,"It took me getting flu to find the time to look into this, and here's my initial finding. If I optimize the geometry and dump it into an input file; ```; molecule h2o {; O 0.000000000000 -0.000000000000 0.063771204693; H -0.000000000000 0.748825894352 -0.506047648051; H 0.000000000000 -0.748825894352 -0.506047648051; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; I get ; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.945 2519.217; 2 4142.103 5959.555; 3 4237.372 6096.625; ```; If I permute the first two rows of the geometry, per the bug report, I get:; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; This is clearly wrong, but it does at least mean that the hessian code is for the most part correct. I'm trying to figure out where the atom and/or basis function ordering issue is introduced and hope to have a patch soon. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-360894371:1009,patch,patch,1009,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-360894371,1,['patch'],['patch']
Deployability,"It was in a local install, so I was able to modify that file; the code is now running as expected on this finicky system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1911070621:18,install,install,18,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1911070621,1,['install'],['install']
Deployability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:31,install,install,31,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['install'],['install']
Deployability,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274828765:389,install,installation,389,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765,2,"['install', 'update']","['installation', 'update']"
Deployability,"It would be nice to just have a mindless list of commands to arrive at a PSI4 version with `MAX_AM_ERI=8`, starting from a clean conda environment, with minimal amount of recompilation. There are scattered bits of information in the documentation and on forum threads, but these are too confusing and not working. This is my failed attempt (borrowed from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html and http://forum.psicode.org/t/building-with-high-am/936/20):. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:401,install,install-,401,https://psicode.org,https://github.com/psi4/psi4/issues/1341,2,['install'],"['install', 'install-']"
Deployability,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,configurat,configuration,44,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631,1,['configurat'],['configuration']
Deployability,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335970314:45,install,install,45,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314,1,['install'],['install']
Deployability,"It's been in since late January. But the nightly conda build machinery is broken until I get some time to universally update to the new conda-build compilers (prototyped in the fall that they do work with psi) which won't be until after ACS. As far as stable release, the fix'll be in the next one, 1.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-370274485:118,update,update,118,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370274485,2,"['release', 'update']","['release', 'update']"
Deployability,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:52,install,installation,52,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430,3,['install'],"['install', 'installation', 'installed']"
Deployability,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:348,release,release,348,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,4,"['release', 'update']","['release', 'releases', 'updates']"
Deployability,"I’m still suspicious of those blas/pin/implementation combos up in the first block. Psi really has no constraints on numpy. The >=0.12 was just there to settle a mkl problem iirc. I wonder what installing Psi4, then force removing numpy, then trying an ambertools install would do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718347497:194,install,installing,194,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718347497,2,['install'],"['install', 'installing']"
Deployability,I’m traveling so I’ll see if I can update the libxc PR tonight. Which libxc (3 or 4) are each of you packagers actually aiming for? We’ve been trying to stay up to date with upstream dependencies and maximize functionals provided.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739:35,update,update,35,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739,1,['update'],['update']
Deployability,"I’ve hit that myself. Add to the cmake command -DENABLE_simint=OFF. I’ll have another go at the simint ppl to get them to release a tarball with simint am8 so we can build both at once. Or, having pointed cmake toward an am8 libint prebuilt, reduce your min requested to 7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448:122,release,release,122,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448,1,['release'],['release']
Deployability,JSON CLI patch,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1369:9,patch,patch,9,https://psicode.org,https://github.com/psi4/psi4/pull/1369,1,['patch'],['patch']
Deployability,JSON/gCP/DeepDiff v1.2 release tweaks,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1030:23,release,release,23,https://psicode.org,https://github.com/psi4/psi4/pull/1030,1,['release'],['release']
Deployability,"Just a heads-up: you don't need to close the PR and reopen it to apply fixes. The request is automatically updated as you add features / fixes, until it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/224#issuecomment-175864194:107,update,updated,107,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175864194,1,['update'],['updated']
Deployability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:14,update,update,14,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,1,['update'],['update']
Deployability,Just a note to whomever that I will use this all-but-done update as soon as we can get it merged. Let me know if I can help. Whose problem is the dfocc one to solve?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346040344:58,update,update,58,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346040344,1,['update'],['update']
Deployability,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:328,update,update,328,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['update'],['update']
Deployability,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178350753:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753,1,['update'],['update']
Deployability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:996,UPDATE,UPDATE,996,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,1,['UPDATE'],['UPDATE']
Deployability,"Just out of interest, does `dft-bench-ionisation` (where the wB97X-D functional is a good canary) pass with your ICC + MKL build?. With GCC, I had success with netlib and blis - OpenBLAS seems to be hit-and-miss, and I didn't try with MKL. However, as I mentioned before, the `dft-custom-gga` always passes for me, and it's the other test that fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716:90,canary,canary,90,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716,1,['canary'],['canary']
Deployability,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:98,update,update,98,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,1,['update'],['update']
Deployability,"Just to let you know, I updated to Mac OS Sierra and the new build system works great with Apple Clang 8.0 right out of the box.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249650815:24,update,updated,24,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249650815,1,['update'],['updated']
Deployability,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:66,install,installation,66,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466,2,['install'],"['install', 'installation']"
Deployability,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:33,install,installed,33,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624,1,['install'],['installed']
Deployability,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,integrat,integrates,126,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['integrat'],['integrates']
Deployability,Just updated my code with shell pair screening for P and Q.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258,1,['update'],['updated']
Deployability,"Just updated the last commit to fix `mintshelper_` copying. For the shallow copy, the copy and the original use the same `mintshelper_`, so all the `set_basisset` I was doing was wasted lines. For the deep copy, I just needed to copy from the original `mintshelper_`, not the new one. Follow-up PR should have a test for this, as I need some other infrastructure in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196,1,['update'],['updated']
Deployability,"Kinda surprised they went with PyPy over C IR support since the latter is much more useful for JITs in general. This could break a few Python-side GC things, but we can patch those up if they occur. Still, will be great to have a stable PyBind11 version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/557#issuecomment-271014184:169,patch,patch,169,https://psicode.org,https://github.com/psi4/psi4/pull/557#issuecomment-271014184,1,['patch'],['patch']
Deployability,"L Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7239,install,install,7239,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['install'],['install']
Deployability,"LEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1837,update,updated,1837,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['update'],['updated']
Deployability,LGTM. Did you want to update OEProp Python side or wait for another update?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259024437:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259024437,2,['update'],['update']
Deployability,"L_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1075,install,installation,1075,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['install'],['installation']
Deployability,"Let me try to document the procedure (besides the actual version bump, which is already documented). This issue can be scratch space, so everyone can post easily. * Update copyright year in licenses: ; `user@host:~/path/to/psi4 $ grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496:165,Update,Update,165,https://psicode.org,https://github.com/psi4/psi4/issues/1496,1,['Update'],['Update']
Deployability,Let's make 1.2 the last release w/o IR intensities.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-384791688:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-384791688,1,['release'],['release']
Deployability,Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release ☺️ Are you ok with this @mfherbst @loriab?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184:88,release,release,88,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184,1,['release'],['release']
Deployability,"Lets denote in the t-th SCF iteration, the density matrix that goes in the Kohn-Sham equation D_in^(t), and the solution is D_out^(t). Then we do density mixing to form the next input D_in^(t+1). Now I am trying to add custom code to save all D_in and D_out history in `scf_iterators.py`, but it seems that the `self.Da()` & `self.Db()` always represents D_in^(t), and will be updated by `self.form_D()` (I'm not sure about this)? If so, where can I find the D_out^(t)?. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065:377,update,updated,377,https://psicode.org,https://github.com/psi4/psi4/issues/3065,1,['update'],['updated']
Deployability,"Libxc:; 1. This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 includes ```libxc/xc.h``` when ```libxc``` installs ```include/xc.h```; 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. Libint:; * Similarly to ```Libxc```, ```Libint``` has problems in its cmake build and it can't be used https://github.com/evaleev/libint/issues/111 https://github.com/evaleev/libint/issues/112. I created problem reports for these projects, but their authors are unresponsive.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302:156,install,installs,156,https://psicode.org,https://github.com/psi4/psi4/issues/1302,3,['install'],"['install', 'installs']"
Deployability,"Lingering issues for finalizing CheMPS2:; - [ ] Make sure can detect Debian installation of CheMPS2 in ""list of files"" https://packages.debian.org/sid/libchemps2-dev ; - [ ] make up new conda package; - [ ] add conda package to metapackage; - [ ] add chemps2.rst to interfaces in docs; - [ ] add chemps2 to binary; - [ ] review keywords; - [ ] add acceptance for Intel redistributable for `chemps2.so`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150:76,install,installation,76,https://psicode.org,https://github.com/psi4/psi4/issues/150,1,['install'],['installation']
Deployability,"Little update: looking at formulas, I think we should just set a bunch of exchange terms involving the absent spin to 0. Probably check number of alpha and beta electrons of each monomer at the beginning of the code and then select which terms to compute based on that. I'm set up with debugging (thanks Lori!) so I'll try that soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-601308620:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-601308620,1,['update'],['update']
Deployability,"Look at some of the other issues on this wiki. Numerous people are; compiling Psi4 with almost 10 year old compilers. I get it though, once you; have a cluster running you don't want to touch anything in case you break; it. In my experience your average super computer on the otherhand is a year; or two out of date. Compilers like Intel, that I swear by, only are fully; C++11 compliant with the most recent releases. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:19 AM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98495103:409,release,releases,409,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495103,1,['release'],['releases']
Deployability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,integrat,integration,211,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,2,['integrat'],['integration']
Deployability,"Looking into your first point more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:568,upgrade,upgrade,568,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['upgrade'],['upgrade']
Deployability,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:269,install,install,269,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['install'],['install']
Deployability,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304474246:434,Update,Update,434,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246,1,['Update'],['Update']
Deployability,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297062748:108,install,install,108,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748,7,"['install', 'release']","['install', 'installation', 'installed', 'installs', 'release']"
Deployability,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:147,update,update,147,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741,2,['update'],['update']
Deployability,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484#issuecomment-256802735:211,patch,patch,211,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735,1,['patch'],['patch']
Deployability,"Looks like adcc and I have gotten out of sync, conda-wise. try commenting out https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L102 and OFFing https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L125",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1990#issuecomment-681047414:126,pipeline,pipelines,126,https://psicode.org,https://github.com/psi4/psi4/pull/1990#issuecomment-681047414,4,['pipeline'],"['pipelines', 'pipelines-linux']"
Deployability,Looks like an old library in there somewhere. (1) report `conda list` and (2) install into its own environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-395777503:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-395777503,1,['install'],['install']
Deployability,"Looks like the includes in the makefile still reference the source directory, and some of the necessary includes, e.g. https://github.com/psi4/psi4public/tree/master/include, aren't copied into the install directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-135855397:198,install,install,198,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135855397,1,['install'],['install']
