quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"There's something wrong with this PR. The database migration step says it's successful, but the new database is never actually created. I think this is the same thing I saw with dev deploy and attributed it to the wrong cause. ```; +------------------------------------+; | Database |; +------------------------------------+; ...; | pr-9241-auth-zdyt4a4geys7 |; | pr-9241-batch-y0qvw1vpniad |; | pr-9241-ci-nkuua31y7nxn |; | pr-9241-test-instance-zxxeu6gotctw |; ...; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9241#issuecomment-677664900:433,test,test-instance-,433,https://hail.is,https://github.com/hail-is/hail/pull/9241#issuecomment-677664900,1,['test'],['test-instance-']
Testability,"There's the Python process running the benchmark driver Hail client in Python, and the java process running the hail backend. We want the benchmark driver to return 0 in all cases, with information about whether the hail command finished successfully and how long it took. In current main, this works well for successful runs as well as errors that don't kill the backend (assertion, HailException, etc). It doesn't work for an error that kills the backend (segfault / oom), because while the exception handler in run() works fine, we run stop() unhandled and assume it won't throw (it only throws if the JVM is dead).. In that case, this PR lets the benchmark driver return 0 after writing a file indicating the Hail function failed, just like in an assertion error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12838#issuecomment-1527658197:39,benchmark,benchmark,39,https://hail.is,https://github.com/hail-is/hail/pull/12838#issuecomment-1527658197,5,"['assert', 'benchmark']","['assertion', 'benchmark']"
Testability,These are especially useful for generating random quantitative phenotypes for examples and testing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/922#issuecomment-252512944:91,test,testing,91,https://hail.is,https://github.com/hail-is/hail/pull/922#issuecomment-252512944,1,['test'],['testing']
Testability,"These are run in `test_hail_python_i`, e.g. [`test_hail_python_2`](https://ci.hail.is/batches/93958/jobs/65); ```; test/hailtop/config/test_deploy_config.py::Test::test_deploy_external_default PASSED; test/hailtop/config/test_deploy_config.py::Test::test_deploy_k8s_default SKIPPED; test/hailtop/hailctl/dataproc/test_cli.py::test_required_gcloud_version_met SKIPPED; test/hailtop/hailctl/dataproc/test_cli.py::test_required_gcloud_version_unmet SKIPPED; test/hailtop/hailctl/dataproc/test_cli.py::test_unable_to_determine_version SKIPPED; test/hailtop/hailctl/dataproc/test_connect.py::test_cluster_and_service_required SKIPPED; test/hailtop/hailctl/dataproc/test_connect.py::test_dry_run SKIPPED; test/hailtop/hailctl/dataproc/test_connect.py::test_connect SKIPPED; test/hailtop/hailctl/dataproc/test_connect.py::test_service_port_and_path[spark-ui-18080/?showIncomplete=true] SKIPPED; test/hailtop/hailctl/dataproc/test_connect.py::test_service_port_and_path[ui-18080/?showIncomplete=true] gcloud command:; compute ssh test-cluster-m --zone=us-central1-b \; '--ssh-flag=-D 10000' \; '--ssh-flag=-N' \; '--ssh-flag=-f' \; '--ssh-flag=-n'; Connecting to cluster 'test-cluster'...; PASSED; test/hailtop/hailctl/dataproc/test_connect.py::test_service_port_and_path[spark-history-18080] gcloud command:; compute ssh test-cluster-m --zone=us-central1-b \; '--ssh-flag=-D 10000' \; '--ssh-flag=-N' \; '--ssh-flag=-f' \; '--ssh-flag=-n'; Connecting to cluster 'test-cluster'...; PASSED; ...; ```. The skipped ones are run in other splits.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9396#issuecomment-685814393:115,test,test,115,https://hail.is,https://github.com/hail-is/hail/pull/9396#issuecomment-685814393,17,"['Test', 'test']","['Test', 'test', 'test-cluster', 'test-cluster-m']"
Testability,"These things need to be done:. - [ ] Add tests; - [x] Add support for java types like Genotype, Variant, AltAllele, etc. I think it may be acceptable to convert genotype and variant and such to string representations for now, until we have full support in python.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1255#issuecomment-272634543:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/1255#issuecomment-272634543,1,['test'],['tests']
Testability,"These three tests call out to [Plink](https://www.cog-genomics.org/plink2). If you install it from that link and add it to your global path, those tests will pass. If that sounds annoying, you can trust that these tests pass on our end!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-229943619:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-229943619,3,['test'],['tests']
Testability,These were uncovered while using the TCP Proxy to enter the cluster. Forthcoming Shuffler tests will add tests that would catch this behavior.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9683#issuecomment-722702611:90,test,tests,90,https://hail.is,https://github.com/hail-is/hail/pull/9683#issuecomment-722702611,2,['test'],['tests']
Testability,"Think I've addressed all your comments. I addressed missingness in reindex because you explicitly mentioned it, but the ndarray code overall is going to need a missingness overhaul where I add tests for missing values. I'll do that in a subsequent PR. I wasn't sure what your comment about `EmitArrayTriplet` was about, that's not something I use.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7069#issuecomment-538660862:193,test,tests,193,https://hail.is,https://github.com/hail-is/hail/pull/7069#issuecomment-538660862,1,['test'],['tests']
Testability,This ABI thing needs good testing that is hard to do with our current infrastructure. I almost don't want to merge this until we are actually running tests on a GCP dataproc cluster.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410014637:26,test,testing,26,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410014637,2,['test'],"['testing', 'tests']"
Testability,"This PR _explicitly_ changes the defaults. It optionally accepts the old values in an _attempt_ to not break current users. At worst, this would require another `hailctl auth login`. This is the patch I _wanted_ to write. ```patch; From aef878903d9249b542522082cba705eaf26d728a Mon Sep 17 00:00:00 2001; From: Christopher Vittal <christopher.vittal@gmail.com>; Date: Wed, 25 Sep 2019 14:55:42 -0400; Subject: [PATCH] [hailctl] Move default location for hail config directory; MIME-Version: 1.0; Content-Type: text/plain; charset=UTF-8; Content-Transfer-Encoding: 8bit. Now we try, in order:; $XDG_CONFIG_HOME/hail; ~/.config/hail. The XDG Base Directory Specification[1] is a freedesktop spec inteded to; define where applications should look for files they need to run. [1]: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html. I have enough 💩 in my home directory for applications I don't control,; I'd like to try to keep it clean when it comes to applications I do; control.; ---; hail/python/hailtop/auth/tokens.py | 4 ++--; hail/python/hailtop/config/__init__.py | 3 ++-; hail/python/hailtop/config/deploy_config.py | 4 +++-; hail/python/hailtop/hailctl/auth/login.py | 7 +++----; hail/python/hailtop/hailctl/dev/config/cli.py | 4 ++--; 5 files changed, 12 insertions(+), 10 deletions(-). diff --git a/hail/python/hailtop/auth/tokens.py b/hail/python/hailtop/auth/tokens.py; index 9de07dc42..e8c3fcccd 100644; --- a/hail/python/hailtop/auth/tokens.py; +++ b/hail/python/hailtop/auth/tokens.py; @@ -3,7 +3,7 @@ import os; import sys; import json; import logging; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; ; log = logging.getLogger('gear'); ; @@ -14,7 +14,7 @@ class Tokens(collections.abc.MutableMapping):; deploy_config = get_deploy_config(); location = deploy_config.location(); if location == 'external':; - return os.path.expanduser('~/.hail/tokens.json'); + return os.path.join(HAIL_CONFIG_DIR, 't",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:175,log,login,175,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['login']
Testability,"This PR broke `test_blanczos_against_hail`, but the difference between the two was only slightly above the threshold. This is because, for a fixed value of `q`, the new version effectively does half an iteration less than before. For example, for `q=2`, the old version computed a basis for `[AG, AA'AG, (AA')^2AG]`, while the new version computes a basis for `[G, A'AG, (A'A)^2G]`. Incrementing `q` by one in the test fixed it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10264#issuecomment-812526892:414,test,test,414,https://hail.is,https://github.com/hail-is/hail/pull/10264#issuecomment-812526892,1,['test'],['test']
Testability,This PR causes all the batch tests to pass!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11142#issuecomment-989995524:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/11142#issuecomment-989995524,1,['test'],['tests']
Testability,"This PR does not move us closer to testing and releasing built-once binaries. This is an important goal for me, but automating the deploy process as it exists is a prerequisite.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8550#issuecomment-613603023:35,test,testing,35,https://hail.is,https://github.com/hail-is/hail/pull/8550#issuecomment-613603023,1,['test'],['testing']
Testability,"This PR is all set. It will probably take around 1.5-2 hours. I verified that the attempt resources table should not be blocked while the primary key is being changed, but I didn't test it while in the process of dropping the column. At peak, the migration added an additional 20 GB or so of storage and then ended up with a net increase of 5 GB from the very beginning of the migration series. I'm not worried about increasing our storage space temporarily because the future migrations will use that extra space.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12030#issuecomment-1185074634:181,test,test,181,https://hail.is,https://github.com/hail-is/hail/pull/12030#issuecomment-1185074634,1,['test'],['test']
Testability,This PR is failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6817#issuecomment-522016103:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/6817#issuecomment-522016103,1,['test'],['tests']
Testability,"This PR is in @catoverdrive path toward backend refactor. I would like to get this in before any further changes occur, 2nd conflict since this was opened & passing all tests. @catoverdrive Can you help me understand why AddHadoopConfiguration went away? Its body appears inlined in GetHadoopConfiguration. As a result the filesystem object (hConf) is no longer passed around, which is moving things in the opposite direction of future PRs related to this one, which will explicitly pass FS objects to all methods that perform file system operations. . edit: The AddHadoopConfiguration default implementation (on the trait didn't go away, but the overriding implementation did, resulting in an apparent noop, and maybe a potential bug, although I don't understand this portion of the codebase as well as I should yet. ```scala; trait FunctionWithHadoopConfiguration {; def addHadoopConfiguration(hConf: SerializableHadoopConfiguration): Unit; }. // No overriding addHadoopConfiguration implementation; def getHadoopConfiguration: Code[SerializableHadoopConfiguration] = {; if (_hconf == null) {; cn.interfaces.asInstanceOf[java.util.List[String]].add(typeInfo[FunctionWithFS].iname); val confField = newField[FS]; val mb = new EmitMethodBuilder(this, ""addHadoopConfiguration"", Array(typeInfo[SerializableHadoopConfiguration]), typeInfo[Unit]); methods.append(mb); mb.emit(confField := mb.getArg[SerializableHadoopConfiguration](1)); _hconf = HailContext.sHadoopConf. def resultWithIndex(print: Option[PrintWriter] = None): Int => F = {; if (localHConf != null); f.asInstanceOf[FunctionWithHadoopConfiguration].addHadoopConfiguration(localHConf); ```. cc @cseed",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6263#issuecomment-500879573:169,test,tests,169,https://hail.is,https://github.com/hail-is/hail/pull/6263#issuecomment-500879573,1,['test'],['tests']
Testability,This PR is passing -- failed on an unrelated test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13948#issuecomment-1787482245:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/13948#issuecomment-1787482245,1,['test'],['test']
Testability,"This PR rips the EvalContext machinery out of regression methods (linear, logistic, mixed, SKAT). Done as part of the effort detailed here: http://dev.hail.is/t/path-to-get-rid-of-ast/90/7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3381#issuecomment-381610766:74,log,logistic,74,https://hail.is,https://github.com/hail-is/hail/pull/3381#issuecomment-381610766,1,['log'],['logistic']
Testability,This PR seems to have made the non-chained case substantially slower somehow (the benchmark is running 3x slower). Either need to figure out what's wrong with the code we are generating and/or split out different chained and unchained methods.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9634#issuecomment-719583786:82,benchmark,benchmark,82,https://hail.is,https://github.com/hail-is/hail/pull/9634#issuecomment-719583786,1,['benchmark'],['benchmark']
Testability,"This PR:; * adds the IR functions listed above,; * adds an `ascending` flag to the `ArraySort` IR node, to support the `sort(array<T>,bool): array<T>` function,; * adds a thorough `ArrayFunctionsSuite`, which is my proposed model of how to organize IR tests, and; * fixes a few bugs found by the new tests, which I think were all in the array indexing functions. In particular, I made sure that the interpreter and compiler throw the same exceptions in the same cases. If there's too much going on, I don't think it would be too difficult to split into smaller pieces.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3554#issuecomment-392903907:252,test,tests,252,https://hail.is,https://github.com/hail-is/hail/pull/3554#issuecomment-392903907,2,['test'],['tests']
Testability,"This afternoon I tried to run a series of commands that began with:. hail-new read -i /user/satterst/DBS_v2.4/temp3.vds \; filtervariants --keep -c 'va.kyle.lof == ""HC""' \; filtervariants --remove -c /user/satterst/exac.variant_list. and I got output that said:; hail: info: running: filtervariants --remove -c /user/satterst/exac.variant_list; Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space. log here:; /humgen/atgu1/fs03/satterst/DBS_v2.4/hail.heapspace.log. Has the fix been incorporated into the jar on the cluster?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/263#issuecomment-214538990:417,log,log,417,https://hail.is,https://github.com/hail-is/hail/issues/263#issuecomment-214538990,2,['log'],['log']
Testability,This all looks good to me. We don't have great tests for this stuff. Should I do a careful read through or do you feel comfortable merging without that?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13109#issuecomment-1570814644:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/13109#issuecomment-1570814644,1,['test'],['tests']
Testability,"This all looks ok to me except for the two ""global"" params. I think if you fix that both in the Compile; and the call, and it passes tests, then we're good to go.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3546#issuecomment-388891343:133,test,tests,133,https://hail.is,https://github.com/hail-is/hail/pull/3546#issuecomment-388891343,1,['test'],['tests']
Testability,"This all seems fine to me, but all of the test jobs failed spectacularly on Azure -- timed out. There must be another place the key is used?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13653#issuecomment-1725701826:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/13653#issuecomment-1725701826,1,['test'],['test']
Testability,This appears to have cut batch2 test time nearly in half (5-6m down from 11+m),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7543#issuecomment-554780465:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/7543#issuecomment-554780465,1,['test'],['test']
Testability,"This basically limits the number of nodes in the worker pool for a test/dev deployment of batch to (default 3, max 4), right? This looks fine to me; should I approve this and let you take off the WIP tag when it's good to merge?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9441#issuecomment-691312517:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/9441#issuecomment-691312517,1,['test'],['test']
Testability,"This benchmark is in some ways bad. The real problem is in the compiler/orchestration, not in any execution. I feel like we need a `_do_nothing()` that doesn't execute any code, but runs a pipeline through everything in the compiler and stops short before anything that would submit a spark job.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6629#issuecomment-511031021:5,benchmark,benchmark,5,https://hail.is,https://github.com/hail-is/hail/pull/6629#issuecomment-511031021,1,['benchmark'],['benchmark']
Testability,"This branch, notebook, ci and batch are deployed in my namespace now. Note, batch is tested pretty well, and we test CI comes up (which is about all you can do in a dev deploy).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7145#issuecomment-536245619:85,test,tested,85,https://hail.is,https://github.com/hail-is/hail/pull/7145#issuecomment-536245619,2,['test'],"['test', 'tested']"
Testability,"This bug is caught in expr.test_array_methods, on the `group_by` line with the additions I made in this PR; I think any test that I would add would essentially just be a duplicate of that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5155#issuecomment-454898806:120,test,test,120,https://hail.is,https://github.com/hail-is/hail/pull/5155#issuecomment-454898806,1,['test'],['test']
Testability,"This can be done with `aggregate_by_key`:. ```; vds.aggregate_by_key('Sample = s, gene = va.gene', 'gtSum = g.map(g => g.gt).sum()').export(""test.tsv""); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1319#issuecomment-276452831:141,test,test,141,https://hail.is,https://github.com/hail-is/hail/issues/1319#issuecomment-276452831,1,['test'],['test']
Testability,"This can be thought of as a step toward a fully local development version of batch. I tried to keep the not-ci-tested `create_local_database.py` script as small as possible and reuse components of the tested `create_database.py`, but it's still adding yet-another-random-script into the mix. @jigold @danking Do you think this is worthwhile on its own?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13670#issuecomment-1726542573:111,test,tested,111,https://hail.is,https://github.com/hail-is/hail/pull/13670#issuecomment-1726542573,2,['test'],['tested']
Testability,"This change fixes a huge problem caused by these lines of code and context:. https://github.com/hail-is/hail/pull/6605/files#diff-1278c1788239002cc63ccb82cbef8d76L190. The problem is that in our generated code, every literal is decoded *each time any literal is referenced*. This is **extremely** expensive! . In this change, we instead decode the literals once with the function is constructed from the partition index (used with randomness), by adding a new region argument which the literals are decoded into. This region must live as long as the RegionValues returned by any invocation of the function. The primary error mode I might expect is that we use the wrong region to generate the function, causing use-after-free errors. These are well-covered by tests, since I had a few of these bugs and fixed them due to test failures. The region we *shouldn't* be using is `ctx.region`, which refers to `RVDContext.region`, the per-row region that is cleared after each record. `ctx.r` (the global execution context region) and `ctx.freshRegion` (a partition-owned global region, generally named `globalRegion` or `partRegion`) are safe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6605#issuecomment-510677139:760,test,tests,760,https://hail.is,https://github.com/hail-is/hail/pull/6605#issuecomment-510677139,2,['test'],"['test', 'tests']"
Testability,This change uncovered a problem with lowering -- `AggLet` nodes are not tolerated inside MatrixMapCols/MatrixMapRows. I'll follow up with a PR to fix this for MatrixMapRows and add targeted tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6817#issuecomment-522115406:190,test,tests,190,https://hail.is,https://github.com/hail-is/hail/pull/6817#issuecomment-522115406,1,['test'],['tests']
Testability,"This change will make it so that it no longer goes to the container logs, and instead will be placed in the exception message.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8146#issuecomment-591013808:68,log,logs,68,https://hail.is,https://github.com/hail-is/hail/issues/8146#issuecomment-591013808,1,['log'],['logs']
Testability,"This command uploads the intermediate files that are carried between jobs in a batch. Our tests should be sufficient for finding cases where the downloads are not possible. The container that downloads files (the setup container) uses the google alpine sdk image:; ```; # docker run google/cloud-sdk:237.0.0-alpine gsutil version -l; Unable to find image 'google/cloud-sdk:237.0.0-alpine' locally; 237.0.0-alpine: Pulling from google/cloud-sdk; 6c40cc604d8e: Pull complete ; ef6547e2e20f: Pull complete ; Digest: sha256:fc5a5a88eb49e646adac05ac6a352219d3d676a122fca0b90a2ae2ab091222bb; Status: Downloaded newer image for google/cloud-sdk:237.0.0-alpine; gsutil version: 4.37; checksum: 4b1e288eec2f799d8d0022adccf678cb (OK); boto version: 2.49.0; python version: 2.7.15 (default, Jan 24 2019, 16:32:39) [GCC 8.2.0]; OS: Linux 4.9.125-linuxkit; multiprocessing available: False; using cloud sdk: True; pass cloud sdk credentials to gsutil: True; config path(s): No config found; gsutil path: /google-cloud-sdk/bin/gsutil; compiled crcmod: True; installed via package manager: False; editable install: False; ```. The upload container uses batch_image, which does not have crcmod. I'm not sure it's required, but I'll add it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7024#issuecomment-529589965:90,test,tests,90,https://hail.is,https://github.com/hail-is/hail/pull/7024#issuecomment-529589965,1,['test'],['tests']
Testability,This didn't work:. ```; + retry gcloud -q auth activate-service-account --key-file=/gsa-key/key.json; + gcloud -q auth activate-service-account --key-file=/gsa-key/key.json; Activated service account credentials for: [test-665@hail-vdc.iam.gserviceaccount.com]; + '{retry' gsutil -m cp -R /io/data1 'gs://hail-test-dmk9z}'; /bin/bash: line 11: {retry: command not found; + '{retry' gsutil -m cp -R /io/data1 'gs://hail-test-dmk9z}'; /bin/bash: line 11: {retry: command not found; + '{retry' gsutil -m cp -R /io/data2 'gs://hail-test-dmk9z}'; /bin/bash: line 11: {retry: command not found; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9583#issuecomment-705641768:218,test,test-,218,https://hail.is,https://github.com/hail-is/hail/pull/9583#issuecomment-705641768,4,['test'],['test-']
Testability,"This does not substantially change test time, so let's approve and merge this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11445#issuecomment-1069519190:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/11445#issuecomment-1069519190,1,['test'],['test']
Testability,"This does not work for me unfortunately. I started with a table in coordinate format. I then converted to a matrix table. If I do `mt.show()` of course some values are correctly missing. But if I then do `mt = mt.annotate_entries(GT = hl.coalesce(mt.GT, hl.call(0, 0)))` nothing is filled. The NA values remain NA. If I do `mt.entry.take(5)` or `mt.GT.take(5)` there are no ""None"" values in the list. It's as if the mt.GT list only contains the non-missing data. Similarly if I do `mt.annotate_entries(test=1)`, This entry is added only to the coordinates that have GT non-missing and test=NA for everything else! Any help would be appreciated",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11979#issuecomment-1468686863:502,test,test,502,https://hail.is,https://github.com/hail-is/hail/issues/11979#issuecomment-1468686863,2,['test'],['test']
Testability,"This doesn't necessarily fix the problem, but I think they are good changes in the direction of what we know. It passed test_{batch, pipeline} on the first try, so that's a good sign. What I did:. 1. Lock down Job state transitions. Now only set_state and _mark_job_task_complete change _state, and they log identically. Explicitly enumerate the valid state transitions are check them in each function. Slightly clarified the transitions around Pending. Now Pending can only go to Ready. 2. If a state update fails (the Python object is stale), throw JobStateWriteFailure. If we have a stale picture, we clearly don't want to be doing anything else. 3. Handle a few more cases in update_job_with_pod: a pod without a job or a job that shouldn't have one, and a cancellable pod that hasn't been cancelled yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6618#issuecomment-510731707:304,log,log,304,https://hail.is,https://github.com/hail-is/hail/pull/6618#issuecomment-510731707,1,['log'],['log']
Testability,This fixes the hail logo and navbar disappearing when the level of page nesting is greater than 1. Check it works by making sure all of the links on the navbar are working and the logo is there on a page like Genetics Methods.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2956#issuecomment-367550024:20,log,logo,20,https://hail.is,https://github.com/hail-is/hail/pull/2956#issuecomment-367550024,2,['log'],['logo']
Testability,This is a bump. . Also need to write AS Parsing tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5390#issuecomment-542853488:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/issues/5390#issuecomment-542853488,1,['test'],['tests']
Testability,"This is a result of accidental mutation of the `params` dictionary that's passed into this generator. Notice that the same `params` dictionary is used for each listing per zone https://github.com/hail-is/hail/blob/de0f7a8d54f29f601b7321950ca3bc2425befecf/batch/batch/cloud/gcp/driver/disks.py#L27-L31; and the dictionary is mutated here https://github.com/hail-is/hail/blob/de0f7a8d54f29f601b7321950ca3bc2425befecf/hail/python/hailtop/aiocloud/aiogoogle/client/compute_client.py#L73. This means that on the second iteration (second zone), `self._request_params` will contain the last `nextPageToken` from the previous iteration, triggering this assertion. Avoiding this accidental mutation should resolve this issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14613#issuecomment-2226334726:645,assert,assertion,645,https://hail.is,https://github.com/hail-is/hail/issues/14613#issuecomment-2226334726,1,['assert'],['assertion']
Testability,This is a special case target anyway for an old way of testing so I special cased it even further.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-465251564:55,test,testing,55,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-465251564,1,['test'],['testing']
Testability,This is a type error: your input argument doesn't match the declared type of the function. Try `assert transform_row_type == mt.row.dtype` before the application of `transform_row_f`. I'll beef up the error reporting of my define_function prototype so the error gets caught before hitting the JVM.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5435#issuecomment-467643750:96,assert,assert,96,https://hail.is,https://github.com/hail-is/hail/pull/5435#issuecomment-467643750,1,['assert'],['assert']
Testability,"This is absolutely Jackie's domain and I trust her instinct. A couple thoughts:; - In general, we should transition away from logs for observability. Logs should be for diagnosing bugs.; - Relatedly, the UI should surface the insights we need to understand the cluster.; - If information critical for observability is time-consuming to compute, then we should engineer an efficient way to track it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11357#issuecomment-1039240058:126,log,logs,126,https://hail.is,https://github.com/hail-is/hail/pull/11357#issuecomment-1039240058,2,"['Log', 'log']","['Logs', 'logs']"
Testability,"This is admittedly untested, since I don't know how to test CI.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6764#issuecomment-516533758:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/6764#issuecomment-516533758,1,['test'],['test']
Testability,"This is all correct including the description of the problem. I think we could add a test that does the following:. ```python3; def test_update_batch_w_inprogress_job(client: BatchClient):; bb = create_batch(client); bb.create_job(DOCKER_ROOT_IMAGE, ['sleep', '300']); bb.submit(). j = bb.create_job(DOCKER_ROOT_IMAGE, ['true']); b = bb.submit(); status = j.wait(). assert status['state'] == 'Success', str((status, b.debug_info())); ; b.cancel(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13399#issuecomment-1671750540:85,test,test,85,https://hail.is,https://github.com/hail-is/hail/pull/13399#issuecomment-1671750540,2,"['assert', 'test']","['assert', 'test']"
Testability,This is also failing the `hailctl` tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9502#issuecomment-698584747:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/9502#issuecomment-698584747,1,['test'],['tests']
Testability,"This is also my first migration PR so please take a very critical eye! I ran a load test on my namespace and noticed that while previously it looked like we only get deadlocks in MJC, the deadlock that this uncovered might be between MJC and MJS/SJ. Happy to provide details about the following deadlock to decide whether it's something we'd want to lump in here or tackle all at once.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1035565057:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1035565057,1,['test'],['test']
Testability,"This is at a place where people could look. Currently plan is to implement storeShallow on every PType separately (could keep all in PType for convenience initially). Majority of functionality: https://github.com/hail-is/hail/pull/7639/files#diff-2cba834adc6803ff8b274f8634bb46c0R394; ; # TODO:. - [x] Implement deep copy; - [ ] Implement for things that are not PCanonicalArray or PArrayBackedContainer; - [ ] Non-staged version; - [ ] More tests. cc @patrick-schultz, @catoverdrive, @danking for feedback",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7639#issuecomment-568135072:442,test,tests,442,https://hail.is,https://github.com/hail-is/hail/pull/7639#issuecomment-568135072,1,['test'],['tests']
Testability,"This is caused by domain-by-domain CSRF tokens introduced in [#14180](https://github.com/hail-is/hail/issues/14180). An unfortunate side effect is that the tokens available on non-auth pages are no longer able to validate requests to the auth/logout API. Given the lack of apparent noise about this bug in our issues and zulip I suspect that this is not a common path for users, and that a fix along the lines of ""require add one button click to go to the User page first before logging out is acceptable"". On the other hand, the risk of a user clicking on the broken Logout button and believing themselves to be logged out when seeing a `401: Unauthorized` page (but actually still having logged-in state in their browser) raises this in my mind to a security bug rather than just a UX bug or an unfortunate user experience. Therefore my proposal is:; 1. To fix the bug as soon as possible; 2. Accept an additional redirect in a user flow which is rarely exercised; 3. To make the smallest number of potentially risky changes to the underlying security architecture; 4. Therefore: Remove the broken ""log out"" link in page headers and replace with a Log out button on the auth[...]/users page which is guaranteed to have the correct CSRF token in state.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14635#issuecomment-2253086187:243,log,logout,243,https://hail.is,https://github.com/hail-is/hail/issues/14635#issuecomment-2253086187,7,"['Log', 'log']","['Log', 'Logout', 'log', 'logged', 'logged-in', 'logging', 'logout']"
Testability,"This is complete, but I need to know how to test it, I can't find explicit partition reader unit tests anywhere",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10793#issuecomment-902911748:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/10793#issuecomment-902911748,2,['test'],"['test', 'tests']"
Testability,This is definitely much better! Do you want me to adopt this? I can put it on the lower priority stack I'm working on. I'm not sure if we would need to test this by hand. Thoughts on that?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673638220:152,test,test,152,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673638220,1,['test'],['test']
Testability,"This is failing because AD and PL arrays are (properly, I would argue) being dropped by buildGenotypeExtractor because their elements aren't required. This won't work unless import_vcf sets requiredness on import. Here is a possible diff (which is probably subsumed by your next PR) which fixes some (but maybe not all) of the failing tests:. ```; diff --git a/src/main/scala/is/hail/io/vcf/LoadVCF.scala b/src/main/scala/is/hail/io/vcf/LoadVCF.scala; index 77f6c72..fadc936 100644; --- a/src/main/scala/is/hail/io/vcf/LoadVCF.scala; +++ b/src/main/scala/is/hail/io/vcf/LoadVCF.scala; @@ -109,7 +109,7 @@ object LoadVCF {; (line.getType == VCFHeaderLineType.Flag && line.getCount == 0))); Field(id, baseType, i, attrs); else; - Field(id, TArray(baseType), i, attrs); + Field(id, TArray(!baseType), i, attrs); }; ; def headerSignature[T <: VCFCompoundHeaderLine](lines: java.util.Collection[T],; @@ -124,10 +124,10 @@ object LoadVCF {; callFields: Set[String] = Set.empty[String]): (TStruct, Int) = {; val canonicalFields = Array(; ""GT"" -> TCall(),; - ""AD"" -> TArray(TInt32()),; + ""AD"" -> TArray(!TInt32()),; ""DP"" -> TInt32(),; ""GQ"" -> TInt32(),; - ""PL"" -> TArray(TInt32())); + ""PL"" -> TArray(!TInt32())); ; val raw = headerSignature(lines, callFields); ; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2416#issuecomment-343640495:335,test,tests,335,https://hail.is,https://github.com/hail-is/hail/pull/2416#issuecomment-343640495,1,['test'],['tests']
Testability,This is failing because the server in the test tries to use the same port (8080) as Jenkins. I'm going to move Jenkins.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/517#issuecomment-236386986:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/517#issuecomment-236386986,1,['test'],['test']
Testability,This is failing on a local backend test. I'm not going to retry it until you're able to review this.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13114#issuecomment-1564639631:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/13114#issuecomment-1564639631,1,['test'],['test']
Testability,"This is failing python tests in a strange way (""Could not find log file"")",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10943#issuecomment-943508821:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/10943#issuecomment-943508821,2,"['log', 'test']","['log', 'tests']"
Testability,"This is failing tests and isn't actually important, closing for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7595#issuecomment-565176979:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/7595#issuecomment-565176979,1,['test'],['tests']
Testability,This is good to go now (tests are passing and the xfsquota stuff looks right when I looked at a worker by hand).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9076#issuecomment-658827248:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/9076#issuecomment-658827248,1,['test'],['tests']
Testability,"This is great and it works.; I get an output like this:. Sample 			gene 	gtSum; SRR1725120 	NFKB1 	4; SRR1642840 	C15orf62 	1; SRR1722200 	MPLKIP 	0; SRS1055987 	CHST10 	1. Is there a way to get samples names as columns and genes as rows such as?. gene	SRR1725120	SRR1642840 SRR1722200 SRS1055987; NFKB1		4			0			0			0; C15orf62		0			1			0			0; MPLKIP		0			0			0			0					; CHST10		0			0			0			1. One option might be (but I think is slow according to what you explained me). newly = vds.make_keytable('gene=va.geneann.gene','`` = g.gt',['gene’]); allexp = [s + "" = `"" + s + ""`.sum"" for s in newly.column_names]; newly.aggregate_by_key('gene=gene',allexp). thanks. > On Jan 31, 2017, at 1:43 PM, jigold <notifications@github.com> wrote:; > ; > This can be done with aggregate_by_key:; > ; > vds.aggregate_by_key('Sample = s, gene = va.gene', 'gtSum = g.map(g => g.gt).sum()').export(""test.tsv""); > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/hail-is/hail/issues/1319#issuecomment-276452831>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ADIkAk61N4PGr9xoLXW8tTBF9qCb3Djiks5rX4C4gaJpZM4LxvDi>.; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1319#issuecomment-276835936:882,test,test,882,https://hail.is,https://github.com/hail-is/hail/issues/1319#issuecomment-276835936,1,['test'],['test']
Testability,"This is great, not having to enumerate the dependencies. Hmm, this is potentially making the build 2x slower. Your branch:. > 17 | build_hail | Complete | Success 🎉 (0) | 8 minutes | log. A master deploy a few moments ago:. > 16 | build_hail | Complete | 0 | 4 minutes | log. The cluster might have been under load when your tests run. Can you do a bit of benchmarking to see if this is real?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6248#issuecomment-498529082:183,log,log,183,https://hail.is,https://github.com/hail-is/hail/pull/6248#issuecomment-498529082,4,"['benchmark', 'log', 'test']","['benchmarking', 'log', 'tests']"
Testability,"This is great, thanks @cseed! I've tried the gradlew option, and it worked well on Debian Jessie with java-8-oracle. `./gradlew installDist` worked, and the majority of the tests passed in `./gradlew check` (4 failed; I can give you the details if this is useful). On Ubuntu 16.04 with java-8-openjdk (the default) I get an error:. ```; :compileJava UP-TO-DATE; :compileScala; /home/jk/github/hail/src/main/scala/org/broadinstitute/hail/expr/Type.scala:80: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; /home/jk/github/hail/src/main/scala/org/broadinstitute/hail/expr/Type.scala:98: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; /home/jk/github/hail/src/main/scala/org/broadinstitute/hail/expr/Type.scala:424: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; case None => throw new AnnotationPathException(); ^; three errors found; :compileScala FAILED. FAILURE: Build failed with an exception.; ```. Is this a dependency on java-8-oracle do you think?. My immediate problem is solved, as I have hail running now, so this is just out of curiosity really. l think it would be good for new users if you could nail down the dependencies a bit more precisely. For testing and development, it's also really useful to be able to spin up a quick Ubuntu VM, apt-get install a few packages and make a fresh install.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-240346120:173,test,tests,173,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-240346120,2,['test'],"['testing', 'tests']"
Testability,"This is great, thanks for working on this!. > I have not added an example to the documentation that uses a matrix table yet. (This is an https://github.com/hail-is/hail/issues/13481.) I wanted to get some advice about the best way to do this. I think ideally, the example would have a binary phenotype, an allele to test for association, and some stratifying variable. I tried to search through the existing code to find suitable example matrix tables in the docstrings, but I didn't find anything promising. I would appreciate help here. The code that sets up the doctest environment is [here](https://github.com/hail-is/hail/blob/8a0e8e3375f1fc11efb5a443a350a8b4e8a24950/hail/python/hail/conftest.py#L55). In particular, the matrixtable available in doc examples as `ds` lives at `hail/hail/python/hail/docs/data/example.mt`. It has lots of fields you can use:; ```; In [3]: mt = hl.read_matrix_table('python/hail/docs/data/example.mt'). In [4]: mt.describe(); ----------------------------------------; Global fields:; 'global_field_1': int32; 'global_field_2': int32; 'pli': dict<str, float64>; 'populations': array<str>; ----------------------------------------; Column fields:; 's': str; 'sample_qc': struct {; dp_stats: struct {; mean: float64,; stdev: float64,; min: float64,; max: float64; },; gq_stats: struct {; mean: float64,; stdev: float64,; min: float64,; max: float64; },; call_rate: float64,; n_called: int64,; n_not_called: int64,; n_filtered: int64,; n_hom_ref: int64,; n_het: int64,; n_hom_var: int64,; n_non_ref: int64,; n_singleton: int64,; n_snp: int64,; n_insertion: int64,; n_deletion: int64,; n_transition: int64,; n_transversion: int64,; n_star: int64,; r_ti_tv: float64,; r_het_hom_var: float64,; r_insertion_deletion: float64; }; 'is_case': bool; 'pheno': struct {; is_case: bool,; is_female: bool,; age: float64,; height: float64,; blood_pressure: float64,; cohort_name: str; }; 'cov': struct {; PC1: float64; }; 'cov1': float64; 'cov2': float64; 'cohort': str; 'cohorts':",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1932814827:316,test,test,316,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1932814827,1,['test'],['test']
Testability,"This is green now. Testing it fully is difficult since we don't have lowered import. However, manually testing both lowered and unlowered versions has produced bit-for-bit identical output, and [test_bgen_export_from_vcf](https://github.com/chrisvittal/hail/blob/e0de6b3f5c91820be94591e95d1a49b67c83cd7f/hail/python/test/hail/methods/test_impex.py#L1521-L1536) does use the lowered execution for export and passes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12185#issuecomment-1251670379:19,Test,Testing,19,https://hail.is,https://github.com/hail-is/hail/pull/12185#issuecomment-1251670379,3,"['Test', 'test']","['Testing', 'test', 'testing']"
Testability,"This is largely working, but IIRC was facing some bug in Azure. I would start by re-running the tests, then dev deploying and running any failing tests yourself.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14076#issuecomment-2239861081:96,test,tests,96,https://hail.is,https://github.com/hail-is/hail/pull/14076#issuecomment-2239861081,2,['test'],['tests']
Testability,"This is likely due to a variety of k8s garbage collection facilities, in particular; ```; --terminated-pod-gc-threshold int32 Default: 12500; Number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. If <= 0, the terminated pod garbage collector is disabled.; ```; https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/. Is a threshold hit by our 30k test but not Konrad's 3k test. We're addressing this with the unipod strategy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6545#issuecomment-509396760:447,test,test,447,https://hail.is,https://github.com/hail-is/hail/issues/6545#issuecomment-509396760,2,['test'],['test']
Testability,"This is mostly hooked up but not fully tested. I'd start by dev deploying this and submitting jobs, checking to see if any of the driver's requests to the worker (like in the `schedule_job` function) are rejected.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14622#issuecomment-2243018782:39,test,tested,39,https://hail.is,https://github.com/hail-is/hail/pull/14622#issuecomment-2243018782,1,['test'],['tested']
Testability,"This is my first ever git commit so let me know if there are any changes needed. I tested this functionality by building Hail on my Amazon Linux 2 system before vs after. After removal of the ""sys_platform!='win32'"" the error was no longer happening.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136#issuecomment-1229010436:83,test,tested,83,https://hail.is,https://github.com/hail-is/hail/pull/12136#issuecomment-1229010436,1,['test'],['tested']
Testability,This is not substantially slower than the current service backend tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11444#issuecomment-1096638073:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/11444#issuecomment-1096638073,1,['test'],['tests']
Testability,This is now just blocked on me testing that we have an elasticsearch export story.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10054#issuecomment-793140564:31,test,testing,31,https://hail.is,https://github.com/hail-is/hail/pull/10054#issuecomment-793140564,1,['test'],['testing']
Testability,"This is now passing tests in gcp. I didn't retry it in Azure, but I presume it would pass as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475#issuecomment-1708468287:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/13475#issuecomment-1708468287,1,['test'],['tests']
Testability,"This is now ready to be reviewed. @danking Could you please help me setup the tests to run on the CI?. @catoverdrive This is an example of the interface and the output generated. There's also a tests file in there. I'm happy to explain the design to you if you'd like. ```python3; from pipeline import Pipeline. p = Pipeline() # initialize a pipeline. # Define mapping for taking a file root to a set of output files; bfile = {'bed': '{root}.bed', 'bim': '{root}.bim', 'fam': '{root}.fam'}. # Import a file as a resource; file = p.read_input('gs://hail-jigold/random_file.txt'). # Import a set of input files as a resource group; input_bfile = p.read_input_group(bed='gs://hail-jigold/input.bed',; bim='gs://hail-jigold/input.bim',; fam='gs://hail-jigold/input.fam'). # Remove duplicate samples from a PLINK dataset; subset = p.new_task(); subset = (subset; .label('subset'); .docker('ubuntu'); .declare_resource_group(tmp1=bfile, ofile=bfile); .command(f'plink --bfile {input_bfile} --make-bed {subset.tmp1}'); .command(f""awk '{{ print $1, $2}}' {subset.tmp1.fam} | sort | uniq -c | awk '{{ if ($1 != 1) print $2, $3 }}' > {subset.tmp2}""); .command(f""plink --bed {input_bfile.bed} --bim {input_bfile.bim} --fam {input_bfile.fam} --remove {subset.tmp2} --make-bed {subset.ofile}"". )). # Run shapeit for each contig from 1-3 with the output from subset; for contig in [str(x) for x in range(1, 4)]:; shapeit = p.new_task(); shapeit = (shapeit; .label('shapeit'); .declare_resource_group(ofile={'haps': ""{root}.haps"", 'log': ""{root}.log""}); .command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit.ofile}')). # Merge the shapeit output files together; merger = p.new_task(); merger = (merger; .label('merge'); .command('cat {files} >> {ofile}'.format(files="" "".join([t.ofile.haps for t in p.select_tasks('shapeit')]),; ofile=merger.ofile))). # Write the result of the merger to a permanent location; p.write_output(merger.ofile, ""gs://jigold/final_output.txt""). # Execute the pipeline;",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282:78,test,tests,78,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282,2,['test'],['tests']
Testability,This is obviated by my imminent aggregator registry changes. The L suffix change should be a separate PR. I'll integrate the tests into my branch.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1051#issuecomment-262054090:125,test,tests,125,https://hail.is,https://github.com/hail-is/hail/pull/1051#issuecomment-262054090,1,['test'],['tests']
Testability,This is only enabled if the cpp feature flag is turned on. I don't think it is ever turned on in the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5514#issuecomment-470284163:101,test,tests,101,https://hail.is,https://github.com/hail-is/hail/pull/5514#issuecomment-470284163,1,['test'],['tests']
Testability,"This is overly aggressive until the relevant tests have been ported to Python. It is an easy change, and I'm going to back off for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5383#issuecomment-464850638:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/5383#issuecomment-464850638,3,['test'],['tests']
Testability,This is part 1 of a 2-stage commit to embed all the project logs directly in the index page.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4667#issuecomment-433727130:60,log,logs,60,https://hail.is,https://github.com/hail-is/hail/pull/4667#issuecomment-433727130,1,['log'],['logs']
Testability,This is passing except for the service python tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10090#issuecomment-796953328:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/10090#issuecomment-796953328,1,['test'],['tests']
Testability,This is passing the tests. I didn't double check the billing numbers in the database look correct. Can do so if you think it's prudent.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9288#issuecomment-675090452:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/9288#issuecomment-675090452,1,['test'],['tests']
Testability,This is ready for a look. The tests are passing except one service backend test timed out.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12212#issuecomment-1260857476:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12212#issuecomment-1260857476,2,['test'],"['test', 'tests']"
Testability,"This is really baffling. Maybe this code isn't really used in benchmarks in local mode? I would expect that *every* write/read from these buffers for SerializableRegionValue would go through the array/buffer read calls, because we use StreamBlockBuffer for the buffer spec:. ```scala; val wireSpec: BufferSpec = LEB128BufferSpec(; BlockingBufferSpec(32 * 1024,; LZ4SizeBasedBlockBufferSpec(""fast"", 32 * 1024,; 256,; new StreamBlockBufferSpec))); ```. We won't call write/read on the output/input buffers except to write/read blocks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10766#issuecomment-896016575:62,benchmark,benchmarks,62,https://hail.is,https://github.com/hail-is/hail/pull/10766#issuecomment-896016575,1,['benchmark'],['benchmarks']
Testability,This is still 2-5% slower than the current main line branch. I have a few more things to try. Benchmarks where the change is >20%:. ```; $ hail-bench compare ./0.2.47-3f8cff262dcf.json ./0.2.47-b2acae4f478f.json ; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; matrix_table_entries_table_no_key 580.3% 56.955 330.503; table_aggregate_array_sum 528.0% 9.103 48.066; table_big_aggregate_compile_and_execute 185.0% 13.325 24.648; per_row_stats_star_star 154.0% 8.474 13.046; table_aggregate_linreg 148.6% 48.593 72.212; matrix_table_filter_entries_unfilter 140.8% 8.581 12.085; matrix_table_array_arithmetic 135.8% 10.208 13.862; matrix_table_many_aggs_col_wise 133.7% 34.847 46.576; ...; full_combiner_chr22 33.4% 1644.907 548.608; ----------------------; Geometric mean: 104.8%; Median: 101.9%; ```. FYI @tpoterba @chrisvittal The combiner improvement persists across multiple runs and is real. That's quite nice!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8963#issuecomment-650180949:94,Benchmark,Benchmarks,94,https://hail.is,https://github.com/hail-is/hail/pull/8963#issuecomment-650180949,2,['Benchmark'],"['Benchmark', 'Benchmarks']"
Testability,"This is super useful, thanks @jigold! A few high level comments:. - I'd love to have this checked in, but I don't think it should be part of the regular tests, esp. when they run against the production database and this is designed to find/stress the limits of the database.; - Also, this seems most useful for benchmarking different database configuration and settings, and we don't want to vary the production database (and in some cases, we can't, like decreasing the database size).; - Therefore, I think we just have a module you can run that takes a database connection settings and n_jobs, batch_size, batch_parallelism and number of replicates, and runs the benchmark, not integrated with the build system. And .sql files to create/clean up tables. When we want to run it, we can just clone the repo and run it directly. Then we can think about wrapping it in a larger test to spinning up database instances with various node and disk sizes and MySQL settings and see how they perform.; - You explore number of jobs and batch size, but I think you should also measure amount of batch insert parallelism. You can use bounded_gather I sent you. Then basically these two tests correspond to parallelism=1 and parallelism=infinity.; - I think you can get rid of the pymysql version. No reason the async version should perform differently, no?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7181#issuecomment-538068881:153,test,tests,153,https://hail.is,https://github.com/hail-is/hail/pull/7181#issuecomment-538068881,5,"['benchmark', 'test']","['benchmark', 'benchmarking', 'test', 'tests']"
Testability,This is the assertion I'd hit: https://github.com/hail-is/hail/blob/master/hail/src/main/scala/is/hail/rvd/RVD.scala#L117,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8757#issuecomment-630316303:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/8757#issuecomment-630316303,1,['assert'],['assertion']
Testability,"This is the current version of gateway in default since yesterday, and since then there haven't been any logs out of router.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10247#issuecomment-810268452:105,log,logs,105,https://hail.is,https://github.com/hail-is/hail/pull/10247#issuecomment-810268452,1,['log'],['logs']
Testability,"This is ungodly slow. ```python; In [4]: %%timeit; ...: with hdfs_read('hail.log') as f:; ...: for line in f:; ...: pass; ...:; ...:; 100 loops, best of 3: 8.51 ms per loop. In [5]: %%timeit; ...: with open('hail.log') as f:; ...: for line in f:; ...: pass; ...:; ...:. The slowest run took 8.48 times longer than the fastest. This could mean that an intermediate result is being cached.; 100000 loops, best of 3: 12.7 µs per loop; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1645#issuecomment-292253230:77,log,log,77,https://hail.is,https://github.com/hail-is/hail/pull/1645#issuecomment-292253230,2,['log'],['log']
Testability,This is useful for testing commands that start from a vds by first constructing a small matrix of genotypes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/967#issuecomment-254005264:19,test,testing,19,https://hail.is,https://github.com/hail-is/hail/pull/967#issuecomment-254005264,1,['test'],['testing']
Testability,"This is very nice. There are three while loops in BgenRDDPartitions.scala that could easily be translated to for loops, so that it gets tested",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9049#issuecomment-653485568:136,test,tested,136,https://hail.is,https://github.com/hail-is/hail/pull/9049#issuecomment-653485568,1,['test'],['tested']
Testability,This is what it looks like with default fonts and LogColorMapper / LogTicker; ![image](https://user-images.githubusercontent.com/3502465/56926554-ff796180-6a9f-11e9-9d8a-99a1befd298f.png),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5980#issuecomment-487741501:50,Log,LogColorMapper,50,https://hail.is,https://github.com/hail-is/hail/pull/5980#issuecomment-487741501,2,['Log'],"['LogColorMapper', 'LogTicker']"
Testability,"This isn't a hard change, but it is a big one. Let me know if you want me to break it up. OK, I think this is ready for a look. What I've tested:. - hand deploy new auth, router-resolver to default,; - tested login/logout flow on web (auth.hail.is/login, /logout) and hailctl (hailctl auth login/logout); - then deploy in my namespace:. ```; hailctl dev deploy -b cseed/hail:auth -s deploy_auth,deploy_router,deploy_notebook2; ```. - and test login/logout flow via notebook2 (internal.hail.is/cseed/notebook2, etc.) and hailctl, where access to internal is mediated by production (default namespace) credentials. Note, to do this I copied the production oauth2 key to my namespace. We shouldn't do this in general and should create a shared dev oauth2 key. Alternatively, we should create a separate login flow doesn't use oauth2 but uses production credentials.; - and interactively tested notebook2 creating notebooks (but haven't tested the config of the notebooks themselves). Summary of changes:; - auth service that handles login/logout flow via Google OAuth2 and user verification via /userdata endpoint. Web sessions are stored in the aiohttp_session cookie (encrypted), command line sessions are stored in tokens file: tokens.json. Token files potentially contain tokens for multiple namespaces (e.g. default and cseed in the example workflow above).; - sessions are now started in the database, table `users.sessions`, which have session_id (32 random bytes, base64-encoded), user_id, creation time and max_age (for expiry); - I write notebook2 to use our async stack; - added a notion of ""deploy config"" that has three parts: location (one of external, k8s or gce), default_namespace (the default namespace to find services), and service_namespace (of overrides for specific services ... so e.g. you can use the default auth with batch in cseed). deploy_config main function is to construct URLs to contact services.; - JWTs and the jwt secret key are gone.; - Simplified configuration/data",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251:138,test,tested,138,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251,14,"['log', 'test']","['login', 'logout', 'test', 'tested']"
Testability,"This isn't as easy as I had hoped. We have to sort out how to either let the container directly create overlay mounts or figure out how to get fuse-overlay working. I think for fuse-overlay, we might need to modify the VM image to include fuse-overlay. ```; + set +x; Using GOOGLE_APPLICATION_CREDENTIALS; + export TMPDIR=/io/; + TMPDIR=/io/; + retry buildah build -t us-docker.pkg.dev/hail-vdc/hail/git-make-bash:test-deploy-j6d7pph9mlzf -f /Dockerfile --cache-from us-docker.pkg.dev/hail-vdc/hail/cache --cache-to us-docker.pkg.dev/hail-vdc/hail/cache --layers /io; + buildah build -t us-docker.pkg.dev/hail-vdc/hail/git-make-bash:test-deploy-j6d7pph9mlzf -f /Dockerfile --cache-from us-docker.pkg.dev/hail-vdc/hail/cache --cache-to us-docker.pkg.dev/hail-vdc/hail/cache --layers /io; STEP 1/2: FROM us-docker.pkg.dev/hail-vdc/hail/ubuntu:20.04; Trying to pull us-docker.pkg.dev/hail-vdc/hail/ubuntu:20.04...; Getting image source signatures; Copying blob sha256:ca1778b6935686ad781c27472c4668fc61ec3aeb85494f72deb1921892b9d39e; Copying config sha256:88bd6891718934e63638d9ca0ecee018e69b638270fe04990a310e5c78ab4a92; Writing manifest to image destination; Storing signatures; time=\""2023-05-26T14:52:12Z\"" level=error msg=\""Unmounting /var/lib/containers/storage/overlay/dfc7702a226c7f2566c37f22a8636084e25da7ad1dcdf6a05eac8d3aa3b245a2/merged: invalid argument\""; Error: mounting new container: mounting build container \""45e0ed631d22b6e1de7945266efcf0b802aa3b919d6b6ebd529ded6fedc11cf9\"": creating overlay mount to /var/lib/containers/storage/overlay/dfc7702a226c7f2566c37f22a8636084e25da7ad1dcdf6a05eac8d3aa3b245a2/merged, mount_data=\""lowerdir=/var/lib/containers/storage/overlay/l/ZCKOX3GV2VWHWT4DMPLYJGMJWL,upperdir=/var/lib/containers/storage/overlay/dfc7702a226c7f2566c37f22a8636084e25da7ad1dcdf6a05eac8d3aa3b245a2/diff,workdir=/var/lib/containers/storage/overlay/dfc7702a226c7f2566c37f22a8636084e25da7ad1dcdf6a05eac8d3aa3b245a2/work,nodev,fsync=0,volatile\"": using mount program /usr/bin/fus",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13103#issuecomment-1564774692:414,test,test-deploy-,414,https://hail.is,https://github.com/hail-is/hail/pull/13103#issuecomment-1564774692,2,['test'],['test-deploy-']
Testability,This isn't tested as thoroughly as I would like because I don't have a way to collect a keyed thing or unkey it in the lowerer.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8665#issuecomment-621860471:11,test,tested,11,https://hail.is,https://github.com/hail-is/hail/pull/8665#issuecomment-621860471,1,['test'],['tested']
Testability,This log doesn't have the mentioned exception. Closing because it's stale.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1284#issuecomment-301786782:5,log,log,5,https://hail.is,https://github.com/hail-is/hail/issues/1284#issuecomment-301786782,1,['log'],['log']
Testability,"This looks fine to me, but ci tests are failing in a bunch of places.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10778#issuecomment-897970304:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/10778#issuecomment-897970304,1,['test'],['tests']
Testability,This looks good to me. There's a bunch of test failures mainly in TextTableSuite.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5139#issuecomment-454422936:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/5139#issuecomment-454422936,1,['test'],['test']
Testability,"This looks good. Can you replace all of the tests of the form `uf.find(1) == uf.find(2)` with `sameSet(1, 2)`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2214#issuecomment-331990089:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/2214#issuecomment-331990089,1,['test'],['tests']
Testability,This looks great. All good to test I think,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11996#issuecomment-1178228992:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/11996#issuecomment-1178228992,1,['test'],['test']
Testability,"This looks like good start. A few comments:; - I prefer using MySQL over auth0 mainly because it simplifies our eventual backup/restore story. If you think that's simpler overall, great. I don't see how integrating our db with their service does anything for us.; - I assume you're planning to pull the user data from MySQL during the login flow and add it to cookie? I think @danking @jigold and I are interested in nailing down the format for the cookie and seeing an example.; - I agree with @danking we should have an internal id field that's an integer. I think we should use that everywhere, and just use the auth0 id to look up the user record during login. So the integer id would be the primary key and the auth0 id would be unique with a secondary index.; - You need to get the GCP service account key and store it in a secret.; - The GCP service account needs permissions on the bucket. It should be bucket writer.; - Name ""user_secrets"" seems overly specific (buckets and service accounts are not secrets). ""user_data""?; - Please don't give the database a public IP.; - From a usability perspective, for user-visible names I have to say I really dislike long uuids and like the k8s-style short random string at the end. For k8s resource, you get this for free with the `generate_name` argument. For other stuff, long-term, this will potentially require retry logic to make it robust.; - I don't like this create table logic (FYI @danking @jigold). Most database users should not have permissions to create databases. There should be a k8s secret with the database root and a secret for each specific database application that only has access to that database.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473583731:335,log,login,335,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473583731,4,['log'],"['logic', 'login']"
Testability,This looks to me like we just have bad long tails. If we can 90% and 99% test times down further maybe we're basically good. Seems feasible for the entire service backend tests to take <20 minutes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1553848763:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1553848763,2,['test'],"['test', 'tests']"
Testability,"This means that we should test our various definitions of isInsertion, isDeletion, etc against htsjdk. I think I made this issue at your request, and don't feel super strongly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1670#issuecomment-316394897:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/issues/1670#issuecomment-316394897,1,['test'],['test']
Testability,This means there were no artifacts. What was in the build log?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5546#issuecomment-471025684:58,log,log,58,https://hail.is,https://github.com/hail-is/hail/issues/5546#issuecomment-471025684,1,['log'],['log']
Testability,"This more or less follows the same strategy as the python splitting. Instead of each job figuring out which split it owns, I create 5 separate testng.xml files in `build_hail`. Each job reads one of those files. testng.xml has a pretty simple XML format and you can explicitly list the classes of interest. I noticed that hail java tests were up to 15 minutes which was really cramping my PR merging style. With this, some of the splits are a minute or two. I think we suffer a bit from programmatically generated tests since I'm splitting at the granularity of classes rather than methods, or, even better, generated methods.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9139#issuecomment-663248573:143,test,testng,143,https://hail.is,https://github.com/hail-is/hail/pull/9139#issuecomment-663248573,4,['test'],"['testng', 'tests']"
Testability,"This one isn't a segfault, it's a test failure where somehow for each ndarray in the table, row i + 1 is getting the data array from row i. Cloud workshop and ndarray aggregator pushed this down my priority list, but I will continue to try and fix it and then get back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8952#issuecomment-667098599:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/8952#issuecomment-667098599,1,['test'],['test']
Testability,This only yielded a ~20% reduction. Test times are around 16 minutes now down from around 20 minutes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11212#issuecomment-1039677943:36,Test,Test,36,https://hail.is,https://github.com/hail-is/hail/pull/11212#issuecomment-1039677943,1,['Test'],['Test']
Testability,"This passed all its tests, but I'll wait for a review to give it a bump.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8564#issuecomment-614850752:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/8564#issuecomment-614850752,1,['test'],['tests']
Testability,"This refers to setting up a fresh k8s cluster. In particular, when you're creating a k8s cluster from scratch, you need to create an access token to grant CI (or gateway, if gateway were to proxy requests to GitHub for CI) access to the PR ""merge"" endpoint. There are a couple other things like read access to our google buckets. These can all be generated by anyone with a sufficiently privileged GCP account and a broad login in the `hail` unix group (there are some credentials stored in cotton's home directory on the broad file system).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4556#issuecomment-449082131:422,log,login,422,https://hail.is,https://github.com/hail-is/hail/issues/4556#issuecomment-449082131,1,['log'],['login']
Testability,"This seems fine now (the alternative is to continue using unittest which seems not loved for some reason?). I'll echo patrick that I would prefer we live on a test framework that's maintained. [nose2](http://nose2.readthedocs.io/en/latest/) seems to be a maintained project, but that reddit thread is hot for `pytest`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3096#issuecomment-371837536:159,test,test,159,https://hail.is,https://github.com/hail-is/hail/pull/3096#issuecomment-371837536,1,['test'],['test']
Testability,This seems fine to me. I think we should check the worker and driver logs and make sure there's no unexpected messages though before merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13876#issuecomment-1772950616:69,log,logs,69,https://hail.is,https://github.com/hail-is/hail/pull/13876#issuecomment-1772950616,1,['log'],['logs']
Testability,This seems like an odd bug?; https://ci.hail.is/repository/download/HailSourceCode_HailMainline_HailCiSpark1/2980:id/build/reports/tests/classes/org.broadinstitute.hail.io.ExportVcfSuite.html#testReadWrite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1194#issuecomment-268636904:131,test,tests,131,https://hail.is,https://github.com/hail-is/hail/pull/1194#issuecomment-268636904,2,['test'],"['testReadWrite', 'tests']"
Testability,"This seems right to me. In this vein of work, there's one more thing I want: we should build this Dockerfile with the hail wheel and then execute `pylint hail && pylint hailtop`. Pylint will look for uninstalled modules. This will save us from checking in (and eventually deploying) a hail package with bad dependencies. We should probably also run the python tests against this version of hail. This is a tru, local-mode user environment. ```; FROM ubuntu:18.04. ENV LANG C.UTF-8. RUN apt-get update && \; apt-get -y install \; openjdk-8-jdk-headless \; python3 python3-pip && \; rm -rf /var/lib/apt/lists/*. COPY hail.whl pylintrc ./; RUN pip install --no-cache-dir ./hail.whl; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7031#issuecomment-530112882:360,test,tests,360,https://hail.is,https://github.com/hail-is/hail/pull/7031#issuecomment-530112882,1,['test'],['tests']
Testability,"This seems to happen somewhat consistently to the CI PR tests, but I can't replicate locally.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5566#issuecomment-471056112:56,test,tests,56,https://hail.is,https://github.com/hail-is/hail/issues/5566#issuecomment-471056112,1,['test'],['tests']
Testability,This should be all set. I tested backwards compatibility and caught some errors that showed up in the worker logs with regards to iptables lock errors with simultaneous shell calls.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12542#issuecomment-1370274153:26,test,tested,26,https://hail.is,https://github.com/hail-is/hail/pull/12542#issuecomment-1370274153,2,"['log', 'test']","['logs', 'tested']"
Testability,This should be done. I'm running tests locally and in ci now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7060#issuecomment-534278690:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/7060#issuecomment-534278690,1,['test'],['tests']
Testability,"This should be good minus tests and double/triple checking the billing is all correct with units etc.. Ideally, there'd be two situations to test:. 1. A storage size that exceeds the unreserved space (i.e. 375Gi); 2. Multiple smaller jobs requesting unreserved space and we need to spin up a disk for one of them. I don't think there's a reliable way to test 2 other than doing it by hand in my dev namespace. Test 1 should be sufficient for checking the new disk and /io works.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9598#issuecomment-714604941:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/9598#issuecomment-714604941,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,This should be good to go assuming the tests pass.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11996#issuecomment-1211066228:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/11996#issuecomment-1211066228,1,['test'],['tests']
Testability,"This should be using `pytest`, just like test-locally: `python3 -m pytest test`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6015#issuecomment-488307839:41,test,test-locally,41,https://hail.is,https://github.com/hail-is/hail/pull/6015#issuecomment-488307839,2,['test'],"['test', 'test-locally']"
Testability,"This should go in before the `jb_lmm_getthisin` branch, which is rebased off this one to continue the unification of lin, log, and mixed regression, with more refactoring. (alternatively, the `jb_lmm_getthisin` branch supercedes this one)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1259#issuecomment-272994037:122,log,log,122,https://hail.is,https://github.com/hail-is/hail/pull/1259#issuecomment-272994037,1,['log'],['log']
Testability,"This should now be passing tests. I had to make one LocalBackend test conditional on docker, because we do not have docker in docker (DiD), and there were historically some security considerations that felt out of scope to fully grapple with in this PR (out of scope to create a DiD image and have test_hailtop_batch and test_batch_dcos use this DiD image.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9219#issuecomment-670288861:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/9219#issuecomment-670288861,2,['test'],"['test', 'tests']"
Testability,"This should work. I didn't test the `cleanup-db` because I wanted to leave the db I have running. Right now, you have to run this from inside the db-benchmark directory. I'm not sure how to easily make it directory agnostic and didn't want to put the time into that now. ```; cd db-benchmark; pip3 install -U ./. db-benchmark create-db --tier db-n1-standard-1 test-ad914f # this will assign a random name for the db if not specified . db-benchmark run test-ad914f --parallelism 5 --batch-sizes 1,10,100,1000,10000,100000 --chunk-size 1000 --n-replicates 10. db-benchmark cleanup-db test-ad914f; ```. By default, the k8s logs go to `benchmark.log`. I couldn't get them to print out nicely to the console. I'll try testing some of the database flags tomorrow and see if any of the suggestions on stack overflow help.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7181#issuecomment-538785807:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/7181#issuecomment-538785807,13,"['benchmark', 'log', 'test']","['benchmark', 'log', 'logs', 'test', 'test-', 'testing']"
Testability,"This still causes error messages. `hail -l /mnt/lustre/schoi/projects/TOPMed/BROAD/Chr22/TopMed.Chr${num}.QC.vds.test.log importvcf file:///mnt/lustre/schoi/projects/TOPMed/BROAD/Chr${num}/TopMed_8k.853.vcf.bgz splitmulti annotatevariants expr -c 'va.info.AC = va.info.AC[va.aIndex]' count`. `2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@712: Client environment:zookeeper.version=zookeeper C client 3.4.5; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@716: Client environment:host.name=nid00014; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@723: Client environment:os.name=Linux; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@724: Client environment:os.arch=2.6.32-431.el6_1.0000.9051-cray_ari_athena_c_cos; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@725: Client environment:os.version=#1 SMP Thu Jan 28 18:37:39 UTC 2016; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@733: Client environment:user.name=schoi; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@741: Client environment:user.home=/home/users/schoi; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@log_env@753: Client environment:user.dir=/mnt/lustre/schoi/projects/TOPMed/BROAD/Chr22; 2016-08-24 16:42:27,052:8532(0x7fef97fff700):ZOO_INFO@zookeeper_init@786: Initiating client connection, host=192.168.0.1:2181,192.168.0.9:2181,192.168.0.17:2181 sessionTimeout=10000 watcher=0x3b9c8c00a0 sessionId=0 sessionPasswd=<null> context=0x7fed6c000960 flags=0; I0824 16:42:27.052752 8752 sched.cpp:164] Version: 0.25.0; 2016-08-24 16:42:27,053:8532(0x7fef76bfd700):ZOO_INFO@check_events@1703: initiated connection to server [192.168.0.9:2181]; 2016-08-24 16:42:27,070:8532(0x7fef76bfd700):ZOO_INFO@check_events@1750: session establishment complete on server [192.168.0.9:2181], sessionId=0x255cb9ea22102ec, negotiated timeout=10000; I0824 16:42:27.070502 8726 group.cpp:331] Group process (group(1)@192.168.0.15:12239) connect",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/660#issuecomment-242218633:113,test,test,113,https://hail.is,https://github.com/hail-is/hail/issues/660#issuecomment-242218633,2,"['log', 'test']","['log', 'test']"
Testability,"This still seems absolutely crazy to me, but let's put it in production and see if the tests fail.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11144#issuecomment-995049663:87,test,tests,87,https://hail.is,https://github.com/hail-is/hail/pull/11144#issuecomment-995049663,1,['test'],['tests']
Testability,"This test failed in CI, but worked fine for me locally the 3 times I tested it (takes forever to run). Not sure what's going on. ```; =================================== FAILURES ===================================; _______________________ test_input_dependency_directory ________________________. client = <batch.client.BatchClient object at 0x7fee8fbecbe0>; test_user = {'bucket_name': 'hail-user-bucket-batch-tests', 'gsa_email': 'batch-tests@hail-vdc.iam.gserviceaccount.com', 'gsa_key_secret_name': 'gcp-sa-key-batch-tests', 'ksa_name': 'batch-tests'}. def test_input_dependency_directory(client, test_user):; batch = client.create_batch(); head = batch.create_job('alpine:3.8',; command=['/bin/sh', '-c', 'mkdir -p /io/test/; echo head1 > /io/test/data1 ; echo head2 > /io/test/data2'],; output_files=[('/io/test/', f'gs://{test_user[""bucket_name""]}')]); tail = batch.create_job('alpine:3.8',; command=['/bin/sh', '-c', 'cat /io/test/data1 ; cat /io/test/data2'],; input_files=[(f'gs://{test_user[""bucket_name""]}/test', '/io/')],; parent_ids=[head.id]); tail.wait(); > assert tail.log()['main'] == 'head1\nhead2\n'; E KeyError: 'main'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5934#issuecomment-485600864:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/5934#issuecomment-485600864,15,"['assert', 'log', 'test']","['assert', 'log', 'test', 'tested', 'tests']"
Testability,"This ticket is complete when:; - [ ] A test is added using the VCF provided by Julia.; - [ ] We have tabixed GRCh38 data in the QoB bucket and also in each Dataproc location: us, eu, aus-sydney. I've removed the highmem requirement from this list. I'm not convinced that, if we fix the tabix issue, we will need highmem machines.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830874506:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830874506,1,['test'],['test']
Testability,"This took me an incredibly long time to figure out, but I'm pretty sure the issue is that my last test copies the same file twice. Once explicitly as a single file and the second time as part of the directory to copy recursively. I don't think our copier code interacts correctly with Azure Blob Storage in this case and we end up with invalid block ID list errors. I'm still stewing over which option is the best to address this. I could either not have `submit.py` ask to copy the same file twice or I can modify the copier to have a lock on the create blob writer stream so that we don't have this issue. However, I'm worried about deadlocks with our extensive use of semaphores and parallelism. Thoughts?? I think the right thing to do is fix it for now in `submit.py` so we can get this in and then make an issue to make a more durable fix to the copier.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13812#issuecomment-1881894683:98,test,test,98,https://hail.is,https://github.com/hail-is/hail/pull/13812#issuecomment-1881894683,1,['test'],['test']
Testability,"This was a mix of a couple of issues. #12021 should fix the infinite redirect loop caused by your accounts not being developer accounts. I've upgraded you but even so there's a chance of us accidentally picking up your old account's session instead of your new shiny broadinstitute accounts, which will again land you with a 401. If you log out and back in does it work now?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11954#issuecomment-1180671583:337,log,log,337,https://hail.is,https://github.com/hail-is/hail/pull/11954#issuecomment-1180671583,1,['log'],['log']
Testability,"This was almost certainly caused by https://github.com/hail-is/hail/pull/13634 . Job is https://batch.hail.is/batches/7304823/jobs/104 . Last log line is the ""reading results"" line. Unfortunately, resource recording results were broken during this time, so we cannot confirm memory use exploded.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12925#issuecomment-1775387640:142,log,log,142,https://hail.is,https://github.com/hail-is/hail/issues/12925#issuecomment-1775387640,1,['log'],['log']
Testability,This was introduced last month https://github.com/hail-is/hail/blame/main/hail/python/test/hail/methods/test_statgen.py#L15-L17 . The tests all appear to still pass.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1396401327:86,test,test,86,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1396401327,2,['test'],"['test', 'tests']"
Testability,"This week, subsequent PRs will address:; - Implement `stop` which frees memory.; - Test many concurrent clients.; - Implement TableKeyBy and TableOrderBy with this (hidden by a hail context flag).; - Package this as a k8s service.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8361#issuecomment-604091281:83,Test,Test,83,https://hail.is,https://github.com/hail-is/hail/pull/8361#issuecomment-604091281,1,['Test'],['Test']
Testability,This whole stack of PRs is currently plagued by testng hell. I will resolve Monday. I assure you the tests work when not run using the test jar. I'll probably back out my use of the buggy TestNG feature (it's in LSMSuite in a previous PR).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8726#issuecomment-629596529:48,test,testng,48,https://hail.is,https://github.com/hail-is/hail/pull/8726#issuecomment-629596529,4,"['Test', 'test']","['TestNG', 'test', 'testng', 'tests']"
Testability,"This will be fixed in the next release.; If you can't wait until then and you're comfortable patching this yourself, replace the contents of the affected file with the following:; ```yaml; dataproc:; init_notebook.py: gs://hail-common/hailctl/dataproc/0.2.129/init_notebook.py; vep-GRCh37.sh: gs://hail-common/hailctl/dataproc/0.2.129/vep-GRCh37.sh; vep-GRCh38.sh: gs://hail-common/hailctl/dataproc/0.2.129/vep-GRCh38.sh; wheel: gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl; pip_dependencies: aiodns==2.0.0|aiohttp==3.9.3|aiosignal==1.3.1|async-timeout==4.0.3|attrs==23.2.0|avro==1.11.3|azure-common==1.1.28|azure-core==1.30.1|azure-identity==1.15.0|azure-mgmt-core==1.4.0|azure-mgmt-storage==20.1.0|azure-storage-blob==12.19.0|bokeh==3.3.4|boto3==1.34.55|botocore==1.34.55|cachetools==5.3.3|certifi==2024.2.2|cffi==1.16.0|charset-normalizer==3.3.2|click==8.1.7|commonmark==0.9.1|contourpy==1.2.0|cryptography==42.0.5|decorator==4.4.2|deprecated==1.2.14|dill==0.3.8|frozenlist==1.4.1|google-auth==2.28.1|google-auth-oauthlib==0.8.0|humanize==1.1.0|idna==3.6|isodate==0.6.1|janus==1.0.0|jinja2==3.1.3|jmespath==1.0.1|jproperties==2.1.1|markupsafe==2.1.5|msal==1.27.0|msal-extensions==1.1.0|msrest==0.7.1|multidict==6.0.5|nest-asyncio==1.6.0|numpy==1.26.4|oauthlib==3.2.2|orjson==3.9.10|packaging==23.2|pandas==2.2.1|parsimonious==0.10.0|pillow==10.2.0|plotly==5.19.0|portalocker==2.8.2|py4j==0.10.9.5|pyasn1==0.5.1|pyasn1-modules==0.3.0|pycares==4.4.0|pycparser==2.21|pygments==2.17.2|pyjwt[crypto]==2.8.0|python-dateutil==2.9.0.post0|python-json-logger==2.0.7|pytz==2024.1|pyyaml==6.0.1|regex==2023.12.25|requests==2.31.0|requests-oauthlib==1.3.1|rich==12.6.0|rsa==4.9|s3transfer==0.10.0|scipy==1.11.4|six==1.16.0|sortedcontainers==2.4.0|tabulate==0.9.0|tenacity==8.2.3|tornado==6.4|typer==0.9.0|typing-extensions==4.10.0|tzdata==2024.1|urllib3==1.26.18|uvloop==0.19.0;sys_platform!=""win32""|wrapt==1.16.0|xyzservices==2023.10.1|yarl==1.9.4|; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14452#issuecomment-2045876651:1573,log,logger,1573,https://hail.is,https://github.com/hail-is/hail/issues/14452#issuecomment-2045876651,1,['log'],['logger']
Testability,This will probably behave better with this: https://github.com/hail-is/hail/pull/7636. The four was roughly chosen to match the k8s maximum pool size so there is space for test deployments. One problem we're seeing now is preemptible workloads get scheduled on non-preemptible nodes meaning there isn't space for non-preemptible test workloads.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7728#issuecomment-565619961:172,test,test,172,https://hail.is,https://github.com/hail-is/hail/pull/7728#issuecomment-565619961,2,['test'],['test']
Testability,"This works now, just need to add some tests though instead of just terminal experiments.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7862#issuecomment-574275404:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/7862#issuecomment-574275404,1,['test'],['tests']
Testability,"This would also be slowing down some of the tests on laptops. Not sure about the CI, I don't see `hail.log` published as a CI artifact.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385266926:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385266926,2,"['log', 'test']","['log', 'tests']"
Testability,"Though I may instead modify the test first, will update here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3785#issuecomment-399807879:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/issues/3785#issuecomment-399807879,1,['test'],['test']
Testability,"Though running: `pprint(dict(os.environ.items()))`, yielded:. ```; {'CLICOLOR': '1',; 'GIT_PAGER': 'cat',; 'HOME': '/root',; 'INVOCATION_ID': '0faec80a970f4cf29ce69112519fe641',; 'JOURNAL_STREAM': '8:38888',; 'JPY_PARENT_PID': '5858',; 'LANG': 'en_US.UTF-8',; 'LOGNAME': 'root',; 'MPLBACKEND': 'module://ipykernel.pylab.backend_inline',; 'PAGER': 'cat',; 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',; 'SHELL': '/bin/sh',; 'SPARKMONITOR_KERNEL_PORT': '38853',; 'TERM': 'xterm-color',; 'USER': 'root'}; ```. which does not include the environment variable you added saying to use the new thing, though that's clearly present in `init_notebook.py`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7087#issuecomment-532865823:261,LOG,LOGNAME,261,https://hail.is,https://github.com/hail-is/hail/pull/7087#issuecomment-532865823,1,['LOG'],['LOGNAME']
Testability,"Thought a bit more about our conversation. I think it would be nice, in general, to not make the local user manually create the root path secret, and it also seems better to ensure they have the necessary gcloud permissions. What do you think about. ```sh; /pipeline-secrets/pipeline-test-0-1--hail-is.key:; kubectl get secret pipeline-test-0-1--hail-is-service-account-key -o json | jq -r '.[""data""][""pipeline-test-0-1--hail-is.key""]' > $@; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479586435:284,test,test-,284,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479586435,3,['test'],['test-']
Testability,"Tim, . This actually isn't bad. I took a stab at the aggregators, and in the case of those that need InitOps and SeqOps, used the existing AggSignature `toPhysical` instance method, which seems to do about the right thing, with minor modification. Also caught some Inference failures! Still have one more to fix, then check over any missing nodes (RunAgg is missing, have a placeholder comment for that, which I'll fill in now.). Only 1 test failing in IRSuite! That is ArrayFold2, which is just a bug we didn't catch before, and has nothing to do with new nodes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7959#issuecomment-579992599:437,test,test,437,https://hail.is,https://github.com/hail-is/hail/pull/7959#issuecomment-579992599,1,['test'],['test']
Testability,"Tim, I left the integration tests for now. I propose if you want them out, that we leave 2 cases for each of the type-combinations, so that we can inductively prove that our code can infer the correct unified type across nested IR (without the Ref shortcut)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6990#issuecomment-530868509:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/6990#issuecomment-530868509,1,['test'],['tests']
Testability,"Tim, I've added one of the suggested interfaces. To use `protected var _pType2` instead I believe we need to have InferPType extend `IR` inside of IR.scala, e.g `object InferPType extend IR`, by requirement of sealed traits. Anything else you want? Happy to add additional tests, or to move on to the next pType sub-project.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6594#issuecomment-515061792:273,test,tests,273,https://hail.is,https://github.com/hail-is/hail/pull/6594#issuecomment-515061792,1,['test'],['tests']
Testability,"Tim, bug in the test fixed...but I'm not entirely clear why it should have caused an issue yet. In PBaseStruct.copyFromType, I was calling srcFieldType.storeShallowAtOffset instead of dstFieldType.storeShallowAtOffset, in a case where srcFieldType was +PCArray and dstFieldType was PCArray, aka:. ```scala; srcFieldType: +PCArray[+PInt32], dstFieldType: PCArray[PInt32]; ```. Where the invocation is:. ```scala; srcFieldType.storeShallowAtOffset(; this.fieldOffset(dstStructAddress, dstField.index),; dstFieldType.copyFromType(...); ```. The storeShallowAtOffset function on PCArray is stateless and identical between required and non-required PCArray instantiations:. ```scala; def storeShallowAtOffset(dstAddress: Code[Long], valueAddress: Code[Long]): Code[Unit] =; Region.storeAddress(dstAddress, valueAddress); ```. I don't have a clear idea why this issue occurred. Also, clearly not easily triggered, required PStruct(""bar"" -> PArray(PInt32(true),false) dest and PStruct(""bar"" -> PArray(PInt32(true),true) source, having the ""bar"" field be a primitive wouldn't do it (we had those tests)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958#issuecomment-578204878:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/7958#issuecomment-578204878,2,['test'],"['test', 'tests']"
Testability,"Tim, once the remove-region pr/branch is merged, this is ready to look at, all tests pass (there will be a rebase needed, likely)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-575915606:79,test,tests,79,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-575915606,1,['test'],['tests']
Testability,"Tim, the only ones I've found are on copyFromType; I made a note in a previous PR (the remove region PR I believe) about potentially removing those assertions (where cast follows). Since this is already a large PR, I propose I PR their removal separately. What do you think",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-576366860:148,assert,assertions,148,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-576366860,1,['assert'],['assertions']
Testability,"Tim, would you have any recommendations?. ```sh; Gradle suite > Gradle test > is.hail.expr.ir.IRSuite.regressionTestUnifyBug FAILED; scala.MatchError: +Void (of class is.hail.expr.types.physical.PVoid$); at is.hail.expr.types.physical.PType.setRequired(PType.scala:206); at is.hail.expr.ir.InferPType$.apply(InferPType.scala:209); at is.hail.expr.ir.IR$class.inferSetPType(IR.scala:33); at is.hail.expr.ir.ArrayMap.inferSetPType(IR.scala:232); at is.hail.expr.ir.InferPType$$anonfun$apply$8.apply(InferPType.scala:359); at is.hail.expr.ir.InferPType$$anonfun$apply$8.apply(InferPType.scala:358); ```. This occurs because the IR is the following:. ```sh; ; //a; Literal(array<interval<locus<GRCh37>>>,WrappedArray([20:10277621-20:11898992))); // name; __iruid_11; //body; ApplySpecial(Interval,ArrayBuffer(MakeStruct(ArrayBuffer((locus,ApplySpecial(start,ArrayBuffer(Ref(__iruid_11,interval<locus<GRCh37>>)))))), MakeStruct(ArrayBuffer((locus,ApplySpecial(end,ArrayBuffer(Ref(__iruid_11,interval<locus<GRCh37>>)))))), True(), False())); ```. So I set this IR in the match to return PVoid(). However, in ArrayMap there is a requiredeness setter (which is inspired/copied from InferType's corresponding match:. ```scala; coerce[PStreamable](a.pType2).copyStreamable(body.pType2.setRequired(false)); ```. Which causes a nonsensical operation on PVoid, which is required: true (override final val). As an aside, ApplySpecial seems to allow operations on non-identical types, which would require algebraic types, rather than a singular: any time the types of its`Seq[IR]`'s are different. I have similar issues with other array operations, which want nodes that we currently don't support, including aggregator nodes. Note that I am only calling inferSetPType in Compile (immediately after optimization pass).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6594#issuecomment-512957123:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/6594#issuecomment-512957123,1,['test'],['test']
Testability,"Tim,. Overall, the code looks great! I think I read through all the code except the PLINK and BGEN parsers themselves. I'm going to stop here and let you address the current comments before I make another pass. Couple of things:; - You need to rebase and the tests are failing. If there are big files involved, let's talk about that.; - You should write `importbgen` and `importplink` commands (and rename `import` `importvcf`). The reason for the different names is that I think each one will have options specific to the format (e.g. choice of VCF parser).; - A lot of comments I made at one point apply to lots of placing in the code (e.g. `: Unit =`, braces around a single statement, don't use Java file IO). When you make a fix (bug fix, style improvement, whatever), it is a good mental habit to think about other places in the code that might have the same problem. Applied consistently, this will lead to massive improvements in code quality over time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/72#issuecomment-158671102:259,test,tests,259,https://hail.is,https://github.com/hail-is/hail/pull/72#issuecomment-158671102,1,['test'],['tests']
Testability,"Timing on laptop of read, method, count:. count(genotypes=True): 4.17 s; count: 1.84s; linreg: 7.1 s; score: 51 s; lrt: 92 s; wald: 93 s; firth: 300 s. ```; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').count(genotypes=True); %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').count(genotypes=True) # 4.17 s; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').count() # 1.84 s. %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').linreg('sa.pheno', ['sa.cov1', 'sa.cov2']).count() # 7.1 s; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').logreg('score', 'sa.pheno', ['sa.cov1', 'sa.cov2']).count() # 51 s; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').logreg('lrt', 'sa.pheno', ['sa.cov1', 'sa.cov2']).count() # 92 s; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').logreg('wald', 'sa.pheno', ['sa.cov1', 'sa.cov2']).count() # 93 s; %time hc.read('/Users/jbloom/data/profile225.prelogreg.vds').logreg('firth', 'sa.pheno', ['sa.cov1', 'sa.cov2']).count() # 300 s; ```. ![logreg performance](https://cloud.githubusercontent.com/assets/3201642/23095382/18e310de-f5d7-11e6-9b0b-909b6107286b.png)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279199507:595,log,logreg,595,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279199507,5,['log'],['logreg']
Testability,"Timing on profile.vds (1KG, 2535 samples, 25956 variants) using three covariates (isFemale, PC1, PC2) with variant QC and export is 60-63s for wald and lrt, 10-12s for score, on one core locally (with ~2s for read). Wald example:. ```; ~/hail/build/install/hail/bin/hail \; --master local[1] \; read -i ~/data/profile.vds \; variantqc \; annotatesamples table -i ~/data/profile.ped -e IND_ID -t 'PC1: Double, PC2: Double' -r sa.pc \; annotatesamples fam -i ~/data/profile.fam \; logreg -y sa.fam.isCase -c sa.fam.isFemale,sa.pc.PC1,sa.pc.PC2 -t wald \; printschema \; exportvariants -c 'variant = v, beta = va.logreg.wald.beta, se = va.logreg.wald.se, zstat = va.logreg.wald.zstat, pval = va.logreg.wald.pval, nIter = va.logreg.fit.nIter, converged = va.logreg.fit.converged, exploded = va.logreg.fit.exploded, nNotCalled = va.qc.nNotCalled, nHomRef = va.qc.nHomRef, nHet = va.qc.nHet, nHomVar = va.qc.nHomVar' -o ~/data/profileHail/profile.sex.pc1.pc2.wald.tsv; ```. ```; hail: info: timing:; read: 1.922s; variantqc: 34.869ms; annotatesamples table: 317.153ms; annotatesamples fam: 60.988ms; logreg: 783.904ms; printschema: 2.034ms; exportvariants: 1m2.3s; ```. By comparison, EPACTS on 1 core of interactive node took:. ```; b.wald; real 10m45.718s; user 6m39.888s. b.lrt; real 11m59.180s; user 5m23.047s. b.score; real 5m0.636s; user 0m28.382s. b.firth; real 25m17.602s; user 19m27.214s. q.lm; real 5m17.675s; user 2m18.712s; ```. More timing info and convergence analysis to come.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-239628493:479,log,logreg,479,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-239628493,9,['log'],['logreg']
Testability,Timing:. ```; 15543 | test_hail_java | Complete | Success 🎉 (0) | 13 minutes | log; 15544 | test_hail_java_cpp_codegen | Complete | Success 🎉 (0) | 12 minutes | log; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6194#issuecomment-496358797:79,log,log,79,https://hail.is,https://github.com/hail-is/hail/pull/6194#issuecomment-496358797,2,['log'],['log']
Testability,To run this without running tests: `mvn -Dmaven.test.skip=true package assembly:single`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5906#issuecomment-484685379:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/5906#issuecomment-484685379,2,['test'],"['test', 'tests']"
Testability,"To test locally, `./gradlew --daemon doctest`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3620#issuecomment-390842250:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/3620#issuecomment-390842250,1,['test'],['test']
Testability,"Total minutes for test_hail_python went up to 162 compared to last deploy at 152. Total minutes for local was 294 compared to last deploy at 312. No change in service backend runtime (I think service backend is bottlenecked on test parallelism in default and non-preemptible cores in PR, so maybe a less interesting number). Maybe the doubling of the block size is having a negative effect? Anyway, let's benchmark on something more realistic than the Hail tests and assess.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1536802594:227,test,test,227,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1536802594,3,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,Totally unrelated: what ends up in `/home/cotton/hail-20200407-1502-0.2.36-75a0f869d72d.log`? What happens to the usual Spark/Hail master logs?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8485#issuecomment-610590716:88,log,log,88,https://hail.is,https://github.com/hail-is/hail/pull/8485#issuecomment-610590716,2,['log'],"['log', 'logs']"
Testability,"Trying to cook up a python test that wouldn't pass without this, surprisingly annoying.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10695#issuecomment-885859375:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/10695#issuecomment-885859375,1,['test'],['test']
Testability,"Turns out I needed to pull in the transitive breeze dependencies; without these, the Python tests failed while the Scala tests passed. I've re-run the tests on Spark 3 now; let me know if there are any other changes you'd like to see. Unfortunately, there's a small bug I saw on the Spark 3 MLLib side; I'll make sure this gets addressed ASAP: https://issues.apache.org/jira/browse/SPARK-33043",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701717243:92,test,tests,92,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701717243,3,['test'],['tests']
Testability,"Two different tests: first running N linregs as separate aggregations, and the second running N linregs inside an array_agg. I suspect you're right that the first one is running into some kind of method size limit in the jit. Time 1 is master, Time 2 is this branch. ```python; @benchmark; def table_aggregate_linregN():; ht = hl.read_table(resource('many_ints_table.ht')); ht.aggregate(hl.tuple([hl.agg.linreg(ht[f'i{i%5}'],; [ht[f'i{(i+1)%5}'], ht[f'i{(i+2)%5}']]); for i in range(N)])); ```. ```quote; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_linreg20 101.2% 11.622 11.765; table_aggregate_linreg21 98.0% 11.964 11.730; table_aggregate_linreg22 22.2% 54.272 12.068; table_aggregate_linreg23 99.9% 54.989 54.939; table_aggregate_linreg24 101.7% 54.753 55.661; table_aggregate_linreg25 102.7% 55.902 57.422; ----------------------; Geometric mean: 78.3%; Simple mean: 87.6%; Median: 100.6%; ```. ```python; @benchmark; def table_aggregate_linregN():; ht = hl.read_table(resource('many_ints_table.ht')); ht.aggregate(hl.agg.array_agg(lambda i: hl.agg.linreg(ht.i0 + i, [ht.i1, ht.i2]),; hl.range(N))); ```. ```quote; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_linreg22 79.1% 10.609 8.389; table_aggregate_linreg23 79.0% 11.006 8.695; table_aggregate_linreg21 78.6% 10.559 8.295; table_aggregate_linreg25 77.2% 11.579 8.937; table_aggregate_linreg24 76.3% 11.520 8.793; table_aggregate_linreg20 75.7% 10.792 8.173; ----------------------; Geometric mean: 77.6%; Simple mean: 77.6%; Median: 77.9%; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-540058423:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-540058423,3,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,Two high-level comments:; - Here is the default documentation:. https://ci.hail.is/repository/download/HailSourceCode_HailCi/846:id/docs/index.html#exportaggregate. Some documentation of the output format and maybe and example or two (with and without `--by-matrix`) would be awesome.; - We need at least some testing. I think a simple aggregation on a small file that you verify by hand would be sufficient. I'll look over the code and let you know if I have additional comments.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/837#issuecomment-249244766:310,test,testing,310,https://hail.is,https://github.com/hail-is/hail/pull/837#issuecomment-249244766,1,['test'],['testing']
Testability,"UI won't let me respond about the tests comment. I removed the api1.tests.py file, but left the api1 code because it's still depended on and we should extract that separately.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2816#issuecomment-360953858:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/2816#issuecomment-360953858,2,['test'],['tests']
Testability,"Ugh, discovered a problem with race conditions surrounding the `test.cpp` build path. Can cause failures with a naked `make -jN test` on a clean directory. Fixing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464188754:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464188754,2,['test'],['test']
Testability,"Ugh, sorry, this has been failing unreliable CI/services tests. I'll keep bumping until it goes in",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8265#issuecomment-604460146:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/8265#issuecomment-604460146,1,['test'],['tests']
Testability,Unassigning until tests pass.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13450#issuecomment-1681039196:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/13450#issuecomment-1681039196,1,['test'],['tests']
Testability,"Unfortunately I'm not sure how to get github to show `flow.py` as moved and not deleted/recreated. But here's the diff between the two `flow.py`s:. ```diff; diff --git a/auth/auth/flow.py b/auth/auth/flow.py; index 6f09ef18a2..4486e556e0 100644; --- a/auth/auth/flow.py; +++ b/auth/auth/flow.py; @@ -1,22 +1,31 @@; import abc; +import base64; +from cryptography import x509; +from cryptography.hazmat.backends import default_backend; +from cryptography.hazmat.primitives import serialization; import json; +import logging; import urllib.parse; -from typing import ClassVar, List; +from typing import Any, Dict, List, Optional, TypedDict; ; import aiohttp.web; import google.auth.transport.requests; import google.oauth2.id_token; import google_auth_oauthlib.flow; +import jwt; import msal; ; -from gear.cloud_config import get_global_config; +from hailtop import httpx; +from hailtop.utils import retry_transient_errors; +; +log = logging.getLogger('auth'); ; ; class FlowResult:; - def __init__(self, login_id: str, email: str, token: dict):; + def __init__(self, login_id: str, email: str, refresh_token: str):; self.login_id = login_id; self.email = email; - self.token = token; + self.refresh_token = refresh_token; ; ; class Flow(abc.ABC):; @@ -35,9 +44,24 @@ class Flow(abc.ABC):; """"""Concludes the OAuth2 flow by returning the user's identity and credentials.""""""; raise NotImplementedError; ; + @staticmethod; + @abc.abstractmethod; + def perform_installed_app_login_flow(oauth2_client: Dict[str, Any]) -> Dict[str, Any]:; + """"""Performs an OAuth2 flow for credentials installed on the user's machine.""""""; + raise NotImplementedError; +; + @staticmethod; + @abc.abstractmethod; + async def get_identity_uid_from_access_token(session: httpx.ClientSession, access_token: str, *, oauth2_client: dict) -> Optional[str]:; + """"""; + Validate a user-provided access token. If the token is valid, return the identity; + to which it belongs. If it is not valid, return None.; + """"""; + raise NotImplementedE",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329:514,log,logging,514,https://hail.is,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329,3,['log'],"['log', 'logging']"
Testability,"Unfortunately, running doctests locally has always been a bit of a mess. I don't think any of us ever run them locally, we just let CI handle it. If you want to sort out local doctests I'd suggest starting a thread in zulip asking for help. But it looks like your latest commit has passed all tests in CI. Just dismiss my review when you're ready for another look. I think this is looking ready to merge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1939037552:293,test,tests,293,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1939037552,1,['test'],['tests']
Testability,"Unfortunately, the CI results are private to protect against inadvertent secret leaks. It looks like the docs are failing. The `Locus` should be `hl.Locus`. I suspect the test will pass with that change. ```; =================================== FAILURES ===================================; __________ [doctest] hail.expr.functions.cochran_mantel_haenszel_test __________; 834 Examples; 835 --------; 836 >>> a = [56, 61, 73, 71]; 837 >>> b = [69, 257, 65, 48]; 838 >>> c = [40, 57, 71, 55]; 839 >>> d = [77, 301, 79, 48]; 840 >>> hl.eval(hl.cochran_mantel_haenszel_test(a, b, c, d)); 841 Struct(test_statistic=5.0496881823306765, p_value=0.024630370456863417); 842 ; 843 >>> mt = ds.filter_rows(mt.locus == Locus(20, 10633237)); UNEXPECTED EXCEPTION: NameError(""name 'Locus' is not defined""); Traceback (most recent call last):; File ""/usr/lib/python3.9/doctest.py"", line 1334, in __run; exec(compile(example.source, filename, ""single"",; File ""<doctest hail.expr.functions.cochran_mantel_haenszel_test[5]>"", line 1, in <module>; NameError: name 'Locus' is not defined; /usr/local/lib/python3.9/dist-packages/hail/expr/functions.py:843: UnexpectedException; 835 --------; 836 >>> a = [56, 61, 73, 71]; 837 >>> b = [69, 257, 65, 48]; 838 >>> c = [40, 57, 71, 55]; 839 >>> d = [77, 301, 79, 48]; 840 >>> hl.eval(hl.cochran_mantel_haenszel_test(a, b, c, d)); 841 Struct(test_statistic=5.0496881823306765, p_value=0.024630370456863417); 842 ; 843 >>> mt = ds.filter_rows(mt.locus == Locus(20, 10633237)); 844 >>> mt.count_rows(); Expected:; 1; Got:; 9. /usr/local/lib/python3.9/dist-packages/hail/expr/functions.py:844: DocTestFailure; 845 1; 846 >>> a, b, c, d = mt.aggregate_entries(; 847 ... hl.tuple([; 848 ... hl.array([hl.agg.count_where(mt.GT.is_non_ref() & mt.pheno.is_case & mt.pheno.is_female), hl.agg.count_where(mt.GT.is_non_ref() & mt.pheno.is_case & ~mt.pheno.is_female)]),; 849 ... hl.array([hl.agg.count_where(mt.GT.is_non_ref() & ~mt.pheno.is_case & mt.pheno.is_female), hl.agg.count_wher",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1961918395:171,test,test,171,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1961918395,1,['test'],['test']
Testability,"Unfortunately, the logs aren't helpful as they only show completed requests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1564781182:19,log,logs,19,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1564781182,1,['log'],['logs']
Testability,Up to 555 tests passing against local backend with this.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9299#issuecomment-677696154:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/9299#issuecomment-677696154,1,['test'],['tests']
Testability,"Up until this piece, nothing should have changed behavior in production. This piece enables the new path, so we might want to be more careful about merging it. Hopefully it will fail tests, because I know at least prev_nonnull is currently not working, and there may be other bugs left. If it somehow passes, we should probably get more complete tests before merging.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6535#issuecomment-508248281:183,test,tests,183,https://hail.is,https://github.com/hail-is/hail/pull/6535#issuecomment-508248281,2,['test'],['tests']
Testability,Update: Tested: https://github.com/broadinstitute/hail/commit/736b61a3b4f576963dc78c913a6596adeb7cc65e. Jon is working on implicit option manipulation. Tim is working on INFO support and annotation infrastructure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/16#issuecomment-158250176:8,Test,Tested,8,https://hail.is,https://github.com/hail-is/hail/issues/16#issuecomment-158250176,1,['Test'],['Tested']
Testability,"Update: when I tested with chr1 with 32355811 variants at local computer using singularity instead of docker with 200g spark memory, it also failed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1897619805:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1897619805,1,['test'],['tested']
Testability,"Updated queries to return job groups that do not have an ancestor or self job group that has been cancelled. This logic now mirrors that of `delete_prev_cancelled_job_group_cancellable_resources_records`, only in anti-join form.; Previous query returned those job groups that do not have a cancellation record for itself or a descendent job group.; SQL is hard.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14645#issuecomment-2269734587:114,log,logic,114,https://hail.is,https://github.com/hail-is/hail/pull/14645#issuecomment-2269734587,1,['log'],['logic']
Testability,"Updated runtime for LRT is about 50s:. ```; ~/hail/build/install/hail/bin/hail \; --master local[1] \; read -i ~/data/profile.vds \; annotatesamples table -i ~/data/profile.ped -e IND_ID -t 'PC1: Double, PC2: Double' -r sa.pc \; annotatesamples fam -i ~/data/profile.fam \; logreg -y sa.fam.isCase -c sa.fam.isFemale,sa.pc.PC1,sa.pc.PC2 -t lrt \; exportvariants -c 'variant = v, beta = va.logreg.lrt.beta, chi2 = va.logreg.lrt.chi2, pval = va.logreg.lrt.pval, nIter = va.logreg.fit.nIter, converged = va.logreg.fit.converged, exploded = va.logreg.fit.exploded' -o ~/data/profileHail/temp.profile.sex.pc1.pc2.lrt.tsv; ```. ```; read: 2.193s; annotatesamples table: 243.817ms; annotatesamples fam: 22.080ms; logreg: 367.098ms; exportvariants: 50.473s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-242580502:274,log,logreg,274,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-242580502,8,['log'],['logreg']
Testability,"Updated the first comment to be the merge commit comment. Preserving my original comment here:. The output is garbage, but at least it has useful information. Output for tests now look like this:. ```; io/test/test_batch.py::Test::test_batch ; -------------------------------- live log setup --------------------------------; 2020-01-29T21:03:40 INFO test.conftest conftest.py:8:log_before_after starting test; -------------------------------- live log call ---------------------------------; 2020-01-29T21:03:40 INFO batch_client.aioclient aioclient.py:481:submit created batch 159; 2020-01-29T21:03:40 INFO batch_client.aioclient aioclient.py:517:submit closed batch 159; PASSED; ------------------------------ live log teardown -------------------------------; 2020-01-29T21:04:08 INFO test.conftest conftest.py:10:log_before_after ending test; ```. @danking this backs out your batch client warning log change. It couldn't have done what you want, since it set the batch client log to WARN, which was only used to make info logs, and override the root logger which can't be what you want. Separately, we should however give users advice about how to set the logger properly for their scripts to get the appropriate log messages (possibly with a help function).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7990#issuecomment-579974984:170,test,tests,170,https://hail.is,https://github.com/hail-is/hail/pull/7990#issuecomment-579974984,16,"['Test', 'log', 'test']","['Test', 'log', 'logger', 'logs', 'test', 'tests']"
Testability,"Updates needed for the following:. ```sh; > Task :compileTestScala; Pruning sources from previous analysis, due to incompatible CompileSetup.; /io/repo/hail/src/test/scala/is/hail/annotations/ScalaToRegionValue.scala:9: type mismatch;; found : is.hail.expr.types.physical.PType; required: is.hail.expr.types.virtual.Type; rvb.addAnnotation(t, a); ^; /io/repo/hail/src/test/scala/is/hail/annotations/StagedRegionValueSuite.scala:487: type mismatch;; found : is.hail.expr.types.physical.PType; required: is.hail.expr.types.physical.PBaseStruct; SafeRow(t, region, copyOff); ^; /io/repo/hail/src/test/scala/is/hail/expr/ir/Aggregators2Suite.scala:46: type mismatch;; found : is.hail.expr.types.virtual.TStruct; required: is.hail.expr.types.physical.PType; val argOff = ScalaToRegionValue(region, argT, argVs); ^; /io/repo/hail/src/test/scala/is/hail/expr/ir/Aggregators2Suite.scala:177: type mismatch;; found : is.hail.expr.types.virtual.Type; required: is.hail.expr.types.physical.PType; val voff = ScalaToRegionValue(region, stream.typ, lit); ^; /io/repo/hail/src/test/scala/is/hail/nativecode/RegionValueIteratorSuite.scala:73: type mismatch;; found : is.hail.expr.types.physical.PTuple; required: is.hail.expr.types.virtual.Type; rvb.addAnnotation(t, r); ^; /io/repo/hail/src/test/scala/is/hail/nativecode/RegionValueIteratorSuite.scala:133: type mismatch;; found : is.hail.expr.types.physical.PTuple; required: is.hail.expr.types.virtual.Type; Error occurred in an application involving default arguments.; rvb.addAnnotation(t, r); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6711#issuecomment-515048174:161,test,test,161,https://hail.is,https://github.com/hail-is/hail/pull/6711#issuecomment-515048174,6,['test'],['test']
Testability,"Upgrading is a good instinct to have. I appreciate this PR. The story here is long, complex, and mundane. I've tried to include everything below. Python 3.6, (should) only appear in the linting image for python 3.6. The `hail-ubuntu` image explicitly installs Python 3.7. I'm happy to drop linting for Python 3.6 from build.yaml if compilers team is OK with that (ask Tim). We are already using Ubuntu 20.04 for our services and tests. See below for details, but `hail-ubuntu` is based on 20.04. We explicitly install JDK 8 in the `base` image. ---. This PR doesn't change the hail-ubuntu image which is the basis for nearly all our images. `DOCKER_ROOT_IMAGE` seems to have been introduced [here](https://github.com/hail-is/hail/pull/9660). That's my bad for not flagging in the review that this isn't actually a ""root image"". `DOCKER_ROOT_IMAGE` is just some Linux image with the standard utils. It was introduced as a distinct global concept when Docker Hub began enforcing rate limits (so we needed all our test images to live in GCR). If you look at the occurrences of `DOCKER_ROOT_IMAGE` or `docker_root_image` you'll find it's almost exclusively used in the tests except for one occurrence in `build-batch-worker-image-startup-gcp.sh`. We could just remove that line. That line is an attempt to keep a relatively recent version of the ubuntu image cached on the worker VM so that we can save some time when pulling the worker Docker image. In practice, the ubuntu image is extraordinarily tiny and quickly becomes out of date (because we rarely rebuild the VM). hail-ubuntu uses a timestamped ubuntu 20.04 tag: `ubuntu:focal-20201106`. I did this because we kept getting screwed by new ubuntu images getting released which were incompatible with us. We would only find out later when we changed the hail-ubuntu Dockerfile and triggered a refetch of the latest image at the `ubuntu:18.04` tag which included the breaking changes. You're correct that this is technical debt of ours. DOCKER_ROOT_I",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11046#issuecomment-965578805:429,test,tests,429,https://hail.is,https://github.com/hail-is/hail/pull/11046#issuecomment-965578805,2,['test'],"['test', 'tests']"
Testability,Use os.environ in the test (and remember to set it back to its old value it afterward),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583459628:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583459628,1,['test'],['test']
Testability,"Used this to test. ```python; import asyncio. from hailtop.aiocloud.aiogoogle import GoogleComputeClient. async def main():; params = {'filter': f'(labels.namespace = default)'}; async with GoogleComputeClient('hail-vdc') as client:; for zone in ('a', 'b', 'c', 'f'):; async for disk in client.list(f'/zones/us-central1-{zone}/disks', params=params):; pass. asyncio.run(main()); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14613#issuecomment-2226358280:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/issues/14613#issuecomment-2226358280,1,['test'],['test']
Testability,"Using the Master branch version and Spark 2.2.1, I am getting the same error. Is Spark 2.2,1 supported? Any suggestions?. ```; /gradlew -Dspark.version=2.2.1 shadowJar archiveZip; fdf130b2f5d4. FAILURE: Build failed with an exception. * Where:; Build file '/restricted/projectnb/genpro/github/hail/build.gradle' line: 57. * What went wrong:; A problem occurred evaluating root project 'hail'.; > Unknown Spark version 2.2.1. Set breeze.version and py4j.version properties for Spark 2.2.1. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 6.187 secs; ```; ```; env|grep SPARK; SPARK_HOME=/share/pkg/spark/2.2.1/install; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3001#issuecomment-375939652:596,log,log,596,https://hail.is,https://github.com/hail-is/hail/issues/3001#issuecomment-375939652,1,['log'],['log']
Testability,VEP test:; https://ci.hail.is/batches/8126290,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14286#issuecomment-1941819451:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/14286#issuecomment-1941819451,1,['test'],['test']
Testability,"VEP testing. I think to start we should:; - get a few hundred random variants, half genome-wide and half exome (human and mouse) in a handful of partitions,; - VEP them with the current master (81, 85, 37, 38, m38) and save that in a bucket and/or test resources,; - write a script to spin up Dataproc clusters and re-VEP and compare. Same for Nirvana. @jbloom22 Can you do this? I'm going to assign the VEP/Nirvana test PR to you. This is a good first step.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3913#issuecomment-409089478:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/3913#issuecomment-409089478,3,['test'],"['test', 'testing']"
Testability,Vaguely feel like we should dev deploy and verify login still works,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11457#issuecomment-1057652421:50,log,login,50,https://hail.is,https://github.com/hail-is/hail/pull/11457#issuecomment-1057652421,1,['log'],['login']
Testability,"Various changes:. 1. Locking is now done with a carefully restricted use of flock(), and the makefiles use; perl's rename command to get atomic rename, so they don't need to take locks. 2. The makefile conforms to the customary use-whatever-is-on-$PATH, with the slight wrinkle that; the full pathnames of the commands used will be visible in the build log - so if someone; picks up something weird we'll at least see it. 3. There is a cache of NativeModule objects, so that we won't do enormous numbers of; calls to dlopen/dlclose. This may help in shuffle code, which creates a new PackDecoder; for each RV. 4. The hash function on (options, source) is now beefed up to cope with having only a; few distinct values of options; and is modified with the output of ""$(CXX) --version"",; so that when you upgrade your compiler, you won't get hits on modules compiled with the old; compiler. 5. build.gradle has a new target ""nativeLibPrebuilt"", for updating the prebuilt/lib/linux-x86-64; or prebuilt/lib/darwin. 6. The committed prebuilt libraries are built thus:. darwin - On my MacOS laptop, with the default (clang-based) compiler, -march=sandybridge; From my reading, I believe this should be compatible withall MacBook Pro's; released since 2011, and all versions of MacOS since 10.9 (the first to use; libc++ rather than libstdc++ as the default C++ library) - we're now at 10.13,; with 10.14 arriving some time in the fall. linux-x86-64 - Built on my home desktop running Ubuntu-16.04 LTS, and g++-5.0.4, with; -fabi-version=9. In theory this should work with all systems based on g++5.x and; later. I made some effort to move std::string out of the interfaces between prebuilt; and dynamic code, which gives it some chance of working on systems based on; g++-4.x, but haven't tested that. I'm planning to fire up VM's either in cloud or under VirtualBox, to test this against Ubuntu-14.04,; Ubuntu-18.04, and the latest stable RHEL, which should cover most of the bases. In the interest of getti",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-413997863:353,log,log,353,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-413997863,1,['log'],['log']
Testability,"Verified that before #3510 was merged into master, if this PR had been added to master, it would have caught the issue. The stack trace directly fingers the EmitPackDecoder, which is exactly what one would hope to happen:. ```; FatalError: AssertionError: assertion failed: PackDecoder compilation should happen on master, but happened on worker. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 3 in stage 3.0 failed 1 times, most recent failure: Lost task 3.0 in stage 3.0 (TID 18, localhost, executor driver): java.lang.AssertionError: assertion failed: PackDecoder compilation should happen on master, but happened on worker; 	at scala.Predef$.assert(Predef.scala:170); 	at is.hail.asm4s.FunctionBuilder.result(FunctionBuilder.scala:291); 	at is.hail.io.EmitPackDecoder$.apply(RowStore.scala:637); 	at is.hail.io.PackCodecSpec.buildDecoder(RowStore.scala:110); 	at is.hail.HailContext$$anonfun$10.apply(HailContext.scala:550); 	at is.hail.HailContext$$anonfun$10.apply(HailContext.scala:546); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19.apply(ContextRDD.scala:282); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19.apply(ContextRDD.scala:282); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3521#issuecomment-387199916:240,Assert,AssertionError,240,https://hail.is,https://github.com/hail-is/hail/pull/3521#issuecomment-387199916,5,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Very cool! You're failing memory tests though since the tests run with the debug allocator,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10583#issuecomment-859758726:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/10583#issuecomment-859758726,2,['test'],['tests']
Testability,WTF - I'm getting this error in a PR - https://ci.hail.is/jobs/30344/log. also see this message at the bottom: . 2019-05-30 19:47:48 Hail: WARN: struct{idx: int32} has no field row_idx at <root>.<array>.end for value JInt(10),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6223#issuecomment-497480960:69,log,log,69,https://hail.is,https://github.com/hail-is/hail/issues/6223#issuecomment-497480960,1,['log'],['log']
Testability,Waiting for my test to run on all 3 backends to see that it fails. Then I'll revert and it should pass.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14750#issuecomment-2457966983:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/14750#issuecomment-2457966983,1,['test'],['test']
Testability,Want to benchmark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7060#issuecomment-535127711:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/7060#issuecomment-535127711,1,['benchmark'],['benchmark']
Testability,"Was getting assertion error when initializing a DB instance in cases where datasets are on only one cloud platform. Specifically with the panUKB Hail tables that are only on AWS and not on GCP, running `db = hl.experimental.DB(region='us', cloud='gcp')` would fail at the assertion to check cloud in `DatasetVersion.from_json()`. To fix, I just made `DatasetVersion.from_json()` return `None` when a version is not available on the specified cloud platform so that it can be filtered out in `Dataset.from_name_and_json()`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10360#issuecomment-825010405:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/10360#issuecomment-825010405,2,['assert'],['assertion']
Testability,Was tested with:. ```; #!/bin/bash. set -ex. ./build/install/hail/bin/hail importvcf -n 4 ~/sample.vcf \; splitmulti \; vep -r va --config ~/hail/vep.properties \; annotatevariants expr -c 'va.transcript_consequences = va.transcript_consequences.toSet' \; annotatevariants expr -c 'va.regulatory_feature_consequences = va.regulatory_feature_consequences.toSet' \; annotatevariants expr -c 'va.colocated_variants = va.colocated_variants.toSet' \; write -o ~/sample.vds. ./build/install/hail/bin/hail importvcf -n 4 ~/small.vcf \; splitmulti \; vep -r va --config ~/hail/vep.properties \; write -o ~/small.vds. ./build/install/hail/bin/hail importvcf -n 4 ~/sample.vcf \; splitmulti \; annotatevariants vds -r va -i ~/small.vds \; vep -r va --config ~/hail/vep.properties \; annotatevariants expr -c 'va.transcript_consequences = va.transcript_consequences.toSet' \; annotatevariants expr -c 'va.regulatory_feature_consequences = va.regulatory_feature_consequences.toSet' \; annotatevariants expr -c 'va.colocated_variants = va.colocated_variants.toSet' \; write -o ~/sample2.vds. ./build/install/hail/bin/hail read -i ~/sample.vds comparevds -i ~/sample2.vds; ```. where sample.vcf is test/resources/sample.vcf and small.vcf is the half of the sample.vcf variants.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/414#issuecomment-224702021:4,test,tested,4,https://hail.is,https://github.com/hail-is/hail/pull/414#issuecomment-224702021,2,['test'],"['test', 'tested']"
Testability,"We *should* be handling this error already - there's code that matches this exact message here: https://github.com/hail-is/hail/blob/8362afaefa8829e720f5affc9b482c2568e8299d/hail/src/main/scala/is/hail/services/NettyProxy.scala#L21-L31. Following the logic through, it looks like we retry this kind of exception indefinitely UNLESS the netty `Epoll` is not available...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12980#issuecomment-1545975559:251,log,logic,251,https://hail.is,https://github.com/hail-is/hail/issues/12980#issuecomment-1545975559,1,['log'],['logic']
Testability,"We added the list of test dependencies to the ""Running the tests"" subsection of [Getting Started](https://hail.is/docs/devel/index.html#GettingStarted) so I'm going to mark this as closed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-244471032:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-244471032,2,['test'],"['test', 'tests']"
Testability,We also need Python-side MatrixIR parse tests. I will add those in a separate PR (not that the corresponding work on the Scala side is done).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3896#issuecomment-403951998:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/3896#issuecomment-403951998,1,['test'],['tests']
Testability,We also saw this issue when the Grafana pod got restarted during a 30k test. This appears due to k8s being overwhelmed by the number of requests it is receiving. We saw request rates of 450 to 600 requests per second for almost an hour.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6546#issuecomment-509397240:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/issues/6546#issuecomment-509397240,1,['test'],['test']
Testability,We are disabling QoB tests in PRs for now until we can get a handle on this issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13351#issuecomment-1660674567:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/issues/13351#issuecomment-1660674567,1,['test'],['tests']
Testability,We are likewise unhappy with the age of the image. The alternative is installing/building enough Perl modules to make VEP work which has also proved challenging. Most recently some LibXML library was failing its own tests inside our relatively recent Ubuntu-based image. We're still evaluating various options. We would like to continue to support 95. We will probably also add 105 at some point. Unclear how long we should support 95.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12946#issuecomment-1543045199:216,test,tests,216,https://hail.is,https://github.com/hail-is/hail/issues/12946#issuecomment-1543045199,1,['test'],['tests']
Testability,We can also just do this without the rename and have azure explicitly recognize `ci-test`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11958#issuecomment-1168780767:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/11958#issuecomment-1168780767,1,['test'],['test']
Testability,We can't add it to CFLAGS because Hail expects it to be set to 1024. We use 256 in the tests to make the test cases easier to write.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-465246727:87,test,tests,87,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-465246727,2,['test'],"['test', 'tests']"
Testability,"We don't automate VEP tests as part of our deployment, though -- could I ask you to test the fix later today when it goes in?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3790#issuecomment-400290957:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/issues/3790#issuecomment-400290957,2,['test'],"['test', 'tests']"
Testability,"We don't really have the infrastructure to create arbitrary values in c++ right (without translating into potentially large trees of IR). Since they already exist as Scala annotations in the IR, I decided that it was easier to serialize them in scala and decode them in the function rather than try to create logic and encode them in the function itself (we can't create them at compile-time and pass around naked hail-values, since they're region-backed and the functions can get serialized and shipped to workers, which don't have access to those). I put the decoded literals on a SparkFunctionContext in the hopes that it will be easier to plug in another literal broadcaster if/when the `Literal` IR no longer holds a Scala annotation, but in the meantime this was a reasonably straightforward way to get them into the c++ Emit code. I think we may not need to serialize literals like this for the `cxx.Compile.apply` methods, since they should all execute on the master node, but we don't currently enforce that so I was serializing there just to be safe. The alternative is to enforce execution of these functions on the master node, which I don't see a huge problem with off the top of my head? @cseed do you have feelings about this? All the distributed computation is going to go through `CollectDistributedArray` and friends, which should create their own entrypoints.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5617#issuecomment-474522874:309,log,logic,309,https://hail.is,https://github.com/hail-is/hail/pull/5617#issuecomment-474522874,1,['log'],['logic']
Testability,We don't test apiserver? `hail-ci-build.sh` runs `make test` which invokes `hail/apiserver/test-apiserver.sh` which starts an apiserver and hits it with a couple of Python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5893#issuecomment-483923112:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/5893#issuecomment-483923112,4,['test'],"['test', 'test-apiserver', 'tests']"
Testability,"We end up getting exceptions like this, happens every time we get to the end of the file:; ```; RuntimeException: error reading tabix-indexed file src/test/resources/gvcfs/recoding/HG00187.hg38.g.vcf.gz: i=0, curOff=2469855232, expected=2468020224; ```; These virtual offsets correspond to these pairs of absolute|decompressed offset; ```; 2469855232 => 37687|0; 2468020224 => 37659|0; ```; Looking at these, they differ by 28, which is the size of the empty bgzip block at the end. And so when we refresh: we go too far.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676615090:151,test,test,151,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676615090,1,['test'],['test']
Testability,"We get a good number of cache hits, which definitely help, but we still compile so many classes. gs://cdv-hail/logs/hail-joint-caller-oops-20191115-1801.log.xz",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7528#issuecomment-554517326:111,log,logs,111,https://hail.is,https://github.com/hail-is/hail/pull/7528#issuecomment-554517326,2,['log'],"['log', 'logs']"
Testability,"We have a CI problem leading to random erroneous test failures, and the system isn't designed to run the tests twice for a single commit. Can you add a new commit to the PR with `git commit -m ""bump"" --allow-empty`?; Sorry!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6937#issuecomment-524832178:49,test,test,49,https://hail.is,https://github.com/hail-is/hail/pull/6937#issuecomment-524832178,2,['test'],"['test', 'tests']"
Testability,"We have a difference of opinion about the risks involved in using whatever; compiler happens to show up as $(CXX); to try to compile arbitrarily large auto-generated C++ files, and maybe; about what happens when that fails; and gives an error message about something in the middle of 12000 lines of; code that bears no obvious relationship; to what the user is doing. Or when that compiler takes 15 minutes to; compile it. It's the C++ equivalent of; the JVM ""no, that's just too much bytecode"". Or worst of all, it compiles; it but the code gives the wrong answers; because that particular compiler has a bug, and we never tested the; combination of our codegen with *that*; compiler/version. A couple of years ago I was seeing g++ take 40-60 seconds to compile; something that clang did in 2 seconds; (fairly heavily templated code generated for an SQL query, so very much in; the same ballpark as parts of Hail),; which contributes to my concern about this, especially on linux where g++; is the default. So in the long run I expect we'll ship a compiler, or specify a compiler.; But that becomes a problem in itself; if we want the shipped compiler to work on a variety of OS'es. When I did; that before it was all Ubuntu-14.04; and Ubuntu-16.04, and it was manageable to build it for two platforms. On Thu, Aug 2, 2018 at 9:59 PM cseed <notifications@github.com> wrote:. > *@cseed* commented on this pull request.; > ------------------------------; >; > In src/main/c/NativeModule.cpp; > <https://github.com/hail-is/hail/pull/3973#discussion_r207422997>:; >; > > +}; > +; > +std::string strip_suffix(const std::string& s, const char* suffix) {; > + size_t len = s.length();; > + size_t n = strlen(suffix);; > + if ((n > len) || (strncmp(&s[len-n], suffix, n) != 0)) return s;; > + return std::string(s, 0, len-n);; > +}; > +; > +std::string get_cxx_name() {; > + char* p = ::getenv(""CXX"");; > + if (p) return std::string(p);; > + // We prefer clang because it has faster compile; > + auto s = run",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410127709:624,test,tested,624,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410127709,1,['test'],['tested']
Testability,We have all of 1KG as vcfs in the `gs://hail-1kg/raw` bucket:; ```; (hail) 1 dking@wmb16-359 # gsutil du -sh gs://hail-1kg/raw/ALL.chr\*raw.HC.vcf.bgz; 260.94 GiB gs://hail-1kg/raw/ALL.chr*raw.HC.vcf.bgz; ```; Some subset of those chromosomes should satisfy any performance testing needs we have.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-454044971:274,test,testing,274,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-454044971,1,['test'],['testing']
Testability,We have removed Kudu support in the 0.2 branch pending Kudu support for arrays (see https://issues.apache.org/jira/browse/KUDU-1261) and some support to have it tested/maintained.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/439#issuecomment-316240428:161,test,tested,161,https://hail.is,https://github.com/hail-is/hail/issues/439#issuecomment-316240428,2,['test'],['tested']
Testability,"We have tests that use whileLoop in StagedRegionValueSuite (in testing creation of staged arrays), but it would be useful to have this broken out and with deeper coverage of input paths (like your nested array case)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7587#issuecomment-557264052:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/7587#issuecomment-557264052,2,['test'],"['testing', 'tests']"
Testability,"We just updated Nirvana public repository with the bugfix being merged with develop branch. (https://github.com/Illumina/Nirvana/tree/develop). I just realized that the supplementary annotation data haven't been updated (regenerated) yet, so no need to update the JSON schema in Nirvana.scala. This feature branch is good for testing current version of Nirvana (develop branch) and supplementary files.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-379110828:326,test,testing,326,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-379110828,1,['test'],['testing']
Testability,We need more information to move forward. Do we have a link to the logs? A stack trace from the backend?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13256#issuecomment-1703324778:67,log,logs,67,https://hail.is,https://github.com/hail-is/hail/issues/13256#issuecomment-1703324778,1,['log'],['logs']
Testability,We need tests that actually run on dataproc.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4239#issuecomment-417434486:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/4239#issuecomment-417434486,1,['test'],['tests']
Testability,We now have TeamCity running along side Jenkins at http://ci.hail.is:8111 . We'll test it out for a couple days and see if it represents a concrete improvement over Jenkins.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/655#issuecomment-241545086:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/issues/655#issuecomment-241545086,1,['test'],['test']
Testability,"We now have logistic Wald, LRT, and Score via #585 . I'll be adding Firth soon. We also need to extend these to subset to non-missing genotypes rather than mean impute.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/133#issuecomment-249706530:12,log,logistic,12,https://hail.is,https://github.com/hail-is/hail/issues/133#issuecomment-249706530,1,['log'],['logistic']
Testability,We now mock this test so we've lost the ability to specifically diagnose this error. Hopefully this is useful if a similar bug crops up in the future.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13951#issuecomment-2214404544:7,mock,mock,7,https://hail.is,https://github.com/hail-is/hail/issues/13951#issuecomment-2214404544,2,"['mock', 'test']","['mock', 'test']"
Testability,"We now use an API token linked to hailgenetics instead of password auth. In order to do the org request, Daniel set up 2FA. There's no way to set up 2FA. There are recovery codes in the ""usual place"". No one besides Daniel can currently log into hailgenetics PyPI account as a result (other than using recovery codes).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13598#issuecomment-1808759767:237,log,log,237,https://hail.is,https://github.com/hail-is/hail/issues/13598#issuecomment-1808759767,1,['log'],['log']
Testability,"We probably want a function like:. ``` scala; def projectT[T <: AST](maybeT: AST)(implicit m: ASTDefaultExpectedMessage[T]): T =; projectT[T](maybeT, m.message). def projectT[T <: AST](maybeT: AST, message: => String): T =; maybeT match {; case t : T => t; case _ => maybeT.parseError(message); }; ```. that we can use like:. ``` scala; val Lambda(position, parameter, body) = projectT[Lambda](rhs); ```. But we have the additional issue of wanting to assert function arity, so we want some way to say:. ``` scala; val Array(Lambda(position, parameter, body)) = projectArray(projectT[Lambda]); ```. And more generally. ``` scala; val Array(A(...), B(...)) = projectArray(projectT[A], projectT[B]); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/786#issuecomment-247090248:452,assert,assert,452,https://hail.is,https://github.com/hail-is/hail/issues/786#issuecomment-247090248,1,['assert'],['assert']
Testability,"We ran the same pipeline with an n1-highmem-16 driver node and it made it through 50 sample groups (each sample group has ~4000 samples) before crashing. Unfortunately, we do not have the syslogs from this run. We also do not have the Hail log from this run. We do have the stdout/stderr from the Python process. There's not much of value there. The Python process exited with code 256. That doesn't make a lot of sense to me because exit codes should be an unsigned 8-bit integer. On a highmem-16, total RAM is 106,496 MiB. Hail's JVM will use 85,197 MiB. We establish above that the system uses about 9,500 MiB (unclear if it would use more on a larger VM). This all leaves 11,799 MiB for the Python process. That seems extremely generous, but apparently not?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832549389:240,log,log,240,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832549389,1,['log'],['log']
Testability,We should also assert the number of rows is equal to 1 (token == 0) at the end.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1614940383:15,assert,assert,15,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1614940383,1,['assert'],['assert']
Testability,"We should be testing randomly generated INFO fields with `Gen`, that would have caught this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1677#issuecomment-294209899:13,test,testing,13,https://hail.is,https://github.com/hail-is/hail/issues/1677#issuecomment-294209899,1,['test'],['testing']
Testability,"We should really be running all of our tests on a cluster. We can run Spark in cluster mode on a single machine, that's probably what we should do",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449480073:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449480073,1,['test'],['tests']
Testability,We should wait for this to go in once pipeline is actually being tested. Will work on that now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5962#issuecomment-488291829:65,test,tested,65,https://hail.is,https://github.com/hail-is/hail/pull/5962#issuecomment-488291829,1,['test'],['tested']
Testability,We spend 77% of this benchmark in LZ4 compress HC. Big oof.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7934#issuecomment-576899438:21,benchmark,benchmark,21,https://hail.is,https://github.com/hail-is/hail/pull/7934#issuecomment-576899438,1,['benchmark'],['benchmark']
Testability,"We test against GCP's dataproc product, which, afaik, is using google's [""container optimized OS""](https://cloud.google.com/container-optimized-os/docs/). We also test local-mode with Debian 9.5 (for no particular reason). We don't currently have plans to test other distributions. ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 0.0 failed 4 times, most recent failure: Lost task 0.3 in stage 0.0 (TID 6, scc-q06.scc.bu.edu, executor 7): ExecutorLostFailure (executor 7 exited caused by one of the running tasks) Reason: Container marked as failed: container_e2435_1542127286896_0109_02_000004 on host: scc-q06.scc.bu.edu. Exit status: 1. Diagnostics: Exception from container-launch.; Container id: container_e2435_1542127286896_0109_02_000004; Exit code: 1; Stack trace: ExitCodeException exitCode=1:; at org.apache.hadoop.util.Shell.runCommand(Shell.java:576); ```. This means the JVM process on the worker node is not successfully starting. My first guess is that we still have not resolved your hail native library issues. What does `ldd --version` return on your leader node and on all of your worker nodes? If those versions are not equal, then hail will not work properly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-454163838:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-454163838,3,['test'],['test']
Testability,"We update our docs with every release. Spark3 support went in between 0.2.64 and 0.2.65, which was released at the end of last week. Now says: ; > Hail should work with any Spark 3.1.1 cluster built with Scala 2.12. It's possible to compile Hail against other versions of Spark/Scala, but this is what we test against.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10351#issuecomment-827844732:305,test,test,305,https://hail.is,https://github.com/hail-is/hail/issues/10351#issuecomment-827844732,1,['test'],['test']
Testability,"We weren't actually running the tests in QoB previously. I enabled the tests in #14062, but they all still passed even with the error. ```; PASSED test/hail/methods/relatedness/test_identity_by_descent.py::test_ibd_default_arguments; PASSED test/hail/methods/relatedness/test_identity_by_descent.py::test_ibd_does_not_error_with_dummy_maf_float64; PASSED test/hail/methods/relatedness/test_identity_by_descent.py::test_ibd_0_and_1; PASSED test/hail/methods/relatedness/test_identity_by_descent.py::test_ibd_does_not_error_with_dummy_maf_float32; ```. My guess is our test suite isn't robust enough. I don't think we test with any family relationships -- all unrelated samples.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14052#issuecomment-1839163100:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/issues/14052#issuecomment-1839163100,8,['test'],"['test', 'tests']"
Testability,"We will. But good news! Old 100 exome chr1 test: 38 min, new test: 15 min.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7252#issuecomment-540788545:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/7252#issuecomment-540788545,2,['test'],['test']
Testability,We'll test this when we add keytable random gens. For now I think this is a clear fix,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1972#issuecomment-316468753:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/1972#issuecomment-316468753,1,['test'],['test']
Testability,"We'll use these functions for eigen-decomposition of kernel in linear mixed model, and elsewhere. The Breeze method symEig calls to LAPACK dsyev, which performs poorly relative to dsyevd and dsyevr. See:; http://www.netlib.org/lapack/lawnspdf/lawn183.pdf. http://scicomp.stackexchange.com/questions/11827/flop-counts-for-lapack-symmetric-eigenvalue-routines-dsyev-dsyevd-dsyevx-and-d. I added interfaces to [dsyevd](http://www.netlib.org/lapack/explore-html/d2/d8a/group__double_s_yeigen_ga694ddc6e5527b6223748e3462013d867.html) and [dsyevr](http://www.netlib.org/lapack/explore-html/d2/d8a/group__double_s_yeigen_ga2ad9f4a91cddbf67fe41b621bd158f5c.html) and used a version of symEigSpeedTest in symEigDSuite to test performance on my mid 2015 MacBook Pro (2.8 GHz Intel Core i7). Here's a plot from dimension 500 to 5500:; [symEig6k.pdf](https://github.com/hail-is/hail/files/512569/symEig6k.pdf). Extrapolating to 10k:; [symEig10k.pdf](https://github.com/hail-is/hail/files/512571/symEig10k.pdf). And to 25k for kicks (though by then we're at 5G of RAM...):; [symEig25k.pdf](https://github.com/hail-is/hail/files/512580/symEig25k.pdf). So at least on a [Wishart matrix](https://en.wikipedia.org/wiki/Wishart_distribution), symEigD (dsyevd) is best, with symEigR (dsyevr) close behind, then svd (dgesdd) about 2.5x worse than symEigD, and then symEig (dsyev) about 10x worse than symEigD. ```; dim svd symEigD symEig symEigR; 500 .092 .051 .234 .038; 500 .088 .050 .217 .046; 500 .093 .047 .229 .041; 1000 .458 .193 1.659 .191; 1000 .430 .184 1.469 .195; 1000 .441 .207 1.464 .183; 1500 1.399 .7245 4.810 .595; 1500 1.407 .5990 4.777 .601; 1500 1.421 .5835 5.236 .627; 2000 3.272 1.479 10.942 1.386; 2000 3.205 1.337 11.006 1.381; 2000 3.473 1.354 10.933 1.366; 2500 6.180 2.519 21.639 2.750; 2500 6.217 2.718 21.772 2.758; 2500 6.580 2.590 21.176 2.661; 3000 10.169 4.117 51.154 4.716; 3000 10.414 4.131 51.602 4.834; 3000 10.709 4.219 46.711 4.794; 3500 15.451 6.549 72.2 7.365; 3500 15.353 7.058 7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/906#issuecomment-251835211:712,test,test,712,https://hail.is,https://github.com/hail-is/hail/pull/906#issuecomment-251835211,1,['test'],['test']
Testability,"We're 11x slower than plink now:. ``` bash; # time plink --bfile profile225 --genome ; PLINK v1.90b3.38 64-bit (7 Jun 2016) https://www.cog-genomics.org/plink2; (C) 2005-2016 Shaun Purcell, Christopher Chang GNU General Public License v3; Logging to plink.log.; Options in effect:; --bfile profile225; --genome. 16384 MB RAM detected; reserving 8192 MB for main workspace.; 224885 variants loaded from .bim file.; 2535 people (0 males, 0 females, 2535 ambiguous) loaded from .fam.; Ambiguous sex IDs written to plink.nosex .; Using up to 4 threads (change this with --threads).; Before main variant filters, 2535 founders and 0 nonfounders present.; Calculating allele frequencies... done.; Total genotyping rate is 0.952416.; 224885 variants and 2535 people pass filters and QC.; Note: No phenotypes present.; IBD calculations complete. ; Finished writing plink.genome .; plink --bfile profile225 --genome 67.81s user 1.03s system 297% cpu 23.147 total. # time ../hail/build/install/hail/bin/hail read -i profile225-splitmulti.vds ibd -o hail.genome; hail: info: running: read -i profile225-splitmulti.vds; [Stage 0:> (0 + 0) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o hail.genome; [Stage 8:======================================================> (62 + 3) / 65]hail: info: while writing:; hail.genome; merge time: 6.980s; hail: info: timing:; read: 2.953s; ibd: 4m12.3s; total: 4m15.2s; ../hail/build/install/hail/bin/hail read -i profile225-splitmulti.vds ibd -o 840.77s user 23.05s system 332% cpu 4:19.75 total. # dc; 60 4 * 19 +; 5 k; 23 / p; 11.26086; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1092#issuecomment-260512345:239,Log,Logging,239,https://hail.is,https://github.com/hail-is/hail/pull/1092#issuecomment-260512345,3,"['Log', 'log']","['Logging', 'log', 'logger']"
Testability,"We're not exactly the layout you mentioned because our `test` folder is a python package (it has an `__init__.py`). Because of this, Python will search up the path from, say, `test_context.py`, to the `test.hail` ""package"", to the `test` ""package"", then it will stop searching up at `test`'s parent directory `python`, but it _will_ look for sibling directories. Ergo, when `test_context.py` says `import hail as hl`, it goes up to `python` then finds `python/hail` and uses that instead of the pip installed version.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5130#issuecomment-454465951:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/5130#issuecomment-454465951,4,['test'],['test']
Testability,"We're now using `MySQL 8.0.28-google`, fwiw. Can you remember what you tested on? That might account for the differences you observed for sure.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14366#issuecomment-2253258326:71,test,tested,71,https://hail.is,https://github.com/hail-is/hail/pull/14366#issuecomment-2253258326,1,['test'],['tested']
Testability,"Weird, I can't replicate the `testShuffleIR` failure any more.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9106#issuecomment-664632027:30,test,testShuffleIR,30,https://hail.is,https://github.com/hail-is/hail/pull/9106#issuecomment-664632027,1,['test'],['testShuffleIR']
Testability,"Well, I look forward to your PR fixing this. I tested the fix with dev deploy before and after my change and it fixed it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9571#issuecomment-705059061:47,test,tested,47,https://hail.is,https://github.com/hail-is/hail/pull/9571#issuecomment-705059061,1,['test'],['tested']
Testability,"Well, I promise you it looks fine. We should figure out letting other devs log into dev deployed auth.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8805#issuecomment-629409014:75,log,log,75,https://hail.is,https://github.com/hail-is/hail/pull/8805#issuecomment-629409014,1,['log'],['log']
Testability,Welp. OK. Looks like we're stuck on 6.8.21 forever. I have no idea why the CI is NPE'ing. My local system gives all manner of other inexplicable error messages (mostly about class loading). Things are fine when done through `./gradlew test` though. It's just the test jar that seems broken.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8801#issuecomment-629593668:235,test,test,235,https://hail.is,https://github.com/hail-is/hail/pull/8801#issuecomment-629593668,2,['test'],['test']
Testability,"What do you mean by ""a maintenance error is generated in Ghost""? I kind of assumed that the website wasn't working right now because the tests finished and `cleanup_deploy_blog` shut down the blog in the PR namespace. The ""endpoint"" that I'm passing in to the `wait` command for the blog in build.yaml is `/`, which *should* do the right thing interally because the URL that's actually being constructed in `wait-for.py` becomes `http://{service}.{namespace}/{namespace}/{service}{endpoint}`, which gives you the right thing. The test failure that I'm running into currently has to do with the fact that the wait command there queries the endpoint without going through either the router or the gateway, (since it's e.g. hitting http://blog.wang/wang/blog/ directly), so it's getting the 301 redirect to https because the `X-Forwarded-Proto` header isn't set. I'm not sure what the right fix is in this case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548102338:137,test,tests,137,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548102338,2,['test'],"['test', 'tests']"
Testability,What do you think about a solution where we only upload/send the last 50MB of the log file and then worry about a nicer interface later on? This will also patch up a liability we've had where someone could write a huge log file that we'd then have to pay for.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12852#issuecomment-1570828503:82,log,log,82,https://hail.is,https://github.com/hail-is/hail/issues/12852#issuecomment-1570828503,2,['log'],['log']
Testability,"What happens? I just tested it and it works fine for me. Although we probably shouldn't have spaces in workshop names, maybe I'll do that if/when I add validation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7162#issuecomment-536317934:21,test,tested,21,https://hail.is,https://github.com/hail-is/hail/pull/7162#issuecomment-536317934,1,['test'],['tested']
Testability,What is the best way to test gateway?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-541102899:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-541102899,1,['test'],['test']
Testability,What should we do about testing Cassandra? We need an `annotatevariants cass` as well I think. This stuff looks good though (awesome that it can be so simple!),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/282#issuecomment-208341414:24,test,testing,24,https://hail.is,https://github.com/hail-is/hail/pull/282#issuecomment-208341414,1,['test'],['testing']
Testability,What were the errors? It should be OK to hold the job object around and e.g. use it to ask for logs even if the job is deleted.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5655#issuecomment-475664544:95,log,logs,95,https://hail.is,https://github.com/hail-is/hail/pull/5655#issuecomment-475664544,1,['log'],['logs']
Testability,What's the difference in the benchmark?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9498#issuecomment-697999484:29,benchmark,benchmark,29,https://hail.is,https://github.com/hail-is/hail/pull/9498#issuecomment-697999484,1,['benchmark'],['benchmark']
Testability,"What. ```; test/hail/methods/test_impex.py::VCFTests::test_empty_read_write Table._same: rows differ:; Row mismatch at key=Struct(locus=Locus(contig=20, position=10019093, reference_genome=GRCh37), alleles=['A', 'G']):; L: None; R: [Struct(rsid='rs575534', qual=1686840.0, filters=frozenset(), info=Struct(NEGATIVE_TRAIN_SITE=False, HWP=0.0001, AC=[89], culprit='FS', MQ0=0, ReadPosRankSum=0.353, AN=200, InbreedingCoeff=0.1356, AF=[0.582], GQ_STDDEV=804.93, FS=0.0, DP=77560, GQ_MEAN=747.95, POSITIVE_TRAIN_SITE=True, VQSLOD=6.91, ClippingRankSum=-0.175, BaseQRankSum=4.0, MLEAF=[0.582], MLEAC=[1012], MQ=59.71, QD=23.16, END=None, DB=True, HaplotypeScore=None, MQRankSum=0.213, CCC=1740, NCC=0, DS=False), __uid_595=[Struct(GT=Call(alleles=[0, 0], phased=False), AD=[30, 0], DP=30, GQ=72, PL=[0, 72, 1080]), Struct(GT=Call(alleles=[0, 1], phased=False), AD=[49, 45], DP=94, GQ=99, PL=[1352, 0, 1480]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[21, 0], DP=21, GQ=60, PL=[0, 60, 759]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[21, 0], DP=21, GQ=60, PL=[0, 60, 780]), Struct(GT=Call(alleles=[0, 1], phased=False), AD=[76, 52], DP=128, GQ=99, PL=[1601, 0, 2128]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[26, 0], DP=26, GQ=63, PL=[0, 63, 945]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[26, 0], DP=26, GQ=63, PL=[0, 63, 945]), Struct(GT=Call(alleles=[0, 1], phased=False), AD=[47, 46], DP=93, GQ=99, PL=[1433, 0, 1379]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[26, 0], DP=26, GQ=60, PL=[0, 60, 900]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[24, 0], DP=24, GQ=60, PL=[0, 60, 877]), Struct(GT=Call(alleles=[0, 1], phased=False), AD=[67, 46], DP=113, GQ=99, PL=[1562, 0, 1818]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[25, 0], DP=25, GQ=72, PL=[0, 72, 1018]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[27, 0], DP=27, GQ=60, PL=[0, 60, 900]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[28, 0], DP=28, GQ=60, PL=[0, 60, 900]), St",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1059482577:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1059482577,1,['test'],['test']
Testability,"When CI is testing itself, it will start pods in `test`, but `test` is missing the user secret. ```; (hail) dking@wmb16-359 # k get secrets user-jwt-vkqfw -n test ; Error from server (NotFound): secrets ""user-jwt-vkqfw"" not found; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5897#issuecomment-484122046:11,test,testing,11,https://hail.is,https://github.com/hail-is/hail/pull/5897#issuecomment-484122046,4,['test'],"['test', 'testing']"
Testability,"When I try applying this patch:. ```diff; diff --git a/batch/batch/worker/worker.py b/batch/batch/worker/worker.py; index 9d3d89498b..a9106b7a60 100644; --- a/batch/batch/worker/worker.py; +++ b/batch/batch/worker/worker.py; @@ -1228,22 +1228,28 @@ class Container:; return config; ; async def _get_in_container_user(self) -> Tuple[int, int]:; + # https://docs.docker.com/engine/reference/builder/#user; assert self.image.image_config; user = self.image.image_config['Config']['User']; if not user:; return 0, 0; if "":"" in user:; - uid, gid = user.split("":""); - else:; - uid, gid = await self._read_user_from_rootfs(user); - return int(uid), int(gid); + user, group = user.split("":""); + try:; + return int(user), int(group); + except ValueError:; + return await self._read_uid_gid_from_rootfs(user); + try:; + return int(user), 0; + except ValueError:; + return await self._read_uid_gid_from_rootfs(user); ; - async def _read_user_from_rootfs(self, user) -> Tuple[str, str]:; + async def _read_uid_gid_from_rootfs(self, user: str) -> Tuple[int, int]:; with open(f'{self.image.rootfs_path}/etc/passwd', 'r', encoding='utf-8') as passwd:; for record in passwd:; if record.startswith(user):; _, _, uid, gid, _, _, _ = record.split("":""); - return uid, gid; + return int(uid), int(gid); raise ValueError(""Container user not found in image's /etc/passwd""); ; def _mounts(self, uid: int, gid: int) -> List[MountSpecification]:; ```. I can run the container successfully but it fails with the following error:. ```; mkdir: cannot create directory '/io/batch': Permission denied; ```. Which is caused by the following line inserted by the `hailtop.batch` client library:. ```; mkdir -p /io/batch/4c8107/NjztN; ```. so images with non-existent users would fail to run on batch regardless of whether we were using crun / docker / podman, because Batch assumes that the user in the container will have permission to write to `/io`, regardless of whether the job requires input/output files.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13679#issuecomment-1728424448:404,assert,assert,404,https://hail.is,https://github.com/hail-is/hail/issues/13679#issuecomment-1728424448,1,['assert'],['assert']
Testability,"When I use python 2.7.5, it still can't work: ; ```; [root@tele-1 ~]# pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; ****Python 2.7.5 (default, Nov 6 2016, 00:28:07)**** ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/09 18:18:30 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 18:18:30 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583:582,log,log,582,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583,2,['log'],"['log', 'logging']"
Testability,"When subsetting, the GT will be set to whatever genotype has the lowest negative-log-likelihood in the PL after subsetting. This maintains the `PL(GT) = 0` invariant, though I could also see an argument for `./.`. AFAIK, we cannot represent half-NA cases like `./1`. @cseed, we had planned to implement _minning_, should we not do that?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/551#issuecomment-240850923:81,log,log-likelihood,81,https://hail.is,https://github.com/hail-is/hail/issues/551#issuecomment-240850923,1,['log'],['log-likelihood']
Testability,"Whenever I can't remember how to do something with the aioclient, I look at `batch/test/test_batch.py`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13816#issuecomment-1781573998:83,test,test,83,https://hail.is,https://github.com/hail-is/hail/issues/13816#issuecomment-1781573998,1,['test'],['test']
Testability,Where do benchmarks go?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-520638350:9,benchmark,benchmarks,9,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-520638350,1,['benchmark'],['benchmarks']
Testability,"While tests pass, I would like your eyes on the requiredeness choices.I thought that if the result was present (EmitCode.m evaluates to false), and if that EmitCode.m was calculated by using an inner PType, the inner PTypes could be assumed to be non-missing. This seems logical, but failed in the commented function",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8380#issuecomment-605417622:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/8380#issuecomment-605417622,2,"['log', 'test']","['logical', 'tests']"
Testability,"While this is an improvement, I don't think it fixes problem, and therefore still advocate disabling the test until we can implement it correctly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5639#issuecomment-474659262:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/5639#issuecomment-474659262,1,['test'],['test']
Testability,"Whoops! I've not written any benchmarks for this yet and at this point, it's old enough that I'm just going to close this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9011#issuecomment-706280238:29,benchmark,benchmarks,29,https://hail.is,https://github.com/hail-is/hail/pull/9011#issuecomment-706280238,1,['benchmark'],['benchmarks']
Testability,"Whoops, sorry for not getting back to this! Basically, I'd like to see a test of just the heap structure exercised in a large number of ways (basically doing a compare + insert in all sorts of different configurations). You're kind of doing this with the large TakeBy test, but I'd prefer to see a simpler test with many, many more inserts being done and tested for correctness. This is basically to flush out any edge cases that you wouldn't be hitting with a more basic/structured test that wouldn't reach the correct internal state to trigger it. . I've found that creating a simple test structure that mimics the desired end result and using the random generator to generate comparison tests (with the count set pretty high) is generally a pretty good way of sanity checking and flushing these bugs out, rather than writing specific test cases---usually if I've written a test for a specific case, I won't have missed it when coding, and if I've missed an edge case when coding, I won't think to test it. I think I'm pushing on this extra hard because the generated code is at a level of complexity where I can look at it and say ""yeah, this looks generally right"" but I'm not sure that I trust myself, as the reviewer, to guarantee that it's accounted for every single insert configuration correctly, if that makes sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6942#issuecomment-530961530:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/6942#issuecomment-530961530,10,['test'],"['test', 'tested', 'tests']"
Testability,Why do we have to add them ourselves in shell rc for mac? Presumably we can also set them in the benchmark code when running benchmarks locally?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583417425:97,benchmark,benchmark,97,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583417425,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Why do we not want the syslog? It seems useful to know what's going on in the system log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11895#issuecomment-1148787862:85,log,log,85,https://hail.is,https://github.com/hail-is/hail/pull/11895#issuecomment-1148787862,1,['log'],['log']
Testability,"Why would performance be different than just `nan`? Compatibility is understandable (though you could just warn and implicitly convert to `nan` - not a great solution, but it's an option). And I guess `nan` is fine, but then perhaps having the `sparsify_*` methods to be able to convert to `nan` instead of 0 should be supported. You guys had all this logic about why `nan` was different from missing though and I really liked it, so it seems like that should carry forward here",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6097#issuecomment-492707284:352,log,logic,352,https://hail.is,https://github.com/hail-is/hail/issues/6097#issuecomment-492707284,1,['log'],['logic']
Testability,Will approve when benchmarks finish,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9920#issuecomment-788203284:18,benchmark,benchmarks,18,https://hail.is,https://github.com/hail-is/hail/pull/9920#issuecomment-788203284,1,['benchmark'],['benchmarks']
Testability,Will merge when tests pass. Make a post on discourse updates to introduce the new command!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1028#issuecomment-257695252:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/1028#issuecomment-257695252,1,['test'],['tests']
Testability,"With Hail 0.2-721af83bc30a, it is now getting a java heap space error.... ipython vcf2mt.py 22; ```; Running on Apache Spark version 2.2.1; SparkUI available at http://10.48.225.55:4041; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2-721af83bc30a; LOGGING: writing to /restricted/projectnb/ukbiobank/ad/analysis/ad.v1/hail-20181113-2115-0.2-721af83bc30a.log; Converting vcf /project/ukbiobank/imp/ad.v1/vcf/ukbb.hg38.imputed.chr22.dose.vcf.gz to mt /project/ukbiobank/imp/ad.v1/mt/ukbb.hg38.imputed.chr22.mt; [Stage 1:====> (59 + 24) / 741]---------------------------------------------------------------------------; FatalError Traceback (most recent call last); /restricted/projectnb/ukbiobank/ad/analysis/ad.v1/vcf2mt.py in <module>; 6 mt=""/project/ukbiobank/imp/ad.v1/mt/ukbb.hg38.imputed.chr""+chr+"".mt""; 7 print(""Converting vcf ""+vcf+"" to mt ""+ mt); ----> 8 hl.import_vcf(vcf,force_bgz=True).write(mt). <decorator-gen-891> in write(self, output, overwrite, stage_locally, _codec_spec). /share/pkg/hail/2018-10-31/install/build/distributions/hail-python.zip/hail/typecheck/check.py in wrapper(__original_func, *args, **kwargs); 558 def wrapper(__original_func, *args, **kwargs):; 559 args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); --> 560 return __original_func(*args_, **kwargs_); 561; 562 return wrapper. /share/pkg/hail/2018-10-31/install/build/distributions/hail-python.zip/hail/matrixtable.py in write(self, output, overwrite, stage_locally, _codec_spec); 2146 """"""; 2147; -> 2148 self._jvds.write(output, overwrite, stage_locally, _codec_spec); 2149; 2150 def globals_table(self) -> Table:. /share/pkg/spark/2.2.1/install/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py in __call__(self, *args); 1131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134; 1135 for temp_arg in temp_args:. /share/pkg",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4755#issuecomment-438447635:288,LOG,LOGGING,288,https://hail.is,https://github.com/hail-is/hail/issues/4755#issuecomment-438447635,2,"['LOG', 'log']","['LOGGING', 'log']"
Testability,"With `hailtop` installed, I get:; ```; $ rm -f hail/upload-remote-test-resources && make -C hail upload-remote-test-resources ; make: Entering directory '/home/edmund/.local/src/hail/hail'; # # If hailtop.aiotools.copy gives you trouble:; # gcloud storage cp -r src/test/resources/\* gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/; # gcloud storage cp -r python/hail/docs/data/\* gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/; python3 -m hailtop.aiotools.copy -vvv 'null' '[\; {""from"":""src/test/resources"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/""},\; {""from"":""python/hail/docs/data"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/""}\; ]' --timeout 600; Traceback (most recent call last):; File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/runpy.py"", line 197, in _run_module_as_main; return _run_code(code, main_globals, None,; File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/runpy.py"", line 87, in _run_code; exec(code, run_globals); File ""/home/edmund/.local/src/hail/hail/python/hailtop/aiotools/copy.py"", line 211, in <module>; asyncio.run(main()); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/asyncio/runners.py"", line 44, in run; return loop.run_until_complete(main); File ""uvloop/loop.pyx"", line 1517, in uvloop.loop.Loop.run_until_complete; File ""/home/edmund/.local/src/hail/hail/python/hailtop/aiotools/copy.py"", line 182, in main; files = json.loads(args.files); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/__init__.py"", line 346, in loads; return _default_decoder.decode(s); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/decoder.py"", line 337, in decode; obj, end = self.raw_decode(s, idx=_w(s, 0).end()); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/decoder.py"", line 355, in raw_decode; raise JSONDecodeError(""Expecting value"", s, err.value) from None; json.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1); make:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1887744163:66,test,test-resources,66,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1887744163,14,['test'],"['test', 'test-ezlis', 'test-resources']"
Testability,"With my latest commits, we finally have a change that passes gradle test and pytest with the flag enabled.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7803#issuecomment-600366372:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/7803#issuecomment-600366372,1,['test'],['test']
Testability,"With regard to #1314, this PR substitutes use of IntIterator in count(genotypes=True), linreg, logreg, lmmreg, computing the normalizations that go into RRM and GRM, and ExportPlink (got rid of ByteArrayBuilder there as well). I'm leaving IBD alone until @johnc1231 has his updates in and we can discuss. And hardcalls has the fakeRef issue to be dealt with later. ToStandardizedIndexRowMatrix is now ToHWENormalizedIndexedRowMatrix, alongside ToNormalizedIndexedRowMatrix and ToNormalizedRowMatrix. These all in turn map over genotype-array generating functions in RegressionUtils. I reimplemented that function for ToHWENormalizedIndexedRowMatrix as RegressionUtils.toHWENormalizedGtArray. The only methods using ToHWENormalizedIndexedRowMatrix are PCA and GRM, which both require split vds. So I've required the same on ToHWENormalizedIndexedRowMatrix for consistency and to take advantage of IntIterator in it's current state. We can circle back to the right more general approach later. I've also changed logreg to mapPartitions and wrote RegressionUtils.mutateLastColumn so logreg no longer constructs a new covariate matrix per variants, but rather mutates the last (gt) column of a shared matrix. This helped drive, for example, the 4x speedup on the score test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1425#issuecomment-285811906:95,log,logreg,95,https://hail.is,https://github.com/hail-is/hail/pull/1425#issuecomment-285811906,4,"['log', 'test']","['logreg', 'test']"
Testability,"With these changes, I was not only able to get #12423 to pass but the test that was failing (`test_vcf_parser_golden_master__gvcf_GRCh37`) now uses the memory service! I think that test was actually OOM'ing when sending to memory and triggering a GCS retry.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12691#issuecomment-1428161623:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/12691#issuecomment-1428161623,2,['test'],['test']
Testability,"With this change, only one test in `testTakeBy` fails. This is the generated code for the lead up to the invocation of the SeqOp method.; ```; /// THIS PR; public __m81wrapped(Lis/hail/annotations/Region;JJ)V; L0; LDC 0; LSTORE 6; LDC 0; LSTORE 8; GETSTATIC is/hail/annotations/Region$.MODULE$ : Lis/hail/annotations/Region$;; LLOAD 8; LDC 0; LADD; INVOKEVIRTUAL is/hail/annotations/Region$.loadInt (J)I // we fail here; ISTORE 10; ILOAD 10; ISTORE 11; GETSTATIC is/hail/annotations/Region$.MODULE$ : Lis/hail/annotations/Region$;; LLOAD 6; LDC 0; LADD; INVOKEVIRTUAL is/hail/annotations/Region$.loadInt (J)I // or here; ISTORE 12; ALOAD 0; ALOAD 0; ALOAD 1; ILOAD 11; INVOKEVIRTUAL __C44CompiledWithAggs.__m82str (Lis/hail/annotations/Region;I)J; LDC 9999; ILOAD 12; ISUB; INVOKEVIRTUAL __C44CompiledWithAggs.__m67take_by_seqop (JI)V; RETURN; L1; LOCALVARIABLE get_tup_elem_o J L0 L1 6; LOCALVARIABLE get_tup_elem_o J L0 L1 8; LOCALVARIABLE invoke I L0 L1 10; LOCALVARIABLE local11 I L0 L1 11; LOCALVARIABLE invoke I L0 L1 12; MAXSTACK = 5; MAXLOCALS = 13; ```. ```; /// PREVIOUS VERSION; // access flags 0x1; public __m85wrapped(Lis/hail/annotations/Region;JJ)V; L0; GOTO L1; L1; FRAME SAME; LLOAD 4; LSTORE 6; GOTO L2; L2; FRAME APPEND [J]; LDC 0; ISTORE 8; GOTO L3; L3; FRAME APPEND [I]; ALOAD 0; ILOAD 8; PUTFIELD __C46CompiledWithAggs.__f78vm : Z; GOTO L4; L4; FRAME SAME; LLOAD 4; LSTORE 9; GOTO L5; L5; FRAME APPEND [J]; LDC 0; ISTORE 11; GOTO L6; L6; FRAME APPEND [I]; ALOAD 0; ILOAD 11; PUTFIELD __C46CompiledWithAggs.__f77km : Z; ALOAD 0; GETFIELD __C46CompiledWithAggs.__f78vm : Z; IFNE L7; GOTO L8; L8; FRAME SAME; GETSTATIC is/hail/annotations/Region$.MODULE$ : Lis/hail/annotations/Region$;; LLOAD 6; LDC 0; LADD; INVOKEVIRTUAL is/hail/annotations/Region$.loadInt (J)I; ISTORE 12; ILOAD 12; ISTORE 13; ALOAD 0; ALOAD 1; ILOAD 13; INVOKEVIRTUAL __C46CompiledWithAggs.__m86str (Lis/hail/annotations/Region;I)J; LSTORE 14; GOTO L9; L9; FRAME APPEND [T T J]; ALOAD 0; GETFIELD __C46Compiled",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8671#issuecomment-621635408:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/8671#issuecomment-621635408,2,['test'],"['test', 'testTakeBy']"
Testability,Wn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8758,test,test,8758,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"Woo, awesome! 😄 Will test now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1478#issuecomment-284475675:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/1478#issuecomment-284475675,1,['test'],['test']
Testability,"Worked out the kinks in Python. Here's a working example:; ```; import hail; hc = hail.HailContext(); vds = (hc.import_vcf('src/test/resources/regressionLogistic.vcf'); .annotate_samples_table('src/test/resources/regressionLogistic.cov', 'Sample', root='sa.cov', config=pyhail.TextTableConfig(impute=True)); .annotate_samples_table('src/test/resources/regressionLogisticBoolean.pheno', 'Sample', root='sa.pheno', config=pyhail.TextTableConfig(types='isCase: Boolean', missing='0')); .logreg('wald', 'sa.pheno.isCase', ['sa.cov.Cov1', 'sa.cov.Cov2']); .linreg('sa.pheno.isCase', ['sa.cov.Cov1', 'sa.cov.Cov2'])); ```. And another:; ```; vds = (hc.import_vcf('src/test/resources/sample.vcf'); .split_multi(); .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""20"", 13753124, ""A"", ""C"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.culprit2 = gs.filter(g => v == Variant(""20"", 13767943, ""C"", ""T"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno = pcoin((sa.culprit + sa.culprit2)/ 4.0)'); .annotate_samples_expr('sa.cov1 = rnorm(0,1)'); .annotate_samples_expr('sa.cov2 = rnorm(0,1)'); .linreg('sa.pheno', ['sa.cov1', 'sa.cov2']); .logreg('wald', 'sa.pheno', ['sa.cov1', 'sa.cov2'], 'va.wald'); .logreg('lrt', 'sa.pheno', ['sa.cov1', 'sa.cov2'], 'va.lrt'); .logreg('score', 'sa.pheno', ['sa.cov1', 'sa.cov2'], 'va.score')); ; vds.export_variants('pvals.tsv', 'Variant = v, lin_pval = va.linreg.pval, wald_pval = va.wald.wald.pval, lrt_pval = va.lrt.lrt.pval, score_pval = va.score.score.pval, va.wald.fit.*'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1259#issuecomment-272988219:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/1259#issuecomment-272988219,8,"['log', 'test']","['logreg', 'test']"
Testability,"Working on it. Gradle/Scala tests pass. Python (Python 3.6.7) also probably pass, I encountered a missing R library error on 501, will re-run in the morning with it installed. Need to better understand the context of the changes, and whether any additional tests needed to cover them. edit: For instance, the serializers don't have tests, but it may not matter if they don't introduce public functionality (beyond that consumed by tested functions).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5138#issuecomment-456288536:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/5138#issuecomment-456288536,4,['test'],"['tested', 'tests']"
Testability,Worth adding a test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558444060:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558444060,1,['test'],['test']
Testability,"Worth noting that this is also going to update JDK from 8 -> 11. That should be fine, as far as I can tell hail query works with both now, but we don't run hail tests with JDK 11, we do so with JDK 8. . Probably we should take some time to drop support for Spark 2, Python 3.6, and Java 8.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11046#issuecomment-965346335:161,test,tests,161,https://hail.is,https://github.com/hail-is/hail/pull/11046#issuecomment-965346335,1,['test'],['tests']
Testability,X | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4160033472 |; | 2023-07-13 | test | test | 6 | 59 | 51584 |; | 2023-07-13 | test | test | 6 | 62 | 55616 |; | 2023-07-13 | test | test | 6 | 138 | 700160 |; | 2023-07-13 | test | test | 6 | 183 | 54976 |; +--------------+----------------------------------+------+-------------+-------+------------+; 8 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4160033472 |; | 2023-07-13 | test | test | 6 | 11 | 171840 |; | 2023-07-13 | test | test | 6 | 59 | 51584 |; | 2023-07-13 | test | test | 6 | 62 | 55616 |; | 2023-07-13 | test | test | 6 | 138 | 700160 |; | 2023-07-13 | test | test | 6 | 183 | 54976 |; +--------------+----------------------------------+------+-------------+-------+------------+; 9 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:14669,test,test,14669,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,14,['test'],['test']
Testability,Xjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:41000,test,test-,41000,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"Ya I hit that at first, but I made sure in to allow the caller to override the name attribute, so this just sets the name for batches where the name isn't specified in the test",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12884#issuecomment-1507496352:172,test,test,172,https://hail.is,https://github.com/hail-is/hail/pull/12884#issuecomment-1507496352,1,['test'],['test']
Testability,"Ya I hit that at first, so I made sure to allow the caller to override the name attribute, so this just sets the name for batches where the name isn't specified in the test",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12884#issuecomment-1507496654:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/pull/12884#issuecomment-1507496654,1,['test'],['test']
Testability,Ya I really need to set up running clusters locally. It's a frustrating feedback loop for a single cluster test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5686#issuecomment-477170521:107,test,test,107,https://hail.is,https://github.com/hail-is/hail/pull/5686#issuecomment-477170521,1,['test'],['test']
Testability,Ya this was the previous deploy taking forever because of QoB tests restarting after preemption,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12353#issuecomment-1284573461:62,test,tests,62,https://hail.is,https://github.com/hail-is/hail/pull/12353#issuecomment-1284573461,1,['test'],['tests']
Testability,"Ya this would be more ideal, but since 22.04 is so new I anticipate there might be a couple of bumps. For example, I think GCP's logging agent we've been using for years might not be supported on the newer Ubuntu, since the agent is now considered legacy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11859#issuecomment-1138064749:129,log,logging,129,https://hail.is,https://github.com/hail-is/hail/pull/11859#issuecomment-1138064749,1,['log'],['logging']
Testability,"Ya we can request metadata about the batch and its job groups/jobs. Do you mean have a test where we do say a range table force count, then assert that there's a group with the driver job and a child group with the workers?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14432#issuecomment-2061993145:87,test,test,87,https://hail.is,https://github.com/hail-is/hail/pull/14432#issuecomment-2061993145,2,"['assert', 'test']","['assert', 'test']"
Testability,"Yea, binary incompatibility is as good a guess as any. I'm sure it's this commit though. What's the best way to break down the commit into likely culprits that I could test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4513#issuecomment-429132148:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/issues/4513#issuecomment-429132148,1,['test'],['test']
Testability,"Yeah this is my bad, I thought we were good to go with the new UI @cseed ? Are you referring to a workshop mode wherein users login via OAuth but and are permitted despite not being on the whitelist if they provide a special passphrase?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-464205479:126,log,login,126,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-464205479,1,['log'],['login']
Testability,"Yeah, I debated this, but they are pretty nice and we use them a lot in our tests. @tpoterba thoughts?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3154#issuecomment-373415063:76,test,tests,76,https://hail.is,https://github.com/hail-is/hail/pull/3154#issuecomment-373415063,1,['test'],['tests']
Testability,"Yeah, I guess I should benchmark, since you've observed some strange brittleness in the linreg performance before.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11070#issuecomment-972121769:23,benchmark,benchmark,23,https://hail.is,https://github.com/hail-is/hail/pull/11070#issuecomment-972121769,1,['benchmark'],['benchmark']
Testability,"Yeah, I imagine we do. `InferPType` isn't used right now, correct? I'll add the new case, just checking if there's a test that would have caught this",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682#issuecomment-562812256:117,test,test,117,https://hail.is,https://github.com/hail-is/hail/pull/7682#issuecomment-562812256,1,['test'],['test']
Testability,"Yeah, I misjudged, clearly the determinism issue. I cached for my test case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4096#issuecomment-410890171:66,test,test,66,https://hail.is,https://github.com/hail-is/hail/issues/4096#issuecomment-410890171,1,['test'],['test']
Testability,"Yeah, I think I agree that we have a unique UUID. What I'm more skeptical of is: what if we throw an exception in a `write`? Do we clean up all the open resources? If not, that could totally leave a writer open that will conflict when we retry (even if we retried on a different VM!). ---. `retryTransientErrors` expects partition code to be safe to execute twice, but otherwise it's quite simple:. ```scala; def retryTransientErrors[T](f: => T): T = {; var delay = 0.1; var errors = 0; while (true) {; try {; return f; } catch {; case e: Exception =>; errors += 1; if (errors == 1 && isRetryOnceError(e)); return f; if (!isTransientError(e)); throw e; if (errors % 10 == 0); log.warn(s""encountered $errors transient errors, most recent one was $e""); }; delay = sleepAndBackoff(delay); }. throw new AssertionError(""unreachable""); }; ```; and this is the call site:; ```scala; val htc = new ServiceTaskContext(i); var result: Array[Byte] = null; var userError: HailException = null; try {; retryTransientErrors {; result = f(context, htc, theHailClassLoader, fs); }; } catch {; case err: HailException => userError = err; }; htc.close(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1531592331:676,log,log,676,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1531592331,2,"['Assert', 'log']","['AssertionError', 'log']"
Testability,"Yeah, I was thinking about that. It could be a parameter on all `ExecStrategy`s, but that's a lot of cases to test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9220#issuecomment-671943780:110,test,test,110,https://hail.is,https://github.com/hail-is/hail/pull/9220#issuecomment-671943780,1,['test'],['test']
Testability,"Yeah, I'm about to run benchmarks on the current top of the stack of SCode->SValue changes. Will post results here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10867#issuecomment-920960768:23,benchmark,benchmarks,23,https://hail.is,https://github.com/hail-is/hail/pull/10867#issuecomment-920960768,1,['benchmark'],['benchmarks']
Testability,"Yeah, I've been continually retrying. It was passing non-service tests when I approved two weeks ago.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12995#issuecomment-1614524147:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/12995#issuecomment-1614524147,1,['test'],['tests']
Testability,"Yeah, OK, this isn't great. Do you have exac sites file snippet you're using somewhere? I clearly need to start doing more systematic benchmarking.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2089#issuecomment-321580378:134,benchmark,benchmarking,134,https://hail.is,https://github.com/hail-is/hail/pull/2089#issuecomment-321580378,1,['benchmark'],['benchmarking']
Testability,"Yeah, a test of linreg is what I meant, thanks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8575#issuecomment-615439810:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/8575#issuecomment-615439810,1,['test'],['test']
Testability,"Yeah, agreed. I've never taken inventory of the full test suite. This was the first bug that caused an error message though, previous ones have just been about things being too slow. So we'll need benchmarks to catch that stuff.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7146#issuecomment-536022939:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/7146#issuecomment-536022939,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"Yeah, one test fails.`test_annotate_col_agg_lowering`. This error is encountered on the worker. It gets raised there, then the driver encounters it and re-raises it. That's how we ultimately see it on the client-side.; ```; E HailException: Premature end of file: expected 4 bytes, found 0; E is.hail.utils.HailException: Premature end of file: expected 4 bytes, found 0; E 	at is.hail.utils.ErrorHandling.fatal(ErrorHandling.scala:17); E 	at is.hail.utils.ErrorHandling.fatal$(ErrorHandling.scala:17); E 	at is.hail.utils.package$.fatal(package.scala:78); E 	at is.hail.utils.richUtils.RichInputStream$.readFully$extension1(RichInputStream.scala:13); E 	at is.hail.io.StreamBlockInputBuffer.readBlock(InputBuffers.scala:546); E 	at is.hail.io.LZ4InputBlockBuffer.readBlock(InputBuffers.scala:584); E 	at is.hail.io.BlockingInputBuffer.readBlock(InputBuffers.scala:382); E 	at is.hail.io.BlockingInputBuffer.ensure(InputBuffers.scala:388); E 	at is.hail.io.BlockingInputBuffer.readByte(InputBuffers.scala:405); E 	at is.hail.io.LEB128InputBuffer.readByte(InputBuffers.scala:217); E 	at is.hail.io.LEB128InputBuffer.readInt(InputBuffers.scala:223); E 	at __C3100collect_distributed_array.__m3103INPLACE_DECODE_r_int32_TO_r_int32(Unknown Source); E 	at __C3100collect_distributed_array.__m3147INPLACE_DECODE_r_struct_of_r_int32ANDr_int64END_TO_r_struct_of_r_int32ANDr_int64END(Unknown Source); E 	at __C3100collect_distributed_array.__m3146INPLACE_DECODE_r_array_of_r_struct_of_r_int32ANDr_int64END_TO_r_dict_of_r_int32ANDr_int64(Unknown Source); E 	at __C3100collect_distributed_array.__m3141DECODE_r_struct_of_r_int32ANDr_array_of_r_int32ANDr_float64ANDr_array_of_r_float64ANDr_int64ANDr_array_of_r_struct_of_r_int32ANDr_int64ENDEND_TO_SBaseStructPointer(Unknown Source); E 	at __C3100collect_distributed_array.__m3128split_StreamFor_region24_75(Unknown Source); E 	at __C3100collect_distributed_array.__m3128split_StreamFor(Unknown Source); E 	at __C3100collect_distributed_array.__m3125begin_group_0",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11681#issuecomment-1079785317:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/11681#issuecomment-1079785317,1,['test'],['test']
Testability,"Yeah, so if I set deepOptional in subsetTo in the case that `virtualType != t` but `isOfType` test passes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-582143903:94,test,test,94,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-582143903,1,['test'],['test']
Testability,"Yeah, that should be fine. I'd propose redesigning the scala so that TableJoin asserts there are no field overlaps (globals or row fields), and to emit renames in Python. Then the suffix stuff is pretty easy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4311#issuecomment-420263190:79,assert,asserts,79,https://hail.is,https://github.com/hail-is/hail/issues/4311#issuecomment-420263190,2,['assert'],['asserts']
Testability,"Yeah, that's true. I've updated this PR to include the default gce deploy config for the default namespace, which I think is generally what you'd want for both testing and in production; I'm not sure under what circumstances you'd want separate service namespaces?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9437#issuecomment-691245476:160,test,testing,160,https://hail.is,https://github.com/hail-is/hail/pull/9437#issuecomment-691245476,1,['test'],['testing']
Testability,"Yep, I bumped into the Breeze bug a while back while trying to upgrade Hail to Spark 3 internally, and realized it'd be a blocker downstream. I've only seen issues on the Python side; for example:; ```; ______________________________________________________________________________ Tests.test_block_matrix_entries ______________________________________________________________________________. self = <test.hail.linalg.test_linalg.Tests testMethod=test_block_matrix_entries>. @fails_local_backend(); def test_block_matrix_entries(self):; n_rows, n_cols = 5, 3; rows = [{'i': i, 'j': j, 'entry': float(i + j)} for i in range(n_rows) for j in range(n_cols)]; schema = hl.tstruct(i=hl.tint32, j=hl.tint32, entry=hl.tfloat64); table = hl.Table.parallelize([hl.struct(i=row['i'], j=row['j'], entry=row['entry']) for row in rows], schema); table = table.annotate(i=hl.int64(table.i),; j=hl.int64(table.j)).key_by('i', 'j'); ; ndarray = np.reshape(list(map(lambda row: row['entry'], rows)), (n_rows, n_cols)); ; for block_size in [1, 2, 1024]:; block_matrix = BlockMatrix.from_numpy(ndarray, block_size); entries_table = block_matrix.entries(); self.assertEqual(entries_table.count(), n_cols * n_rows); self.assertEqual(len(entries_table.row), 3); > self.assertTrue(table._same(entries_table)); E AssertionError: False is not true. test/hail/linalg/test_linalg.py:868: AssertionError; ----------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------; Table._same: rows differ:; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(e",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406:282,Test,Tests,282,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406,4,"['Test', 'test']","['Tests', 'test', 'testMethod']"
Testability,"Yep, sigh. And I don't want to specify these args on the master node since that would break workflows that do use LMMs and do svd on master node. So I guess I'll add them specifically for the hail in pipeline docker based benchmarking system since we know that's running in local mode and actually want that to have only one core. Given that, should I still leave this executor arguments in place or pull them back out?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583459034:222,benchmark,benchmarking,222,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583459034,1,['benchmark'],['benchmarking']
Testability,Yes we could do that. I added the WIP tag. Sometimes PR testing is easier than dev deploy,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8552#issuecomment-613658889:56,test,testing,56,https://hail.is,https://github.com/hail-is/hail/pull/8552#issuecomment-613658889,1,['test'],['testing']
Testability,Yes with the caveat that I was going to look at the worker logs in the PR test namespace just to make sure there were no hidden errors that would be problematic. I broke the logging query generator -- fixed in #13813 -- and didn't think this was urgent. I'll take a look at the logs now without that fix in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13728#issuecomment-1769106759:59,log,logs,59,https://hail.is,https://github.com/hail-is/hail/pull/13728#issuecomment-1769106759,4,"['log', 'test']","['logging', 'logs', 'test']"
Testability,Yes! I definitely want to assert no errors in the logs. I think we're very close to being able to assert that.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-956533915:26,assert,assert,26,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-956533915,3,"['assert', 'log']","['assert', 'logs']"
Testability,"Yes, CI generates the config for gateway which needs the root domain name tied to the cluster, e.g. `hail.is` or `azure.hail.is`. But if it uses the environment variable name `HAIL_DOMAIN`, it will clobber the deploy config field `domain` in test namespaces which should be `internal.hail.is` not `hail.is`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14164#issuecomment-1898947090:242,test,test,242,https://hail.is,https://github.com/hail-is/hail/pull/14164#issuecomment-1898947090,1,['test'],['test']
Testability,"Yes, I shouldn't have had both. However, there's still no guarantee that even this expected equivalence will hold with a different seed. It's just ""likely"" so long as the code is correct. Originally I didn't include the @Test annotation at all.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1427#issuecomment-281827094:221,Test,Test,221,https://hail.is,https://github.com/hail-is/hail/pull/1427#issuecomment-281827094,1,['Test'],['Test']
Testability,"Yes, for example:. ```; $ gsutil ls gs://hail-ci-0-1/deploy/3b20406ba582d5aebac0c71b6b41f3509e2e1887/; gs://hail-ci-0-1/deploy/3b20406ba582d5aebac0c71b6b41f3509e2e1887/index.html; gs://hail-ci-0-1/deploy/3b20406ba582d5aebac0c71b6b41f3509e2e1887/job.log; ```. where the hash is from master.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4437#issuecomment-438146859:249,log,log,249,https://hail.is,https://github.com/hail-is/hail/issues/4437#issuecomment-438146859,1,['log'],['log']
Testability,"Yes, it fixes a bug that resulted in a failed check on the dimension of y. I've added a regression test. http://discuss.hail.is/t/breaking-change-hail-0-2-removed-kinshipmatrix-linear-mixed-regression/578/16",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4606#issuecomment-432209343:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/4606#issuecomment-432209343,1,['test'],['test']
Testability,"Yes, it would. Slightly unfair test in my case because I was installing a dev build in preparation for the workshop Cotton is giving tomorrow, but thought I should report it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2978#issuecomment-370499062:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/issues/2978#issuecomment-370499062,1,['test'],['test']
Testability,"Yes, so that test should be rewritten. We could manufacture a small dataset inline to run it on.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3704#issuecomment-394434300:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/3704#issuecomment-394434300,1,['test'],['test']
Testability,"Yes, there was a conflict. I've resolved it and tests are running now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2359#issuecomment-340653113:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/2359#issuecomment-340653113,1,['test'],['tests']
Testability,"Yes, when I do :; ```; pyspark; sc.textFile('/hail/test/BRCA1.raw_indel.vcf') ; ```; The following information is shown:; ```; [root@tele-1 ~]# pyspark; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/09 19:16:02 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 19:16:02 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); /hail/test/BRCA1.raw_indel.vcf MapPartitionsRDD[1] at textFile at NativeMethodAccessorImpl.java:-2; >>> ; ```. ----------------; When I executed the command in local mode , there seems to hava some result:; ```; [root@tele-1 ~]# python; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> from hail import *; >>> hc = HailContext();; Using Spark's default log",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506,3,"['log', 'test']","['log', 'logging', 'test']"
Testability,"Yes, will do. FYI, I included testing info here: https://github.com/hail-is/hail/pull/2377",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3122#issuecomment-372087212:30,test,testing,30,https://hail.is,https://github.com/hail-is/hail/pull/3122#issuecomment-372087212,1,['test'],['testing']
Testability,"Yes. 1. I'm not aware of anyone using GEN right now (except for tests), so it is much less important, and 2. my PR was already up to +100 lines.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1551#issuecomment-287086381:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/1551#issuecomment-287086381,1,['test'],['tests']
Testability,"You and @jigold both with these ""tests"". ![dr. evil making air quotes gif](https://media.giphy.com/media/qs6ev2pm8g9dS/giphy.gif)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3344#issuecomment-380532502:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/3344#issuecomment-380532502,1,['test'],['tests']
Testability,"You can also checkout main, `git cherry-pick` the commits you need:. `git cherry-pick d9a599b8b3d7b4ecec8775ed9ac3831aa2f01280 b8a1add6a0ce7ccf2ae8f5eac5d5edaac965b098 c0a4768923f1c714f9b5a06ba1a29c059ea5ac03 37b507fa6844af213f3c4eb82da033f5e39 07aa1036e0d2ac2435b357e72721be6352e41a1f 2082f04f17a4282fc6878f4b29239a14bfd3e898 30be897872a71ca22e3338ceb855cbc73307ef16 95ede3f473dddaa67fa7b942193db2cf126447a6 f0055585e596e3c51585f1e0d4359cc19509cbe7 1c3984ba4417dad3e0d8cea2802ba4a6ef4fb14e c0a444cb86bc249d5edfd017a75ba84d9e4e6738 266c7e8223066ef0a1a1f3db4923414f7dd3aaa6`; * here is the result: https://github.com/hail-is/hail/compare/main...akotlar:ann-test?expand=1. I think those are off of the commits, but you may want to check. Again, seems easier to checkout main and copy in the 4 files that were modified",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9222#issuecomment-669853205:656,test,test,656,https://hail.is,https://github.com/hail-is/hail/pull/9222#issuecomment-669853205,1,['test'],['test']
Testability,"You can see all the test batches of this branch [here](https://batch.hail.is/batches?q=source_branch%3Ddanking%2Fhail%3Amore-parallelism). bbfc2a1e72822328bf5c8fd33d0e6f4ce5692da3 (38 minutes):; <img width=""2032"" alt=""Screen Shot 2023-05-18 at 13 28 28"" src=""https://github.com/hail-is/hail/assets/106194/206a6646-c003-48f8-922c-a3f1979023da"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1553382531:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1553382531,1,['test'],['test']
Testability,"You can see the log of the test here:; http://hail-ci:8080/job/Hail%20-%20Test%20All%20Branches/52/console. It is ""Console Output"" on the left hand side on the build page. Cotton. On Fri, Apr 15, 2016 at 10:27 AM, Tim Poterba notifications@github.com; wrote:. > The 'details' page for Jenkins won't load. This branch passed on my local; > computer.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/hail/pull/291#issuecomment-210482932",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210483887:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210483887,2,"['log', 'test']","['log', 'test']"
Testability,"You can test partition readers using the ReadPartition node, that's probably the easiest way. Make an IR that's ToArray(ReadPartition) and assert it matches.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10793#issuecomment-902972143:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/10793#issuecomment-902972143,2,"['assert', 'test']","['assert', 'test']"
Testability,You can write non-local tests by [submitting a python file](https://github.com/hail-is/hail/blob/master/hail/hail-ci-build.sh#L244-L245) to the cluster that is started by the CI.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449479436:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449479436,1,['test'],['tests']
Testability,"You can't exclude a class in testng.xml: https://stackoverflow.com/questions/12157846/how-to-exclude-class-in-testng. I moved the GoogleStorageFS tests to a separate package and excluded that. Also renamed the test classes ""BlahSuite"" instead of ""TestBlah"" for consistency.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8448#issuecomment-608339475:29,test,testng,29,https://hail.is,https://github.com/hail-is/hail/pull/8448#issuecomment-608339475,5,"['Test', 'test']","['TestBlah', 'test', 'testng', 'tests']"
Testability,You could also add a `.. testsetup::` directive to import it here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2586#issuecomment-352182040:25,test,testsetup,25,https://hail.is,https://github.com/hail-is/hail/pull/2586#issuecomment-352182040,1,['test'],['testsetup']
Testability,You could take a look at Mocha or Jasmine. https://stackoverflow.com/questions/11529158/how-to-assert-a-spy-is-invoked-with-event-on-click-using-jasmine,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6261#issuecomment-499215870:95,assert,assert-a-spy-is-invoked-with-event-on-click-using-jasmine,95,https://hail.is,https://github.com/hail-is/hail/pull/6261#issuecomment-499215870,1,['assert'],['assert-a-spy-is-invoked-with-event-on-click-using-jasmine']
Testability,"You have an error based on where the maven code is being run (not the directory with the pom file).; ```; [[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-dependency-plugin:2.8:resolve[m [1m(default-cli)[m: [1;31mGoal requires a project to execute but there is no POM in this directory (/). Please verify you invoked Maven from the correct directory.[m -> [1m[Help 1][m; [[1;31mERROR[m] ; [[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.; [[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.; [[1;31mERROR[m] ; [[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:; [[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException; The command '/bin/sh -c mvn dependency:resolve && rm pom.xml test-jar-with-dependencies.xml' returned a non-zero code: 1; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6050#issuecomment-489712270:607,log,logging,607,https://hail.is,https://github.com/hail-is/hail/pull/6050#issuecomment-489712270,2,"['log', 'test']","['logging', 'test-jar-with-dependencies']"
Testability,You have some failing tests right now. I'll review once you fix?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6557#issuecomment-508094304:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/6557#issuecomment-508094304,1,['test'],['tests']
Testability,"You have test errors:. ```; io/test/test_batch.py::Test::test_restartable_insert FAILED; _________________________ Test.test_restartable_insert _________________________. self = <test.test_batch.Test testMethod=test_restartable_insert>. def test_restartable_insert(self):; def every_third_time():; nonlocal i; i += 1; if i % 3 == 0:; return True; return False; with aiohttp.ClientSession(raise_for_status=True,; > timeout=aiohttp.ClientTimeout(total=60)) as real_session:. io/test/test_batch.py:441: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <aiohttp.client.ClientSession object at 0x7f96a2a4d550>. def __enter__(self) -> None:; > raise TypeError(""Use async with instead""); E TypeError: Use async with instead. usr/local/lib/python3.6/dist-packages/aiohttp/client.py:964: TypeError; ```. ```; self._tasks = ordered_tasks; try:; self._backend._run(self, dry_run, verbose, delete_scratch_on_exit, **backend_kwargs); finally:; > self._backend.close(); E AttributeError: 'LocalBackend' object has no attribute 'close'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7875#issuecomment-575754393:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/7875#issuecomment-575754393,8,"['Test', 'test']","['Test', 'test', 'testMethod']"
Testability,"You ran out of disk, apparently. https://ci.hail.is/batches/1181/jobs/25/log",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6344#issuecomment-501853609:73,log,log,73,https://hail.is,https://github.com/hail-is/hail/pull/6344#issuecomment-501853609,1,['log'],['log']
Testability,You should also include some tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3895#issuecomment-402918034:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/3895#issuecomment-402918034,1,['test'],['tests']
Testability,You should be able to use the test/deploy script from internal-resources: https://github.com/hail-is/internal-resources/blob/master/gcp_build.sh.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/744#issuecomment-248415882:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/issues/744#issuecomment-248415882,1,['test'],['test']
Testability,"You should benchmark linear search vs priority queue in the merge itself. You can either implement both and compare on a representative benchmark in context, or code up the merge code itself into a targeted benchmark, something along the lines of:. Generate 10 million (or more, large enough to get a stable measurement) random input integers `Array[A]` in a wrapper class `class A(i: Int)` to simulate `RegionValue`. We're aiming to merge N = ~100 elements, so put 100 into either an array or priority heap, pull out the smallest values, and update them with new input values until the input values and array are both exhausted. Test with N = 10, 100, 1000. If you do the latter, post the benchmark. I think we'll need to re-visit this trade-off again when we switch to C++.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4396#issuecomment-428335101:11,benchmark,benchmark,11,https://hail.is,https://github.com/hail-is/hail/pull/4396#issuecomment-428335101,5,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,You still have test failures.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9035#issuecomment-658331383:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/9035#issuecomment-658331383,1,['test'],['test']
Testability,You want me to set up the deploy logic to match batch and the other services?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4446#issuecomment-424728688:33,log,logic,33,https://hail.is,https://github.com/hail-is/hail/pull/4446#issuecomment-424728688,1,['log'],['logic']
Testability,"You'll get an error [if the character set is incompatible with the collation](https://dev.mysql.com/doc/refman/8.0/en/charset-collation-compatibility.html), so as long as this passes CI it should be fine on that account. As to why that particular collation, I found it on the [case sensitivity in string searches page](https://dev.mysql.com/doc/refman/8.0/en/case-sensitivity.html). The default is `utf8mb4_0900_ai_ci` and the first case sensitive alternative mentioned is this one. The change log indicates that ""as"" means accent sensitive and ""cs"" means case sensitive. The 0900 seems to refer to Unicode 9.0.0. Anyway, it seems sensible to use a Unicode collation rather than a binary one because Unicode encodings have more meaning than their bytes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12276#issuecomment-1268732639:494,log,log,494,https://hail.is,https://github.com/hail-is/hail/pull/12276#issuecomment-1268732639,1,['log'],['log']
Testability,You'll need to fix tests that use sample id annotation from balding nichols model.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3056#issuecomment-370023129:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/3056#issuecomment-370023129,1,['test'],['tests']
Testability,You're getting an assertion error in MatrixIR,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3857#issuecomment-400791168:18,assert,assertion,18,https://hail.is,https://github.com/hail-is/hail/pull/3857#issuecomment-400791168,1,['assert'],['assertion']
Testability,"You're good on tests, I was looking at the wrong thing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9474#issuecomment-694955960:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/9474#issuecomment-694955960,1,['test'],['tests']
Testability,"You're missing an await:. ```; deploy_statuses = resp.json(); > assert len(deploy_statuses) == 1, deploy_statuses; E TypeError: object of type 'coroutine' has no len(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7592#issuecomment-559056090:64,assert,assert,64,https://hail.is,https://github.com/hail-is/hail/pull/7592#issuecomment-559056090,1,['assert'],['assert']
Testability,"You're the lucky winner @jbloom22 . ~Also, weird, the tests are failing, but in code I didn't write...~",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5249#issuecomment-460502414:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/5249#issuecomment-460502414,1,['test'],['tests']
Testability,"You're the reviewer: you're the boss. I switched to the second style. I also added missingness cases to the Scala tests, found and fixed a couple of bugs, including the FilterArray behavior (if the condition is true, even on NA elements, the NA elements should remain). Added corresponding tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3552#issuecomment-388694213:114,test,tests,114,https://hail.is,https://github.com/hail-is/hail/pull/3552#issuecomment-388694213,2,['test'],['tests']
Testability,"You’re right, it could be useful to have a scala-specific test, but any breaking changes away from old ls behavior will cause the hadoop_ls test to fail (since Python presents our public interface, the more important single test to have). edit: iPhone typos",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558616975:58,test,test,58,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558616975,3,['test'],['test']
Testability,"[(1.9, 1.8), (4.71, 2.2), (7.1, 4.06), (51, 13.8), (92, 55.7), (93, 54.6), (300, 224)]. ![logregperformancecomp](https://cloud.githubusercontent.com/assets/3201642/23811222/07899f02-05a3-11e7-8799-40e5373d4457.png)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1425#issuecomment-285771238:90,log,logregperformancecomp,90,https://hail.is,https://github.com/hail-is/hail/pull/1425#issuecomment-285771238,1,['log'],['logregperformancecomp']
Testability,"[First successful master build with this configuration](https://ci.hail.is/viewLog.html?buildId=493&buildTypeId=HailSourceCode_HailCi&tab=buildLog&consoleStyle=false#_state=116,125&focus=123). PR builds will also trigger the three compiles before the `clean test createDocs`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/742#issuecomment-245038405:258,test,test,258,https://hail.is,https://github.com/hail-is/hail/issues/742#issuecomment-245038405,1,['test'],['test']
Testability,"[batch.log](https://github.com/hail-is/hail/files/2504453/batch.log). Here's a snippet:; ```; INFO | 2018-10-23 03:27:48,536 | server.py | mark_complete:184 | job 151 complete, exit_code 2; INFO | 2018-10-23 03:27:48,541 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:27:48] ""POST /pod_changed HTTP/1.1"" 204 -; ...skipping...; File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 600, in urlopen; chunked=chunked); File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 386, in _make_request; self._raise_timeout(err=e, url=url, timeout_value=read_timeout); File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 306, in _raise_timeout; raise ReadTimeoutError(self, url, ""Read timed out. (read timeout=%s)"" % timeout_value); urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=120). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/batch/server.py"", line 417, in run_forever; target(*args, **kwargs); File ""/batch/server.py"", line 441, in kube_event_loop; requests.post('http://127.0.0.1:5000/pod_changed', json={'pod_name': name}, timeout=120); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 116, in post; return request('post', url, data=data, json=json, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 60, in request; return session.request(method=method, url=url, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 524, in request; resp = self.send(prep, **send_kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 637, in send; r = adapter.send(request, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/adapters.py"", line 529, in send; raise ReadTimeout(e, request=request); requests.exceptions.ReadTimeout: HTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=120); INFO | 2018-1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038,2,['log'],['log']
Testability,"[this comment](https://github.com/hail-is/hail/pull/8265#issuecomment-601360575) describes the test failure -- it looks like something was a numpy array, but is now a nested list.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8265#issuecomment-601665796:95,test,test,95,https://hail.is,https://github.com/hail-is/hail/pull/8265#issuecomment-601665796,1,['test'],['test']
Testability,"_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorI",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583:1848,test,test,1848,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583,1,['test'],['test']
Testability,_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1622,test,test,1622,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"_From @alexb-3 on August 26, 2015 16:10_. This represents implementing and testing the chi squared version. See also https://github.com/cseed/k3/issues/21",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12#issuecomment-152269033:75,test,testing,75,https://hail.is,https://github.com/hail-is/hail/issues/12#issuecomment-152269033,1,['test'],['testing']
Testability,"_From @jbloom22 on August 26, 2015 21:12_. I've fixed the variant type Boolean methods, added a variantType method which returns the enumerated type, and written tests for all.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2#issuecomment-152268753:162,test,tests,162,https://hail.is,https://github.com/hail-is/hail/issues/2#issuecomment-152268753,1,['test'],['tests']
Testability,"_From @jbloom22 on August 27, 2015 1:13_. Looks great! One small change to code and testing, then go ahead and merge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/23#issuecomment-152270045:84,test,testing,84,https://hail.is,https://github.com/hail-is/hail/issues/23#issuecomment-152270045,1,['test'],['testing']
Testability,"_From @jbloom22 on October 14, 2015 1:26_. core statistical test, though i reworked the formulas:; https://en.wikipedia.org/wiki/Simple_linear_regression#Normality_assumption",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/50#issuecomment-152273680:60,test,test,60,https://hail.is,https://github.com/hail-is/hail/issues/50#issuecomment-152273680,1,['test'],['test']
Testability,"__(params); ; @@ -989,12 +991,7 @@ class CreateDatabaseStep(Step):; self.create_database_job = None; self.cleanup_job = None; ; - if params.scope == 'dev':; - self.database_server_config_namespace = params.code.namespace; - else:; - self.database_server_config_namespace = DEFAULT_NAMESPACE; -; - self.cant_create_database = is_test_deployment or params.scope == 'dev'; + self.cant_create_database = is_test_deployment; ; # MySQL user name can be up to 16 characters long before MySQL 5.7.8 (32 after); if self.cant_create_database:; @@ -1005,6 +1002,11 @@ class CreateDatabaseStep(Step):; self._name = database_name; self.admin_username = f'{database_name}-admin'; self.user_username = f'{database_name}-user'; + elif params.scope == 'dev':; + dev_username = params.code.config()['user']; + self._name = f'{dev_username}-{database_name}'; + self.admin_username = f'{dev_username}-{database_name}-admin'; + self.user_username = f'{dev_username}-{database_name}-user'; else:; assert params.scope == 'test'; self._name = f'{params.code.short_str()}-{database_name}-{self.token}'; @@ -1030,7 +1032,7 @@ class CreateDatabaseStep(Step):; @staticmethod; def from_json(params: StepParameters):; json = params.json; - return CreateDatabaseStep(; + return CreateDatabase2Step(; params,; json['databaseName'],; json['namespace'],; @@ -1111,12 +1113,12 @@ EOF; attributes={'name': self.name},; secrets=[; {; - 'namespace': self.database_server_config_namespace,; + 'namespace': self.namespace,; 'name': 'database-server-config',; 'mount_path': '/sql-config',; }; ],; - service_account={'namespace': DEFAULT_NAMESPACE, 'name': 'ci-agent'},; + service_account={'namespace': self.namespace, 'name': 'admin'},; input_files=input_files,; parents=[self.create_passwords_job] if self.create_passwords_job else self.deps_parents(),; network='private',; @@ -1125,42 +1127,4 @@ EOF; ); ; def cleanup(self, batch, scope, parents):; - if scope in ['deploy', 'dev'] or self.cant_create_database:; - return; -; - cleanup_scri",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600:1898,test,test,1898,https://hail.is,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600,1,['test'],['test']
Testability,"__________ Test.test_list_batches ____________________________. self = <test.test_batch.Test testMethod=test_list_batches>. def test_list_batches(self):; tag = secrets.token_urlsafe(64); b1 = self.client.create_batch(attributes={'tag': tag, 'name': 'b1'}); b1.create_job('alpine', ['sleep', '30']); b1.close(); ; b2 = self.client.create_batch(attributes={'tag': tag, 'name': 'b2'}); b2.create_job('alpine', ['echo', 'test']); b2.close(); ; def assert_batch_ids(expected, complete=None, success=None, attributes=None):; batches = self.client.list_batches(complete=complete, success=success, attributes=attributes); # list_batches returns all batches for all prev run tests; actual = set([batch.id for batch in batches]).intersection({b1.id, b2.id}); self.assertEqual(actual, expected); ; assert_batch_ids({b1.id, b2.id}, attributes={'tag': tag}); ; b2.wait(); ; > assert_batch_ids({b1.id}, complete=False, attributes={'tag': tag}). test/test_batch.py:93: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; test/test_batch.py:87: in assert_batch_ids; self.assertEqual(actual, expected); E AssertionError: Items in the second set but not the first:; E 19; ________________________________ test_callback _________________________________. client = <batch.client.BatchClient object at 0x7f0d1363ee80>. def test_callback(client):; from flask import Flask, request; app = Flask('test-client'); output = []; ; @app.route('/test', methods=['POST']); def test():; output.append(request.get_json()); return Response(status=200); ; try:; server = ServerThread(app); server.start(); batch = client.create_batch(callback=server.url_for('/test')); head = batch.create_job('alpine:3.8', command=['echo', 'head']); left = batch.create_job('alpine:3.8', command=['echo', 'left'], parents=[head]); right = batch.create_job('alpine:3.8', command=['echo', 'right'], parents=[head]); tail = batch.create_job('alpine:3.8', command=['echo', 'tail'], parents=[left, right]); batch.close(); bat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506:1213,test,test,1213,https://hail.is,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506,1,['test'],['test']
Testability,"____________________________________________________ Tests.test_block_matrix_entries ______________________________________________________________________________. self = <test.hail.linalg.test_linalg.Tests testMethod=test_block_matrix_entries>. @fails_local_backend(); def test_block_matrix_entries(self):; n_rows, n_cols = 5, 3; rows = [{'i': i, 'j': j, 'entry': float(i + j)} for i in range(n_rows) for j in range(n_cols)]; schema = hl.tstruct(i=hl.tint32, j=hl.tint32, entry=hl.tfloat64); table = hl.Table.parallelize([hl.struct(i=row['i'], j=row['j'], entry=row['entry']) for row in rows], schema); table = table.annotate(i=hl.int64(table.i),; j=hl.int64(table.j)).key_by('i', 'j'); ; ndarray = np.reshape(list(map(lambda row: row['entry'], rows)), (n_rows, n_cols)); ; for block_size in [1, 2, 1024]:; block_matrix = BlockMatrix.from_numpy(ndarray, block_size); entries_table = block_matrix.entries(); self.assertEqual(entries_table.count(), n_cols * n_rows); self.assertEqual(len(entries_table.row), 3); > self.assertTrue(table._same(entries_table)); E AssertionError: False is not true. test/hail/linalg/test_linalg.py:868: AssertionError; ----------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------; Table._same: rows differ:; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=4.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=4.0)]; R: [Struct(entry=0.0)]; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406:1248,assert,assertTrue,1248,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406,4,"['Assert', 'assert', 'test']","['AssertionError', 'assertTrue', 'test']"
Testability,"_________________________________________________________________ Tests.test_block_matrix_entries ______________________________________________________________________________. self = <test.hail.linalg.test_linalg.Tests testMethod=test_block_matrix_entries>. @fails_local_backend(); def test_block_matrix_entries(self):; n_rows, n_cols = 5, 3; rows = [{'i': i, 'j': j, 'entry': float(i + j)} for i in range(n_rows) for j in range(n_cols)]; schema = hl.tstruct(i=hl.tint32, j=hl.tint32, entry=hl.tfloat64); table = hl.Table.parallelize([hl.struct(i=row['i'], j=row['j'], entry=row['entry']) for row in rows], schema); table = table.annotate(i=hl.int64(table.i),; j=hl.int64(table.j)).key_by('i', 'j'); ; ndarray = np.reshape(list(map(lambda row: row['entry'], rows)), (n_rows, n_cols)); ; for block_size in [1, 2, 1024]:; block_matrix = BlockMatrix.from_numpy(ndarray, block_size); entries_table = block_matrix.entries(); self.assertEqual(entries_table.count(), n_cols * n_rows); self.assertEqual(len(entries_table.row), 3); > self.assertTrue(table._same(entries_table)); E AssertionError: False is not true. test/hail/linalg/test_linalg.py:868: AssertionError; ----------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------; Table._same: rows differ:; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=1.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=2.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=4.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=3.0)]; R: [Struct(entry=0.0)]; Row mismatch:; L: [Struct(entry=4.0)]; R: [Struct(ent",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406:1201,assert,assertEqual,1201,https://hail.is,https://github.com/hail-is/hail/pull/9524#issuecomment-701539406,1,['assert'],['assertEqual']
Testability,_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1307,test,test,1307,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8331,test,test,8331,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"_input('gs://hail-jigold/random_file.txt'). # Import a set of input files as a resource group; input_bfile = p.read_input_group(bed='gs://hail-jigold/input.bed',; bim='gs://hail-jigold/input.bim',; fam='gs://hail-jigold/input.fam'). # Remove duplicate samples from a PLINK dataset; subset = p.new_task(); subset = (subset; .label('subset'); .docker('ubuntu'); .declare_resource_group(tmp1=bfile, ofile=bfile); .command(f'plink --bfile {input_bfile} --make-bed {subset.tmp1}'); .command(f""awk '{{ print $1, $2}}' {subset.tmp1.fam} | sort | uniq -c | awk '{{ if ($1 != 1) print $2, $3 }}' > {subset.tmp2}""); .command(f""plink --bed {input_bfile.bed} --bim {input_bfile.bim} --fam {input_bfile.fam} --remove {subset.tmp2} --make-bed {subset.ofile}"". )). # Run shapeit for each contig from 1-3 with the output from subset; for contig in [str(x) for x in range(1, 4)]:; shapeit = p.new_task(); shapeit = (shapeit; .label('shapeit'); .declare_resource_group(ofile={'haps': ""{root}.haps"", 'log': ""{root}.log""}); .command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit.ofile}')). # Merge the shapeit output files together; merger = p.new_task(); merger = (merger; .label('merge'); .command('cat {files} >> {ofile}'.format(files="" "".join([t.ofile.haps for t in p.select_tasks('shapeit')]),; ofile=merger.ofile))). # Write the result of the merger to a permanent location; p.write_output(merger.ofile, ""gs://jigold/final_output.txt""). # Execute the pipeline; p.run(dry_run=True); ```. ```bash; #!/bin/bash; set -ex. # change cd to tmp directory; cd /tmp//pipeline.jlQrNJZW/. # __TASK__0 read_input; cp gs://hail-jigold/random_file.txt nfVpMp4n. # __TASK__1 read_input; cp gs://hail-jigold/input.bed 33qZtfwg.bed. # __TASK__2 read_input; cp gs://hail-jigold/input.bim 33qZtfwg.bim. # __TASK__3 read_input; cp gs://hail-jigold/input.fam 33qZtfwg.fam. # __TASK__4 subset; __RESOURCE_GROUP__0=33qZtfwg; __RESOURCE_GROUP__1=yibUlBkL; __RESOURCE__6=yibUlBkL.fam; __RESOURCE__10=29aBQihd; __RESOURCE_",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282:1531,log,log,1531,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282,1,['log'],['log']
Testability,_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dkin,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:10487,test,test-,10487,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unfiltered.vcf) discordance=(RodBinding name= source=UNBOUND) concordance=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sample_name=[] sample_expressions=null sample_file=null exclude_sample_name=[] exclude_sample_file=[] select_expressions=[] excludeNonVariants=false excludeFiltered=false regenotype=false restrictAllelesTo=ALL keepOriginalAC=false mendelianViolation=false mendelianViolationQualThreshold=0.0 select_random_fraction=0.0 remove_fraction_genotypes=0.0 selectTypeToInclude=[INDEL] keepIDs=null fullyDecode=false forceGenotypesDecode=false justRead=false maxIndelSize=2147483647 ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES=false filter_mismatching_base_and_quals=false""; ##UnifiedGenotyper=""analysis_type=UnifiedGenotyper input_file=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.bam.list] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/scatter/temp_0001_of_1200/scattered.intervals] excludeIntervals=null interval_set_rule=UNION interval_merging",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:12958,stub,stubs,12958,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"` all behave as expected. ```; import hail as hl. giab_gs_path = 'gs://xxxxxxxx'; giab_ds = hl.import_vcf(giab_gs_path, reference_genome='GRCh38'); giab_sm = hl.SplitMulti(giab_ds); giab_ds = giab_sm.result(); giab_ds.describe(); gaib_ds.count(); gaib_ds._force_count_rows(); # all good. sent_gs_path = 'gs://xxxxxxxxxxx'; sent_ds = hl.import_vcf(sent_gs_path, reference_genome='GRCh38'); sent_sm = hl.SplitMulti(sent_ds); sent_ds = sent_sm.result(); sent_ds.describe(); sent_ds.count(); sent_ds._force_count_rows(); # all good. # then this gives the stack trace below. giab_22_ds = hl.filter_intervals(giab_ds, [hl.parse_locus_interval('chr22', reference_genome='GRCh38')]); ```. Stack trace:. ```; FatalError: ClassCastException: is.hail.codegen.generated.C29 cannot be cast to is.hail.asm4s.AsmFunction5. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 19.0 failed 20 times, most recent failure: Lost task 0.19 in stage 19.0 (TID 312, gilson-validation-test-2-w-4.c.perfect-atrium-179917.internal, executor 2): java.lang.ClassCastException: is.hail.codegen.generated.C29 cannot be cast to is.hail.asm4s.AsmFunction5; 	at is.hail.expr.TableMapRows$$anonfun$execute$5.apply(Relational.scala:1641); 	at is.hail.expr.TableMapRows$$anonfun$execute$5.apply(Relational.scala:1637); 	at is.hail.sparkextras.ContextRDD$$anonfun$mapPartitions$1.apply(ContextRDD.scala:151); 	at is.hail.sparkextras.ContextRDD$$anonfun$mapPartitions$1.apply(ContextRDD.scala:151); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19.apply(ContextRDD.scala:280); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19.apply(ContextRDD.scala:280); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19$$anonfun$apply$20.apply(ContextRDD.scala:280); 	at is.hail.sparkextras.ContextRDD$$anonfun$cmapPartitions$1$$anonfun$apply$19$$anonfun$apply$20.apply(ContextRDD.scala:280); 	at scala.collection.It",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3446#issuecomment-385847410:1211,test,test-,1211,https://hail.is,https://github.com/hail-is/hail/issues/3446#issuecomment-385847410,1,['test'],['test-']
Testability,"` is essentially a named `Gen[Unit]`; - The type of `Prop.forAll` is `Gen[T] -> (U -> Boolean) -> Prop`; - The first two observations suggest: `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Unit]`; - A `Gen[Unit]` is a bit artificial because the test framework halts execution (presumably with an exception) when a counter-example is found. I instead prefer that `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Boolean]`; - Now `Prop.forAll` has the same type as `Gen.flatMap[Boolean]`. It seems the difference between `forAll` and `flatMap` is that `forAll` conceptually preforms a product operation while `flatMap` performs a sampling. However, I think they are, in reality, the same operation: sampling. The implementation for `GenProp3` looks like:. ``` scala; for (i <- 0 until p.count) {; val v1 = g1(p); val v2 = g2(p); val v3 = g3(p); val r = f(v1, v2, v3); if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; }; ```. Which could be re-written as:. ``` scala; for (i <- 0 until p.count) {; (for (v1 <- g1; v2 <- g2; v3 <- g3) {; if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; })(p); }; ```. The primary difference between `flatMap` and `forAll` seems to be in error reporting. We can fix this by noting `Gen[T]` is currently a Reader monad on `Parameters`. If we add a ""forAll stack"" to `Parameters` we could implement `forAll` as:. ``` scala; def forAll[T,U](gt: Gen[T], gu: T -> Gen[U]): Gen[U] =; for (t <- gt; u <- local(pushQuantified(t), gu(t)) yield u. def pushQuantified(x: Any)(Parameters p): Paramters =; new Parameters(p.rng, p.size, p.count, (x :: p.quanitifed)); ```. We complete the Reader monad transformation by adding the `local` operation to `class Gen[T]`. ``` scala; // in class Gen; def local(modify: Parameters -> Parameters, gu: G",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/400#issuecomment-238901220:1059,assert,assert,1059,https://hail.is,https://github.com/hail-is/hail/issues/400#issuecomment-238901220,1,['assert'],['assert']
Testability,`; mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1273,test,test,1273,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"`PackEncoder` was in the `io` package. Which was imported using `import is.hail.io._` where it was used. I placed it in `is.hail.nativecode` in the tests, making it visible to `is.hail.nativecode` implicitly.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6628#issuecomment-511217789:148,test,tests,148,https://hail.is,https://github.com/hail-is/hail/pull/6628#issuecomment-511217789,1,['test'],['tests']
Testability,`RVDPartitioner` has an assertion that `allowedOverlap >= 0`. I think `lteqWithOverlap` assumes that as well. Can you figure out where the -1 is coming from?. Edit: I take it back. I did test the -1 case. Let me remember how this works.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-595422967:24,assert,assertion,24,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-595422967,2,"['assert', 'test']","['assertion', 'test']"
Testability,"``>>> import subprocess``; ``>>> old_popen = subprocess.Popen``; ``>>> def wrapped(*args, **kwargs):``; ``... print('args are: ' + str(args))``; ``... print('kwargs are: ' + str(kwargs))``; ``... return old_popen(*args, **kwargs)``; ``... ``; ``>>> subprocess.Popen = wrapped``; ``>>> hc = HailContext()``; ``Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties``; ``Setting default log level to ""WARN"".``; ``To adjust logging level use sc.setLogLevel(newLevel).``; ``Traceback (most recent call last):``; `` File ""<stdin>"", line 1, in <module>``; `` File ""<decorator-gen-422>"", line 2, in __init__``; `` File ""/Users/ih/languages/hail.is/hail/python/hail/typecheck/check.py"", line 226, in _typecheck; return f(*args, **kwargs)``; `` File ""/Users/ih/languages/hail.is/hail/python/hail/context.py"", line 83, in __init__; parquet_compression, min_block_size, branching_factor, tmp_dir)``; ``TypeError: 'JavaPackage' object is not callable``. Is this what you were suggesting or am I missing something?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-319717790:410,log,log,410,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-319717790,2,['log'],"['log', 'logging']"
Testability,```; $ gradle check; :compileJava UP-TO-DATE; :compileScala UP-TO-DATE; :processResources UP-TO-DATE; :classes UP-TO-DATE; :compileTestJava UP-TO-DATE; :compileTestScala UP-TO-DATE; :processTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :test; objc[30146]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:217,test,testClasses,217,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,13,['test'],"['test', 'testCall', 'testClasses']"
Testability,```; $ hail-bench compare head.json branch.json; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; mt_group_by_memory_usage 97.3% 6.788 6.605 0.6% 135 1; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11312#issuecomment-1029148692:49,Benchmark,Benchmark,49,https://hail.is,https://github.com/hail-is/hail/pull/11312#issuecomment-1029148692,1,['Benchmark'],['Benchmark']
Testability,"```; + gsutil cp build/libs/hail-all-spark.jar gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar; Copying file://build/libs/hail-all-spark.jar [Content-Type=application/java-archive]...; / [0 files][ 0.0 B/ 27.2 MiB] ; / [1 files][ 27.2 MiB/ 27.2 MiB] ; -; Operation completed over 1 objects/27.2 MiB. . real	0m3.308s; user	0m1.212s; sys	0m0.548s; + gsutil cp build/distributions/hail-python.zip gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip; Copying file://build/distributions/hail-python.zip [Content-Type=application/zip]...; / [0 files][ 0.0 B/ 1.4 MiB] ; / [1 files][ 1.4 MiB/ 1.4 MiB] ; Operation completed over 1 objects/1.4 MiB. . real	0m2.852s; user	0m1.179s; sys	0m0.429s; + cluster start ci-test-6boype3d --master-machine-type n1-standard-1 --master-boot-disk-size 40 --worker-machine-type n1-standard-1 --worker-boot-disk-size 40 --version 0.2 --spark 2.2.0 --max-idle 10m --bucket=hail-ci-0-1-dataproc-staging-bucket --jar gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar --zip gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip --vep; Waiting on operation [projects/broad-ctsa/regions/global/operations/2b6b5772-e45f-3873-be2f-0e04327d29d7].; Waiting for cluster creation operation...; WARNING: For PD-Standard, we strongly recommend provisioning 1TB or larger to ensure consistently high I/O performance. See https://cloud.google.com/compute/docs/disks/performance for information on disk I/O performance.; ...................................................................................................................................................................................................................................................................................................................................",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:832,test,test-,832,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['test'],['test-']
Testability,```; Checking 'hl.vep' replicates on 'gs://hail-common/vep/vep/vep_examplars/vep_35d9e30.mt'; 2018-08-22 20:43:44 Hail: INFO: vep: annotated 1196 variants; TEST PASSED; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4189#issuecomment-415173413:156,TEST,TEST,156,https://hail.is,https://github.com/hail-is/hail/pull/4189#issuecomment-415173413,1,['TEST'],['TEST']
Testability,```; Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gra,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,18,['test'],"['test', 'testCall', 'testSameAsOrigBGzip', 'testSameAsOrigNoCompression', 'testSorted']"
Testability,"```; In [4]: hc.import_vcf('src/test/resources/malformed.vcf').count(); hail: info: Coerced sorted dataset; ---------------------------------------------------------------------------; FatalError Traceback (most recent call last); <ipython-input-4-955ea6a16c80> in <module>(); ----> 1 hc.import_vcf('src/test/resources/malformed.vcf').count(). /Users/tpoterba/hail/python/hail/dataset.py in count(self, genotypes); 1127 """"""; 1128; -> 1129 return dict(self._jvdf.count(genotypes).toJavaMap()); 1130; 1131 def deduplicate(self):. /Users/tpoterba/spark-2.0.2-bin-hadoop2.7/python/lib/py4j-0.10.3-src.zip/py4j/java_gateway.py in __call__(self, *args); 1131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134; 1135 for temp_arg in temp_args:. /Users/tpoterba/spark-2.0.2-bin-hadoop2.7/python/pyspark/sql/utils.pyc in deco(*a, **kw); 61 def deco(*a, **kw):; 62 try:; ---> 63 return f(*a, **kw); 64 except py4j.protocol.Py4JJavaError as e:; 65 s = e.java_exception.toString(). /Users/tpoterba/hail/python/hail/java.py in deco(*a, **kw); 109 # deepest = env.jutils.deepestMessage(e.java_exception); 110 # msg = env.jutils.getMinimalMessage(e.java_exception); --> 111 raise FatalError('%s\n\nJava stack trace:\n%s\n\nERROR SUMMARY: %s' % (deepest, full, deepest)); 112 except py4j.protocol.Py4JError as e:; 113 if e.args[0].startswith('An error occurred while calling'):. FatalError: HailException: malformed.vcf: caught htsjdk.tribble.TribbleException$InternalCodecException: The allele with index 10026357 is not defined in the REF/ALT columns in the record; offending line: 20	10026348	.	A	G	7535.22	PASS	HWP=1.0;AC=2;culprit=Inbreedi... Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 3.0 failed 1 times, most recent failure: Lost task 0.0 in stage 3.0 (TID 3, localhost): is.hail.utils.HailException: malformed.vcf: caught htsjdk.tribble.Tri",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1552#issuecomment-287190882:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/1552#issuecomment-287190882,2,['test'],['test']
Testability,"```; In [4]: ht = hl.import_table('src/test/resources/variantAnnotations.alternateformat.tsv', min_partitions=100); 2019-01-20 11:36:31 Hail: INFO: Reading table with no type imputation; Loading column 'Chromosome:Position:Ref:Alt' as type 'str' (type not specified); Loading column 'Rand1' as type 'str' (type not specified); Loading column 'Rand2' as type 'str' (type not specified); Loading column 'Gene' as type 'str' (type not specified). In [5]: ht.n_partitions(); Out[5]: 1. In [6]: ht.repartition(100).n_partitions(); Out[6]: 1; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5177#issuecomment-455882267:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/issues/5177#issuecomment-455882267,1,['test'],['test']
Testability,"```; echo $SPARK_CLASSPATH; /Users/ih/languages/hail.is/hail/build/libs/hail-all-spark.jar; ```; SPARK_CLASSPATH is set correctly, however, I still get the error message; ```; >>> hc = HailContext(); Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-422>"", line 2, in __init__; File ""/Users/ih/languages/hail.is/hail/python/hail/typecheck/check.py"", line 226, in _typecheck; return f(*args, **kwargs); File ""/Users/ih/languages/hail.is/hail/python/hail/context.py"", line 83, in __init__; parquet_compression, min_block_size, branching_factor, tmp_dir); TypeError: 'JavaPackage' object is not callable; ```. What do I need to do about the driverClassPath?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-319712395:297,log,log,297,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-319712395,2,['log'],"['log', 'logging']"
Testability,```; hail/python/hail/vds/combiner/variant_dataset_combiner.py:401:16: E713 [*] Test for membership should be `not in`; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13081#issuecomment-1557732955:80,Test,Test,80,https://hail.is,https://github.com/hail-is/hail/pull/13081#issuecomment-1557732955,1,['Test'],['Test']
Testability,"```; io/test/test_batch.py::Test::test_batch_create_validation FAILED; ______________________ Test.test_batch_create_validation _______________________. self = <test.test_batch.Test testMethod=test_batch_create_validation>. def test_batch_create_validation(self):; bad_configs = [; # unexpected field fleep; {'billing_project': 'foo', 'n_jobs': 5, 'token': 'baz', 'fleep': 'quam'},; # billing project None/missing; {'billing_project': None, 'n_jobs': 5, 'token': 'baz'},; {'n_jobs': 5, 'token': 'baz'},; # n_jobs None/missing; {'billing_project': 'foo', 'n_jobs': None, 'token': 'baz'},; {'billing_project': 'foo', 'token': 'baz'},; # n_jobs wrong type; {'billing_project': 'foo', 'n_jobs': '5', 'token': 'baz'},; # token None/missing; {'billing_project': 'foo', 'n_jobs': 5, 'token': None},; {'billing_project': 'foo', 'n_jobs': 5},; # attribute key/value None; {'attributes': {None: 'v'}, 'billing_project': 'foo', 'n_jobs': 5, 'token': 'baz'},; {'attributes': {'k': None}, 'billing_project': 'foo', 'n_jobs': 5, 'token': 'baz'},; ]; url = deploy_config.url('batch', '/api/v1alpha/batches/create'); headers = service_auth_headers(deploy_config, 'batch'); for config in bad_configs:; r = requests.post(url, json=config, allow_redirects=True, headers=headers); > assert r.status_code == 400, (config, r); E AssertionError: ({'attributes': {None: 'v'}, 'billing_project': 'foo', 'n_jobs': 5, 'token': 'baz'}, <Response [403]>); E assert 403 == 400; E -403; E +400. io/test/test_batch.py:487: AssertionError; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7915#issuecomment-575931099:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7915#issuecomment-575931099,11,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Test', 'assert', 'test', 'testMethod']"
Testability,"```; resource.type=""gce_instance""; logName:""syslog""; labels.""compute.googleapis.com/resource_name"":""batch-worker-default""; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13509#issuecomment-1696022075:35,log,logName,35,https://hail.is,https://github.com/hail-is/hail/pull/13509#issuecomment-1696022075,1,['log'],['logName']
Testability,```; starting test is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations...; Exception:; org.scalatest.exceptions.TestFailedException: files not deleted:; gs://hail-test-ezlis/fs-suite/delete-many-files/72e64985-c4b9-46ff-9191-93b8c4589083/1890.suffix; at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunne,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,13,"['Assert', 'Test', 'test']","['Assertions', 'AssertionsHelper', 'TestFailedException', 'TestNGSuite', 'test', 'test-ezlis', 'testng']"
Testability,"```; wm9f1-8cf:hail tpoterba$ hail read src/test/resources/sample2.vcf; hail: info: running: read src/test/resources/sample2.vcf; hail: fatal: read: input path ending in `.vds' required, found `file:/Users/tpoterba/hail/src/test/resources/sample2.vcf'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/90#issuecomment-256329242:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/issues/90#issuecomment-256329242,3,['test'],['test']
Testability,"```; ❯ java -version. java version ""16.0.1"" 2021-04-20; Java(TM) SE Runtime Environment (build 16.0.1+9-24); Java HotSpot(TM) 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing). ❯ python3 -m pip show pyspark. Name: pyspark; Version: 3.1.1; Summary: Apache Spark Python API; Home-page: https://github.com/apache/spark/tree/master/python; Author: Spark Developers; Author-email: dev@spark.apache.org; License: http://www.apache.org/licenses/LICENSE-2.0; Location: /Users/toby.manders/miniconda3/envs/hail-env/lib/python3.9/site-packages; Requires: py4j; Required-by: hail. ❯ python3 -m pip show hail. Name: hail; Version: 0.2.67; Summary: Scalable library for exploring and analyzing genomic data.; Home-page: https://hail.is; Author: Hail Team; Author-email: hail@broadinstitute.org; License: UNKNOWN; Location: /Users/toby.manders/miniconda3/envs/hail-env/lib/python3.9/site-packages; Requires: requests, pandas, hurry.filesize, nest-asyncio, gcsfs, scipy, fsspec, tabulate, bokeh, PyJWT, Deprecated, decorator, dill, numpy, aiohttp-session, pyspark, tqdm, google-cloud-storage, aiohttp, asyncinit, humanize, python-json-logger, parsimonious; Required-by:; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10524#issuecomment-848330358:1128,log,logger,1128,https://hail.is,https://github.com/hail-is/hail/issues/10524#issuecomment-848330358,1,['log'],['logger']
Testability,"```scala; @Test def testStreamLenUnconsumedInnerStream(): Unit = {; assertEvalsTo(StreamLen(; mapIR(StreamGrouped(filterIR(rangeIR(10))(x => x.cne(0)), 3))( group => ToArray(group)); ), 3); }. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-821205840:11,Test,Test,11,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-821205840,3,"['Test', 'assert', 'test']","['Test', 'assertEvalsTo', 'testStreamLenUnconsumedInnerStream']"
Testability,"```scala; private def boundary(node: IR): IR = {; var streamified = streamify(node). if (streamified.typ.isInstanceOf[TStream] && node.typ.isInstanceOf[TArray]) {; streamified = ToArray(streamified); }. if (streamified.typ.isInstanceOf[TArray] && node.typ.isInstanceOf[TStream]); streamified = ToStream(streamified). println(s""\n\nbefore: \n${node} of typ: ${node.typ}\nafter: ${streamified} of typ: ${streamified.typ}\n\n""); assert(streamified.typ == node.typ); streamified; }. private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TArray]) {; ToStream(node); } else {; node; }; }; }; }; ...; case _ =>; val newChildren = node.children.map(child => boundary(child.asInstanceOf[IR])); val x = if ((node.children, newChildren).zipped.forall(_ eq _)); node; else; node.copy(newChildren). if(x.typ.isInstanceOf[TArray]); ToStream(x); else; x; ```. 4 failed in IRSuite, including testDictContains, as before:. Before Lower: ; MakeTuple(ArrayBuffer((0,ApplyIR(contains,ArrayBuffer(GetTupleElement(In(0,PCTuple[0:PCDict[PInt32,PCString]]),0), NA(int32)))))). before: ; ToArray(Ref(__iruid_2345,dict<int32, str>)) of typ: array<struct{key: int32, value: str}>; after: Ref(__iruid_2345,dict<int32, str>) of typ: dict<int32, str>. java.lang.AssertionError: assertion failed. 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.ir.LowerArrayToStream$.is$hail$expr$ir$LowerArrayToStream$$boundary(LowerArrayToStream.scala:19). wrapping `case x: ApplyIR => streamify(x.explicitNode)` doesn't fix. But the greater point, I think, is that if boundary can ever be called on something that was wrapped in ToStream, we cannot just blindly case ToArray on it. Need to cast ToArray, ToDict, ToSet, or do what I did. I prefer the separate ToArray, ToDict, ToSet, over what I have now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586612345:426,assert,assert,426,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586612345,5,"['Assert', 'assert', 'test']","['AssertionError', 'assert', 'assertion', 'testDictContains']"
Testability,```text; In [4]: hc.import_vcf('src/test/resources/sample.vcf'); hail: info: No multiallelics detected.; hail: info: Coerced sorted dataset; Out[4]: <hail.dataset.VariantDataset at 0x10b0d8ad0>. In [5]: hc.import_vcf('src/test/resources/sample2.vcf'); hail: info: Multiallelics detected. Some methods cannot be run without splitting or filtering multiallelics first.; hail: info: Coerced sorted dataset; Out[5]: <hail.dataset.VariantDataset at 0x10b0d8cd0>; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1632#issuecomment-290863636:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/1632#issuecomment-290863636,2,['test'],['test']
Testability,"`ci-test` is failing, and I don't have access to see why",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10058#issuecomment-781728668:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/10058#issuecomment-781728668,1,['test'],['test']
Testability,`gradle test` runs the scheduler tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6734#issuecomment-514891047:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/6734#issuecomment-514891047,2,['test'],"['test', 'tests']"
Testability,"`hadoop_ls` is implemented in terms of `FS.ls`, and there are ample tests of hadoop_ls in test_utils.py : [see here](https://github.com/hail-is/hail/blob/main/hail/python/test/hail/utils/test_utils.py#L145-L219) and [here](https://github.com/hail-is/hail/blob/main/hail/python/test/hail/utils/test_utils.py#L359-L423). Some of the tests include:; 1. No globbing at all (`test_hadoop_ls`); 2. Globbing in the second to last component (`test_hadoop_glob_heterogenous_structure`, `test_hadoop_ls_folder_glob`); 3. Globbing in the last component (`test_hadoop_ls_glob_1`, `test_hadoop_ls_glob_2`, `test_hadoop_ls_negated_group`); 4. Multiple globs before the last component (`test_hadoop_ls_two_folder_globs`); 5. Multiple globs including the last component (`test_hadoop_ls_prefix_folder_glob_qmarks`, `test_hadoop_ls_two_folder_globs_and_two_qmarks`, `test_hadoop_ls_one_folder_glob_and_qmarks_in_multiple_components`, `test_hadoop_ls_component_with_only_groups`)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13253#issuecomment-1640489578:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/13253#issuecomment-1640489578,4,['test'],"['test', 'tests']"
Testability,"`large_range_matrix_table_sum()` failed in the benchmarks, looking into that. When I ran it locally, seemed to be allocating more memory than I would think, so there's probably a leak there. Otherwise, I think this is safe to review while I track this one down (and maybe you'll catch the cause of this). ```; 2020-03-26 12:41:14 root: INFO: RegionPool: REPORT_THRESHOLD: 16.0M allocated (792.0K blocks / 15.3M chunks), thread 70: Executor task launch worker for task 10; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8315#issuecomment-604542228:47,benchmark,benchmarks,47,https://hail.is,https://github.com/hail-is/hail/pull/8315#issuecomment-604542228,1,['benchmark'],['benchmarks']
Testability,"`linear_regression_rows_nd` benchmark on my laptop went from 125 seconds to 62 seconds. So this made a 2x difference. The regular linear regression benchmark is still like 25 seconds though, have to figure out next steps to close that gap.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9469#issuecomment-694486478:28,benchmark,benchmark,28,https://hail.is,https://github.com/hail-is/hail/pull/9469#issuecomment-694486478,2,['benchmark'],['benchmark']
Testability,`test_read_partitions` fails on the local (I copied the annotations from that test),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10697#issuecomment-885863026:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/10697#issuecomment-885863026,1,['test'],['test']
Testability,"`test_summarize_run` is segfaulting on the CI server, but it runs fine for me locally (in fact, I can run all of `test_expr.py` with no failures). can somebody else try cloning this branch and running tests locally?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6742#issuecomment-520512516:201,test,tests,201,https://hail.is,https://github.com/hail-is/hail/pull/6742#issuecomment-520512516,1,['test'],['tests']
Testability,`time ../Downloads/plink_mac/plink --bfile src/test/resources/svip_3_2013 --missing`; real 0m0.383s; user 0m0.293s; sys 0m0.072s. Hail reading bed to vds -- 11s (intelliJ test). `time ../Downloads/plink_mac/plink --bgen src/test/resources/bigger.bgen --sample src/test/resources/bigger.sample --make-bed --out testplink`. real 0m9.164s; user 0m8.429s; sys 0m0.520s. Hail reading bgen to vds -- 40s (IntelliJ test),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/72#issuecomment-155571444:47,test,test,47,https://hail.is,https://github.com/hail-is/hail/pull/72#issuecomment-155571444,6,['test'],"['test', 'testplink']"
Testability,a dev deploy of test-dataproc https://ci.hail.is/batches/8123862,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14270#issuecomment-1936173509:16,test,test-dataproc,16,https://hail.is,https://github.com/hail-is/hail/pull/14270#issuecomment-1936173509,1,['test'],['test-dataproc']
Testability,"a simpler solution which was attractive because the microservices are looking more and more like services and less like web servers (even more so moving all the rendering to the front end with the web app, the legacy version of scorecard using jinja is not the representative case). Did you look at aiohttp?; > * From the code:; > > Global variables that are modified ...; > ; > ; > I don't want to have to think about shared state and locking. I want a shared-nothing architecture in the microservices where the only globals are true constants and threads communication by sending immutable data through queues.; > * Finally, a meta-comment. I started reviewing this when it was just ujson, I did a bit of research about json packages to understand your choices and when I came back, the PR had expanded with all the async stuff. I would have approved the ujson stuff. The async stuff could have been a separate PR. Nobody wants to review a moving target, so the scope of a change should be roughly frozen when you assign a PR and additional changes should be minimized and restricted to that scope. You're welcome to have an open PR with no reviewer if you're still fleshing out the scope, of course. Thanks!. In response:. 1) aiohttp is an option, but appears to be generally considered slow on a per-response basis (published benchmarks, haven't had a chance to try it), even potentially slower than flask. It seems wrong to choose something slower if there are are reasonable alternatives.; 2) The globals were a feature of the initial implementation (the GitHub cache). It felt outside of the scope of my PR to change that to some queue solution. Meta comment. Ok. I didn't think it had been looked at, and expanded what it did pretty quickly, as I realized that ujson wasn't helping much. I can make a ujson-specific pr, but my goal was to test async library implementations in a simple applications, since we need a long term strategy for python web stuff that isn't Flask (or not just Flask)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051:1558,benchmark,benchmarks,1558,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,a test job got preempted so that added ~20 minutes to total test time,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11622#issuecomment-1076604840:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/11622#issuecomment-1076604840,2,['test'],['test']
Testability,a.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	..,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1684,test,testng,1684,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:11500,test,test-,11500,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,a:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.f,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:5092,test,test-ezlis,5092,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['test-ezlis']
Testability,a:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1324,Test,TestInvoker,1324,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,"aborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3423,test,test,3423,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"ackSafe$StackFrame.run(StackSafe.scala:32); at is.hail.expr.ir.IRParser$.$anonfun$parse_value_ir$1(Parser.scala:2072); at is.hail.expr.ir.IRParser$.parse(Parser.scala:2068); at is.hail.expr.ir.IRParser$.parse_value_ir(Parser.scala:2072); at is.hail.backend.spark.SparkBackend.$anonfun$parse_value_ir$2(SparkBackend.scala:710); at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:70); at is.hail.utils.package$.using(package.scala:635); at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:70); at is.hail.utils.package$.using(package.scala:635); at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:59); at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:339); at is.hail.backend.spark.SparkBackend.$anonfun$parse_value_ir$1(SparkBackend.scala:709); at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); at is.hail.backend.spark.SparkBackend.parse_value_ir(SparkBackend.scala:708); at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.base/java.lang.reflect.Method.invoke(Method.java:566); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:282); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:238); at java.base/java.lang.Thread.run(Thread.java:834); ```. Note that the following works (removing the literal):; ```python; # use homogeneous array type; variants = [(""10"", 123",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982:11373,log,logTime,11373,https://hail.is,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982,1,['log'],['logTime']
Testability,"action for a current 2.1.0 user:; ```bash; dking@wmb16-359 # gradle -Dspark.verison=2.1.0 compileScala. FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 39. * What went wrong:; A problem occurred evaluating root project 'hail'.; > Please generate a gradle.properties file first by executing ./configure. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.781 secs; 1 dking@wmb16-359 # ./configure; With what version of Spark will you run Hail? (default: 2.0.2); 2.1.0; dking@wmb16-359 # gradle -Dspark.version=2.1.0 compileScala. FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 42. * What went wrong:; A problem occurred evaluating root project 'hail'.; > The spark version must now be explicitly specified in the `gradle.properties`; file. Do *not* specify it with `-Dspark.version`. This version *must* match the; version of the spark installed on the machine or cluster that will execute; hail. You can override the setting in `gradle.properties` with a command line; like:. ./gradlew -PsparkVersion=2.1.1 shadowJar. The previous implicit, default spark version was 2.0.2. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.778 secs; dking@wmb16-359 # gradle compileScala; The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.; at build_2mbp15794fq4sj14khxclz0wz.run(/Users/dking/projects/hail2/build.gradle:168); :compileJava UP-TO-DATE; :nativeLib; (cd libsimdpp-2.0-rc2 && cmake .); -- Configuring done; -- Generating done; -- Build files have been written to: /Users/dking/projects/hail2/src/main/c/libsimdpp-2.0-rc2; :compileScala UP-TO-DATE. BUILD SUCCESSFUL. Total time: 4.418 secs; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1613#issuecomment-290201020:1426,log,log,1426,https://hail.is,https://github.com/hail-is/hail/pull/1613#issuecomment-290201020,1,['log'],['log']
Testability,"actually, I want to add the test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8443#issuecomment-609863468:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/8443#issuecomment-609863468,1,['test'],['test']
Testability,"actually, here's the test I think I want -- it probably won't segfault as written, but will write bad data:. ```python; mt1 = hl.import_vcf(resource('sample.vcf'), array_elements_required=True); mt2 = hl.import_vcf(resource('sample.vcf'), array_elements_required=False). mt3 = mt1.entries().union(mt2.entries()); mt4 = mt1.entries().union(mt2.entries()); assert mt3._same(mt3); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581053876:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581053876,2,"['assert', 'test']","['assert', 'test']"
Testability,"actually, hold off on this for a couple days -- I want to rewrite the logic in the whole file to support a feature I need to lower MatrixMapCols",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6197#issuecomment-496521985:70,log,logic,70,https://hail.is,https://github.com/hail-is/hail/issues/6197#issuecomment-496521985,1,['log'],['logic']
Testability,"actually, the non-transitive dependencies is breaking the tests that use the LSM tree. Will sort out those issues.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8571#issuecomment-615348697:58,test,tests,58,https://hail.is,https://github.com/hail-is/hail/pull/8571#issuecomment-615348697,1,['test'],['tests']
Testability,added a new benchmark:; ```; wm2b0-b9b:hail wang$ hail-bench compare old.json new.json --metric median; Name Ratio Time 1 Time 2; ---- ----- ------ ------; group_by_take_rekey 23.5% 23.902 5.612; ----------------------; Geometric mean: 23.5%; Simple mean: 23.5%; Median: 23.5%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7194#issuecomment-538159223:12,benchmark,benchmark,12,https://hail.is,https://github.com/hail-is/hail/pull/7194#issuecomment-538159223,1,['benchmark'],['benchmark']
Testability,added a struct test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4265#issuecomment-419128948:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/4265#issuecomment-419128948,1,['test'],['test']
Testability,added a test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2662#issuecomment-355776793:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/2662#issuecomment-355776793,1,['test'],['test']
Testability,added asserts.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7355#issuecomment-545073604:6,assert,asserts,6,https://hail.is,https://github.com/hail-is/hail/pull/7355#issuecomment-545073604,1,['assert'],['asserts']
Testability,"added some logic to allow `CallCC` code to be emitted more than once in the same function (see `testDuplicateCallCC`, which used to cause bytecode verification errors).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7055#issuecomment-531960975:11,log,logic,11,https://hail.is,https://github.com/hail-is/hail/pull/7055#issuecomment-531960975,2,"['log', 'test']","['logic', 'testDuplicateCallCC']"
Testability,"added some more tests, passes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9152#issuecomment-663928283:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/9152#issuecomment-663928283,1,['test'],['tests']
Testability,added test and parse rule!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4838#issuecomment-442224856:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/4838#issuecomment-442224856,1,['test'],['test']
Testability,added tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3164#issuecomment-374276131:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/3164#issuecomment-374276131,1,['test'],['tests']
Testability,added tests + addressed comments. Back to you.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2120#issuecomment-327816767:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/2120#issuecomment-327816767,1,['test'],['tests']
Testability,added tests and narrowed the match. I had a bug that generated invalid IR if the `insertedChild` here wasn't a ref.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6456#issuecomment-505908840:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/6456#issuecomment-505908840,1,['test'],['tests']
Testability,"address comments, added test, added Expression.summarize()",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5524#issuecomment-471082610:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/5524#issuecomment-471082610,1,['test'],['test']
Testability,ader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1631,test,testng,1631,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,adinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelE,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1631,test,testGenotypeStream,1631,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],"['test', 'testGenotypeStream']"
Testability,adinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlus,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2136,test,test,2136,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,adinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.g,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2081,test,test,2081,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,afe$.run(StackSafe.scala:16); E 	at is.hail.utils.StackSafe$StackFrame.run(StackSafe.scala:32); E 	at is.hail.expr.ir.IRParser$.$anonfun$parse_matrix_ir$1(Parser.scala:2164); E 	at is.hail.expr.ir.IRParser$.parse(Parser.scala:2136); E 	at is.hail.expr.ir.IRParser$.parse_matrix_ir(Parser.scala:2164); E 	at is.hail.backend.Backend.$anonfun$matrixTableType$2(Backend.scala:186); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); E 	at is.hail.utils.package$.using(package.scala:664); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); E 	at is.hail.utils.package$.using(package.scala:664); E 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); E 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); E 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:407); E 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); E 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); E 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:393); E 	at is.hail.backend.Backend.$anonfun$matrixTableType$1(Backend.scala:185); E 	at is.hail.backend.Backend.jsonToBytes(Backend.scala:175); E 	at is.hail.backend.Backend.matrixTableType(Backend.scala:185); E 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:104); E 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); E 	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82); E 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80); E 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:848); E 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); E 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:817); E 	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:201); ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1933346001:4658,log,logTime,4658,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1933346001,1,['log'],['logTime']
Testability,"after running one 5000-partition job, the extension log is 300k lines",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7087#issuecomment-532900229:52,log,log,52,https://hail.is,https://github.com/hail-is/hail/pull/7087#issuecomment-532900229,1,['log'],['log']
Testability,ageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.main(Worker.scala:177) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main$.main(Main.scala:14) ~[gs:__hail-test-ezlis_dking_jars_c,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:14442,test,test-,14442,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"ah wait - in the example we discussed, there needs to be randomness *after* the order by to fully test this rewrite rule",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411814585:98,test,test,98,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411814585,1,['test'],['test']
Testability,"ah yes - the identity used to create the SAS token needs to have a control plane role on the Storage Account - Owner, Contributor, or (most specific) Storage Account Key Operator Service Role... Is that a manageable role to configure for testing or should I try to explore alternatives in the generation?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13140#issuecomment-1579149359:238,test,testing,238,https://hail.is,https://github.com/hail-is/hail/pull/13140#issuecomment-1579149359,1,['test'],['testing']
Testability,"ah, I see. Do we currently keep that log file in GS?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4437#issuecomment-438077079:37,log,log,37,https://hail.is,https://github.com/hail-is/hail/issues/4437#issuecomment-438077079,1,['log'],['log']
Testability,"ah, also -- one more semantic change. I made stopTestHailContext a no-op, so we don't have to reinitialize Spark for every test module. This is OK, right? We have very few modifications to global state -- reference genomes are the only one I can think of.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887#issuecomment-402165304:123,test,test,123,https://hail.is,https://github.com/hail-is/hail/pull/3887#issuecomment-402165304,1,['test'],['test']
Testability,"ah, need to fix tests",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4759#issuecomment-439925430:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/4759#issuecomment-439925430,1,['test'],['tests']
Testability,"ah, yeah, it was below the fold when I opened a log. now I know what to search for to find it. thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7644#issuecomment-561262685:48,log,log,48,https://hail.is,https://github.com/hail-is/hail/issues/7644#issuecomment-561262685,1,['log'],['log']
Testability,"ah---that's just a log message from the readinessProbe sending requests before the server is fully up, I believe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548103041:19,log,log,19,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548103041,1,['log'],['log']
Testability,aha! Looks like this caught a *separate* optimizer bug related to keying :(. Will fix this test and then fix that bug afterwars.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7071#issuecomment-534279756:91,test,test,91,https://hail.is,https://github.com/hail-is/hail/pull/7071#issuecomment-534279756,1,['test'],['test']
Testability,ail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG.run(TestNG.java:1060); at org.testng.TestNG.privateMain(T,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1586,Test,TestInvoker,1586,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,ail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.m,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1325,test,test,1325,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,ail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:297); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:306); 		at java.io.FilterOutputStream.close(FilterOutputStream.java:159); 		... 27 more; 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 0; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flush,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:7144,test,test-ezlis,7144,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['test-ezlis']
Testability,"ail/typecheck/check.py:577: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:161: in eval_timed; return Env.backend().execute(MakeTuple([ir]), timed=True)[0]; hail/backend/py4j_backend.py:82: in execute; raise e.maybe_user_error(ir) from None; hail/backend/py4j_backend.py:76: in execute; result_tuple = self._jbackend.executeEncode(jir, stream_codec, timed); ../../.venv/lib/python3.10/site-packages/py4j/java_gateway.py:1321: in __call__; return_value = get_return_value(; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . args = ('xro549', <py4j.clientserver.JavaClient object at 0x7fd0d58f6fb0>, 'o1', 'executeEncode'); kwargs = {}; pyspark = <module 'pyspark' from '/home/edmund/.local/src/hail/.venv/lib/python3.10/site-packages/pyspark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.execute(BlockMatrixIR.scala:269); E 	at is.hail.expr.ir.BlockMatrixMap2.execute(BlockMat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:1978,Assert,AssertionError,1978,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,ailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_0952,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:9498,test,test-,9498,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"ain, Oct 25 2023 05:26:35); Spark context Web UI available at http://ip-192-168-125-39.ap-southeast-1.compute.internal:4040; Spark context available as 'sc' (master = yarn, app id = application_1698211907929_0001).; SparkSession available as 'spark'.; >>> import hail as hl; >>> hl.version(); '0.2.124-e739a95489e4'; hl.init(sc); pip-installed Hail requires additional configuration options in Spark referring; to the path to the Hail Python module directory HAIL_DIR,; e.g. /path/to/python/site-packages/hail:; spark.jars=HAIL_DIR/backend/hail-all-spark.jar; spark.driver.extraClassPath=HAIL_DIR/backend/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jarRunning on Apache Spark version 3.3.2-amzn-0.1; SparkUI available at http://ip-192-168-110-167.ap-southeast-1.compute.internal:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.124-e739a95489e4; LOGGING: writing to /mnt/tmp/hail/hail/hail-20231025-0729-0.2.124-e739a95489e4.log; >>> mt = hl.balding_nichols_model(n_populations=3, n_samples=500, n_variants=1_000); 2023-10-25 07:29:48.283 Hail: INFO: balding_nichols_model: generating genotypes for 3 populations, 500 samples, and 1000 variants...; >>> mt.count(); (1000, 500); ```. it seems working in command line using pyspark !. I need to test on jupyter notebook now... FYI the pyspark configs. ```sh ; - Classification: spark-defaults; ConfigurationProperties:; spark.jars: /opt/hail/backend/hail-all-spark.jar; spark.driver.extraClassPath: /opt/hail/backend/hail-all-spark.jar:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/usr/share/aws/emr/emrfs/auxlib/*:/usr/share/aws/emr/goodies/lib/emr-spark-goodies.jar:/usr/share/aws/emr/security/conf:/usr/share/aws/emr/security/lib/*:/usr/share/aws/hmclient/lib/aws-glue-datacatalog-spark-client.jar:/usr/share/java/Hive-JSON-Serde/hive-openx-serde.jar:/usr/share/aws/sagemaker-spar",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949:2996,log,log,2996,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949,1,['log'],['log']
Testability,al.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.reloca,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4823,Test,TestNG,4823,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,al.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4630,Test,TestNG,4630,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,ala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2080,assert,assertEvalsTo,2080,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,2,"['Test', 'assert']","['TestUtils', 'assertEvalsTo']"
Testability,ala:528); 	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277:1401,test,testng,1401,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277,34,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testng']"
Testability,alatest.Assertions.newAssertionFailedException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorke,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1269,Test,TestInvoker,1269,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,"alhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 615.91ms 878.25ms 7.86s 85.85%; Req/Sec 391.30 118.76 1.61k 72.83%; 278943 requests in 1.00m, 42.46MB read; Socket errors: connect 0, read 2079, write 0, timeout 12; Requests/sec: 4642.59; Transfer/sec: 723.58KB. Sanic Run 3 (very large background task spike in last 1-2s of run):; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 543.65ms 839.00ms 7.93s 87.81%; Req/Sec 392.47 118.69 1.42k 73.81%; 279206 requests in 1.00m, 42.54MB read; Socket errors: connect 0, read 2101, write 0, timeout 35; Requests/sec: 4646.20; Transfer/sec: 724.97KB. Aiohttp Run 1:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 747.49ms 1.00s 7.88s 86.77%; Req/Sec 280.95 103.65 1.60k 79.52%; 199147 requests in 1.00m, 36.47MB read; Socket errors: connect 0, read 2058, write 1, timeout 45; Requests/sec: 3313.70; Transfer/sec: 621.36KB. Aiohttp Run 2:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 696.00ms 967.04ms 7.93s 86.48%; Req/Sec 289.87 115.90 1.90k 83.92%; 205188 requests in 1.00m, 37.54MB read; Socket errors: connect 0, read 2041, write 0, timeout 38; Requests/sec: 3414.95; Transfer/sec: 639.84KB. Aiohttp Run 3:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 670.88ms 898.81ms 7.89s 86.58%; Req/Sec 318.17 108.06 1.47k 74.96%; 226300 requests in 1.00m, 41.34MB read; Socket errors: connect 0, read 2053, write 0, timeout 19; Requests",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:5308,test,test,5308,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['test'],['test']
Testability,"ality_prior=20 min_power_threshold_for_calling=0.95 min_reference_depth=100 exclude_filtered_reference_sites=false heterozygosity=0.0010 genotyping_mode=DISCOVERY output_mode=EMIT_VARIANTS_ONLY standard_min_confidence_threshold_for_calling=30.0 standard_min_confidence_threshold_for_emitting=30.0 alleles=(RodBinding name= source=UNBOUND) max_alternate_alleles=6 p_nonref_model=EXACT_INDEPENDENT contamination_fraction_to_filter=0.0 contamination_percentage_per_sample_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.v1.contamination_levels.txt logRemovedReadsFromContaminationFiltering=null exactcallslog=null dbsnp=(RodBinding name=dbsnp source=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.dbsnp.vcf) comp=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub debug_file=null metrics_file=null annotation=[] excludeAnnotation=[] filter_mismatching_base_and_quals=false""; ##VariantAnnotator=""analysis_type=VariantAnnotator input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/references/HybSelOligos/whole_exome_agilent_1.1_refseq_plus_3_boosters/whole_exome_agilent_1.1_refseq_plus_3_boosters.Homo_sapiens_assembly19.targets.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=50 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOrigina",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:16571,stub,stubs,16571,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,all tests pass (including pytest),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7969#issuecomment-578475115:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/7969#issuecomment-578475115,1,['test'],['tests']
Testability,"alrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867286/9e219bc2-f153-11e6-896a-c49e55593312.png). Pvals for all variants, note that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5-a04af188c276.png). Pvals for variants with at least 20 hets, basically the same:; ![logregpval20hets](https://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-9443-1a00bb2e9848.png). LRT iterations:; ![logreglrtiter](https://cloud.githubusercontent.com/assets/3201642/22859676/816119b4-f0b2-11e6-8401-2b6600d6f443.png). Firth iterations:; ![logregfirthiter](https://cloud.githubusercontent.com/assets/3201642/22859677/883c4a6a-f0b2-11e6-9aad-b79e613f2ba7.png). For the record, Wald is mis-calibrated for small counts:; ![logregpvalwaldlrt](https://cloud.githubusercontent.com/assets/3201642/22859691/f629f5fe-f0b2-11e6-98fe-b96b3ef497ec.png). Score is more conservative than LRT:; ![logregpvalscorelrt](https://cloud.githubusercontent.com/assets/3201642/22859708/92750f7a-f0b3-11e6-93af-3219eb9e025f.png). Firth is more conservative than score:; ![logregpvalscorefirth](https://cloud.githubusercontent.com/assets/3201642/22859693/fed4555a-f0b2-11e6-9636-2a8075b0a04a.png). And linear betas are super conservative:; ![logregbetafirthlin](https://cloud.githubusercontent.com/assets/3201642/22867304/c63d2b76-f153-11e6-87b3-445c58796695.png). But linear pvals are okay:; ![logregpvalfirthlin](https://cloud.git",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:2530,log,logreglrtiter,2530,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logreglrtiter']
Testability,"als=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=[(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recalibrated.vcf), (RodBinding name=variant2 source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.filtered.vcf)] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub genotypemergeoption=UNSORTED filteredrecordsmergetype=KEEP_IF_ANY_UNFILTERED multipleallelesmergetype=BY_TYPE rod_priority_list=null printComplexMerges=false filteredAreUncalled=false minimalVCF=false setKey=set assumeIdenticalSamples=true minimumN=1 suppressCommandLineHeader=false mergeInfoWithMaxAC=false filter_mismatching_base_and_quals=false""; ##FILTER=<ID=Indel_FS,Description=""FS>200.0"">; ##FILTER=<ID=Indel_InbreedingCoeff,Description=""InbreedingCoeff<-0.8"">; ##FILTER=<ID=Indel_QD,Description=""QD<2.0"">; ##FILTER=<ID=Indel_ReadPosRankSum,Description=""ReadPosRankSum<-20.0"">; ##FILTER=<ID=LowQual,Description=""Low quality"">; ##FILTER=<ID=VQSRTrancheSNP98.50to98.60,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -1.4503 <= x < -1.2551"">; ##FILTER=<ID=VQSRTrancheSNP98.60to98.80,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -2.0727 <= x < -1.4503"">; ##FILTER=<ID=VQSRTrancheSNP98.80to98.90,Description=""Truth sensi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:3862,stub,stubs,3862,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,also benchmarks are moved to `/benchmark/python/benchmark_hail` now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7108#issuecomment-534253455:5,benchmark,benchmarks,5,https://hail.is,https://github.com/hail-is/hail/pull/7108#issuecomment-534253455,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,also have rebase conflict and test failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-535987529:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-535987529,1,['test'],['test']
Testability,also see test failure,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3019#issuecomment-369657687:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/3019#issuecomment-369657687,1,['test'],['test']
Testability,"also, I followed the above instructions and still getting ; ```; subprocess.CalledProcessError: Command '['Rscript', './../../src/test/resources/is/hail/methods/runPcRelate.R', '/tmp/hail.WisHflMEcWvF/g1y2e25Ei0', '0.0']' returned non-zero exit status 1.; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3281#issuecomment-377950025:130,test,test,130,https://hail.is,https://github.com/hail-is/hail/pull/3281#issuecomment-377950025,1,['test'],['test']
Testability,"ams that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aiohttp. This is strange to say the least. I was really curious about this, so I ran the bench. First, I upgraded Sanic to a recent version. Then I ran their test. In short, their results were not what I found. Sanic is 50% faster, and the timeouts are what you'd expect. 26 timeouts for Sanic, 45 for aiohttp. Sanic Run 1:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 640.64ms 947.31ms 7.97s 85.89%; Req/Sec 385.62 137.55 2.32k 77.21%; 274143 requests in 1.00m, 41.70MB read; Socket errors: connect 0, read 2072, write 0, timeout 26; Requests/sec: 4563.11; Transfer/sec: 710.67KB. Sanic Run 2:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 615.91ms 878.25ms 7.86s 85.85%; Req/Sec 391.30 118.76 1.61k 72.83%; 278943 requests in 1.00m, 42.46MB read; Socket errors: connect 0, read 2079, write 0, timeout 12; Requests/sec: 4642.59; Transfer/sec: 723.58KB. Sanic Run 3 (very large background task spike in last 1-2s of run):; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 543.65ms 839.00ms 7.93s 87.81%; Req/Sec 392.47 118.69 1.42k 73.81%; 279206 requests in 1.00m, 42.54MB read; Socket errors: connect 0, read 2101, write 0, timeout 35; Requests/sec: 4646.20; Transfer/sec: 724.97KB. Aiohttp Run 1:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:4321,test,test,4321,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['test'],['test']
Testability,"anche level for SNP model at VQS Lod < -502107.0516"">; ##FILTER=<ID=VQSRTrancheSNP99.95to100.00,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -502107.0516 <= x < -22.1967"">; ##FORMAT=<ID=AD,Number=.,Type=Integer,Description=""Allelic depths for the ref and alt alleles in the order listed"">; ##FORMAT=<ID=DP,Number=1,Type=Integer,Description=""Approximate read depth (reads with MQ=255 or with bad mates are filtered)"">; ##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=""Genotype Quality"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description=""Minimum DP observed within the GVCF block"">; ##FORMAT=<ID=PGT,Number=.,Type=String,Description=""PGT"">; ##FORMAT=<ID=PID,Number=.,Type=String,Description=""PID"">; ##FORMAT=<ID=PL,Number=G,Type=Integer,Description=""Normalized, Phred-scaled likelihoods for genotypes as defined in the VCF specification"">; ##FORMAT=<ID=RGQ,Number=1,Type=Integer,Description=""Unconditional reference genotype confidence, encoded as a phred quality -10*log10 p(genotype call is wrong)"">; ##FORMAT=<ID=SB,Number=4,Type=Integer,Description=""Per-sample component statistics which comprise the Fisher's Exact Test to detect strand bias."">; ... ~ 3000 lines of header + decoys; ##contig=<ID=HLA-DRB1*12:17,length=11260>; ##contig=<ID=HLA-DRB1*13:01:01,length=13935>; ##contig=<ID=HLA-DRB1*13:02:01,length=13941>; ##contig=<ID=HLA-DRB1*14:05:01,length=13933>; ##contig=<ID=HLA-DRB1*14:54:01,length=13936>; ##contig=<ID=HLA-DRB1*15:01:01:01,length=11080>; ##contig=<ID=HLA-DRB1*15:01:01:02,length=11571>; ##contig=<ID=HLA-DRB1*15:01:01:03,length=11056>; ##contig=<ID=HLA-DRB1*15:01:01:04,length=11056>; ##contig=<ID=HLA-DRB1*15:02:01,length=10313>; ##contig=<ID=HLA-DRB1*15:03:01:01,length=11567>; ##contig=<ID=HLA-DRB1*15:03:01:02,length=11569>; ##contig=<ID=HLA-DRB1*16:02:01,length=11005>; ##reference=file:///cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta; #CHROM	POS	ID	RE",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916114:2302,Test,Test,2302,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916114,1,['Test'],['Test']
Testability,and again?. [ci.log](https://github.com/hail-is/hail/files/2693282/ci.log); [batch.log](https://github.com/hail-is/hail/files/2693283/batch.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-448468337:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-448468337,4,['log'],['log']
Testability,aner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.Delega,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1652,test,testng,1652,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"apOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unannotated.vcf) snpEffFile=(RodBinding name=snpEffFile source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snpeff.vcf) dbsnp=(RodBinding name= source=UNBOUND) comp=[] resource=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub annotation=[SnpEff] excludeAnnotation=[] group=[] expression=[] useAllAnnotations=false list=false alwaysAppendDbsnpId=false MendelViolationGenotypeQualityThreshold=0.0 requireStrictAlleleMatch=false filter_mismatching_base_and_quals=false""; ##VariantFiltration=""analysis_type=VariantFiltration input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:18436,stub,stubs,18436,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"apache.spark.SparkContext; import org.apache.spark.SparkException; import org.apache.spark.mllib.linalg.Vectors; import org.apache.spark.mllib.linalg.distributed.{DistributedMatrix, IndexedRow, IndexedRowMatrix}; import org.apache.spark.rdd.RDD; import org.apache.spark.sql.Row; import org.apache.spark.storage.StorageLevel; import org.apache.{hadoop => hd}; import org.json4s.JValue; import org.json4s.JsonAST._; import org.json4s._; import org.json4s.jackson.JsonMethods; import org.json4s.jackson.JsonMethods._; import org.json4s.jackson.Serialization; import org.json4s.jackson.{JsonMethods, Serialization}; import org.json4s.{DefaultFormats, Formats}; import org.sparkproject.guava.util.concurrent.MoreExecutors; ```. We explicitly depend on; - `htsjdk`; - `breeze`; - `json4s`. That leaves:. ```; import org.apache.avro.SchemaBuilder; import org.apache.avro.file.DataFileWriter; import org.apache.avro.generic.{GenericDatumWriter, GenericRecord, GenericRecordBuilder}; import org.apache.commons.io.IOUtils; import org.apache.commons.math3.distribution.ChiSquaredDistribution; import org.apache.commons.math3.distribution.{ChiSquaredDistribution, NormalDistribution}; import org.apache.commons.math3.random.JDKRandomGenerator; import org.apache.commons.math3.util.CombinatoricsUtils.factorialLog; import org.apache.hadoop; import org.apache.log4j.{ConsoleAppender, PatternLayout}; import org.apache.spark.SparkContext; import org.apache.spark.SparkException; import org.apache.spark.mllib.linalg.Vectors; import org.apache.spark.mllib.linalg.distributed.{DistributedMatrix, IndexedRow, IndexedRowMatrix}; import org.apache.spark.rdd.RDD; import org.apache.spark.sql.Row; import org.apache.spark.storage.StorageLevel; import org.apache.{hadoop => hd}; import org.sparkproject.guava.util.concurrent.MoreExecutors; ```. I could try to carefully figure out which one of `shadow` are needed for tests and which are not, but that seems annoying. Fix [here](https://github.com/hail-is/hail/pull/13740).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:5156,test,tests,5156,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['tests']
Testability,"are/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583:1888,test,test,1888,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583,1,['test'],['test']
Testability,"ark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.execute(BlockMatrixIR.scala:269); E 	at is.hail.expr.ir.BlockMatrixMap2.execute(BlockMatrixIR.scala:393); E 	at is.hail.expr.ir.Interpret$.run(Interpret.scala:875); E 	at is.hail.expr.ir.Interpret$.alreadyLowered(Interpret.scala:59); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.evaluate$1(LowerOrInterpretNonCompilable.scala:20); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:67); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:53); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.apply(LowerOrInterpretNonCompilable.scala:72); E 	at is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass$.transform(LoweringPass.scala:69); E 	at is.hail.expr.ir.lowering.LoweringPass.$anonfun$apply$3(LoweringPass.scala:16); E 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:81); E 	at is",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:2796,Assert,AssertionError,2796,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,arkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66); 	at com.intellij.rt.testng.RemoteTestNGStarter.main(Remo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3755,test,testng,3755,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['testng']
Testability,"ase': TBoolean()}).key_by('Sample'). regression = (hc.import_vcf(test_resources + '/regressionLinear.vcf'); .split_multi(); .annotate_samples_table(cov, root='sa.cov'); .annotate_samples_table(phen1, root='sa.pheno.Pheno'); .annotate_samples_table(phen2, root='sa.pheno.isCase')).with_id('regression'). vds_assoc = (regression; .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""1"", 1, ""C"", ""T"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno.PhenoLMM = (1 + 0.1 * sa.cov.Cov1 * sa.cov.Cov2) * sa.culprit').with_id('vds_assoc')). vds_kinship = vds_assoc.filter_variants_expr('v.start < 4'); km = vds_kinship.rrm(False, False).with_id('km'); vds_assoc = vds_assoc.lmmreg(km, 'sa.pheno.PhenoLMM', ['sa.cov.Cov1', 'sa.cov.Cov2']); vds_assoc.export_variants('/tmp/lmmreg3.tsv', 'Variant = v, va.lmmreg.*'); ```. History output:; ```; # 2017-08-01T20:23:38.202686; # version: devel-37d32d3. hc = (HailContext(min_block_size=6)). regression = (hc; .import_vcf('src/test/resources/regressionLinear.vcf'); .split_multi(); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLinear.cov', types={'Cov1': TDouble(), 'Cov2': TDouble()}); .key_by('Sample'), root='sa.cov'); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLinear.pheno', types={'Pheno': TDouble()}, missing='0'); .key_by('Sample'), root='sa.pheno.Pheno'); .annotate_samples_table(hc; .import_table('src/test/resources/regressionLogisticBoolean.pheno', types={'isCase': TBoolean()}, missing='0'); .key_by('Sample'), root='sa.pheno.isCase')). vds_assoc = (regression; .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""1"", 1, ""C"", ""T"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno.PhenoLMM = (1 + 0.1 * sa.cov.Cov1 * sa.cov.Cov2) * sa.culprit')). km = (vds_assoc; .filter_variants_expr('v.start < 4'); .rrm()). (vds_assoc; .lmmreg(km, 'sa.pheno.PhenoLMM', covariates=['sa.cov.Cov1', 'sa.cov.Cov2']); .export_variants('/tmp/lmmreg3.tsv', ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-319533736:1485,test,test,1485,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-319533736,1,['test'],['test']
Testability,"ase) wmecc-475:hail jigold$ hailctl batch billing; usage: hailctl batch billing [-h] {list,get} ... Manage billing on the service managed by the Hail team. positional arguments:; {list,get}; list List billing projects; get Get a particular billing project's info. optional arguments:; -h, --help show this help message and exit; (base) wmecc-475:hail jigold$ hailctl batch billing fake; usage: hailctl batch billing [-h] {list,get} ...; hailctl batch billing: error: invalid choice: 'fake' (choose from 'list', 'get'); Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d06",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1111,test,test,1111,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test']
Testability,"ase, we aggregate bandwidth substantially decreases at 40k files of size ~100kB. Theoretical egress from the GCP VM I used is 2 GB/s. Ingress is ~3 GB/s. S3 claims as much as ~12 GB/s of aggregate bandwidth. We seem to have room for improvement, but this seems good enough for now. # On AWS, GCS -> S3. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 34 seconds | 154.5 MB/s |; | 1 | 42.9 GB | 4 minutes | 161.6 MB/s |; | 200 | 5.4 GB | 35 seconds | 151.1 MB/s |; | 40000 | 5.4 GB | 4 minutes | 22.0 MB/s |. # On GCP, S3 -> GCS. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 17 seconds | 304.2 MB/s |; | 1 | 42.9 GB | 3 minutes | 235.5 MB/s |; | 200 | 5.4 GB | 20 seconds | 267.8 MB/s |; | 40000 | 5.4 GB | 6 minutes | 13.3 MB/s |. # machine parsable form; ```; [{'config': 'one',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/one',; 'times': [34.76],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/one'},; {'config': 'some',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/some',; 'times': [35.527],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/some'},; {'config': 'many',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/many',; 'times': [244.154],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/many'},; {'config': 'huge',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/huge',; 'times': [265.719],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/huge'},; {'config': 'one',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/one',; 'times': [17.65],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/one'},; {'config': 'some',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/some',; 'times': [20.048],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/some'},; {'config': 'many',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/many',; 'times': [402.267],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/many'},; {'config':",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697:1037,test,test-,1037,https://hail.is,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697,4,"['benchmark', 'test']","['benchmark', 'test-', 'test-copy']"
Testability,"at PhysicsSpeed, though without using any bitnami; tools because we had less than; zero dollars :-(. I don't know if this adds any value in the containerized/cloud environment,; where custom machine images; are presumably the way to go. But it makes setup easy for standalone use. Regards; Richard. On Thu, Aug 2, 2018 at 10:44 PM Richard Cownie <rcownie@broadinstitute.org>; wrote:. > We have a difference of opinion about the risks involved in using whatever; > compiler happens to show up as $(CXX); > to try to compile arbitrarily large auto-generated C++ files, and maybe; > about what happens when that fails; > and gives an error message about something in the middle of 12000 lines of; > code that bears no obvious relationship; > to what the user is doing. Or when that compiler takes 15 minutes to; > compile it. It's the C++ equivalent of; > the JVM ""no, that's just too much bytecode"". Or worst of all, it compiles; > it but the code gives the wrong answers; > because that particular compiler has a bug, and we never tested the; > combination of our codegen with *that*; > compiler/version.; >; > A couple of years ago I was seeing g++ take 40-60 seconds to compile; > something that clang did in 2 seconds; > (fairly heavily templated code generated for an SQL query, so very much in; > the same ballpark as parts of Hail),; > which contributes to my concern about this, especially on linux where g++; > is the default.; >; > So in the long run I expect we'll ship a compiler, or specify a compiler.; > But that becomes a problem in itself; > if we want the shipped compiler to work on a variety of OS'es. When I did; > that before it was all Ubuntu-14.04; > and Ubuntu-16.04, and it was manageable to build it for two platforms.; >; >; > On Thu, Aug 2, 2018 at 9:59 PM cseed <notifications@github.com> wrote:; >; >> *@cseed* commented on this pull request.; >> ------------------------------; >>; >> In src/main/c/NativeModule.cpp; >> <https://github.com/hail-is/hail/pull/3973#discuss",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410235287:1779,test,tested,1779,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410235287,1,['test'],['tested']
Testability,at is.hail.expr.ir.Interpret$.apply(Interpret.scala:589); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:48); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:23); 	at is.hail.table.Table.write(Table.scala:607); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748)java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.annotations.RegionValueBuilder.addRegionValue(RegionValueBuilder.scala:417); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:345); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:351); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:1024); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:980); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1087); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1081); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anon,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719:8023,assert,assert,8023,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719,1,['assert'],['assert']
Testability,at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=res,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4156,Test,TestRunner,4156,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestRunner']
Testability,at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=res,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4349,Test,TestRunner,4349,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestRunner']
Testability,at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.a,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1804,Test,TestRunner,1804,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestRunner']
Testability,at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2214,assert,assertEvalsTo,2214,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,2,"['Test', 'assert']","['TestUtils', 'assertEvalsTo']"
Testability,"ataproc/bdutil/configure_docker.sh; /run/docker.sock; /tmp/dataproc/uninstall/docker-ce; /tmp/dataproc/components/uninstall/docker-ce.running; /tmp/dataproc/components/uninstall/docker-ce.done; /tmp/dataproc/components/pre-uninstall/docker-ce.running; /tmp/dataproc/components/pre-uninstall/docker-ce.done; /etc/apt/preferences.d/docker-ce.pref; /etc/apt/preferences.d/docker-ce-cli.pref; /etc/apt/sources.list.d/docker.list; /var/lib/apt/lists/download.docker.com_linux_debian_dists_buster_InRelease; /var/lib/apt/lists/download.docker.com_linux_debian_dists_buster_stable_binary-amd64_Packages; ```. </details>. There is a `/run/docker.sock` but notice it is not `/var/run/...`. However, if I install Docker by hand into this worker of a *non-Hail* Dataproc cluster, it just works. ---. I also tried to replicate the failure using an initialization action, but that also just worked.; ```; gcloud dataproc clusters create dk-test2 --initialization-actions=gs://hail-common/dk-test.sh; ```; `gs://hail-common/dk-test.sh`:; ```; apt-get update; apt-get -y install \; apt-transport-https \; ca-certificates \; curl \; gnupg2 \; software-properties-common \; tabix; curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -; sudo add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable""; apt-get update; apt-get install -y --allow-unauthenticated docker-ce; ```. ---. Our users often report this error. In my experience, it has happened in 2/8 test_dataproc steps that I have run myself or seen run. The more workers you have, the higher the chance at least one worker fails. As @bpblanken suggested [here](https://github.com/hail-is/hail/issues/12936#issuecomment-1589956412), restarting docker on a failed worker works. Docker starts fine. However, I missed a subtlety: we must restart *after* installation but *before* we try to pull our VEP docker image. I also added a sleep in hopes that gives various things a chance to die off.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:13541,test,test,13541,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['test']
Testability,"ated a modified version of `profile225.vds`:. ```; from hail import *; hc = HailContext(); (hc.read('/Users/jbloom/data/profile225.vds'); .filter_multi(); .variant_qc(); .hardcalls(); .annotate_samples_expr('sa.pheno = pcoin(0.5), sa.cov1 = rnorm(0,1), sa.cov2 = rnorm(0,1), sa.cov3 = rnorm(0,1), sa.cov4 = rnorm(0,1), sa.cov5 = rnorm(0,1), sa.cov6 = rnorm(0,1), sa.cov7 = rnorm(0,1), sa.cov8 = rnorm(0,1)'); .write('/Users/jbloom/data/profile225.prelogreg.vds')); ```. And ran all the tests with two samples covariates (note these are all mapVariants so just stacking tranformations):; ```; (hc.read('/Users/jbloom/data/profile225.prelogreg.vds'); 	.linreg('sa.pheno', ['sa.cov1', 'sa.cov2']); 	.logreg('wald', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.wald'); 	.logreg('lrt', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.lrt'); 	.logreg('score', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.score'); 	.logreg('firth', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.firth'); 	.export_variants('/Users/jbloom/data/logreg.tsv', 'Variant = v, va.qc.*, linBeta = va.linreg.beta, waldBeta = va.wald.wald.beta, lrtBeta = va.lrt.lrt.beta, firthBeta = va.firth.firth.beta, linPval = va.linreg.pval, waldPval = va.wald.wald.pval, lrtPval = va.lrt.lrt.pval, firthPval = va.firth.firth.pval, scorePval = va.score.score.pval, waldIter = va.wald.fit.nIter, lrtIter = va.lrt.fit.nIter, firthIter = va.firth.fit.nIter')); ```. Beta for all variants, note that Firth resolves quasi-separation issues and regresses toward the zero:; ![logregbetalrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867286/9e219bc2-f153-11e6-896a-c49e55593312.png). Pvals for all variants, note that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5-a04a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:1020,log,logreg,1020,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logreg']
Testability,"ath to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN Utils: Your hostname, <my computer name> resolves to a loopback address: <my local IP>; using <my IP> instead (on interface enp3s0); 18/01/08 13:51:03 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address; ```. And the other initialize hail like this (crashes with the stack trace/error in the issue):; ```; from pyspark import *; from hail import *; conf = SparkConf(); conf.set('spark.sql.files.maxPartitionBytes','60000000000') ; conf.set('spark.sql.files.openCostInBytes','60000000000') ; conf.set('spark.driver.cores','1') #test with 1 core; sc = SparkContext(conf=conf); hc = HailContext(sc); ```. With startup messages looking like this:; ```; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 18/01/08 15:16:23 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 18/01/08 15:16:23 WARN SparkConf: In Spark 1.0 and later spark.local.dir will be overridden by the value set by the cluster manager (via SPARK_LOCAL_DIRS in mesos/standalone and LOCAL_DIRS in YARN).; 18/01/08 15:16:23 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 15:16:23 WARN SparkConf: Setting 'spark.executor.extra",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783:7409,test,test,7409,https://hail.is,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783,1,['test'],['test']
Testability,ath3/distribution/AbstractIntegerDistribution; 	at java.lang.ClassLoader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at j,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1437,test,testng,1437,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,"ation; - Reduced memory usage; - Support for running on Java 20. For more details see https://docs.gradle.org/8.3/release-notes.html. Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; WARNING: Hail primarily tested with Spark 3.3.0, use other versions at your own risk. > Task :shadedazure:compileJava NO-SOURCE; > Task :shadedazure:processResources NO-SOURCE; > Task :shadedazure:classes UP-TO-DATE; > Task :shadedazure:shadowJar; > Task :compileJava NO-SOURCE; > Task :compileScala; > Task :processResources; > Task :classes; > Task :shadowJar. BUILD SUCCESSFUL in 4m 20s; 4 actionable tasks: 4 executed; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; WARNING: The wheel package is not available.; WARNING: The wheel package is not available.; installing to build/bdist.linux-x86_64/wheel; creating build/bdist.linux-x86_64/wheel/hail-0.2.124.dist-info/WHEEL; creating 'dist/hail-0.2.124-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it; adding 'hail/__init__.py'; adding 'hail/builtin_references.py'; adding 'hail/conftest.py'; adding 'hail/context.py'; adding 'hail/hail_logging.py'; adding 'hail/hail_pip_version'; adding 'hail/hail_revision'; adding 'hail/hail_version'; adding 'hail/matrixtable.py'; adding 'hail/table.py'; adding 'hail/backend/__init__.py'; adding 'hail/backend/backend.py'; adding 'hail/backend/hail-all-spark.jar'; adding 'hail/backend/local_backend.py'; adding 'hail/backend/py4j_backend.py'; adding 'ha",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:16745,test,test,16745,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['test']
Testability,"ation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /___/ .__/\_,_/_/ /_/\_\ version 3.3.2; /_/; ; Using Scala version 2.12.13, OpenJDK 64-Bit Server VM, 11.0.21; Branch HEAD; Compiled by user liangchi on 2023-02-11T02:24:04Z; Revision 5103e00c4ce5fcc4264ca9c4df12295d42557af6; Url https://github.com/apache/spark; Type --help for more information.; ```. ```sh; -rwxr-xr-x 1 root root 141 Jul 19 15:54 /usr/bin/spark-submit; /usr/bin/spark-submit; -rwxr-xr-x 1 root root 141 Jul 19 15:54 /usr/bin/spark-submit; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /___/ .__/\_,_/_/ /_/\_\ version 3.3.2; /_/; ; Using Scala version 2.12.13, OpenJDK 64-Bit Server VM, 11.0.21; Branch HEAD; Compiled by user liangchi on 2023-02-11T02:24:04Z; Revision 5103e00c4ce5fcc4264ca9c4df12295d42557af6; Url https://github.com/apache/spark; Type --help for more information.; ```. ```sh; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-class; /usr/bin/spark-class; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-class; SPARK_SCALA_VERSION=; ```. <details><summary>>>>>>>>>>> before load-sp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:5190,log,logger,5190,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['log'],['logger']
Testability,"ations, shutdowns, inputs, image):; super().__init__(params); ; @@ -989,12 +991,7 @@ class CreateDatabaseStep(Step):; self.create_database_job = None; self.cleanup_job = None; ; - if params.scope == 'dev':; - self.database_server_config_namespace = params.code.namespace; - else:; - self.database_server_config_namespace = DEFAULT_NAMESPACE; -; - self.cant_create_database = is_test_deployment or params.scope == 'dev'; + self.cant_create_database = is_test_deployment; ; # MySQL user name can be up to 16 characters long before MySQL 5.7.8 (32 after); if self.cant_create_database:; @@ -1005,6 +1002,11 @@ class CreateDatabaseStep(Step):; self._name = database_name; self.admin_username = f'{database_name}-admin'; self.user_username = f'{database_name}-user'; + elif params.scope == 'dev':; + dev_username = params.code.config()['user']; + self._name = f'{dev_username}-{database_name}'; + self.admin_username = f'{dev_username}-{database_name}-admin'; + self.user_username = f'{dev_username}-{database_name}-user'; else:; assert params.scope == 'test'; self._name = f'{params.code.short_str()}-{database_name}-{self.token}'; @@ -1030,7 +1032,7 @@ class CreateDatabaseStep(Step):; @staticmethod; def from_json(params: StepParameters):; json = params.json; - return CreateDatabaseStep(; + return CreateDatabase2Step(; params,; json['databaseName'],; json['namespace'],; @@ -1111,12 +1113,12 @@ EOF; attributes={'name': self.name},; secrets=[; {; - 'namespace': self.database_server_config_namespace,; + 'namespace': self.namespace,; 'name': 'database-server-config',; 'mount_path': '/sql-config',; }; ],; - service_account={'namespace': DEFAULT_NAMESPACE, 'name': 'ci-agent'},; + service_account={'namespace': self.namespace, 'name': 'admin'},; input_files=input_files,; parents=[self.create_passwords_job] if self.create_passwords_job else self.deps_parents(),; network='private',; @@ -1125,42 +1127,4 @@ EOF; ); ; def cleanup(self, batch, scope, parents):; - if scope in ['deploy', 'dev'] or self.c",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600:1874,assert,assert,1874,https://hail.is,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600,1,['assert'],['assert']
Testability,"auth login`. This is the patch I _wanted_ to write. ```patch; From aef878903d9249b542522082cba705eaf26d728a Mon Sep 17 00:00:00 2001; From: Christopher Vittal <christopher.vittal@gmail.com>; Date: Wed, 25 Sep 2019 14:55:42 -0400; Subject: [PATCH] [hailctl] Move default location for hail config directory; MIME-Version: 1.0; Content-Type: text/plain; charset=UTF-8; Content-Transfer-Encoding: 8bit. Now we try, in order:; $XDG_CONFIG_HOME/hail; ~/.config/hail. The XDG Base Directory Specification[1] is a freedesktop spec inteded to; define where applications should look for files they need to run. [1]: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html. I have enough 💩 in my home directory for applications I don't control,; I'd like to try to keep it clean when it comes to applications I do; control.; ---; hail/python/hailtop/auth/tokens.py | 4 ++--; hail/python/hailtop/config/__init__.py | 3 ++-; hail/python/hailtop/config/deploy_config.py | 4 +++-; hail/python/hailtop/hailctl/auth/login.py | 7 +++----; hail/python/hailtop/hailctl/dev/config/cli.py | 4 ++--; 5 files changed, 12 insertions(+), 10 deletions(-). diff --git a/hail/python/hailtop/auth/tokens.py b/hail/python/hailtop/auth/tokens.py; index 9de07dc42..e8c3fcccd 100644; --- a/hail/python/hailtop/auth/tokens.py; +++ b/hail/python/hailtop/auth/tokens.py; @@ -3,7 +3,7 @@ import os; import sys; import json; import logging; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; ; log = logging.getLogger('gear'); ; @@ -14,7 +14,7 @@ class Tokens(collections.abc.MutableMapping):; deploy_config = get_deploy_config(); location = deploy_config.location(); if location == 'external':; - return os.path.expanduser('~/.hail/tokens.json'); + return os.path.join(HAIL_CONFIG_DIR, 'tokens.json'); return '/user-tokens/tokens.json'; ; def __init__(self):; diff --git a/hail/python/hailtop/config/__init__.py b/hail/python/hailtop/config/__init__.py; ind",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:1190,log,login,1190,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['login']
Testability,ava.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteCha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4753,test,testng,4753,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,ava.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteC,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4560,test,testng,4560,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,ava:3332); at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124); at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448); at java.lang.StringBuffer.append(StringBuffer.java:270); at org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.format(PatternParser.java:419); at org.apache.log4j.PatternLayout.format(PatternLayout.java:506); at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310); at org.apache.log4j.WriterAppender.append(WriterAppender.java:162); at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251); at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1953); at org.apache.spark.scheduler.TaskResultGetter$$anon$3.run(TaskResultGetter.scala:124); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ```;,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:1445,Log,Logging,1445,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['Log'],['Logging']
Testability,"batch deployment is still failing; [batch.log](https://github.com/hail-is/hail/files/2507610/batch.log); ```; a8466a39326493a8d0acb9347f3f640127e7a082fb85471dc56e57c7960d62c6: digest: sha256:3e72c4e3d33d3009fcd08cdaf4e8601535eadce37c3004d6371f802638aa09f5 size: 2002; echo ""gcr.io/broad-ctsa/batch:a8466a39326493a8d0acb9347f3f640127e7a082fb85471dc56e57c7960d62c6"" > batch-image; sed -e ""s,@sha@,$(git rev-parse --short=12 HEAD),"" \; -e ""s,@image@,$(cat batch-image),"" \; < deployment.yaml.in > deployment.yaml; kubectl apply -f deployment.yaml; Error from server (Forbidden): error when retrieving current configuration of:; Resource: ""apps/v1beta2, Resource=deployments"", GroupVersionKind: ""apps/v1beta2, Kind=Deployment""; Name: ""batch-deployment"", Namespace: ""batch-pods""; Object: &{map[""apiVersion"":""apps/v1beta2"" ""kind"":""Deployment"" ""metadata"":map[""labels"":map[""app"":""batch"" ""hail.is/sha"":""9d4cd6d6e0a0""] ""name"":""batch-deployment"" ""namespace"":""batch-pods"" ""annotations"":map[""kubectl.kubernetes.io/last-applied-configuration"":""""]] ""spec"":map[""replicas"":'\x01' ""selector"":map[""matchLabels"":map[""app"":""batch""]] ""template"":map[""metadata"":map[""labels"":map[""app"":""batch"" ""hail.is/sha"":""9d4cd6d6e0a0""]] ""spec"":map[""containers"":[map[""image"":""gcr.io/broad-ctsa/batch:a8466a39326493a8d0acb9347f3f640127e7a082fb85471dc56e57c7960d62c6"" ""name"":""batch"" ""ports"":[map[""containerPort"":'\u1388']]]] ""serviceAccountName"":""batch-svc""]]]]}; from server for: ""deployment.yaml"": deployments.apps ""batch-deployment"" is forbidden: User ""system:serviceaccount:batch-pods:deploy-svc"" cannot get deployments.apps in the namespace ""batch-pods"": Unknown user ""system:serviceaccount:batch-pods:deploy-svc""; Error from server (Forbidden): error when retrieving current configuration of:; Resource: ""/v1, Resource=services"", GroupVersionKind: ""/v1, Kind=Service""; Name: ""batch"", Namespace: ""batch-pods""; Object: &{map[""apiVersion"":""v1"" ""kind"":""Service"" ""metadata"":map[""labels"":map[""app"":""batch""] ""name"":""batch"" ""namespace"":""batch-",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4609#issuecomment-432377914:42,log,log,42,https://hail.is,https://github.com/hail-is/hail/issues/4609#issuecomment-432377914,2,['log'],['log']
Testability,benchmarks: https://gist.github.com/tpoterba/7b681ff2a6e5cba8304a19f32f5208b5,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9401#issuecomment-692124775:0,benchmark,benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/9401#issuecomment-692124775,1,['benchmark'],['benchmarks']
Testability,"benchmarks:. Dataset with 12,000 variants: . Master: **122 seconds**; 6352 variants remain after first local prune ; 6329 variants remain after second local prune ; 5793 remain after global prune. This branch: **195 seconds** (ran 3 times); 6352 variants remain after local prune; 5866 variants remain after final prune. Timing of individual parts for this branch: ; Local prune : ~ 62 seconds; Filtering the matrix table to the locally pruned variants : ~ 20 seconds.; Block matrix of standardized genotypes : ~14 seconds.; Correlation matrix (matrix multiply) : ~67 seconds ; Entries table: ~13 seconds; Annotating entries table, computing maximal independent set, filtering final result: ~17 sec. Dataset with 25,965 variants:. Master : **270 seconds**; 12,691 variants (after first local prune) ; 12,590 (after second local prune) ; 11,749 (after global prune). This branch: **503 seconds**; 12,691 (after local prune) ; 11,851 (after final prune). Local prune : 83 seconds; Filter matrix table : 37 seconds; Block Matrix: 24 seconds; Correlation Matrix: 265 seconds; Entries Table: 47 seconds; Annotate entries table, MIS, filter after MIS : 44 seconds",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-382885782:0,benchmark,benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-382885782,1,['benchmark'],['benchmarks']
Testability,"bgen ___________________; [gw0] linux -- Python 3.6.6 /home/hail/.conda/envs/hail/bin/python; 067 ; 068 Import a BGEN file as a matrix table with genotype dosage entry field:; 069 ; 070 >>> ds_result = hl.import_bgen(""data/example.8bits.bgen"",; 071 ... entry_fields=['dosage'],; 072 ... sample_file=""data/example.8bits.sample""); 073 ; 074 Load a single variant from a BGEN file:; 075 ; 076 >>> ds_result = hl.import_bgen(""data/example.8bits.bgen"",; UNEXPECTED EXCEPTION: TypeError(""import_bgen: parameter 'variants': expected (None or Sequence[hail.utils.struct.Struct] or hail.expr.expressions.typed_expressions.StructExpression or hail.table.Table), found list: [<StructExpression of type struct{locus: locus<GRCh37>, alleles: array<str>}>]"",); Traceback (most recent call last):. File ""/hail/repo/hail/build/tmp/doctest/python/hail/typecheck/check.py"", line 487, in check_all; args_.append(checker.check(arg, name, arg_name)). File ""/hail/repo/hail/build/tmp/doctest/python/hail/typecheck/check.py"", line 59, in check; raise TypecheckFailure(). hail.typecheck.check.TypecheckFailure. The above exception was the direct cause of the following exception:. Traceback (most recent call last):. File ""/home/hail/.conda/envs/hail/lib/python3.6/doctest.py"", line 1330, in __run; compileflags, 1), test.globs). File ""<doctest hail.methods.impex.import_bgen[2]>"", line 4, in <module>. File ""<decorator-gen-904>"", line 2, in import_bgen. File ""/hail/repo/hail/build/tmp/doctest/python/hail/typecheck/check.py"", line 559, in wrapper; args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method). File ""/hail/repo/hail/build/tmp/doctest/python/hail/typecheck/check.py"", line 513, in check_all; )) from e. TypeError: import_bgen: parameter 'variants': expected (None or Sequence[hail.utils.struct.Struct] or hail.expr.expressions.typed_expressions.StructExpression or hail.table.Table), found list: [<StructExpression of type struct{locus: locus<GRCh37>, alleles: array<str>}>]. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4291#issuecomment-421486590:1521,test,test,1521,https://hail.is,https://github.com/hail-is/hail/pull/4291#issuecomment-421486590,1,['test'],['test']
Testability,"bit. Now we try, in order:; $XDG_CONFIG_HOME/hail; ~/.config/hail. The XDG Base Directory Specification[1] is a freedesktop spec inteded to; define where applications should look for files they need to run. [1]: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html. I have enough 💩 in my home directory for applications I don't control,; I'd like to try to keep it clean when it comes to applications I do; control.; ---; hail/python/hailtop/auth/tokens.py | 4 ++--; hail/python/hailtop/config/__init__.py | 3 ++-; hail/python/hailtop/config/deploy_config.py | 4 +++-; hail/python/hailtop/hailctl/auth/login.py | 7 +++----; hail/python/hailtop/hailctl/dev/config/cli.py | 4 ++--; 5 files changed, 12 insertions(+), 10 deletions(-). diff --git a/hail/python/hailtop/auth/tokens.py b/hail/python/hailtop/auth/tokens.py; index 9de07dc42..e8c3fcccd 100644; --- a/hail/python/hailtop/auth/tokens.py; +++ b/hail/python/hailtop/auth/tokens.py; @@ -3,7 +3,7 @@ import os; import sys; import json; import logging; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; ; log = logging.getLogger('gear'); ; @@ -14,7 +14,7 @@ class Tokens(collections.abc.MutableMapping):; deploy_config = get_deploy_config(); location = deploy_config.location(); if location == 'external':; - return os.path.expanduser('~/.hail/tokens.json'); + return os.path.join(HAIL_CONFIG_DIR, 'tokens.json'); return '/user-tokens/tokens.json'; ; def __init__(self):; diff --git a/hail/python/hailtop/config/__init__.py b/hail/python/hailtop/config/__init__.py; index aeb00dd76..414f0a1d5 100644; --- a/hail/python/hailtop/config/__init__.py; +++ b/hail/python/hailtop/config/__init__.py; @@ -1,5 +1,6 @@; -from .deploy_config import get_deploy_config; +from .deploy_config import HAIL_CONFIG_DIR, get_deploy_config; ; __all__ = [; + 'HAIL_CONFIG_DIR',; 'get_deploy_config'; ]; diff --git a/hail/python/hailtop/config/deploy_config.py b/hail/python/hailtop/co",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:1584,log,logging,1584,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['logging']
Testability,"blah right, you have to log into *my* auth.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8805#issuecomment-629408828:24,log,log,24,https://hail.is,https://github.com/hail-is/hail/pull/8805#issuecomment-629408828,1,['log'],['log']
Testability,"book-worker-9szt8 to gke-vdc-non-preemptible-pool-0106a51b-pgxq; Normal SuccessfulMountVolume 1m kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq MountVolume.SetUp succeeded for volume ""default-token-xl2w9""; Normal Pulling 1m kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq pulling image ""gcr.io/hail-vdc/hail-jupyter:e3f9a751f0a837815afeaf6fff8057f04747a35c908fb1ddf7cad6ad5cd428cd""; Normal Pulled 1m kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq Successfully pulled image ""gcr.io/hail-vdc/hail-jupyter:e3f9a751f0a837815afeaf6fff8057f04747a35c908fb1ddf7cad6ad5cd428cd""; Normal Created 1m kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq Created container; Normal Started 1m kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq ; NAME READY STATUS RESTARTS AGE; notebook-worker-9szt8 0/1 Running 0 49s. Started container; Warning Unhealthy 3s (x7 over 1m) kubelet, gke-vdc-non-preemptible-pool-0106a51b-pgxq Readiness probe failed: Get http://10.32.12.42:8888/instance/notebook-worker-service-j7bp9/login: dial tcp 10.32.12.42:8888: getsockopt: connection refused. Regarding binding; he should also be bound to localhost. The service definition has 80 forwarded to an internal 8888. Here is his worker Dockerfile (no cmd starting the notebook server, unless implemented by one of the installed extensions automatically). ```; FROM jupyter/scipy-notebook; MAINTAINER Hail Team <hail@broadinstitute.org>. USER root; RUN apt-get update && apt-get install -y \; openjdk-8-jre-headless \; && rm -rf /var/lib/apt/lists/*; USER jovyan. RUN pip install --no-cache-dir \; 'jupyter-spark<0.5' \; hail==0.2.8 \; jupyter_contrib_nbextensions \; && \; jupyter serverextension enable --user --py jupyter_spark && \; jupyter nbextension install --user --py jupyter_spark && \; jupyter contrib nbextension install --user && \; jupyter nbextension enable --user --py jupyter_spark && \; jupyter nbextension enable --user --py widgetsnbextension && \; jupyter nbextension enable --user collapsible_headi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5243#issuecomment-460097218:1279,log,login,1279,https://hail.is,https://github.com/hail-is/hail/pull/5243#issuecomment-460097218,1,['log'],['login']
Testability,bump @tpoterba this is passing tests now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12423#issuecomment-1343322263:31,test,tests,31,https://hail.is,https://github.com/hail-is/hail/pull/12423#issuecomment-1343322263,1,['test'],['tests']
Testability,"bump @tpoterba, the churn is interrupting my testing of CI-in-CI :/.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4449#issuecomment-424771189:45,test,testing,45,https://hail.is,https://github.com/hail-is/hail/pull/4449#issuecomment-424771189,1,['test'],['testing']
Testability,bump on this. Still think it's an improvement that hedges against benchmark tests killing the JVM.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12838#issuecomment-1513346203:66,benchmark,benchmark,66,https://hail.is,https://github.com/hail-is/hail/pull/12838#issuecomment-1513346203,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"bump, should be good to go. I do wonder if we need the navbar on docs page at all. I think it would be sensible to restore the doc home button above the left-nav searchbar, and make the docs links in hail.is navbar be target=""_blank"". It seems this is more the norm with sphinx-generated docs. On the other hand, I do at some point want to have the documentation feel like a native part of our apparent site (may be split up across domains/subdomains different pages, but should feel coherent, and give people the ability to log in from anywhere, ala: https://www.tensorflow.org/api_docs/python/tf )",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6789#issuecomment-523032505:525,log,log,525,https://hail.is,https://github.com/hail-is/hail/pull/6789#issuecomment-523032505,1,['log'],['log']
Testability,bump. I want to run benchmarks again.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6794#issuecomment-518700128:20,benchmark,benchmarks,20,https://hail.is,https://github.com/hail-is/hail/pull/6794#issuecomment-518700128,1,['benchmark'],['benchmarks']
Testability,bump. Test failure was unrelated.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13812#issuecomment-1798877987:6,Test,Test,6,https://hail.is,https://github.com/hail-is/hail/pull/13812#issuecomment-1798877987,1,['Test'],['Test']
Testability,bump. This would be nice to have for monitoring batch tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7808#issuecomment-573321397:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/7808#issuecomment-573321397,1,['test'],['tests']
Testability,"but yes, you're totally right about the logic on EBaseStruct needing to move into PTypes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7701#issuecomment-564222699:40,log,logic,40,https://hail.is,https://github.com/hail-is/hail/issues/7701#issuecomment-564222699,1,['log'],['logic']
Testability,c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeLongFunc.cpp -MG -M -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeCodeSuite.cpp -MG -M -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeBoot.cpp -MG -M -MF build/NativeBoot.d -MT build/NativeBoot.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Logging.cpp -MG -M -MF build/Logging.d -MT build/Logging.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Decoder.cpp -MG -M -MF build/Decod,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:8274,Log,Logging,8274,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,c1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hai,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:10296,test,test-,10296,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,cala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); 	at scala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2010,Test,TestUtils,2010,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,cala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3530,test,testng,3530,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['testng']
Testability,can we add the test in here?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-820557463:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-820557463,1,['test'],['test']
Testability,"can we please get this in? If there's a reason I'm not seeing to be cautious, I want to hear it. But for my own sanity, I'd like another line of defense against needing to rewrite benchmark-on-pipeline again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864#issuecomment-583466260:180,benchmark,benchmark-on-pipeline,180,https://hail.is,https://github.com/hail-is/hail/pull/7864#issuecomment-583466260,1,['benchmark'],['benchmark-on-pipeline']
Testability,"can you add a python test that does something to the effect of:; ```; t = hl.utils.range_table(100, 5); t = t.annotate(idx2 = hl.scan.count()); result = t.tail(10).collect(); expected = [hl.Struct(idx=i, idx2=i) for i in range(90, 100)]; self.assertEquals(result, expected); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7386#issuecomment-546532261:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/7386#issuecomment-546532261,2,"['assert', 'test']","['assertEquals', 'test']"
Testability,"can you try running with the latest version? I fixed this specific issue recently, but it's possible you'll get another error (it's not tested as part of our CI)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5657#issuecomment-475096140:136,test,tested,136,https://hail.is,https://github.com/hail-is/hail/issues/5657#issuecomment-475096140,1,['test'],['tested']
Testability,cc @danking can you take a look and make sure I didn't mess up the test reporting?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4809#issuecomment-440375862:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/4809#issuecomment-440375862,1,['test'],['test']
Testability,"cc: @cseed Not sure how you feel about this. We've talked about making tests easy to write a few times. This solution isn't prefect because nested structures get allocated twice. For example:. ```scala; addStruct(region, ""foo"", addStruct(region, ""bar"", 3)); ```. Allocates the struct with field ""bar"" first, then allocates the outer struct, copying in the value of the inner struct. I think there's a better way to do this using a builder pattern (basically an AST for RegionValues, which is basically the IR? dunno, there's more thought needed here), but it would take more work than I was willing to put in for my tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2511#issuecomment-348577509:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/2511#issuecomment-348577509,2,['test'],['tests']
Testability,"cc: @daniel-goldstein is it possible to make the error more clear? The CI test job is a bit hard to read. Maybe the last line of the output should be something like ""XXXX file is out of date, run YYYY""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11840#issuecomment-1325464620:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/11840#issuecomment-1325464620,1,['test'],['test']
Testability,"cc: @tpoterba This is a bit of a hack for testing purposes, but I think we will eventually want to have a way to reconfigure Hail Query backend settings on a per-action basis.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13040#issuecomment-1544579051:42,test,testing,42,https://hail.is,https://github.com/hail-is/hail/pull/13040#issuecomment-1544579051,1,['test'],['testing']
Testability,ccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.Dele,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2068,test,testng,2068,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"ccrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches running on the batch service managed by the Hail team. positional arguments:; {billing,list,get,cancel,delete,log,job,wait}; billing List billing; list List batches; get Get a particular batch's info; cancel Cancel a batch; delete Delete a batch; log Get log for a job; job Get the status and specification for a job; wait Wait for a batch to complete, then print JSON status. optional arguments:; -h, --help show this help message and exit; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:2263,test,test-tiny-limit,2263,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,7,"['log', 'test']","['log', 'test', 'test-tiny-limit']"
Testability,ception$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1383,test,testng,1383,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,ceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:10702,test,test-,10702,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"ch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches running on the batch service managed by the Hail team. positional arguments:; {billing,list,get,cancel,delete,log,job,wait}; billing List billing; list List batches; get Get a particular batch's info; cancel Cancel a batch; de",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1783,test,test-tiny-limit,1783,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test-tiny-limit']
Testability,"ci failure:; ```; hail version: 0.2.109-c163bcb21073; Error summary: AssertionError: assertion failed; self = <test.hail.linalg.test_linalg.Tests testMethod=test_tree_matmul>. @fails_service_backend(); @fails_local_backend(); def test_tree_matmul(self):; nm = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]); m = BlockMatrix.from_numpy(nm, block_size=2); nrow = np.array([[7.0, 8.0, 9.0]]); row = BlockMatrix.from_numpy(nrow, block_size=2); ; > with BatchedAsserts() as b:. test/hail/linalg/test_linalg.py:612: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; test/hail/linalg/test_linalg.py:96: in __exit__; vals.extend(list(hl.eval(tuple([all_bms[k] for k in bm_keys[batch_start:batch_start + batch_size]])))); <decorator-gen-692>:2: in eval; ???; hail/typecheck/check.py:577: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:191: in eval; return eval_timed(expression)[0]; <decorator-gen-690>:2: in eval_timed; ???; hail/typecheck/check.py:577: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:161: in eval_timed; return Env.backend().execute(MakeTuple([ir]), timed=True)[0]; hail/backend/py4j_backend.py:82: in execute; raise e.maybe_user_error(ir) from None; hail/backend/py4j_backend.py:76: in execute; result_tuple = self._jbackend.executeEncode(jir, stream_codec, timed); ../../.venv/lib/python3.10/site-packages/py4j/java_gateway.py:1321: in __call__; return_value = get_return_value(; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . args = ('xro549', <py4j.clientserver.JavaClient object at 0x7fd0d58f6fb0>, 'o1', 'executeEncode'); kwargs = {}; pyspark = <module 'pyspark' from '/home/edmund/.local/src/hail/.venv/lib/python3.10/site-packages/pyspark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: asserti",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:69,Assert,AssertionError,69,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,7,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Tests', 'assertion', 'test', 'testMethod']"
Testability,ci test hung,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13030#issuecomment-1544905614:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/13030#issuecomment-1544905614,1,['test'],['test']
Testability,ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8805,test,test,8805,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-tes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2777,test,test,2777,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,ckend$$anonfun$execute$1$$anonfun$apply$11$$anonfun$apply$12.apply(ServiceBackend.scala:314); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11$$anonfun$apply$12.apply(ServiceBackend.scala:308); 	at is.hail.expr.ir.ExecuteContext$$anonfun$scoped$1.apply(ExecuteContext.scala:25); 	at is.hail.expr.ir.ExecuteContext$$anonfun$scoped$1.apply(ExecuteContext.scala:23); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:12); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:23); 	at is.hail.backend.service.ServiceBackend.userContext(ServiceBackend.scala:122); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11.apply(ServiceBackend.scala:308); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11.apply(ServiceBackend.scala:307); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1.apply(ServiceBackend.scala:307); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1.apply(ServiceBackend.scala:307); 	at is.hail.backend.service.ServiceBackend.statusForException(ServiceBackend.scala:230); 	at is.hail.backend.service.ServiceBackend.execute(ServiceBackend.scala:306); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.Gate,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:12130,log,logTime,12130,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['log'],['logTime']
Testability,ckend$$anonfun$execute$1$$anonfun$apply$11$$anonfun$apply$12.apply(ServiceBackend.scala:337); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11$$anonfun$apply$12.apply(ServiceBackend.scala:334); 	at is.hail.expr.ir.ExecuteContext$$anonfun$scoped$1.apply(ExecuteContext.scala:25); 	at is.hail.expr.ir.ExecuteContext$$anonfun$scoped$1.apply(ExecuteContext.scala:23); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:23); 	at is.hail.backend.service.ServiceBackend.userContext(ServiceBackend.scala:132); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11.apply(ServiceBackend.scala:334); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1$$anonfun$apply$11.apply(ServiceBackend.scala:333); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1.apply(ServiceBackend.scala:333); 	at is.hail.backend.service.ServiceBackend$$anonfun$execute$1.apply(ServiceBackend.scala:333); 	at is.hail.backend.service.ServiceBackend.statusForException(ServiceBackend.scala:243); 	at is.hail.backend.service.ServiceBackend.execute(ServiceBackend.scala:332); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.Gate,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:12528,log,logTime,12528,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,1,['log'],['logTime']
Testability,clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1724,test,testng,1724,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.main(Worker.scala:177) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main$.main(Main.scala:14) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main.main(Main.scala) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:14633,test,test-,14633,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,closing until I find time to add tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10045#issuecomment-780718696:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/10045#issuecomment-780718696,1,['test'],['tests']
Testability,closing while I figure out what happened to the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-333918892:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-333918892,1,['test'],['tests']
Testability,"cool -- I'll test that out. IntelliJ kept telling me that wouldn't work, but maybe it's wrong.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5572#issuecomment-471669508:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/5572#issuecomment-471669508,1,['test'],['test']
Testability,"cool, I'll proably rewrite the tests using that. the option for 1 already exists in `LoadMatrix.apply`; I just haven't exposed it to HailContext because there's a lot of stuff there already and I couldn't figure out what the name of the flag should be (currently, it's hasRowKeyLabel but I don't feel like that's super descriptive) but I could do that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2440#issuecomment-345032622:31,test,tests,31,https://hail.is,https://github.com/hail-is/hail/pull/2440#issuecomment-345032622,1,['test'],['tests']
Testability,"cool, put the post in this tread:; http://discuss.hail.is/t/log-of-breaking-changes-in-0-2-beta/454",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3477#issuecomment-385539018:60,log,log-of-breaking-changes-in-,60,https://hail.is,https://github.com/hail-is/hail/pull/3477#issuecomment-385539018,1,['log'],['log-of-breaking-changes-in-']
Testability,could parameterize this to not run if running in no-test mode:; https://github.com/hail-is/hail/blob/836baa3604ab05fb6a603cfce80c94e55e988a43/hail/python/hail/docs/Makefile#L53,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6996#issuecomment-528542699:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/6996#issuecomment-528542699,1,['test'],['test']
Testability,could you run gen/count like 10x and paste the dimensions here? Until we have meta-tests that'll have to do,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/572#issuecomment-239253597:83,test,tests,83,https://hail.is,https://github.com/hail-is/hail/pull/572#issuecomment-239253597,1,['test'],['tests']
Testability,"count.com read and write access to hail-batch-jigold-oxmmp.; Which region do you want your jobs to run in? [us-central1/us-east1/us-east4/us-west1/us-west2/us-west3/us-west4]: us-east1; WARNING: remote temporary directory ""gs://hail-batch-jigold-oxmmp/bar/foo"" is not located in the selected compute region for Batch jobs ""us-east1"".; Which backend do you want to use for Hail Query? [spark/batch/local]: batch; --------------------; FINAL CONFIGURATION:; --------------------; global/domain=hail.is; batch/remote_tmpdir=gs://hail-batch-jigold-oxmmp/bar/foo; batch/regions=us-east1; batch/backend=service; query/backend=batch; WARNING: Initialized Hail with warnings! The currently specified configuration will result in additional ingress and egress fees when using Hail Batch.; ```. Existing multiregional bucket:. ```; (py311) jigold@wm349-8c4 hail % hailctl batch init; Do you want to create a new bucket in project for temporary files generated by Hail? [y/n]: n; Enter a path to an existing remote temporary directory (ex: gs://my-bucket/batch/tmp): gs://hail-jigold-test-multi-regional; WARNING: remote temporary directory gs://hail-jigold-test-multi-regional is multi-regional. Using this bucket with the Batch Service will incur addtional ingress and egress fees.; Do you want to give service account jigold-59hi5@hail-vdc.iam.gserviceaccount.com read/write access to bucket hail-jigold-test-multi-regional? [y/n]: y; Granted service account jigold-59hi5@hail-vdc.iam.gserviceaccount.com read and write access to hail-jigold-test-multi-regional.; Which region do you want your jobs to run in? [us-central1/us-east1/us-east4/us-west1/us-west2/us-west3/us-west4]: us-east1; Which backend do you want to use for Hail Query? [spark/batch/local]: batch; --------------------; FINAL CONFIGURATION:; --------------------; global/domain=hail.is; batch/remote_tmpdir=gs://hail-jigold-test-multi-regional; batch/regions=us-east1; batch/backend=service; query/backend=batch; WARNING: Initialized Hail wi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1679133568:5945,test,test-multi-regional,5945,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1679133568,2,['test'],['test-multi-regional']
Testability,"coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=[(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recalibrated.vcf), (RodBinding name=variant2 source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.filtered.vcf)] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub genotypemergeoption=UNSORTED filteredrecordsmergetype=KEEP_IF_ANY_UNFILTERED multipleallelesmergetype=BY_TYPE rod_priority_list=null printComplexMerges=false filteredAreUncalled=false minimalVCF=false setKey=set assumeIdenticalSamples=true minimumN=1 suppressCommandLineHeader=false mergeInfoWithMaxAC=false filter_mismatching_base_and_quals=false""; ##FILTER=<ID=Indel_FS,Description=""FS>200.0"">; ##FILTER=<ID=Indel_InbreedingCoeff,Description=""InbreedingCoeff<-0.8"">; ##FILTER=<ID=Indel_QD,Description=""QD<2.0"">; ##FILTER=<ID=Indel_ReadPosRankSum,Description=""ReadPosRankSum<-20.0"">; ##FILTER=<ID=LowQual,Description=""Low quality"">; ##FILTER=<ID=VQSRTrancheSNP98.50to98.60,Description=""Truth sensitivity tranche level for SNP model at VQS Lod:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:3634,stub,stubs,3634,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"cr.io/ubuntu:20.04', 'mount_docker_socket': False, 'type': 'docker'}, 'resources': {'req_cpu': '0.25', 'req_memory': '50Mi', 'req_storage': '0Gi', 'cores_mcpu': 250, 'memory_bytes': 1073741824, 'storage_gib': 0, 'preemptible': True}, 'secrets': [{'namespace': 'pr-12955-default-rrlcxki12v8r', 'name': 'test-gsa-key', 'mount_path': '/gsa-key', 'mount_in_copy': True}], 'env': [{'name': 'AZURE_APPLICATION_CREDENTIALS', 'value': '/gsa-key/key.json'}]}}, {'status': {'id': 74, 'user': 'test', 'billing_project': 'test', 'token': 'tiQog0l-k0Xp2TkavWlV37Xy9FWcC1530EtCMRfg8XQ', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 1, 'n_completed': 1, 'n_succeeded': 1, 'n_failed': 0, 'n_cancelled': 0, 'time_created': '2023-05-01T18:36:18Z', 'time_closed': None, 'time_completed': '2023-05-01T18:36:19Z', 'duration': 'a second', 'msec_mcpu': 0, 'cost': 1.1510333711392028e-06, 'attributes': {'name': 'test_pool_highcpu_instance_cheapest'}}, 'jobs': [{'log': {'main': ''}, 'status': {'batch_id': 74, 'job_id': 1, 'name': None, 'user': 'test', 'billing_project': 'test', 'state': 'Success', 'exit_code': 0, 'duration': 609, 'cost': 1.1510333711392028e-06, 'msec_mcpu': 0, 'status': {'version': 5, 'worker': 'batch-worker-pr-12955-default-rrlcxki12v8r-standard-0e2wl', 'batch_id': 74, 'job_id': 1, 'attempt_id': 'gAaTm8', 'user': 'test', 'state': 'succeeded', 'format_version': 7, 'resources': [{'name': 'az/vm/Standard_D8ds_v4/spot/eastus/1682899200000', 'quantity': 32}, {'name': 'az/disk/E4_LRS/eastus/1546300800000', 'quantity': 1024}, {'name': 'az/ip-fee/1024/2021-12-01', 'quantity': 32}, {'name': 'az/service-fee/2021-12-01', 'quantity': 250}], 'region': 'eastus', 'start_time': 1682966178997, 'end_time': 1682966179606, 'container_statuses': {'main': {'name': 'batch-74-job-1-main', 'state': 'succeeded', 'timing': {'pulling': {'start_time': 1682966179035, 'finish_time': 1682966179224, 'duration': 189}, 'setting up overlay': {'start_time': 1682966179224, 'finish_time': 1682966179253, 'd",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228:3725,log,log,3725,https://hail.is,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228,3,"['log', 'test']","['log', 'test']"
Testability,"cram_path) & hl.is_defined(meta_ht.crai_path), keep=True); - meta_ht = meta_ht.repartition(1000); - meta_ht = meta_ht.checkpoint(; - re.sub("".tsv(.b?gz)?"", """", args.sample_metadata_tsv) + "".ht"", overwrite=True, _read_if_exists=True); -; + hl.init(log=""/tmp/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); vds = gnomad_v4_genotypes.vds(); ; # see https://github.com/broadinstitute/ukbb_qc/pull/227/files; @@ -55,19 +48,8 @@ def main(args):; ; v4_qc_meta_ht = meta.ht(); ; - mt = vds.variant_data; - #mt = vds.variant_data._filter_partitions([41229]); -; - mt = mt.filter_cols(v4_qc_meta_ht[mt.s].release); -; - meta_join = meta_ht[mt.s]; - mt = mt.annotate_cols(; - meta=hl.struct(; - sex_karyotype=meta_join.sex_karyotype,; - cram=meta_join.cram_path,; - crai=meta_join.crai_path,; - ); - ); + #mt = vds.variant_data; + mt = vds.variant_data._filter_partitions([41229]); ; logger.info(""Adjusting samples' sex ploidy""); lgt_expr = hl.if_else(; @@ -88,9 +70,9 @@ def main(args):; logger.info(""Filter variants with at least one non-ref GT""); mt = mt.filter_rows(hl.agg.any(mt.GT.is_non_ref())); ; - #logger.info(f""Saving checkpoint""); - #mt = mt.checkpoint(os.path.join(args.temp_bucket, ""readviz_select_samples_checkpoint1.vds""),; - # overwrite=True, _read_if_exists=True); + logger.info(f""Saving checkpoint""); + mt = mt.checkpoint(""readviz_select_samples_checkpoint1.vds"",; + overwrite=True, _read_if_exists=True); ; def sample_ordering_expr(mt):; """"""For variants that are present in more than 10 samples (or whatever number args.num_samples is set to),; ```. And tried running the bad step:. ```bash; python3 step1__select_samples.py; ```. I was able to get past the checkpoint: ; ```; INFO (Readviz_prep 73): Saving checkpoint; [Stage 0:> (0 + 1) / 1]. 2023-09-01 18:10:29.262 Hail: INFO: wrote matrix table with 11450 rows and 955359 columns in 1 partition to readviz_select_samples_checkpoint1.vds; ```. @bw2 are you still encountering this issue? Did my d",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664:1970,log,logger,1970,https://hail.is,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664,1,['log'],['logger']
Testability,"create repo on GH (via REST call); - initialize local repository (no GH comms); - add remote (no GH comms); - push to GH. (see [test-locally.sh](https://github.com/hail-is/hail/blob/master/ci/test-locally.sh#L31-L53), which is called by test-cluster.sh, after exposing its pod via nginx). We're failing on that last step. It appears that the repository creation succeeded, the response to that REST call was a successful looking JSON object (which indicates a create repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/recei",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:971,test,test-,971,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,5,"['log', 'test']","['login', 'test', 'test-']"
Testability,"crets.token_urlsafe(64); b1 = self.client.create_batch(attributes={'tag': tag, 'name': 'b1'}); b1.create_job('alpine', ['sleep', '30']); b1.close(); ; b2 = self.client.create_batch(attributes={'tag': tag, 'name': 'b2'}); b2.create_job('alpine', ['echo', 'test']); b2.close(); ; def assert_batch_ids(expected, complete=None, success=None, attributes=None):; batches = self.client.list_batches(complete=complete, success=success, attributes=attributes); # list_batches returns all batches for all prev run tests; actual = set([batch.id for batch in batches]).intersection({b1.id, b2.id}); self.assertEqual(actual, expected); ; assert_batch_ids({b1.id, b2.id}, attributes={'tag': tag}); ; b2.wait(); ; > assert_batch_ids({b1.id}, complete=False, attributes={'tag': tag}). test/test_batch.py:93: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; test/test_batch.py:87: in assert_batch_ids; self.assertEqual(actual, expected); E AssertionError: Items in the second set but not the first:; E 19; ________________________________ test_callback _________________________________. client = <batch.client.BatchClient object at 0x7f0d1363ee80>. def test_callback(client):; from flask import Flask, request; app = Flask('test-client'); output = []; ; @app.route('/test', methods=['POST']); def test():; output.append(request.get_json()); return Response(status=200); ; try:; server = ServerThread(app); server.start(); batch = client.create_batch(callback=server.url_for('/test')); head = batch.create_job('alpine:3.8', command=['echo', 'head']); left = batch.create_job('alpine:3.8', command=['echo', 'left'], parents=[head]); right = batch.create_job('alpine:3.8', command=['echo', 'right'], parents=[head]); tail = batch.create_job('alpine:3.8', command=['echo', 'tail'], parents=[left, right]); batch.close(); batch.wait(); i = 0; while len(output) != 4:; time.sleep(0.100 * (3/2) ** i); i += 1; if i > 14:; break; > assert len(output) == 4; E assert 5 == 4; E -5; E +4. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506:1262,assert,assertEqual,1262,https://hail.is,https://github.com/hail-is/hail/pull/6260#issuecomment-498852506,8,"['Assert', 'assert', 'test']","['AssertionError', 'assert', 'assertEqual', 'test', 'test-client']"
Testability,ct * from aggregated_billing_project_user_resources_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8277,test,test,8277,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"ctIntegerDistribution; Exception in thread ""main"" java.lang.NoClassDefFoundError: is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; 	at java.lang.ClassLoader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1317,test,testng,1317,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,cxx emit is actually fine. Where is that tested?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5113#issuecomment-453836020:41,test,tested,41,https://hail.is,https://github.com/hail-is/hail/pull/5113#issuecomment-453836020,1,['test'],['tested']
Testability,"d (192.0K blocks / 256.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.910 root: INFO: RegionPool: REPORT_THRESHOLD: 512.0M allocated (111.9M blocks / 400.1M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:42.730 root: INFO: RegionPool: REPORT_THRESHOLD: 1.2G allocated (439.1M blocks / 781.5M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1""}, 'service_backend_debug_info': {'batch_attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'driver_cores': None, 'driver_memory': None, ...}} or 'batch.worker.jvm_entryway_protocol.EndOfStream' in {'batch_status': {'attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}, 'job_status': {'attributes': {'name': 'driver'}, 'batch_id': 6627669, 'billing_project': 'test', 'cost': 0.0015413897092729028, ...}, 'log': {'main': ""2022-11-15 20:30:18.004 Tokens: INFO: tokens found for namespaces {default}\n2022-11-15 20:30:18.004 tls: INFO: ssl config file found at /batch/2bbb233e4e3c4a96bbffb515019daac9/secrets/ssl-config/ssl-config.json\n2022-11-15 20:30:18.006 GoogleStorageFS$: INFO: Initializing google storage client from service account key\n2022-11-15 20:30:18.114 root: INFO: RegionPool: initialized for thread 8: pool-1-thread-1\n2022-11-15 20:30:18.114 ServiceBackend$: INFO: executing: cEPZ5IV9gUtSnCiAiHXOPs None\n2022-11-15 20:30:18.127 root: INFO: optimize optimize: darrayLowerer, initial IR: before: IR size 17: \n(Let __rng_state\n (RNGStateLiteral (0 0 0 0))\n (MakeTuple (0)\n (TableAggregate\n (TableMapRows\n (TableOrderBy (Aidx) (TableRange 100000000 50))\n (InsertFields\n (SelectFields () (SelectFields (idx) (Ref row)))\n None\n (idx (GetField idx (Ref row)))))\n (MakeStruct\n (idx\n (ApplyAggOp Collect\n ()\n ((GetField idx (Ref row)))))))))\n2022-11-15 20:30:18.146 root: INFO: optimize optimize: ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:64853,log,log,64853,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,1,['log'],['log']
Testability,"d (192.0K blocks / 32.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.351 root: INFO: RegionPool: REPORT_THRESHOLD: 40.2M allocated (192.0K blocks / 40.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.357 root: INFO: RegionPool: REPORT_THRESHOLD: 48.2M allocated (192.0K blocks / 48.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.362 root: INFO: RegionPool: REPORT_THRESHOLD: 56.2M allocated (192.0K blocks / 56.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.368 root: INFO: RegionPool: REPORT_THRESHOLD: 64.2M allocated (192.0K blocks / 64.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.374 root: INFO: RegionPool: REPORT_THRESHOLD: 72.2M allocated (192.0K blocks / 72.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.414 root: INFO: RegionPool: REPORT_THRESHOLD: 128.2M allocated (192.0K blocks / 128.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.506 root: INFO: RegionPool: REPORT_THRESHOLD: 256.2M allocated (192.0K blocks / 256.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.910 root: INFO: RegionPool: REPORT_THRESHOLD: 512.0M allocated (111.9M blocks / 400.1M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:42.730 root: INFO: RegionPool: REPORT_THRESHOLD: 1.2G allocated (439.1M blocks / 781.5M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1""}, 'service_backend_debug_info': {'batch_attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'driver_cores': None, 'driver_memory': None, ...}}). test/hail/backend/test_service_backend.py:12: AssertionError; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:128453,test,test,128453,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,3,"['Assert', 'test']","['AssertionError', 'test']"
Testability,"d about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aiohttp. This is strange to say the least. I was really curious about this, so I ran the bench. First, I upgraded Sanic to a recent version. Then I ran their test. In short, their results were not what I found. Sanic is 50% faster, and the timeouts are what you'd expect. 26 timeouts for Sanic, 45 for aiohttp. Sanic Run 1:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 con",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:2889,benchmark,benchmark,2889,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,d2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStor,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:11746,test,test-,11746,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,d2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.sca,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:12002,test,test-,12002,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,dAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4688,test,testng,4688,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,dAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4495,test,testng,4495,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,"damn testTableJoin is crazy, that one method generates ~500 tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9139#issuecomment-663252792:5,test,testTableJoin,5,https://hail.is,https://github.com/hail-is/hail/pull/9139#issuecomment-663252792,2,['test'],"['testTableJoin', 'tests']"
Testability,"darn, the latest few changes break everything. """"""; test/hail/expr/test_expr.py::Tests::test_array_methods FAILED [ 11%]; _________________________________________________________________________________________ Tests.test_array_methods __________________________________________________________________________________________. self = <test.hail.expr.test_expr.Tests testMethod=test_array_methods>. def test_array_methods(self):; self.assertEqual(hl.eval(hl.any(lambda x: x % 2 == 0, [1, 3, 5])), False); self.assertEqual(hl.eval(hl.any(lambda x: x % 2 == 0, [1, 3, 5, 6])), True); ; self.assertEqual(hl.eval(hl.all(lambda x: x % 2 == 0, [1, 3, 5, 6])), False); self.assertEqual(hl.eval(hl.all(lambda x: x % 2 == 0, [2, 6])), True); ; self.assertEqual(hl.eval(hl.map(lambda x: x % 2 == 0, [0, 1, 4, 6])), [True, False, True, True]); ; self.assertEqual(hl.eval(hl.len([0, 1, 4, 6])), 4); ; > self.assertTrue(math.isnan(hl.eval(hl.mean(hl.empty_array(hl.tint))))). test/hail/expr/test_expr.py:2240: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; </miniconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-540>:2: in eval; ???; hail/typecheck/check.py:585: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:189: in eval; return eval_timed(expression)[0]; </miniconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-538>:2: in eval_timed; ???; hail/typecheck/check.py:585: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:155: in eval_timed; return Env.backend().execute(expression._ir, True); hail/backend/backend.py:109: in execute; result = json.loads(Env.hc()._jhc.backend().executeJSON(self._to_java_ir(ir))); hail/backend/backend.py:105: in _to_java_ir; ir._jir = ir.parse(r(ir), ir_map=r.jirs); hail/ir/base_ir.py:244: in p",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7969#issuecomment-579035930:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/7969#issuecomment-579035930,14,"['Test', 'assert', 'test']","['Tests', 'assertEqual', 'assertTrue', 'test', 'testMethod']"
Testability,"date=2023-10-19T03:09:40Z' >> src/main/resources/build-info.properties; echo 'sparkVersion=3.3.2' >> src/main/resources/build-info.properties; echo 'hailPipVersion=0.2.124' >> src/main/resources/build-info.properties; creating env/HAIL_DEBUG_MODE which does not exist; ELASTIC_MAJOR_VERSION is set to ""7"" which is different from old value """"; printf ""7"" > env/ELASTIC_MAJOR_VERSION; make -C src/main/c prebuilt; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux PartitionIterators.cpp -M",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:5098,test,testutils,5098,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,2,['test'],"['tests', 'testutils']"
Testability,de/linux build/NativeBoot.o -o lib/linux-x86-64/libboot.so; curl -sSL https://storage.googleapis.com/hail-common/libsimdpp-2.1.tar.gz > libsimdpp-2.1.tar.gz; tar -xzf libsimdpp-2.1.tar.gz; g++ -o build/ibs.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/ibs.d -MT build/ibs.o -c ibs.cpp; g++ -o build/Decoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Decoder.d -MT build/Decoder.o -c Decoder.cpp; g++ -o build/Encoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Encoder.d -MT build/Encoder.o -c Encoder.cpp; g++ -o build/Logging.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Logging.d -MT build/Logging.o -c Logging.cpp; g++ -o build/NativeCodeSuite.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o -c NativeCodeSuite.cp; p; g++ -o build/NativeLongFunc.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o -c NativeLongFunc.cpp; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:11505,Log,Logging,11505,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,debatable. I think it's useful to know this but maybe better conceived as a log message. Let's close and reconsider when its a problem again.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12984#issuecomment-1550324359:76,log,log,76,https://hail.is,https://github.com/hail-is/hail/pull/12984#issuecomment-1550324359,1,['log'],['log']
Testability,"ded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=[(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recalibrated.vcf), (RodBinding name=variant2 source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.filtered.vcf)] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub genotypemergeoption=UNSORTED filteredrecordsmergetype=KEEP_IF_ANY_UNFILTERED multipleallelesmergetype=BY_TYPE rod_priority_list=null printComplexMerges=false filteredAreUncalled=false minimalVCF=false setKey=set assumeIdenticalSamples=true minimumN=1 suppressCommandLineHeader=false mergeInfoWithMaxAC=false filter_mismatching_base_and_quals=false""; ##FILTER=<ID=Indel_FS,Description=""FS>200.0"">; ##FILTER=<ID=Indel_InbreedingCoeff,Description=""InbreedingCoeff<-0.8"">; ##FILTER=<ID=Indel_QD,Description=""QD<2.0"">; ##FILTER=<ID=Indel_ReadPosRankSum,Description=""ReadPosRankSum<-20.0"">; ##FILTER=<ID=LowQual,Description=""Low quality"">; ##FILTER=<ID=VQSRTrancheSNP98.50to98.60,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -1.4503 <= x < -1.2551"">; ##FILTER=<ID=VQSRTrancheSNP98.60to98.80,Description=""Truth",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:3719,stub,stubs,3719,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,deselected / 85 selected. <Package hail>; <Module test_context.py>; <Function test_init_hail_context_twice>; <Function test_top_level_functions_are_do_not_error>; <Function test_tmpdir_runs>; <Module test_randomness.py>; <Function test_table_explode>; <Package backend>; <Module test_service_backend.py>; <Function test_tiny_driver_has_tiny_memory>; <Function test_big_driver_has_big_memory>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:1979,Test,Tests,1979,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,2,['Test'],"['TestCaseFunction', 'Tests']"
Testability,do I have test failures? I thought it passed,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8067#issuecomment-585439143:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/8067#issuecomment-585439143,1,['test'],['test']
Testability,do we have tests that verify we get errors if we try to rekey with annotate_rows?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4242#issuecomment-417758456:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/4242#issuecomment-417758456,1,['test'],['tests']
Testability,do_not_error>; <Function test_tmpdir_runs>; <Module test_randomness.py>; <Function test_table_explode>; <Package backend>; <Module test_service_backend.py>; <Function test_tiny_driver_has_tiny_memory>; <Function test_big_driver_has_big_memory>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestC,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2078,Test,Tests,2078,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,4,['Test'],"['TestCaseFunction', 'Tests']"
Testability,does it fix a bug? can we test it?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4606#issuecomment-432055173:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/4606#issuecomment-432055173,1,['test'],['test']
Testability,does jenkins have qctool? . I've also noticed that the import plink spec test occasionally fails due to the fatal(partitions greater than filesize) but I haven't changed any of that code.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210435597:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210435597,1,['test'],['test']
Testability,"does not exist; ELASTIC_MAJOR_VERSION is set to ""7"" which is different from old value """"; printf ""7"" > env/ELASTIC_MAJOR_VERSION; make -C src/main/c prebuilt; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux PartitionIterators.cpp -MG -M -MF build/PartitionIterators.d -MT build/PartitionIterators.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/inclu",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:5359,test,test,5359,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['test']
Testability,doesn't the ServiceBackend exit(0) even when the batch fails? That's my vague recollection of running benchmarks,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9297#issuecomment-675587772:102,benchmark,benchmarks,102,https://hail.is,https://github.com/hail-is/hail/pull/9297#issuecomment-675587772,1,['benchmark'],['benchmarks']
Testability,doesnt `NDArrayShape` need an assert?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7355#issuecomment-544988372:30,assert,assert,30,https://hail.is,https://github.com/hail-is/hail/pull/7355#issuecomment-544988372,1,['assert'],['assert']
Testability,"don't review yet, testing another branch for speed improvements now",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279406347:18,test,testing,18,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279406347,1,['test'],['testing']
Testability,"downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unfiltered.vcf) discordance=(RodBinding name= source=UNBOUND) concordance=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sample_name=[] sample_expressions=null sample_file=null exclude_sample_name=[] exclude_sample_file=[] select_expressions=[] excludeNonVariants=false excludeFiltered=false regenotype=false restrictAllelesTo=ALL keepOriginalAC=false mendelianViolation=false mendelianViolationQualThreshold=0.0 select_random_fraction=0.0 remove_fraction_genotypes=0.0 selectTypeToInclude=[INDEL] keepIDs=null fullyDecode=false forceGenotypesDecode=false justRead=false maxIndelSize=2147483647 ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES=false filter_mismatching_base_and_quals=false""; ##UnifiedGenotyper=""analysis_type=UnifiedGenotyper input_file=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.bam.list] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA re",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:12798,stub,stubs,12798,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.unfiltered.vcf) mask=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub filterExpression=[FS>200.0, QD<2.0, ReadPosRankSum<-20.0, InbreedingCoeff<-0.8] filterName=[Indel_FS, Indel_QD, Indel_ReadPosRankSum, Indel_InbreedingCoeff] genotypeFilterExpression=[] genotypeFilterName=[] clusterSize=3 clusterWindowSize=0 maskExtension=0 maskName=Mask missingValuesInExpressionsShouldEvaluateAsFailing=false invalidatePreviousFilters=false filter_mismatching_base_and_quals=false""; ##contig=<ID=1,length=248956422>; ##contig=<ID=2,length=242193529>; ##contig=<ID=3,length=198295559>; ##contig=<ID=4,length=190214555>; ##contig=<ID=5,length=181538259>; ##contig=<ID=6,length=170805979>; ##contig=<ID=7,length=159345973>; ##contig=<ID=8,length=145138636>; ##contig=<ID=9,length=138394717>; ##contig=<ID=10,length=133797422>; ##contig=<ID=11,length=135086622>; ##contig=<ID=12,length=133275309>; ##contig=<ID=13,l",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:20525,stub,stubs,20525,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,ds.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.Spli,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1536,test,test,1536,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,e Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function test_hadoop_methods_1[local]>; <Function test_hadoop_methods_2[remote]>; <Function test_hadoop_methods_2[local]>; <Function test_hadoop_methods_3[remote]>; <Function test_hadoop_methods_3[local]>; <Function test_read_overwrite[remote]>; <Function test_read_overwrite[local]>; <Function test_hadoop_exists[remote]>; <Function test_hadoop_exists[local]>; <Function test_hadoop_is_file[remote]>; <Function test_hadoop_is_file[local]>; <Function test_hadoop_stat[remote]>; <Function test_hadoop_stat[local]>; <Function test_subdirs[remote]>; <Function test_subdirs[local]>; <Function test_rmtree_empty_is_ok[remote]>; <Function test_rmtree_empty_is_ok[local]>; <Function test_rmtree_e,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:3068,Test,TestCaseFunction,3068,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,1,['Test'],['TestCaseFunction']
Testability,"e any of the hard problems (whereas shared_ptr; very much does). Now I realize that people writing books about C++ write a good deal about move semantics and; unique_ptr. My interpretation is that there's a lot of writing about it because it involves concepts; which simply don't occur in any other commonly-used languages, and as such it requires a; good deal of explanation and justification because it's peculiar and unfamiliar. I suggest that; other languages haven't invented this concept because it's a) confusing and b) not particularly; useful. There's one really good thing you get from move semantics: the ability to resize a std::vector<T>; or std::unordered_map<T> without constructing deep copies of each T object. In the cases; where that's useful, it's very useful for optimizing performance without totally bypassing all your; abstraction mechanisms. The other ways people attempt to exploit move semantics are IMO; just a bad idea: if you want to pass around a large expensive-to-create object, then do it the; Java way by putting it on the heap and passing around some kind of reference, and *everyone* can understand it, not just experts in modern C++. Another angle on this debate would be to look at some open-source C++ projects and see how; often they actually use unique_ptr and/or std::move. My guess is that it's much less common; in practice than you might think from reading books about C++, because the overlap between; ""object ownership is passed around"" and ""... but we always know precisely who has ownership""; is not a very big part of the design space - compared to a whole lot of ""always owned by the object which created it"" and ""used in several places at once and we don't know who will be the last to drop it"". [Update: the LLVM codebase, including tests, is 2.00M lines of C++ (.h and .cpp files), of which; ""unique_ptr"" occurs 4500 times, and ""std::move"" 3558 times. That's a ""unique_ptr"" on average once every 444 lines, and ""std::move"" once every 562 lines.]",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396683489:2030,test,tests,2030,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396683489,1,['test'],['tests']
Testability,"e may be to increase `read_timeout` past 120 seconds, although depending on the causes of this issue, that may not eliminate the problem, and of course leaves a long delay, which may be unacceptable for the use-case. As for why read takes so long: not 100% sure yet, setting up batch and CI is still incomplete, and I have not triggered this error myself. My guess is that Kubernetes takes too long to generate the response, either due to garbage collection, or simply because the requested information takes N > 120 seconds to return. That would be a very long time for any reasonable response, so either the resource isn't ready and it waits, or there are network connectivity issues. If network issues, not sure what solutions are. If I were on AWS, I would think about using a larger instance, with a higher-bandwidth NIC.; * Possible connection: https://github.com/arangodb/arangodb/issues/7813 ; * Possible solution: Reduce work Kubernetes must do to return response. #### 2nd set of errors:; ```log; # Batch; ERROR	| 2018-12-18 21:25:00,095 	| server.py 	| run_forever:447 | run_forever: target kube_event_loop threw exception; Traceback (most recent call last):; File ""/usr/lib/python3.6/site-packages/urllib3/response.py"", line 601, in _update_chunk_length; self.chunk_left = int(line, 16); ValueError: invalid literal for int() with base 16: b''. # CI; ERROR	| 2018-12-18 21:25:22,041 	| app.py 	| log_exception:1761 | Exception on /refresh_batch_state [POST]; Traceback (most recent call last):; ...; File ""/home/hail-ci/.local/lib/python3.7/site-packages/batch/requests_helper.py"", line 11, in raise_on_failure; response=response; requests.exceptions.HTTPError: 500 Server Error for url http://batch.default/jobs. <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2 Final//EN"">; <title>500 Internal Server Error</title>; ```; Initiator seems; https://github.com/datawire/ambassador/issues/554. Solution may be to catch and re-connect to Kubernetes; https://github.com/datawire/ambassador/pull/724",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389:2109,log,log,2109,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389,1,['log'],['log']
Testability,"e spark partition defaults on our cluster to split data into 8,00 partitions. We had [read](https://cloud.google.com/dataproc/docs/support/spark-job-tuning) that this number could be changed to 3x the number of vCPUs on our cluster. Because we are using autoscaling, the number of vCPUs used is not predetermined. Because of this we started with 1x the maximum number of secondary workers in our cluster. Our maximum is set to 1000 n1-highmem-8 machines. These nodes contain 8 vCPUs each, so 8 x 1,000 = 8,000. After speaking with Google, we verified that we could have used 3x the maximum number of vCPUs to increase parallelism. With a maximum of 10 workers and 1,000 secondary workers, all n1-highmem-8 nodes, we could have increased our partition to 24,240. A sample cluster declaration using autoscaling and default shuffle partitions and parallelism of 8000 is below. 3) The hail team had informed us that ""You might try adding `block_size=2048` to your King invocation. That will reduce the memory requirements on the workers to ~1/4 of the default which should give ample room for the analysis."" Because of this, we changed the block size in king to ```block_size=2048```. After looking through the king [source code](https://hail.is/docs/0.2/_modules/hail/linalg/blockmatrix.html#BlockMatrix.default_block_size), we were able to determine the default block size is 4096. . ```; hailctl dataproc start cluster \; --vep GRCh38 \; --autoscaling-policy=MVP_autoscaling_policy \; --requester-pays-allow-annotation-db \; --packages gnomad \; --requester-pays-allow-buckets gnomad-public-requester-pays \; --secondary-worker-type=non-preemptible \; --master-machine-type=n1-highmem-8 \; --worker-machine-type=n1-highmem-8 \; --worker-boot-disk-size=1000 \; --preemptible-worker-boot-disk-size=1000 \; --properties=dataproc:dataproc.logging.stackdriver.enable=true,dataproc:dataproc.monitoring.stackdriver.enable=true,spark:spark.sql.shuffle.partitions=8000,spark:spark.default.parallelism=8000; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12290#issuecomment-1284270117:2062,log,logging,2062,https://hail.is,https://github.com/hail-is/hail/issues/12290#issuecomment-1284270117,1,['log'],['logging']
Testability,e test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL. Total time: 3 mins 10.058 secs; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2580,test,test,2580,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,19,['test'],"['test', 'testFilterSamples', 'testFlushDouble', 'testSame', 'testVariant']"
Testability,"e test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; -",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2173,test,test,2173,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"e test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best of 3: 1m48.5s; - map-any, best of 3: 1m43.1s. read, filtervariants --keep -c 'va.info.MQ>20' filtergenotypes --keep -c 'g.gq > 20' count; - master, best of 3",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2352,test,test,2352,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"e), AD=[23, 0], DP=23, GQ=22, PL=[0, 22, 706]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[34, 0], DP=34, GQ=33, PL=[0, 33, 1040]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[27, 0], DP=27, GQ=63, PL=[0, 63, 873]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[24, 0], DP=24, GQ=66, PL=[0, 66, 990]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[36, 0], DP=36, GQ=76, PL=[0, 76, 1170]), Struct(GT=Call(alleles=[0, 1], phased=False), AD=[27, 5], DP=32, GQ=3, PL=[3, 0, 768]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[21, 0], DP=21, GQ=60, PL=[0, 60, 768]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[22, 0], DP=22, GQ=49, PL=[0, 49, 673]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[19, 0], DP=19, GQ=18, PL=[0, 18, 504]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[17, 0], DP=17, GQ=0, PL=[0, 0, 388]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[21, 0], DP=21, GQ=63, PL=[0, 63, 702]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[24, 0], DP=24, GQ=60, PL=[0, 60, 900]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[18, 0], DP=18, GQ=0, PL=[0, 0, 468]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[17, 0], DP=17, GQ=0, PL=[0, 0, 506]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[14, 0], DP=14, GQ=0, PL=[0, 0, 290]), Struct(GT=Call(alleles=[0, 0], phased=False), AD=[22, 0], DP=22, GQ=20, PL=[0, 20, 708])])]; FAILED; ________________________ VCFTests.test_empty_read_write ________________________. self = <test.hail.methods.test_impex.VCFTests testMethod=test_empty_read_write>. @fails_service_backend(); @fails_local_backend(); def test_empty_read_write(self):; mt = hl.import_vcf(resource('sample.vcf'), min_partitions=4).filter_rows(False); ; out1 = new_temp_file(extension='vcf'); out2 = new_temp_file(extension='vcf.bgz'); ; hl.export_vcf(mt, out1); hl.export_vcf(mt, out2); ; assert os.stat(uri_path(out1)).st_size > 0; assert os.stat(uri_path(out2)).st_size > 0; ; > assert hl.import_vcf(out1)._same(mt); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1059482577:97266,test,test,97266,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1059482577,5,"['assert', 'test']","['assert', 'test', 'testMethod']"
Testability,"e-based.html) based on information from the [TeamCity wiki](https://confluence.jetbrains.com/pages/viewpage.action?pageId=74845225#HowTo...-SetUpTeamCitybehindaProxyServer):. ``` apache; <IfModule mod_ssl.c>; <VirtualHost *:443>; # The ServerName directive sets the request scheme, hostname and port that; # the server uses to identify itself. This is used when creating; # redirection URLs. In the context of virtual hosts, the ServerName; # specifies what hostname must appear in the request's Host: header to; # match this virtual host. For the default virtual host (this file) this; # value is not decisive as it is used as a last resort host regardless.; # However, you must set it for any further virtual host explicitly.; ServerName hail.is; ServerAlias www.hail.is. ServerAdmin webmaster@localhost; DocumentRoot /var/www/html. RedirectMatch 404 /\.git. # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,; # error, crit, alert, emerg.; # It is also possible to configure the loglevel for particular; # modules, e.g.; #LogLevel info ssl:warn. ErrorLog ${APACHE_LOG_DIR}/error.log; CustomLog ${APACHE_LOG_DIR}/access.log combined. # For most configuration files from conf-available/, which are; # enabled or disabled at a global level, it is possible to; # include a line for only one particular virtual host. For example the; # following line enables the CGI configuration for this host only; # after it has been globally disabled with ""a2disconf"".; #Include conf-available/serve-cgi-bin.conf; SSLCertificateFile /etc/letsencrypt/live/hail.is/fullchain.pem; SSLCertificateKeyFile /etc/letsencrypt/live/hail.is/privkey.pem; Include /etc/letsencrypt/options-ssl-apache.conf; </VirtualHost>. <VirtualHost *:443>; ServerName ci.hail.is; ServerAdmin webmaster@localhost. LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so; LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so; LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so; LoadMo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/674#issuecomment-243899170:1385,log,loglevel,1385,https://hail.is,https://github.com/hail-is/hail/issues/674#issuecomment-243899170,1,['log'],['loglevel']
Testability,e.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVar,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2420,test,test,2420,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,e.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/stora,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4075,test,testng,4075,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,e.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/stora,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4268,test,testng,4268,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,eByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(Filter,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:12644,test,test-,12644,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"eCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 19:16:02 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); /hail/test/BRCA1.raw_indel.vcf MapPartitionsRDD[1] at textFile at NativeMethodAccessorImpl.java:-2; >>> ; ```. ----------------; When I executed the command in local mode , there seems to hava some result:; ```; [root@tele-1 ~]# python; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> from hail import *; >>> hc = HailContext();; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/opt/NfsDir/UserDir/wanghn/BRCA1.raw_indel.vcf').write('/opt/NfsDir/UserDir/wanghn/BRCA1.raw_indel_1.vds'); hail: info: No multiallelics detected.; hail: info: Coerced unsorted dataset; SLF4J: Failed to load class ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506:1526,test,test,1526,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506,1,['test'],['test']
Testability,eManager.$anonfun$cleanup$1$adapted(ExecuteContext.scala:26); E 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62); E 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55); E 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); E 	at is.hail.backend.OwningTempFileManager.cleanup(ExecuteContext.scala:26); E 	at is.hail.backend.ExecuteContext.close(ExecuteContext.scala:148); E 	at is.hail.utils.package$.using(package.scala:660); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:70); E 	at is.hail.utils.package$.using(package.scala:640); E 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); E 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:59); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$1(ServiceBackend.scala:555); E 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); E 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.withExecuteContext$1(ServiceBackend.scala:535); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.executeOneCommand(ServiceBackend.scala:602); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$7(ServiceBackend.scala:433); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$7$adapted(ServiceBackend.scala:432); E 	at is.hail.utils.package$.using(package.scala:640); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$6(ServiceBackend.scala:432); E 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); E 	at is.hail.services.package$.retryTransientErrors(package.scala:77); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$5(ServiceBackend.scala:432); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$5$adapted(ServiceBackend.scala:430); E 	at is.hail.utils.package$.using(package.scala:640); E 	a,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11883#issuecomment-1144890222:2262,log,logTime,2262,https://hail.is,https://github.com/hail-is/hail/pull/11883#issuecomment-1144890222,1,['log'],['logTime']
Testability,eStorageFS.scala:297); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057);,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3713,test,testng,3713,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,eStorageFS.scala:317); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057);,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:3906,test,testng,3906,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,"ead 8: pool-1-thread-1\n2022-11-15 20:31:41.374 root: INFO: RegionPool: REPORT_THRESHOLD: 72.2M allocated (192.0K blocks / 72.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.414 root: INFO: RegionPool: REPORT_THRESHOLD: 128.2M allocated (192.0K blocks / 128.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.506 root: INFO: RegionPool: REPORT_THRESHOLD: 256.2M allocated (192.0K blocks / 256.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.910 root: INFO: RegionPool: REPORT_THRESHOLD: 512.0M allocated (111.9M blocks / 400.1M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:42.730 root: INFO: RegionPool: REPORT_THRESHOLD: 1.2G allocated (439.1M blocks / 781.5M chunks), regions.size = 5, 0 current java objects, thread 8: pool-1-thread-1""}, 'service_backend_debug_info': {'batch_attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'driver_cores': None, 'driver_memory': None, ...}} or 'batch.worker.jvm_entryway_protocol.EndOfStream' in {'batch_status': {'attributes': {'name': 'test_tiny_driver_has_tiny_memory'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}, 'job_status': {'attributes': {'name': 'driver'}, 'batch_id': 6627669, 'billing_project': 'test', 'cost': 0.0015413897092729028, ...}, 'log': {'main': ""2022-11-15 20:30:18.004 Tokens: INFO: tokens found for namespaces {default}\n2022-11-15 20:30:18.004 tls: INFO: ssl config file found at /batch/2bbb233e4e3c4a96bbffb515019daac9/secrets/ssl-config/ssl-config.json\n2022-11-15 20:30:18.006 GoogleStorageFS$: INFO: Initializing google storage client from service account key\n2022-11-15 20:30:18.114 root: INFO: RegionPool: initialized for thread 8: pool-1-thread-1\n2022-11-15 20:30:18.114 ServiceBackend$: INFO: executing: cEPZ5IV9gUtSnCiAiHXOPs None\n2022-11-15 20:30:18.127 root",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:64460,test,test,64460,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,1,['test'],['test']
Testability,eaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImp,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1668,Test,TestMethodWorker,1668,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestMethodWorker']
Testability,ect_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8662,test,test,8662,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"edit: ah, I see, you removed the wait, great. Here is a possible alternative solution:. `kubectl -n blog wait --timeout=1h --for=condition=ready pods --selector=app=blog`. Tested with `pods --all`, `pods --selector=app=prometheus`. A difference that is worth being aware of: timeout will apply to each resource matched by the selector. So you'd need to check if the resource specified was a stateful set, and substitute a selector that they would need to pass in the config.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-546465650:172,Test,Tested,172,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-546465650,1,['Test'],['Tested']
Testability,ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:44,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:13049,test,test-,13049,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"efficientSuite.testIbcPlinkVersion FAILED; Gradle suite > Gradle test > is.hail.methods.LinearMixedRegressionSuite.genAndFitLMM FAILED`. It fails out with 244 tests completed and 5 failed. I've attached the test report ; [tests.zip](https://github.com/hail-is/hail/files/795132/tests.zip). There are two differences that I can tell between the current build and the previous times I've tried. 1. I was using a local installation of spark when it worked, whereas now I am using the HPC's version of spark 2.1.0. However, it passed the tests just fine when I was using a local copy of spark 2.0.2 on both my laptop and HPC. . 2. Initially I followed the recommendations on the doc pages to setup the python path references to py4j under `alias hail=""PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar python""` This perhaps didn't export the PYTHONPATH to the py4j 10.4 .zip library if I hadn't run the `hail` command before I tried testing. My initial reaction was to just install a local copy of py4j via pip in my local copy of python since the tests were failing out with complaints about missing py4j module. That worked to get a little farther in the test script, to the point where it was failing out with the breeze function. But, since then I've re-jiggered the PYTHONPATH in the .bash_profile to always be defined to point to the SPARK_HOME version of py4j. This doesn't seem like it would be a problem as the py4j versions via pip and and SPARK_HOME are both 10.4, and moreover this setup worked with spark 2.0.2, but a possible confound. Perhaps change the getting started docs so the PYTHONPATH is always defined to point to the spark version of py4j?. Anyway, here are the current paths as you requested. . `echo $SPARK_HOME /share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7`. `echo $PYTHONPATH; /home/stockham/bin/python/Python-2.7.12:/share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721:1530,test,testing,1530,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721,1,['test'],['testing']
Testability,eflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.Ser,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2237,Test,TestNG,2237,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,"ence_sample_calls=(RodBinding name= source=UNBOUND) reference_sample_name=null sample_ploidy=2 min_quality_score=1 max_quality_score=40 site_quality_prior=20 min_power_threshold_for_calling=0.95 min_reference_depth=100 exclude_filtered_reference_sites=false heterozygosity=0.0010 genotyping_mode=DISCOVERY output_mode=EMIT_VARIANTS_ONLY standard_min_confidence_threshold_for_calling=30.0 standard_min_confidence_threshold_for_emitting=30.0 alleles=(RodBinding name= source=UNBOUND) max_alternate_alleles=6 p_nonref_model=EXACT_INDEPENDENT contamination_fraction_to_filter=0.0 contamination_percentage_per_sample_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.v1.contamination_levels.txt logRemovedReadsFromContaminationFiltering=null exactcallslog=null dbsnp=(RodBinding name=dbsnp source=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.dbsnp.vcf) comp=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub debug_file=null metrics_file=null annotation=[] excludeAnnotation=[] filter_mismatching_base_and_quals=false""; ##VariantAnnotator=""analysis_type=VariantAnnotator input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/references/HybSelOligos/whole_exome_agilent_1.1_refseq_plus_3_boosters/whole_exome_agilent_1.1_refseq_plus_3_boosters.Homo_sapiens_assembly19.targets.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=50 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:16428,stub,stubs,16428,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"encies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our test code references these third-party classes:; ```; import breeze.linalg.DenseMatrix; import breeze.linalg._; import breeze.linalg.{*, diag, DenseMatrix => BDM, DenseVector => BDV}; import breeze.linalg.{DenseMatrix => BDM, _}; import breeze.linalg.{DenseMatrix => BDM}; import breeze.linalg.{DenseMatrix, DenseVector, eigSym, svd}; import breeze.linalg.{DenseMatrix, DenseVector}; import breeze.linalg.{DenseMatrix, Matrix, Vector}; import breeze.linalg.{Vector => BVector}; import htsjdk.samtools.reference.ReferenceSequenceFileFactory; import htsjdk.samtools.util.BlockCompressedFilePointerUtil; import htsjdk.tribble.readers.{TabixReader => HtsjdkTabixReader}; import org.apache.avro.SchemaBuilder; import org.apache.avro.file.DataFileWriter; import org.apache.avro.generic.{GenericDatumWriter, GenericRecord, GenericRecordBuilder}; import org.apache.commons.io.IOUtils; import org.apache.commons.math3.distribution.ChiSquaredDistribution; import org.apache.commons.math3.distribution.{ChiSquaredDistribution, NormalDistributi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:2000,test,test,2000,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['test']
Testability,"entException: key not found: RefEquality(WriteMetadata(Let(__iruid_369,CollectDistributedArray(StreamZip(ArrayBuffer(MakeStream(ArrayBuffer(Literal(struct{start: int32, end: int32},[0,10]), Literal(struct{start: int32, end: int32},[10,20]), Literal(struct{start: int32, end: int32},[20,30]), Literal(struct{start: int32, end: int32},[30,40]), Literal(struct{start: int32, end: int32},[40,50]), Literal(struct{start: int32, end: int32},[50,60]), Literal(struct{start: int32, end: int32},[60,70]), Literal(struct{start: int32, end: int32},[70,80]), Literal(struct{start: int32, end: int32},[80,90]), Literal(struct{start: int32, end: int32},[90,100])),stream<struct{start: int32, end: int32}>,false), MakeStream(ArrayBuffer(Str(""part-00-""), Str(""part-01-""), Str(""part-02-""), Str(""part-03-""), Str(""part-04-""), Str(""part-05-""), Str(""part-06-""), Str(""part-07-""), Str(""part-08-""), Str(""part-09-"")),stream<str>,false)),ArrayBuffer(__iruid_372, __iruid_373),MakeStruct(ArrayBuffer((oldCtx,Ref(__iruid_372,struct{start: int32, end: int32})), (writeCtx,Ref(__iruid_373,str)))),AssertSameLength),Literal(struct{},[]),__iruid_370,__iruid_371,WritePartition(Let(__iruid_374,GetField(Ref(__iruid_370,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),oldCtx),StreamMap(StreamRange(GetField(Ref(__iruid_374,struct{start: int32, end: int32}),start),GetField(Ref(__iruid_374,struct{start: int32, end: int32}),end),I32(1),false),__iruid_375,MakeStruct(ArrayBuffer((idx,Ref(__iruid_375,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_370,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_290)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:3341,Assert,AssertSameLength,3341,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,2,"['Assert', 'test']","['AssertSameLength', 'test']"
Testability,"entException: key not found: RefEquality(WriteMetadata(Let(__iruid_465,CollectDistributedArray(StreamZip(ArrayBuffer(MakeStream(ArrayBuffer(Literal(struct{start: int32, end: int32},[0,10]), Literal(struct{start: int32, end: int32},[10,20]), Literal(struct{start: int32, end: int32},[20,30]), Literal(struct{start: int32, end: int32},[30,40]), Literal(struct{start: int32, end: int32},[40,50]), Literal(struct{start: int32, end: int32},[50,60]), Literal(struct{start: int32, end: int32},[60,70]), Literal(struct{start: int32, end: int32},[70,80]), Literal(struct{start: int32, end: int32},[80,90]), Literal(struct{start: int32, end: int32},[90,100])),stream<struct{start: int32, end: int32}>,false), MakeStream(ArrayBuffer(Str(""part-00-""), Str(""part-01-""), Str(""part-02-""), Str(""part-03-""), Str(""part-04-""), Str(""part-05-""), Str(""part-06-""), Str(""part-07-""), Str(""part-08-""), Str(""part-09-"")),stream<str>,false)),ArrayBuffer(__iruid_468, __iruid_469),MakeStruct(ArrayBuffer((oldCtx,Ref(__iruid_468,struct{start: int32, end: int32})), (writeCtx,Ref(__iruid_469,str)))),AssertSameLength),Literal(struct{},[]),__iruid_466,__iruid_467,WritePartition(Let(__iruid_470,GetField(Ref(__iruid_466,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),oldCtx),StreamMap(StreamRange(GetField(Ref(__iruid_470,struct{start: int32, end: int32}),start),GetField(Ref(__iruid_470,struct{start: int32, end: int32}),end),I32(1),false),__iruid_471,MakeStruct(ArrayBuffer((idx,Ref(__iruid_471,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_466,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_386)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:3061,Assert,AssertSameLength,3061,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,2,"['Assert', 'test']","['AssertSameLength', 'test']"
Testability,"ents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": """,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3704,test,test,3704,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"er file (~900 exomes) and I got:. hail: writekudu: caught exception:; org.kududb.client.NonRecoverableException: Too many attempts:; KuduRpc(method=IsCreateTableDone, tablet=null, attempt=6,; DeadlineTracker(timeout=10000, elapsed=7721),; Deferred@1490962783(state=PENDING, result=null, callback=(continuation; of Deferred@813205641 after; org.kududb.client.AsyncKuduClient$4@2c0dff53@739114835) ->; (continuation of Deferred@1748842457 after; org.kududb.client.AsyncKuduClient$5@42031f30@1107500848) ->; (continuation of Deferred@919337785 after; org.kududb.client.AsyncKuduClient$5@75ff6dd4@1979674068) ->; (continuation of Deferred@1962741581 after; org.kududb.client.AsyncKuduClient$5@2edd647d@786261117) ->; (continuation of Deferred@1202081964 after; org.kududb.client.AsyncKuduClient$5@49391441@1228477505),; errback=(continuation of Deferred@813205641 after; org.kududb.client.AsyncKuduClient$4@2c0dff53@739114835) ->; (continuation of Deferred@1748842457 after; org.kududb.client.AsyncKuduClient$5@42031f30@11075008; 48) -> (continuation of Deferred@919337785 after; org.kududb.client.AsyncKuduClient$5@75ff6dd4@1979674068) ->; (continuation of Deferred@1962741581 after; org.kududb.client.AsyncKuduClient$5@2edd647d@786261117) ->; (continuation of Deferred@1202081964 after; org.kududb.client.AsyncKuduClient$5@49391441@1228477505))). In the Kudu logs, I'm seeing tons of:. W0411 15:20:09.832504 129721 catalog_manager.cc:1880] TS; a72be89d736f49a799e1b544197675be: Create Tablet RPC failed for tablet; 6652d540f73a4ba5a0b9758a3aeeb1e4: Remote error: Service unavailable:; CreateTablet request on kudu.tserver.TabletServerAdminService from; 69.173.65.227:42904 dropped due to backpressure. The service queue is; full; it has 50 items. Suggestions on how to proceed? Should I increase the service queue size?. —; You are receiving this because you authored the thread.; Reply to this email directly or view it on GitHub; https://github.com/broadinstitute/hail/pull/242#issuecomment-208516279",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/242#issuecomment-208722298:2293,log,logs,2293,https://hail.is,https://github.com/hail-is/hail/pull/242#issuecomment-208722298,1,['log'],['logs']
Testability,"er': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182', 'foo': 'bar', 'name': 'test_callback'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}; E assert {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 2, 'n_completed': 2, 'n_succeeded': 2, 'n_failed': 0, 'n_cancelled': 0, 'attributes': {'name': 'test_callback', 'foo': 'bar', 'client_job': '8051758-182'}} == {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 2, 'n_completed': 2, 'n_succeeded': 2, 'n_failed': 0, 'n_cancelled': 0, 'attributes': {'foo': 'bar', 'name': 'test_callback'}}; E Common items:; E {'billing_project': 'test',; E 'closed': True,; E 'complete': True,; E 'id': 260,; E 'n_cancelled': 0,; E 'n_completed': 2,; E 'n_failed': 0,; E 'n_jobs': 2,; E 'n_succeeded': 2,; E 'state': 'success',; E 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg',; E 'user': 'test'}; E Differing items:; E {'attributes': {'client_job': '8051758-182', 'foo': 'bar', 'name': 'test_callback'}} != {'attributes': {'foo': 'bar', 'name': 'test_callback'}}; E Full diff:; E {; E - 'attributes': {'foo': 'bar',; E + 'attributes': {'client_job': '8051758-182',; E + 'foo': 'bar',; E 'name': 'test_callback'},; E 'billing_project': 'test',; E 'closed': True,; E 'complete': True,; E 'id': 260,; E 'n_cancelled': 0,; E 'n_completed': 2,; E 'n_failed': 0,; E 'n_jobs': 2,; E 'n_succeeded': 2,; E 'state': 'success',; E 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg',; E 'user': 'test',; E }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:2111,assert,assert,2111,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,9,"['assert', 'test']","['assert', 'test']"
Testability,"er, let me add a test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7082#issuecomment-532727074:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/7082#issuecomment-532727074,1,['test'],['test']
Testability,"error in test java:; ```; [[TestNGClassFinder]] Unable to read methods on class is.hail.relocated.com.indeed.util.varexport.servlet.ViewExportedVariablesServlet - unable to resolve class reference freemarker/template/ObjectWrapper; Exception in thread ""main"" java.lang.NoClassDefFoundError: freemarker/template/ObjectWrapper; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8576#issuecomment-615459260:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/8576#issuecomment-615459260,2,"['Test', 'test']","['TestNGClassFinder', 'test']"
Testability,"ers/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2606,test,test,2606,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"es bug, the #13721 bug became super common! I saw it 50 times in my first run:; ```; Caused by: is.hail.relocated.com.google.cloud.storage.StorageException: Missing Range header in response; 	|> PUT https://storage.googleapis.com/upload/storage/v1/b/aou_tmp/o?name=tmp/hail/icullIwHC8dQXtq8JU2uDW/aggregate_intermediates/-ntpjdAQ9sKaR8lK26cV0p5790a4d87-9035-41ae-afc6-326f710d9a89&uploadType=resumable&upload_id=ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	| ; ```. Luckily, that one is actually trivial to fix, we just need to [update to the latest GCS client; library](https://github.com/hail-is/hail/issues/13721#issuecomment-1737924344). # Test Code. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://danking/tmp/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://danking/foo.vcf.bgz'. vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t, output = out, tabix = True). ```. # Failing Batch (in my namespace). https://internal.hail.is/dking/batch/batches/8?q=state%3Dbad. # Footnotes. [1] I was using `de009fdb89`, which I pushed as [`fixes-sans-gcs-read-fix`](https://github.com/hail-is/hail/compare/main...danking:hail:fixes-sans-gcs-read-fix).; [2] `64c4c6e248`, part of [`unblock-wenhan`](https://github.com/hail-is/hail/compare/main...danking:hail:unblock-wenhan), specifically [this commit](https://github.com/hail-is/hail/comm",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184:1490,Test,Test,1490,https://hail.is,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184,1,['Test'],['Test']
Testability,"es into a per-process directory and using in-memory (std::mutex) synchronization.; But y'know, given that we have to write the DLL's out, it just seemed natural to let them persist; (and until debugging it on MacOS, I thought I could manage it with nothing but atomic file-create; and atomic-rename, but that didn't quite pan out). As for writing LLVM IR, it can definitely be done, because that's what Endeca/Oracle did. But there; was such a huge learning curve that only 3 people ever did it successfully (I wasn't one of them),; and debugging seemed very unpleasant and slow. [It was also a masterful achievement in ; job-security-through-obscurity, because no-one in management was going to mess with the; two people who wrote it - until the whole project got canned]. ... and in the time I was there, the Endeca/Oracle stuff wasn't distributed, which could be another; place where the generate-LLVM-IR needs some kind of extra glue for distributing compiled code,; whereas the conventional DLL's are trivial to ship around. Not claiming that part of it is difficult,; just that it didn't happen at Oracle until long after I left. In contrast, at PhysicsSpeed it was fairly smooth to implement nice abstractions (dense-join-table,; hash-join-table, tuple-with-order) as template classes which could be tested and debugged; in a standalone environment, and then have simpler codegen using those abstractions. At least,; that's a good way to get a lot of functionality with modest effort - and it doesn't preclude migrating; towards a more complex codegen later. It's nice to be able to have templates as low-runtime-cost; abstractions, but you don't have to use them if you don't want to. In short, most of the usual arguments about the benefits of HLL's apply. Plus the larger pool of; potential hires w/ C++ experience compared to the pool of people w/ lower-level/LLVM/IR/compiler-; internals expertise, and the possibility of very occasionally picking up useful fragments of open-source code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385:3073,test,tested,3073,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385,1,['test'],['tested']
Testability,ession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:12445,test,test-,12445,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,est | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2347,test,test,2347,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2485,test,test,2485,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2519,test,test,2519,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11269,test,test,11269,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11317,test,test,11317,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9134,test,test,9134,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2340,test,test,2340,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2478,test,test,2478,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2512,test,test,2512,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1862,test,test,1862,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10270,test,test,10270,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10318,test,test,10318,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10365,test,test,10365,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10413,test,test,10413,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10460,test,test,10460,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11262,test,test,11262,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,est | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 202,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11310,test,test,11310,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"est-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""network_count"": 0,; ""subscribers_count"": 0; }; ```. [2]:; ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0;",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:7000,test,test,7000,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,"estion: is the state stored in MySQL the same as the k8s notebook pod state? If so, should we just query k8s rather than duplicating the notebook state in MySQL?. Not entirely the same I think, but I also prefer tools that are well-designed for the purpose, and have limited k8 / etcd experience / survivor bias. One interesting fact (spoke with Dan), is that we don't have direct access to etcd, so are limited to k8 client operations. * We had talked about, in batch context, of having our own master state, against which k8 is reconciled, to protect against k8 operational errors. Obviously that means our record of state is a point of failure, but db failure modes and uptime solutions are well defined across cloud/db provider vendors (we can minimize lock-in as well). The idea seemed to be that we don't particularly care how k8 works, or how much state it persists; the contract is with our users, and we should satisfy . * K8 does not store all state indefinitely. It's more like a rotating log: https://stackoverflow.com/questions/40636021/how-to-list-kubernetes-recently-deleted-pods . For users, and for investors, we want to have a permanent record of all user interactions. * Some kinds of data may be awkward to store and query within pod labels. For instance, how much user state do we want to store in labels? How do we store operation graphs / history?; ; * aggregation operations across users or resources; * a given, or all users' history: so the user can manage, see, so we can track (some, gross) metrics for billing; * various sorting operations (by date/time, etc); * full log of state for a given set of related resources (I think k8 stores last 5 events, this is probably configurable) ; ability to retry in a user-controlled way, even if pod is deleted from etcd. * Operations across N k8 resources seems like it may take up to N queries (i.e k8s.list_namespaced_service, k8s.list_namespaced_pod). There may be more efficient ways of handling this (there either is, or shou",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-459054290:1015,log,log,1015,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-459054290,1,['log'],['log']
Testability,estproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8655,test,test,8655,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,ethods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1921,test,test,1921,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"euse and cacheing/locking. a) Even with whole-stage codegen, there's a possibility that during development a user; will be tweaking a query in ways which don't change all the stages. And in that case the re-use; would give hits on some stages. The plan is not really to aim at structuring things to get a; high level of re-use, but just to opportunistically exploit re-use which happens to occur -; e.g. if the early stages of an analysis involve reading an existing file and filtering in various; ways, then that may not be changed at all by changes to what happen in the real analysis; after the filtering. And this is also influenced by the medium-term goal of having a Hail service; which (amongst other things) can do simple analyses on small data in under ten seconds - in; that realm compilation time could become a critical factor as a serial bottleneck. [The place where persistent cacheing of compiled files helps most of all is in testing,; where you really are running the exact same queries over and over again on the same; small datasets, and in many cases after making small changes which only affect a few; of the queries]. b) We may actually have some version of the locking problem even if we don't try to reuse the files -; since we have several workers on a node, and possibly a master as well, all needing to put code; into a file (or wait for someone else to populate the file) so that they can load it. Depending on ; precisely how Spark manages things (which I wouldn't want to depend on too much anyway). In fact it's essential that all the workers share the same DLL file, because otherwise they'd be; trying to load multiple DLL's defining the same symbols. That aspect of it could be handled by; putting the files into a per-process directory and using in-memory (std::mutex) synchronization.; But y'know, given that we have to write the DLL's out, it just seemed natural to let them persist; (and until debugging it on MacOS, I thought I could manage it with nothing but a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385:969,test,testing,969,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385,1,['test'],['testing']
Testability,"evel).; 17/08/09 19:16:02 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 19:16:02 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 19:16:02 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); /hail/test/BRCA1.raw_indel.vcf MapPartitionsRDD[1] at textFile at NativeMethodAccessorImpl.java:-2; >>> ; ```. ----------------; When I executed the command in local mode , there seems to hava some result:; ```; [root@tele-1 ~]# python; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> from hail import *; >>> hc = HailContext();; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/opt/NfsDir/UserDir/wanghn/BRCA1.raw_indel.vcf').write('/opt/NfsDir/UserDir/wanghn/BRCA1.raw_indel_1.vds'); hail: info: No multiallelics detected.; hail: info: Coerced unsorted da",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506:1492,test,test,1492,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321228506,1,['test'],['test']
Testability,"evel).; 17/08/15 08:58:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/15 08:58:31 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/15 08:58:31 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/15 08:58:31 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> sc.textFile(""/hail/test/BRCA1.raw_indel.vcf"").count(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 1008, in count; return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum(); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 999, in sum; return self.mapPartitions(lambda x: [sum(x)]).fold(0, operator.add); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 873, in fold; vals = self.mapPartitions(func).collect(); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 776, in collect; port = self.ctx._jvm.PythonRDD.collectAndServe(self._jrdd.rdd()); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/lib/py4j-0.10.3-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/sql/utils.py"", line 63, in deco; return f(*a, **kw); File ""/opt/So",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367:1410,test,test,1410,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367,1,['test'],['test']
Testability,ewAssertionFailedException(Assertions.scala:528); 	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277:1333,test,testng,1333,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277,1,['test'],['testng']
Testability,"example of a finished, failing job:; <img width=""1039"" alt=""Screen Shot 2020-11-30 at 6 28 10 PM"" src=""https://user-images.githubusercontent.com/106194/100677810-ce2adc80-3339-11eb-80c5-1e5c46673d8a.png"">; and after the logs you see the spec:. <img width=""1039"" alt=""Screen Shot 2020-11-30 at 6 28 23 PM"" src=""https://user-images.githubusercontent.com/106194/100677831-db47cb80-3339-11eb-98fd-b023691ce0ad.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9758#issuecomment-736117147:220,log,logs,220,https://hail.is,https://github.com/hail-is/hail/pull/9758#issuecomment-736117147,1,['log'],['logs']
Testability,"example python code. ```; import hail; hc = hail.HailContext(); vds = (hc.import_vcf('src/test/resources/sample.vcf'); .split_multi(); .variant_qc(); .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""20"", 13753124, ""A"", ""C"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno = rnorm(1,1) * sa.culprit'); .annotate_samples_expr('sa.cov1 = rnorm(0,1)'); .annotate_samples_expr('sa.cov2 = rnorm(0,1)'); .linreg('sa.pheno', ['sa.cov1', 'sa.cov2'])). vds_kinship = vds.filter_variants_expr('va.qc.AF > .05'). vds = vds.lmmreg(vds_kinship, 'sa.pheno', ['sa.cov1', 'sa.cov2']). vds.export_variants('lmmreg.tsv', 'Variant = v, lin_beta = va.linreg.beta, lmm_beta = va.lmmreg.beta, lin_pval = va.linreg.pval, lmm_pval = va.lmmreg.pval, va.lmmreg.*'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1064#issuecomment-273010901:90,test,test,90,https://hail.is,https://github.com/hail-is/hail/pull/1064#issuecomment-273010901,1,['test'],['test']
Testability,"f callback(request):; body = await request.json(); callback_bodies.append(body); callback_event.set(); return web.Response(); ; app.add_routes([web.post('/test', callback)]); runner = web.AppRunner(app); await runner.setup(); site = web.TCPSite(runner, '0.0.0.0', 5000); await site.start(); ; try:; token = secrets.token_urlsafe(32); b = create_batch(; client, callback=url_for('/test'), attributes={'foo': 'bar', 'name': 'test_callback'}, token=token; ); head = b.create_job('alpine:3.8', command=['echo', 'head']); b.create_job('alpine:3.8', command=['echo', 'tail'], parents=[head]); b.submit(); await asyncio.wait_for(callback_event.wait(), 5 * 60); callback_body = callback_bodies[0]; ; # verify required fields present; callback_body.pop('cost'); callback_body.pop('msec_mcpu'); callback_body.pop('time_created'); callback_body.pop('time_closed'); callback_body.pop('time_completed'); callback_body.pop('duration'); callback_body.pop('duration_ms'); callback_body.pop('cost_breakdown'); > assert callback_body == {; 'id': b.id,; 'user': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182', 'foo': 'bar', 'name': 'test_callback'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}; E assert {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 2, 'n_completed': 2, 'n_succeeded': 2, 'n_failed': 0, 'n_cancelled': 0, 'attributes': {'name': 'test_callback', 'foo': 'bar', 'client_job': '8051758-182'}} == {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:1619,assert,assert,1619,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,1,['assert'],['assert']
Testability,failing shuffler tests with UnsatisfiedLinkError.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8576#issuecomment-615890461:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/8576#issuecomment-615890461,1,['test'],['tests']
Testability,failing some assertions,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8068#issuecomment-584231530:13,assert,assertions,13,https://hail.is,https://github.com/hail-is/hail/pull/8068#issuecomment-584231530,1,['assert'],['assertions']
Testability,failing tests (outer join) due to requiredeness,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8436#issuecomment-607598560:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/8436#issuecomment-607598560,1,['test'],['tests']
Testability,failing tests are from a problem in the parent PR that I fixed,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8574#issuecomment-615356793:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/8574#issuecomment-615356793,1,['test'],['tests']
Testability,failing tests will still prevent merging,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4123#issuecomment-412981330:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/4123#issuecomment-412981330,1,['test'],['tests']
Testability,"file:///home/release/.m2/repository -Dhadoop.version=3.3.3-amzn-3.1 -Dyarn.version=3.3.3-amzn-3.1 -Dhive.version=2.3.9-amzn-3 -Dparquet.version=1.12.2-amzn-3 -Dprotobuf.version=2.5.0 -Dfasterxml.jackson.version=2.13.4 -Dfasterxml.jackson.databind.version=2.13.4 -Dcommons.httpclient.version=4.5.9 -Dcommons.httpcore.version=4.4.11 -Daws.java.sdk.version=1.12.446 -Daws.kinesis.client.version=1.12.0 -Daws.kinesis.producer.version=0.12.9 -Dscala.version=2.12.15 -DrecompileMode=all -Dmaven.deploy.plugin.version=2.8.2 -Dmaven.scaladoc.skip -Pyarn -Phadoop-3.2 -Phive -Phive-thriftserver -Psparkr -Pspark-ganglia-lgpl -Pnetlib-lgpl -Pscala-2.12 -Pkubernetes -Pvolcano -Pkinesis-asl -DskipTests; ```; I still did not found why scala is downgraded to 2.12.13. <details><summary>Hail logs</summary>; <p>; # Build Hail #; WARNING: Package(s) not found: hail; REVISION is set to ""13536b531342a263b24a7165bfeec7bd02723e4b"" which is different from old value """"; printf ""13536b531342a263b24a7165bfeec7bd02723e4b"" > env/REVISION; echo 13536b531342a263b24a7165bfeec7bd02723e4b > python/hail/hail_revision; SHORT_REVISION is set to ""13536b531342"" which is different from old value """"; printf ""13536b531342"" > env/SHORT_REVISION; HAIL_PIP_VERSION is set to ""0.2.124"" which is different from old value """"; printf ""0.2.124"" > env/HAIL_PIP_VERSION; echo 0.2.124-13536b531342 > python/hail/hail_version; echo 0.2.124 > python/hail/hail_pip_version; cp -f python/hail/hail_version python/hailtop/hail_version; printf 'hail_version=""0.2.124-13536b531342"";' > python/hail/docs/_static/hail_version.js; printf 'hail_pip_version=""0.2.124""' >> python/hail/docs/_static/hail_version.js; cloud_base is set to ""gs://hail-30-day/hailctl/dataproc/hadoop-dev/0.2.124-13536b531342"" which is different from old value """"; printf ""gs://hail-30-day/hailctl/dataproc/hadoop-dev/0.2.124-13536b531342"" > env/cloud_base; wheel_cloud_path is set to ""gs://hail-30-day/hailctl/dataproc/hadoop-dev/0.2.124-13536b531342/hail-0.2.124-py3-none-any",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:1523,log,logs,1523,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['logs']
Testability,fitUsingDelta's behavior needs to be tested as it relates to global annotations. No explicit tests for this that I saw,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-323375461:37,test,tested,37,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-323375461,2,['test'],"['tested', 'tests']"
Testability,fixed + added tests. ready for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7082#issuecomment-532783880:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7082#issuecomment-532783880,1,['test'],['tests']
Testability,"fixed the local backend test (had to do with the HailUserException not getting extracted properly in lowered execution, which I'm punting on right now). Docs build is now failing, which I think is a problem in main.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9549#issuecomment-703613115:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/9549#issuecomment-703613115,1,['test'],['test']
Testability,"fixed up the dev requirements, and updated the pre-commit hook, and in the process realized i had only run `ruff format` on files that are checked by `make check-all`, so also ran it at the root of the repo, as the hook will run there. EDIT: i misunderstood how the pre-commit hooks work, and apparently it only runs them on the files you have changed, but i think it's still worth it to format across the repo, not just in the places we check with `make check-all`; and also, i personally was a grump and never used the pre-commit hooks, but now that i've had to test them out for this, i have seen the light ⚡. also i personally would love if our quotes were consistent as well! i'll ask on zulip how ppl feel about that",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14132#issuecomment-1883771570:564,test,test,564,https://hail.is,https://github.com/hail-is/hail/pull/14132#issuecomment-1883771570,1,['test'],['test']
Testability,"fmtlib looks promising, but. a) I'm not keen to mix in non-standard third-party source code into our; codebase; unless it's a significant win over the functionality that is; available everywhere; and familiar to everyone. printf has been getting the job done for; decades. b) the speed test shows it still slower than printf (iirc 1.56s vs; 1.35s), just not a; *lot* slower (whereas C++ iostreams are very slow). On Fri, Aug 3, 2018 at 10:45 AM Patrick Schultz <notifications@github.com>; wrote:. > *@patrick-schultz* commented on this pull request.; > ------------------------------; >; > In src/main/c/NativeModule.cpp; > <https://github.com/hail-is/hail/pull/3973#discussion_r207566438>:; >; > > +#include <sys/stat.h>; > +#include <sys/time.h>; > +#include <unistd.h>; > +#include <atomic>; > +#include <memory>; > +#include <mutex>; > +#include <iostream>; > +#include <sstream>; > +#include <string>; > +#include <vector>; > +; > +#if 0; > +#define D(fmt, ...) { \; > + char buf[1024]; \; > + sprintf(buf, fmt, ##__VA_ARGS__); \; > + fprintf(stderr, ""DEBUG: %s,%d: %s"", __FILE__, __LINE__, buf); \; >; > @cseed <https://github.com/cseed> suggested using the fmt library (; > https://github.com/fmtlib/fmt), which I believe is being proposed for; > standardization. That is my preference also. It appears to be as safe as; > IOstreams and as fast as printf. It supports both Python style and C; > style formatting, e.g.; >; > fmt::print(""Hello, {}!"", ""world""); // uses Python-like format string syntaxfmt::printf(""Hello, %s!"", ""world""); // uses printf format string syntax; >; > Format strings are checked at compile time, as are argument types.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/3973#discussion_r207566438>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AJzExrljAAlcA6ksqZiNPyOw8wgC0hheks5uNGH7gaJpZM4VbZpP>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410319504:286,test,test,286,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410319504,1,['test'],['test']
Testability,fold constanst's benchmark: https://gist.github.com/ammekk/02b187d6be0df0f43e5dc3200b87f247,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10601#issuecomment-887719167:17,benchmark,benchmark,17,https://hail.is,https://github.com/hail-is/hail/pull/10601#issuecomment-887719167,1,['benchmark'],['benchmark']
Testability,fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4104,Test,TestRunner,4104,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestRunner']
Testability,fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4297,Test,TestRunner,4297,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestRunner']
Testability,fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.c,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3845,test,testng,3845,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.c,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4038,test,testng,4038,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,fusermount needs root privileges which the container has. I tested this with dev deploy and made sure things were being unmounted properly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8971#issuecomment-644964603:60,test,tested,60,https://hail.is,https://github.com/hail-is/hail/pull/8971#issuecomment-644964603,1,['test'],['tested']
Testability,"fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; """,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5561,test,test,5561,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"g, or even the entire command, into a make variable then use the variable in the recipe. In this situation the newline quoting rules for makefiles will be used, and the backslash/newline will be removed. If we rewrite our example above using this method:; > ; > ```; > HELLO = 'hello \; > world'; > ; > all : ; @echo $(HELLO); > ```; > ; > we will get output like this:; > ; > ```; > hello world; > ```; >; > If you like, you can also use target-specific variables (see [Target-specific Variable Values](https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html)) to obtain a tighter correspondence between the variable and the recipe that uses it. It seems to me like there are not any great choices. Putting the JSON into a Make variable seems too magical and likely to confuse a newbie editing this file. Using escaped double quotes is less legible than literal JSON. Putting the whole JSON array on one line is quite long. I guess we can go with double quotes for now. I tested on Make 3.81 and Make 4.4.1. The first EDIT and the original comment follow for context. ---. EDIT: Nope, I still appear to be wrong. Hold on. ---. I have bash 3.2.57; ```; (base) dking@wm28c-761 /tmp % make print-shell; /bin/sh; (base) dking@wm28c-761 /tmp % /bin/sh --version; GNU bash, version 3.2.57(1)-release (arm64-apple-darwin22); Copyright (C) 2007 Free Software Foundation, Inc.; ```. Looks like this was an intentionally backwards incompatible change [in Make 4.0](https://git.savannah.gnu.org/cgit/make.git/tree/NEWS?h=4.0&id=52191d9d613819a77a321ad6c3ab16e1bc73c381#n18) which removed the POSIX-compatible behavior on which our Makefile relies:; ```; * WARNING: Backward-incompatibility!; If .POSIX is specified, then make adheres to the POSIX backslash/newline; handling requirements, which introduces the following changes to the; standard backslash/newline handling in non-recipe lines:; * Any trailing space before the backslash is preserved; * Each backslash/newline (plus subsequen",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1894411324:2129,test,tested,2129,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1894411324,1,['test'],['tested']
Testability,g.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4972,test,testng,4972,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,g.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChann,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4779,test,testng,4779,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,g.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.un,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4760,Test,TestNG,4760,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,g.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4567,Test,TestNG,4567,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,g.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2270,Test,TestNG,2270,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,g_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1314,test,test,1314,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/datasets/extract/extract_CADD.py:26: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (self.domain == 'gcr.io' or self.domain.endswith('docker.pkg.dev')); /Users/dking/projects/hail/hail/python/hailtop/aiocloud/aiogoogle/client/container_client.py:6: super().__init__(f'https://gcr.io/v2/{project}', **kwargs); /Us",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1270,assert,assert,1270,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['assert'],['assert']
Testability,geDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG.run(TestNG.java:1060); at org.testng.TestNG.privateMain(TestNG.java:1403); at ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1616,Test,TestInvoker,1616,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,ght exception in thread task-result-getter-1; java.lang.OutOfMemoryError: Java heap space; at java.util.Arrays.copyOf(Arrays.java:3332); at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124); at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448); at java.lang.StringBuffer.append(StringBuffer.java:270); at org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.format(PatternParser.java:419); at org.apache.log4j.PatternLayout.format(PatternLayout.java:506); at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310); at org.apache.log4j.WriterAppender.append(WriterAppender.java:162); at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251); at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1953); at org.apache.spark.scheduler.TaskResultGetter$$anon$3.run(TaskResultGetter.scala:124); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at ja,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:1320,log,log,1320,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['log'],['log']
Testability,gle.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	a,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:12850,test,test-,12850,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,gonna benchmark,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11811#issuecomment-1115058672:6,benchmark,benchmark,6,https://hail.is,https://github.com/hail-is/hail/pull/11811#issuecomment-1115058672,1,['benchmark'],['benchmark']
Testability,"good call on requesting the test, it was broken!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2662#issuecomment-355830837:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/2662#issuecomment-355830837,1,['test'],['test']
Testability,"google died:; ```; E Log:	{'main': ""ERROR: (gcloud.auth.activate-service-account) There was a problem refreshing your current auth tokens: {u'status': u'UNAVAILABLE', u'message': u'The service is currently unavailable.', u'code': 503}\nPlease run:\n\n $ gcloud auth login\n\nto obtain new credentials, or if you have already logged in with a\ndifferent account:\n\n $ gcloud config set account ACCOUNT\n\nto select an already authenticated account to use.\n""}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5934#issuecomment-486735019:21,Log,Log,21,https://hail.is,https://github.com/hail-is/hail/pull/5934#issuecomment-486735019,3,"['Log', 'log']","['Log', 'logged', 'login']"
Testability,got test failure: https://ci.hail.is/batches/13670/jobs/33/log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7092#issuecomment-533282019:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/7092#issuecomment-533282019,2,"['log', 'test']","['log', 'test']"
Testability,grr. I see this prevents me from logging in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7020#issuecomment-529151909:33,log,logging,33,https://hail.is,https://github.com/hail-is/hail/pull/7020#issuecomment-529151909,1,['log'],['logging']
Testability,gv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:41312,test,test-,41312,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,h of other ones from the toLine below. ```; org.apache.spark.SparkException: Task not serializable; at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.R,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1430,test,testng,1430,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"h the cons; ```; [root@tele-1 ~]# PYSPARK_PYTHON=""ipython"" pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; /usr/local/lib/python3.5/site-packages/IPython/core/history.py:228: UserWarning: IPython History requires SQLite, your history will not be saved; warn(""IPython History requires SQLite, your history will not be saved""); Python 3.5.2 (default, Jul 12 2017, 14:00:23) ; Type ""copyright"", ""credits"" or ""license"" for more information. IPython 5.1.0 -- An enhanced Interactive Python.; ? -> Introduction and overview of IPython's features.; %quickref -> Quick reference.; help -> Python's own help system.; object? -> Details about 'object', use 'object??' for extra details.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/10 08:41:32 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/10 08:41:32 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 3.5.2 (default, Jul 12 2017 14:00:23); SparkSession available ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160:1037,log,logging,1037,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160,1,['log'],['logging']
Testability,"h the recur and the break expressions) the type `Bottom`. `Bottom` is the empty type, so there can be no closed expressions of type `Bottom`. In the type checker, `Bottom` is only allowed to appear in tail positions, and for `If`, we keep the rule that both branches must have the same type, so either both branches are `Bottom` or neither are. This keeps the semantics simple: an if statement either makes a value or it jumps away, there's no confusing mix. One nice property of this setup is that if an expression has a non-bottom type, then it is guaranteed not to jump away from itself (it may jump internally), so it is safe to method-wrap. This also make codegen very simple, and @iitalics has already implemented it! See `JoinPoint` and `JoinPoint.CallCC`. In the IR, I don't think this requires much change. If we're already adding a continuation context (as mentioned above), then `TailLoop` just needs to bind both a recur and a break continuation, where recur takes the loop variable types, and break takes the loop result type. Then `Recur` can be replaced by a `Jump` node which calls (jumps to) a continuation in context. There's also a middle ground where we make break continuations explicit in the IR, but we want to keep the scheme-like interface in python. Then the pass @cseed described for inferring where the loop exits are would just go in python instead of the emitter. > Using the stream interface seems wrong to me also. When I mentioned this, I was thinking we could reuse the region management logic from the stream emitter for loops, but I've since changed my mind. I think loops will have hard region management no matter what. > What's the type of the stream the loop turns into? Since loops carry multiple values (by design), memory allocating these to create a tuple stream is going to be a performance non-starter. As a side note, @iitalics stream emitter can handle streams of multiple values fine. Effectively, you can make a `Stream[(Code[A], Code[B], Code[C])]`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407:3141,log,logic,3141,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407,1,['log'],['logic']
Testability,"h vectors and matrices with primary dimension the number of samples (as in QR), and because BLAS3 matrix multiplication is fast. I also checked that upping to 8 covariates didn't balance things out. It didn't. The fancy approach basically trades X.t * X and generic k-dim solve for a QR on X and triangular k-dim solve...better for larger k and smaller n. ```; Standard. 2 cov; Lin 7s; Score 54.5s; LRT 93s; Wald 90s. 2 cov, QR / TriSolve; Lin 7.42s; Score 53.6s, 53.1s; LRT 2m06s, 1m59s; Wald 1m53s, 1m54s. 8 cov; Lin 7.16s; Score 59.1s; LRT 2m25s, 2m20s, 2m26s; Wald 2m27s, 2m27s, 2m25s. 8 cov, QR / TriSolve; Lin 7.76s; Score 52.7s; LRT 3m30s; Wald 3m26s; ```. For Firth, since I'm using QR anyway, may as will use TriSolve (though the timing is not particularly effected even with 8 covariates):. ```; 2 cov:; Firth 5m 10s, 4m55s, 5m7s. 8 cov:; Firth 10m37s, 10m50s, 10m28s; ```. For reference, here's the core logic of the QR approach. This corresponds to another version of LogisticRegressionFit where I tried to reduce unnecessary computation, see below. ```; while (!converged && !exploded && iter <= maxIter) {; try {; val mu = sigmoid(X * b); val sqrtW = sqrt(mu :* (1d - mu)); val QR = qr.reduced(X(::, *) :* sqrtW). deltaB = TriSolve(QR.r, QR.q.t * ((y - mu) :/ sqrtW)). if (max(abs(deltaB)) < tol) {; converged = true; if (computeScoreR) {; optScore = Some(X.t * (y - mu)); optR = Some(QR.r); }; if (computeSe) {; val invR = inv(QR.r) // could speed up inverting as upper triangular, or avoid altogether as 1 / se(-1) = fit.fisherSqrt(-1, -1); optSe = Some(norm(invR(*, ::))); }; if (computeLogLkld); optLogLkhd = Some(sum(breeze.numerics.log((y :* mu) + ((1d - y) :* (1d - mu))))); } else {; iter += 1; b += deltaB; }; }; ```. ```; case class LogisticRegressionFit(; b: DenseVector[Double],; optScore: Option[DenseVector[Double]],; optR: Option[DenseMatrix[Double]],; optSe: Option[DenseVector[Double]],; optLogLkhd: Option[Double],; nIter: Int,; converged: Boolean,; exploded: Boolean);",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833:1200,Log,LogisticRegressionFit,1200,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833,1,['Log'],['LogisticRegressionFit']
Testability,hHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHa,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1290,test,test,1290,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,hadoop_exists[remote]>; <Function test_hadoop_exists[local]>; <Function test_hadoop_is_file[remote]>; <Function test_hadoop_is_file[local]>; <Function test_hadoop_stat[remote]>; <Function test_hadoop_stat[local]>; <Function test_subdirs[remote]>; <Function test_subdirs[local]>; <Function test_rmtree_empty_is_ok[remote]>; <Function test_rmtree_empty_is_ok[local]>; <Function test_rmtree_empty_subdir_is_ok[remote]>; <Function test_rmtree_empty_subdir_is_ok[local]>; <Function test_remove_and_rmtree[remote]>; <Function test_remove_and_rmtree[local]>; <Module test_utils.py>; <UnitTestCase Tests>; <TestCaseFunction test_escape_id>; <TestCaseFunction test_escape_string>; <TestCaseFunction test_expr_exception_results_in_hail_user_error>; <TestCaseFunction test_frozen_dict>; <TestCaseFunction test_hadoop_copy_log>; <TestCaseFunction test_hadoop_exists>; <TestCaseFunction test_hadoop_glob_heterogenous_structure>; <TestCaseFunction test_hadoop_is_dir>; <TestCaseFunction test_hadoop_is_file>; <TestCaseFunction test_hadoop_ls>; <TestCaseFunction test_hadoop_ls_file_that_does_not_exist>; <TestCaseFunction test_hadoop_ls_glob_1>; <TestCaseFunction test_hadoop_ls_glob_2>; <TestCaseFunction test_hadoop_ls_glob_no_slash_in_group>; <TestCaseFunction test_hadoop_ls_simple>; <TestCaseFunction test_hadoop_methods>; <TestCaseFunction test_hadoop_mkdir_p>; <TestCaseFunction test_hadoop_mkdir_p_2>; <TestCaseFunction test_hadoop_no_glob_in_bucket>; <TestCaseFunction test_hadoop_stat>; <TestCaseFunction test_interval_ops>; <TestCaseFunction test_json_encoder>; <TestCaseFunction test_linked_list>; <TestCaseFunction test_range_matrix_table_n_lt_partitions>; <TestCaseFunction test_struct_ops>; <Package vds>; <Module test_combiner.py>; <Function test_combiner_works>; <Module test_vds.py>; <Function test_multi_write>. =============================================================== 85/8218 tests collected (8133 deselected) in 5.04s ===============================================================; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:4277,Test,Tests,4277,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,27,"['Test', 'test']","['TestCaseFunction', 'Tests', 'tests']"
Testability,hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:13932,test,test-,13932,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:13527,test,test-,13527,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:317); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:326); 		at java.io.FilterOutputStream.close(FilterOutputStream.java:159); 		... 27 more; 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 0; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushB,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:7335,test,test-ezlis,7335,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['test-ezlis']
Testability,"hail/python/setup.py: python_requires="">=3.6"",; hail/python/hail/backend/spark_backend.py: raise EnvironmentError('Hail with spark {} requires Python 3.6 or 3.7, found {}.{}'.format(; hail/python/requirements.txt:orjson==3.6.4; hail/python/hailtop/batch/batch.py: 3.6, 3.7, or 3.8.; hail/python/hailtop/batch/docker.py: f'Python versions other than 3.6, 3.7, or 3.8 (you are using {major_version}.{minor_version}) are not supported'); hail/python/hailtop/batch/batch_pool_executor.py: include Python 3.6 or later and must have the ``dill`` Python package; hail/python/hailtop/batch/batch_pool_executor.py: f'You must specify an image if you are using a Python version other than 3.6, 3.7, or 3.8 (you are using {version})'); hail/python/hailtop/batch/docs/cookbook/random_forest.rst:choose a suitable image for you if your Python version is 3.6, 3.7, or 3.8.; hail/python/hailtop/batch/docs/docker_resources.rst:exists to base your image on. An image that has Python preinstalled is `python:3.6-slim-stretch` and; hail/python/hailtop/batch/docs/tutorial.rst:f-strings were added to Python in version 3.6 and are denoted by the 'f' character; hail/python/hailtop/batch/backend.py: f""You must specify 'image' for Python jobs if you are using a Python version other than 3.6, 3.7, or 3.8 (you are using {version})""); docker/python-dill/push.sh:for version in 3.6 3.6-slim 3.7 3.7-slim 3.8 3.8-slim; docker/third-party/images.txt:python:3.6; docker/third-party/images.txt:python:3.6-slim; benchmark/python/setup.py: python_requires="">=3.6"",. Found a few more invocations of 3.6. I'm not sure when you want to update the `python_requires` and makes sense to leave the 3.6 docker images around for a little while, but the other places in the batch documentation and warnings seem a good thing to update now too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11219#issuecomment-1011381290:1485,benchmark,benchmark,1485,https://hail.is,https://github.com/hail-is/hail/pull/11219#issuecomment-1011381290,1,['benchmark'],['benchmark']
Testability,"hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello""],""grace"":""48h"",""recursive"":true}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:2940,test,tests,2940,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,4,['test'],"['test-benchmark', 'test-ci', 'test-monitoring', 'tests']"
Testability,"hat seems like a good spot to me from a developer ergonomics perspective:; - O(trusts) modifications necessary to update/revoke the cert; - O(1) configuration to load a trust list; - no pod-start-time configuration; - the trust list is on the container's file system, so its easy to inspect. Small point: I don't pin the incoming certs yet due to the mTLS challenges. ### create on each deploy. Only creating certs if they don't exist is an easy change. Seems fine, though leaves unresolved how to rotate the certs. I guess I'm inclined to always recreate because it makes rotation the common case, forcing us to make it work well. I think the only way to do a no-downtime rotation is:; 1. create fresh certs; 2. create the trust lists including a principal's fresh cert and previous generation cert; 3. update all the secrets; 4. somehow ensure everyone has the latest secrets?; 5. notify all servers to refresh their certificates (nginx: send SIGHUP, aiohttp: we have to write something). We could stick a generation uuid in the secrets and keep refreshing services until the certificate uuid they read is the one our deploy expects. ### mTLS. This PR will land. Things will break because the unmanaged services (router-resolver, gateway, internal-gateway) do not speak TLS. I'll manually deploy them. The default namespace and new PR namespaces should now function properly. Developers will need to redeploy from master. With this in place, I will make another PR with two main changes:; - enable client verification, and; - modify create_certs.py to load the unmanaged certificates from `default` rather than the local namespace.; That PR should pass all the tests (batch pods will speak TLS to internal-gateway; internal-gateway will speak TLS to PR batch using a client certificate PR batch trusts; etc.). Merge that PR. Everything will function correctly; however, the unmanaged services will not verify client certificates. I manually deploy and now everyone is verifying client certificates.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8561#issuecomment-617428243:3840,test,tests,3840,https://hail.is,https://github.com/hail-is/hail/pull/8561#issuecomment-617428243,1,['test'],['tests']
Testability,"he tests with two samples covariates (note these are all mapVariants so just stacking tranformations):; ```; (hc.read('/Users/jbloom/data/profile225.prelogreg.vds'); 	.linreg('sa.pheno', ['sa.cov1', 'sa.cov2']); 	.logreg('wald', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.wald'); 	.logreg('lrt', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.lrt'); 	.logreg('score', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.score'); 	.logreg('firth', 'sa.pheno', ['sa.cov1', 'sa.cov2'], root='va.firth'); 	.export_variants('/Users/jbloom/data/logreg.tsv', 'Variant = v, va.qc.*, linBeta = va.linreg.beta, waldBeta = va.wald.wald.beta, lrtBeta = va.lrt.lrt.beta, firthBeta = va.firth.firth.beta, linPval = va.linreg.pval, waldPval = va.wald.wald.pval, lrtPval = va.lrt.lrt.pval, firthPval = va.firth.firth.pval, scorePval = va.score.score.pval, waldIter = va.wald.fit.nIter, lrtIter = va.lrt.fit.nIter, firthIter = va.firth.fit.nIter')); ```. Beta for all variants, note that Firth resolves quasi-separation issues and regresses toward the zero:; ![logregbetalrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867286/9e219bc2-f153-11e6-896a-c49e55593312.png). Pvals for all variants, note that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5-a04af188c276.png). Pvals for variants with at least 20 hets, basically the same:; ![logregpval20hets](https://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-94",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:1525,log,logregbetalrtfirth,1525,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logregbetalrtfirth']
Testability,heh. It timed out on main (3149211fb79b):. ```; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; to_matrix_table_row_major 716.3% 251.300 1800.000; ----------------------; Harmonic mean: 716.3%; Geometric mean: 716.3%; Arithmetic mean: 716.3%; Median: 716.3%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9328#issuecomment-679451744:48,Benchmark,Benchmark,48,https://hail.is,https://github.com/hail-is/hail/pull/9328#issuecomment-679451744,1,['Benchmark'],['Benchmark']
Testability,"here is skipping going on. In both cases, we are decoding the entry array when the corrupted block is discovered. In the first case, we are skipping an int (must be RGQ based on the etype and type). In the second case, we are decoding a string (must be FT). Since the error happens on a seemingly arbitrary partition, it seems likely this is related to our transient error handling. Both runs use a version of Hail after we fixed the broken transient error handling in GoogleStorageFS (run 1 used fcaafc533e, run 2 used 0.2.126 / ee77707f4f). ---. #### Path forward. If it *is* a transient error, we need to fix how we handle transient errors. Maybe our position handling logic is wrong? If it is *not* a transient error, maybe our skipping logic is wrong? FT appears immediately after RGQ and we know RGQ is getting skipped. Our implementation of `seek` for the compressed block buffers looks sketchy to me, but we're using PartitionNativeReader which does no seeking. Action items:; 1. Log every transient error.; 2. Log the file name and the offset on failure. ---. #### Debugging information. EType:; ```; +EBaseStruct{; `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:+EArray[; EBaseStruct{; GT:EInt32,; GQ:EInt32,; RGQ:EInt32,; FT:EBinary,; AD:EArray[EInt32]}]}; ```; (zipped) Type:; ```; Struct{; locus:Locus(GRCh38),; alleles:Array[String],; filters:Set[String],; info:Struct{; AC:Array[Int32]},; `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[; Struct{; GT:Call,; GQ:Int32,; FT:String,; AD:Array[Int32]}]}; ```; Source buffer spec:; ```; {""name"":""LEB128BufferSpec"",""child"":; {""name"":""BlockingBufferSpec"",""blockSize"":65536,""child"":; {""name"":""ZstdBlockBufferSpec"",""blockSize"":65536,""child"":; {""name"":""StreamBlockBufferSpec""}}}}; ```; Error for run 1.; ```; Caused by: com.github.luben.zstd.ZstdException: Corrupted block detected; 	at com.github.luben.zstd.ZstdDecompressCtx.decompressByteArray(ZstdDecompressCtx.java:157) ~[zstd-jni-1.5.2-1.jar:1.5.2-1]; 	at is.hail.io.ZstdInputBlo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13979#issuecomment-1834181623:1393,Log,Log,1393,https://hail.is,https://github.com/hail-is/hail/issues/13979#issuecomment-1834181623,1,['Log'],['Log']
Testability,"here we are, 1x faster 🤷 . ```; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; join_p100_p100 138.1% 3.702 5.112 100.0% 1 1; shuffle_key_rows_by_4096_byte_rows 136.3% 10.150 13.833 100.0% 2 2; variant_and_sample_qc_nested_with_filters_4 134.8% 42.745 57.628 100.0% 1 1; union_p1000_p1000 131.4% 8.160 10.721 100.0% 1 1; ndarray_matmul_float64_benchmark 129.5% 2.984 3.864 100.0% 1 1; read_force_count_p10 127.4% 1.803 2.297 100.0% 1 1; hwe_normalized_pca_blanczos_small_data_0_iterations 127.1% 31.997 40.660 100.0% 10 10; union_p10_p100 124.1% 14.544 18.043 100.0% 1 1; table_aggregate_array_sum 121.2% 12.197 14.779 100.0% 1 1; shuffle_key_rows_by_mt 119.8% 33.339 39.955 100.0% 3 3; split_multi_hts 118.5% 32.447 38.452 100.0% 2 2; test_map_filter_region_memory 118.2% 2.176 2.571 100.0% 382 382; table_range_array_range_force_count 117.7% 6.628 7.800 100.0% 382 382; mt_group_by_memory_usage 117.4% 25.597 30.041 100.0% 136 136; table_aggregate_downsample_worst_case 116.9% 21.323 24.917 100.0% 1 1; join_p10_p100 116.5% 14.040 16.350 100.0% 1 1; read_force_count_p100 116.2% 2.336 2.714 100.0% 1 1; large_range_matrix_table_sum 115.5% 206.853 239.010 100.0% 17 17; read_force_count_p1000 115.3% 3.998 4.610 100.0% 1 1; union_p100_p100 115.2% 5.197 5.985 100.0% 1 1; table_annotate_many_nested_dependence 115.1% 7.191 8.273 100.0% 1 1; table_key_by_shuffle 114.9% 5.910 6.788 100.0% 2 2; variant_and_sample_qc_nested_with_filters_2 114.9% 25.267 29.021 100.0% 1 1; table_expr_take 114.3% 1.451 1.658 100.0% 1 1; join_p100_p10 114.2% 13.166 15.030 100.0% 1 1; import_vcf_count_rows 112.3% 7.532 8.460 100.0% 1 1; table_import_ints_impute 112.3% 85.837 96.406 100.0% 1 1; matrix_table_take_row 112.3% 2.319 2.603 100.0% 1 1; matrix_multi_write_nothing 112.1% 252.278 282.704 100.0% 1 1; read_with_index_p1000 111.6% 6.959 7.766 100.0% 1 1; variant_qc 111.2% 13.552 15.076 100.0% 1 1; make_ndarray_bench_2 110.8",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1570627563:32,Benchmark,Benchmark,32,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1570627563,1,['Benchmark'],['Benchmark']
Testability,"high level comment -- this is an infrastructure change that will hurt performance. We need to know by how much, and probably add benchmarks that target the specific cases where the added work will hurt most. If things get noticeably slower, we're probably going to need to rework streams so that per-row stream code doesn't incur memory management overhead.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9106#issuecomment-661867074:129,benchmark,benchmarks,129,https://hail.is,https://github.com/hail-is/hail/pull/9106#issuecomment-661867074,1,['benchmark'],['benchmarks']
Testability,"hm. python test is failing because max can't handle float32's, but the code i based it off of (`SumAggregator`) only handled int64 and float64. . should i insert cases to handle every kind of number?. also should i assign someone in particular to this PR or choose randomly from the scorecard?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6742#issuecomment-515218879:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/6742#issuecomment-515218879,1,['test'],['test']
Testability,hmm I'm not sure how we're testing combOps right now. @jigold do you know?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3798#issuecomment-398886335:27,test,testing,27,https://hail.is,https://github.com/hail-is/hail/pull/3798#issuecomment-398886335,1,['test'],['testing']
Testability,"hmm seems like something is wrong, maybe flaky test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5679#issuecomment-475787151:47,test,test,47,https://hail.is,https://github.com/hail-is/hail/pull/5679#issuecomment-475787151,1,['test'],['test']
Testability,"hmm, actually I'm going to dismiss your approval until I benchmark this. . No worries about being confused, I was the source (I opened 2 prs...)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8067#issuecomment-585444507:57,benchmark,benchmark,57,https://hail.is,https://github.com/hail-is/hail/pull/8067#issuecomment-585444507,1,['benchmark'],['benchmark']
Testability,"hmm. I think this query locks more aggressively, not sure why. I guess the aggregation must be somewhat time consuming. In main, that aggregation happens without locking the billing projects (ergo preventing changes to limits). . I get these spammed in the front end logs:; ```; File ""/usr/local/lib/python3.7/dist-packages/batch/front_end/front_end.py"", line 2237, in post_edit_billing_limits; await _handle_api_error(_edit_billing_limit, db, billing_project, limit); File ""/usr/local/lib/python3.7/dist-packages/batch/front_end/front_end.py"", line 212, in _handle_api_error; await f(*args, **kwargs); File ""/usr/local/lib/python3.7/dist-packages/batch/front_end/front_end.py"", line 2227, in _edit_billing_limit; await insert() # pylint: disable=no-value-for-parameter; File ""/usr/local/lib/python3.7/dist-packages/gear/database.py"", line 34, in wrapper; return await f(*args, **kwargs); File ""/usr/local/lib/python3.7/dist-packages/gear/database.py"", line 64, in wrapper; return await fun(tx, *args, **kwargs); File ""/usr/local/lib/python3.7/dist-packages/batch/front_end/front_end.py"", line 2212, in insert; (billing_project,),; File ""/usr/local/lib/python3.7/dist-packages/gear/database.py"", line 209, in execute_and_fetchone; await cursor.execute(sql, args); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/cursors.py"", line 239, in execute; await self._query(query); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/cursors.py"", line 457, in _query; await conn.query(q); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/connection.py"", line 469, in query; await self._read_query_result(unbuffered=unbuffered); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/connection.py"", line 672, in _read_query_result; await result.read(); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/connection.py"", line 1153, in read; first_packet = await self.connection._read_packet(); File ""/usr/local/lib/python3.7/dist-packages/aiomysql/connection.py"", line 641, in _read_packet; packe",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12652#issuecomment-1416434586:267,log,logs,267,https://hail.is,https://github.com/hail-is/hail/pull/12652#issuecomment-1416434586,1,['log'],['logs']
Testability,hod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldValues$extension(SerializationDebugger,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2320,test,testng,2320,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"hodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:237); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). ```. I instead tried to run the same code in two separate jupyter notebooks, with the same code inside but different ways to initialize the hailcontext, one like this (works and exports):. ```; from hail import *; hc = HailContext(); ```; With startup messages looking like this:. ```; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 18/01/08 13:51:03 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 18/01/08 13:51:03 WARN SparkConf: In Spark 1.0 and later spark.local.dir will be overridden by the value set by the cluster manager (via SPARK_LOCAL_DIRS in mesos/standalone and LOCAL_DIRS in YARN).; 18/01/08 13:51:03 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783:5796,log,log,5796,https://hail.is,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783,1,['log'],['log']
Testability,hodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldValues$extension(SerializationDebugger.scala:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2327,Test,TestNG,2327,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,hold up -- we need to benchmark,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6291#issuecomment-500138300:22,benchmark,benchmark,22,https://hail.is,https://github.com/hail-is/hail/pull/6291#issuecomment-500138300,1,['benchmark'],['benchmark']
Testability,"home/edmund/.local/src/hail/.venv/lib/python3.10/site-packages/pyspark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.execute(BlockMatrixIR.scala:269); E 	at is.hail.expr.ir.BlockMatrixMap2.execute(BlockMatrixIR.scala:393); E 	at is.hail.expr.ir.Interpret$.run(Interpret.scala:875); E 	at is.hail.expr.ir.Interpret$.alreadyLowered(Interpret.scala:59); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.evaluate$1(LowerOrInterpretNonCompilable.scala:20); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:67); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:53); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.apply(LowerOrInterpretNonCompilable.scala:72); E 	at is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass$.transform(LoweringPass.scala:69); E 	at is.hail.expr.ir.lowering.LoweringPass.$anonfun$apply$3(LoweringPass.scala:16); E 	at i",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:2725,Assert,AssertionError,2725,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN Utils: Your hostname, <my computer name> resolves to a loopback address: <my local IP>; using <my IP> instead (on interface enp3s0); 18/01/08 13:51:03 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address; ```. And the other initialize hail like this (crashes with the stack trace/error in the issue):; ```; from pyspark import *; from hail import *; conf = SparkConf(); conf.set('spark.sql.files.maxPartitionBytes','60000000000') ; conf.set('spark.sql.files.openCostInBytes','60000000000') ; conf.set('spark.driver.cores','1') #test with 1 core; sc = SparkContext(conf=conf); hc = HailContext(sc); ```. With startup messages looking like this:; ```; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 18/01/08 15:16:23 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 18/01/08 15:16:23 WARN SparkConf: In Spark 1.0 and later spark.local.dir will be overridden by the value set by the cluster manager (via SPARK_LOCAL_DIRS in mesos/standalone and LOCAL_DIRS in YARN).; 18/01/08 15:16:23 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 15:16:23 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 15:16:23 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783:7628,log,log,7628,https://hail.is,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783,1,['log'],['log']
Testability,how did this pass the tests on the CI server?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3877#issuecomment-401560878:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/3877#issuecomment-401560878,1,['test'],['tests']
Testability,"how should i er, make a nondeterministic test? just run it a bunch of times?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6849#issuecomment-520013973:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/issues/6849#issuecomment-520013973,1,['test'],['test']
Testability,"http performance depends on how the library was installed.; It has C optimizations with Pure Python fallbacks. If Cython/GCC was not available on target machine at installation time the slow pure python code is executed.; In fact, aiohttp in optimized mode runs the same C written HTTP parser as Sanic. Sanic used to run multiple workers by default, aiohttp uses only one. On a real server it doesn't matter because usually the server is explicitly configured to run multiple web workers by gunicorn and (or) nginx config. Now Sanic switched to the single worker by default IIRC.; Anyway, looking on outdated performance comparisons in different blog posts doesn't show any useful numbers unless you re-run and check the numbers on your environment against latest (or used by you) versions. aiohttp uses standard `json` module by default, Sanic `ujson`. `ujson` is faster but it is not 100% compatible with the standard and can fall into memory dumps IIRC. You can configure aiohttp to run `ujson`, `orjson` or `rapidjson` if needed -- all speedups have own drawbacks. Very famous [Tech Empower Benchmark](https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=fortune) demonstrates that sanic is faster than aiohttp on JSON serialization but cannot pass other tests. Please decide is it important or not. The last cherry: Sanic has super fast URL router because it caches matching results. The feature is extremely useful for getting awesome numbers with `wrk` tool but in real life URL paths for server usually not constant. URLs like `/users/{userid}` don't fit in cache well :). P.S.; aiohttp has a place for optimization, we are working on it. There is no single bottleneck, the optimization requires careful improvements in many places, with keeping backward compatibility policy. I don't know the best criteria for choosing. My advice is: look on user API and choose what you like. P.P.S.; `Starlette` has own benefits and compromises as well, but the post is pretty huge already.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461299040:1880,Benchmark,Benchmark,1880,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461299040,4,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmarks', 'test', 'tests']"
Testability,http://discuss.hail.is/t/fixed-overflow-bug-in-0-2-chi-squared-test-contingency-table-test-present-since-june-25-2018/619,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4192#issuecomment-415167977:63,test,test-contingency-table-test-present-since-june-,63,https://hail.is,https://github.com/hail-is/hail/issues/4192#issuecomment-415167977,1,['test'],['test-contingency-table-test-present-since-june-']
Testability,http://discuss.hail.is/t/log-of-breaking-changes-in-0-2-beta/454/8,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3575#issuecomment-388949541:25,log,log-of-breaking-changes-in-,25,https://hail.is,https://github.com/hail-is/hail/pull/3575#issuecomment-388949541,1,['log'],['log-of-breaking-changes-in-']
Testability,https://batch.hail.is/batches/8062723/jobs/204; ```; starting test is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations...; Exception:; org.scalatest.exceptions.TestFailedException: files not deleted:; gs://hail-test-ezlis/fs-suite/delete-many-files/376b0a1e-ee61-43ab-abb4-d67a0978ee46/791.suffix; 	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); 	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277,13,"['Assert', 'Test', 'test']","['Assertions', 'AssertionsHelper', 'TestFailedException', 'TestNGSuite', 'test', 'test-ezlis', 'testng']"
Testability,https://ci.hail.is/batches/1420/jobs/32/log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6664#issuecomment-512333398:40,log,log,40,https://hail.is,https://github.com/hail-is/hail/pull/6664#issuecomment-512333398,1,['log'],['log']
Testability,https://ci.hail.is/batches/3823676/jobs/139 looks like an unrelated timeout? Can I trigger a rerun of the `ci-test` somehow?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12027#issuecomment-1186643880:110,test,test,110,https://hail.is,https://github.com/hail-is/hail/pull/12027#issuecomment-1186643880,1,['test'],['test']
Testability,https://console.cloud.google.com/logs/query;cursorTimestamp=2023-11-14T14:49:25.236364754Z;duration=PT10M;query=%2528%0Aresource.type%3D%22k8s_container%22%0Aresource.labels.namespace_name%3D%22jigold%22%0Aresource.labels.container_name%3D%22auth%22%0A%2529%0A%20OR%20%0A%2528%0Aresource.type%3D%22k8s_container%22%0Aresource.labels.namespace_name%3D%22jigold%22%0Aresource.labels.container_name%3D%22auth-driver%22%0A%2529%0Aseverity%3DERROR%20OR%20severity%3DWARNING%0Atimestamp%3D%222023-11-14T14:49:25.236364754Z%22%0AinsertId%3D%22j5g4mt0gzbg0jise%22;summaryFields=:false:32:beginning?project=hail-vdc,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13256#issuecomment-1810373258:33,log,logs,33,https://hail.is,https://github.com/hail-is/hail/issues/13256#issuecomment-1810373258,1,['log'],['logs']
Testability,https://github.com/hail-is/hail/blob/main/batch/test/test_batch.py#L925-L954,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14328#issuecomment-1960239814:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/14328#issuecomment-1960239814,1,['test'],['test']
Testability,"https://github.com/hail-is/hail/files/12231481/data2.tar.gz. Simplest repro I have. One row in chr8... two rows in ch5... ; ```; In [2]: import hail as hl; ...: y = hl.read_table(""chr8_51749536.ht""); ...: x = hl.read_table('ch5_and_ch8.ht'); ...: print(y.annotate(gene=x[y.locus].gene).collect()); ```. TableIR:; ```; (TableCollect; (TableOrderBy (Alocus Aalleles); (TableMapRows; (TableLeftJoinRightDistinct __uid_3; (TableRead; Table{global:Struct{},key:[locus,alleles],row:Struct{locus:Locus(GRCh38),alleles:Array[String]}}; False (TableNativeReader chr8_51749536.ht )); (TableRead; Table{global:Struct{},key:[locus],row:Struct{locus:Locus(GRCh38),gene:String}}; False (TableNativeReader ch5_and_ch8.ht ))); (InsertFields; (SelectFields (locus alleles) (Ref row)); None; (gene; (GetField gene (GetField __uid_3 (Ref row)))))))); ```; [hail-20230801-1154-0.2.120-be655bbda3cb.log](https://github.com/hail-is/hail/files/12231617/hail-20230801-1154-0.2.120-be655bbda3cb.log)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13339#issuecomment-1660613347:878,log,log,878,https://hail.is,https://github.com/hail-is/hail/issues/13339#issuecomment-1660613347,2,['log'],['log']
Testability,"https://internal.hail.is/monitoring/kibana/app/infra#/logs?_g=()&flyoutOptions=(flyoutId:Cs8K1GsBylIYXqvkSfbm,flyoutVisibility:hidden,surroundingLogsId:!n)&logFilter=(expression:'kubernetes.labels.app%20:ci',kind:kuery)&logPosition=(position:(tiebreaker:23440993,time:1562665935824),streamLive:!f)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6587#issuecomment-509634461:54,log,logs,54,https://hail.is,https://github.com/hail-is/hail/issues/6587#issuecomment-509634461,3,['log'],"['logFilter', 'logPosition', 'logs']"
Testability,huh. I just tested again and it worked!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7087#issuecomment-532874446:12,test,tested,12,https://hail.is,https://github.com/hail-is/hail/pull/7087#issuecomment-532874446,1,['test'],['tested']
Testability,i | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1724,test,test,1724,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"i-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5152,test,test,5152,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"ial import chdtri; from numpy import median; from math import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tint,; 'ADC8_aa': hl.tint,; 'ADC8_ea': hl.tint,; 'ADC8_hisp': hl.tint,; 'ADC9_aa': hl.tint,; 'ADC9_ea': hl.tint,; 'ADNI_ea': hl.tint,; 'BIOCARD_ea': hl.tint,; 'CHAP_aa': hl",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:1173,log,log,1173,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,2,['log'],"['log', 'logs']"
Testability,ice_backend.py>; <Function test_tiny_driver_has_tiny_memory>; <Function test_big_driver_has_big_memory>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package ut,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2274,Test,Tests,2274,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,2,['Test'],"['TestCaseFunction', 'Tests']"
Testability,id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8520,test,test,8520,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"if there's an effect, I expect we'll see it when we do whole-stage codegen, which we can't benchmark now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9089#issuecomment-667081619:91,benchmark,benchmark,91,https://hail.is,https://github.com/hail-is/hail/pull/9089#issuecomment-667081619,1,['benchmark'],['benchmark']
Testability,"if you cache the dataset (or set the global seed and generate it, both for the actual and the expected), do you get exactly the same result in your new test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5250#issuecomment-461544717:152,test,test,152,https://hail.is,https://github.com/hail-is/hail/pull/5250#issuecomment-461544717,1,['test'],['test']
Testability,"iki](https://confluence.jetbrains.com/pages/viewpage.action?pageId=74845225#HowTo...-SetUpTeamCitybehindaProxyServer):. ``` apache; <IfModule mod_ssl.c>; <VirtualHost *:443>; # The ServerName directive sets the request scheme, hostname and port that; # the server uses to identify itself. This is used when creating; # redirection URLs. In the context of virtual hosts, the ServerName; # specifies what hostname must appear in the request's Host: header to; # match this virtual host. For the default virtual host (this file) this; # value is not decisive as it is used as a last resort host regardless.; # However, you must set it for any further virtual host explicitly.; ServerName hail.is; ServerAlias www.hail.is. ServerAdmin webmaster@localhost; DocumentRoot /var/www/html. RedirectMatch 404 /\.git. # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,; # error, crit, alert, emerg.; # It is also possible to configure the loglevel for particular; # modules, e.g.; #LogLevel info ssl:warn. ErrorLog ${APACHE_LOG_DIR}/error.log; CustomLog ${APACHE_LOG_DIR}/access.log combined. # For most configuration files from conf-available/, which are; # enabled or disabled at a global level, it is possible to; # include a line for only one particular virtual host. For example the; # following line enables the CGI configuration for this host only; # after it has been globally disabled with ""a2disconf"".; #Include conf-available/serve-cgi-bin.conf; SSLCertificateFile /etc/letsencrypt/live/hail.is/fullchain.pem; SSLCertificateKeyFile /etc/letsencrypt/live/hail.is/privkey.pem; Include /etc/letsencrypt/options-ssl-apache.conf; </VirtualHost>. <VirtualHost *:443>; ServerName ci.hail.is; ServerAdmin webmaster@localhost. LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so; LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so; LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so; LoadModule proxy_wstunnel_module /usr/lib/apache2/modules/mo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/674#issuecomment-243899170:1428,Log,LogLevel,1428,https://hail.is,https://github.com/hail-is/hail/issues/674#issuecomment-243899170,1,['Log'],['LogLevel']
Testability,il.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.metho,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1234,test,testGenotype,1234,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['testGenotype']
Testability,iledException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at or,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1465,test,testng,1465,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,imdpp-2.1.tar.gz; g++ -o build/ibs.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/ibs.d -MT build/ibs.o -c ibs.cpp; g++ -o build/Decoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Decoder.d -MT build/Decoder.o -c Decoder.cpp; g++ -o build/Encoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Encoder.d -MT build/Encoder.o -c Encoder.cpp; g++ -o build/Logging.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Logging.d -MT build/Logging.o -c Logging.cpp; g++ -o build/NativeCodeSuite.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o -c NativeCodeSuite.cp; p; g++ -o build/NativeLongFunc.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o -c NativeLongFunc.cpp; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -DALL_HEADER_CKSUM=2474410629UL -c NativeModule.cpp -o build/NativeModule.o; g++ -o build/NativePtr.o -ma,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:11719,Log,Logging,11719,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,"import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tint,; 'ADC8_aa': hl.tint,; 'ADC8_ea': hl.tint,; 'ADC8_hisp': hl.tint,; 'ADC9_aa': hl.tint,; 'ADC9_ea': hl.tint,; 'ADNI_ea': hl.tint,; 'BIOCARD_ea': hl.tint,; 'CHAP_aa': hl.tint,; 'CHAP2_ea': hl.tint,; 'CHOP_aa': hl.tint,; 'EAS",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:1215,log,log,1215,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,"in 7.2 seconds; > ...; > The 20 seconds is: clone from github.com, git-merge; > The 7.2 seconds is: download from GCS, untar; > Just ran the test in the cloud using the google cloud sdk image started by k run, 3.7 seconds; > The download is super fast, like a second; > the untar is about the same in both contexts, 1.2 seconds; > But the download drops from 4.7 to ~1.5. Chris pointed out I should skip going to disk and pipe into tar, I have not timed that yet. I was seeing fetch being more like 8 minutes to my repository. My repository is significantly larger than Alex's. I could delete some old branches to address this. ---. > for inputs/outputs, I wonder if we should have a flag that indicates it is an archive and do the archive/extract automatically (like you've done here but more generally), and stop using cp -r. I almost went down this route. It would save a couple lines of tar/untar in runImage steps. I felt the savings wasn't worth the effort of implementing it. In the buildImage case (what this PR addressed), I think it's worth it to keep images small. > for downstream steps that only need a small part of the repo, is it better to copy out different pieces (archived or no) rather than copy the whole thing and extra the parts you need?. I haven't investigated this. I agree, there exists an inflection point where the size of data overcomes GCS latency and GCS-throughput / tar-decompress is the bottleneck. There's something to be said for tar'ing everything except for `.git`, but I didn't carefully check which steps need it and which steps do not. ---. In conclusion, I'd say this PR is necessary for #7534, and #7534 is a big quality of life improvement for those of us with large repos running tests on images that are deep on the critical path (the shuffler test is behind 3 images and build hail, which also clones the repo, so for my repo I wait at least 2 minutes before I even have a chance to get feedback; with this PR and #7534 I should wait like 45 seconds?).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927:2086,test,tests,2086,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927,2,['test'],"['test', 'tests']"
Testability,"in eval; return eval_timed(expression)[0]; <decorator-gen-690>:2: in eval_timed; ???; hail/typecheck/check.py:577: in wrapper; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:161: in eval_timed; return Env.backend().execute(MakeTuple([ir]), timed=True)[0]; hail/backend/py4j_backend.py:82: in execute; raise e.maybe_user_error(ir) from None; hail/backend/py4j_backend.py:76: in execute; result_tuple = self._jbackend.executeEncode(jir, stream_codec, timed); ../../.venv/lib/python3.10/site-packages/py4j/java_gateway.py:1321: in __call__; return_value = get_return_value(; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . args = ('xro549', <py4j.clientserver.JavaClient object at 0x7fd0d58f6fb0>, 'o1', 'executeEncode'); kwargs = {}; pyspark = <module 'pyspark' from '/home/edmund/.local/src/hail/.venv/lib/python3.10/site-packages/pyspark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:1853,Assert,AssertionError,1853,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,4,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"in other news, our tests have gotten slower again? I thought they were at about 15m...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6194#issuecomment-496482191:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/6194#issuecomment-496482191,1,['test'],['tests']
Testability,"ing with the new cleanup policy deletion settings. Let's reopen if this occurs again. Posting the job configurations here before I delete the jobs. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:1098,test,tests,1098,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['test'],['tests']
Testability,"ing_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2403,test,test,2403,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,iniconda3/pkgs/nbclassic-0.5.6-pyhb4ecaf3_1/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/google-fluentd/embedded/lib/ruby/gems/2.7.0/gems/fluent-plugin-kubernetes_metadata_filter-2.5.2/test/cassettes/kubernetes_docker_metadata_dotted_labels.yml; /opt/google-fluentd/embedded/lib/ruby/gems/2.7.0/gems/fluent-plugin-kubernetes_metadata_filter-2.5.2/test/cassettes/kubernetes_docker_metadata_annotations.yml; /usr/share/man/man1/gcloud_artifacts_docker_images_scan.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_images_list-vulnerabilities.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_describe.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_scan.1.gz; /usr/share/man/man1/gcloud_alpha_auth_configure-docker.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_list.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_images_delete.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_delete.1.gz; /usr/share/man/man1/gcloud_alpha_artifacts_docker_images.1.gz; /usr/share/man/man1/gcloud_beta_auth_configure-docker.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_tags_list.1.gz; /usr/share/man/man1/gc,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:2111,test,test,2111,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['test']
Testability,"institute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best of 3: 1m48.5s; - map-any, best of 3: 1m43.1s. read, filtervariants --keep -c 'va.info.MQ>20'",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2299,test,test,2299,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"interesting, no tests fail as is",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580537133:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580537133,1,['test'],['tests']
Testability,introduced dummy failure to test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4448#issuecomment-424758306:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/4448#issuecomment-424758306,1,['test'],['test']
Testability,io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3915,test,testng,3915,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4108,test,testng,4108,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,"ion"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-te",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3153,test,test,3153,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,ionHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4847,Test,TestNG,4847,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,ionHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.googl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4654,Test,TestNG,4654,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,"irectory '/home/edmund/.local/src/hail/hail'; # # If hailtop.aiotools.copy gives you trouble:; # gcloud storage cp -r src/test/resources/\* gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/; # gcloud storage cp -r python/hail/docs/data/\* gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/; python3 -m hailtop.aiotools.copy -vvv 'null' '[\; {""from"":""src/test/resources"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/test/resources/""},\; {""from"":""python/hail/docs/data"",""to"":""gs://hail-test-ezlis/edmund/hail-test-resources/doctest/data/""}\; ]' --timeout 600; Traceback (most recent call last):; File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/runpy.py"", line 197, in _run_module_as_main; return _run_code(code, main_globals, None,; File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/runpy.py"", line 87, in _run_code; exec(code, run_globals); File ""/home/edmund/.local/src/hail/hail/python/hailtop/aiotools/copy.py"", line 211, in <module>; asyncio.run(main()); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/asyncio/runners.py"", line 44, in run; return loop.run_until_complete(main); File ""uvloop/loop.pyx"", line 1517, in uvloop.loop.Loop.run_until_complete; File ""/home/edmund/.local/src/hail/hail/python/hailtop/aiotools/copy.py"", line 182, in main; files = json.loads(args.files); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/__init__.py"", line 346, in loads; return _default_decoder.decode(s); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/decoder.py"", line 337, in decode; obj, end = self.raw_decode(s, idx=_w(s, 0).end()); File ""/home/edmund/.pyenv/versions/3.9.17/lib/python3.9/json/decoder.py"", line 355, in raw_decode; raise JSONDecodeError(""Expecting value"", s, err.value) from None; json.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1); make: *** [Makefile:355: upload-remote-test-resources] Error 1; make: Leaving directory '/home/edmund/.local/src/hail/hail'; ```; What am I missing?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1887744163:2035,test,test-resources,2035,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1887744163,1,['test'],['test-resources']
Testability,"is the same as using Python to generate the correct string to output. I'm not sure that I like this better. One of the advantages of writing commands as templates is they are reusable. In the latter case, the strings are reusable if they are written as `.format()` templates instead of `f-strings`. So maybe it's approximately the same, but there's an extra step to define the inputs to `format`. I tried hacking the Python AST to not have to refer to the object, but I think it's going to be difficult to get the AST parsing exactly right and not have too many implicit rules within our language. I also considered writing a DSL, but found that it's hard to specify the part with the `shapeit_output` in a DSL. ```python3; from pyapi import Pipeline, resource_group; p = Pipeline(). input_bfile = p.new_resource_group(bed=""gs://jigold/input_root.bed"",; bim=""gs://jigold/input_root.bim"",; fam=""gs://jigold/input_root.fam""). def bfile(root):; return resource_group(root, lambda x: {""bed"": x + "".bed"", ""bim"": x + "".bim"", ""fam"": x + "".fam""}). subset = (p.new_task(); .label('subset')); subset = subset; .command(f'plink --bfile {input_bfile} --make-bed {bfile(subset.tmp1)}'); .command(""awk '{print $1, $2}'"" +; subset.tmp1.fam +; "" | sort | uniq -c | awk '{ if ($1 != 1) print $2, $3 }' > "" +; subset.tmp2); .command(f""plink --bfile {input_bfile} --remove {subset.tmp2} --make-bed {bfile(subset.ofile)}"")). def shapeit_output(root):; return resource_group(root, lambda x: {""haps"": x + "".haps"", ""log"": x + "".log""}). for contig in [str(x) for x in range(1, 4)]:; shapeit = (p.new_task(); 		.label('shapeit')); shapeit = (shapeit; 		.command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit_output(shapeit.ofile)}')). merger = (p.new_task(); .label('merge')); merger = (merger; .command('cat {files} >> {ofile}'.format(files="" "".join([task.ofile.haps for task in p.select_tasks(""shapeit"")]), ofile=merger.ofile)). p.write_output(merger.ofile, ""gs://jigold/final_output.txt""); p.run(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-451295662:1846,log,log,1846,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-451295662,2,['log'],['log']
Testability,is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG.run(TestNG.java:1060); at org.testng.TestNG.privateMain(TestNG.java:1403); at org.testng.TestNG.main(TestNG.java:1367); ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1671,Test,TestMethodWorker,1671,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,35,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testng']"
Testability,it was failing on an assertion of num_partitions and i think a table with 0 rows has 0 partitions,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4216#issuecomment-416346870:21,assert,assertion,21,https://hail.is,https://github.com/hail-is/hail/issues/4216#issuecomment-416346870,1,['assert'],['assertion']
Testability,it's actually tested by the same `assertEvalsTo`. nice.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5113#issuecomment-453836059:14,test,tested,14,https://hail.is,https://github.com/hail-is/hail/pull/5113#issuecomment-453836059,2,"['assert', 'test']","['assertEvalsTo', 'tested']"
Testability,it's not tested,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3310#issuecomment-379887987:9,test,tested,9,https://hail.is,https://github.com/hail-is/hail/pull/3310#issuecomment-379887987,1,['test'],['tested']
Testability,"ithub.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4765,test,test,4765,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,itute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PA,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2519,test,test,2519,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,"iveWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_369,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_376,GetField(Ref(__iruid_376,struct{filePath: str, partitionCounts: int64}),filePath))),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/rows,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBuff",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:4985,test,test,4985,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,1,['test'],['test']
Testability,"iveWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_465,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_472,GetField(Ref(__iruid_472,struct{filePath: str, partitionCounts: int64}),filePath))),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/rows,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBuff",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:4705,test,test,4705,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['test'],['test']
Testability,java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.types.physical.PCanonicalBaseStruct.constructAtAddress(PCanonicalBaseStruct.scala:213),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8099#issuecomment-586546086:10,Assert,AssertionError,10,https://hail.is,https://github.com/hail-is/hail/pull/8099#issuecomment-586546086,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,jre/include -I/etc/alternatives/jre/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Decoder.cpp -MG -M -MF build/Decoder.d -MT build/Decoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ApproximateQuantiles_test.cpp -MG -M -MF build/ApproximateQuantiles_test.d -MT build/ApproximateQuantiles_te; st.o; make[1]: Leaving directory `/mnt/tmp/hail/hail/src/main/c'; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -o build/NativeBoot.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeBoot.d -MT build/NativeBoot.o -c NativeBoot.cpp; g++ -fvisibility=default -rdynamic -shared -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alte,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:9494,test,tests,9494,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['tests']
Testability,"k-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 999, in sum; return self.mapPartitions(lambda x: [sum(x)]).fold(0, operator.add); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 873, in fold; vals = self.mapPartitions(func).collect(); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/rdd.py"", line 776, in collect; port = self.ctx._jvm.PythonRDD.collectAndServe(self._jrdd.rdd()); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/lib/py4j-0.10.3-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/pyspark/sql/utils.py"", line 63, in deco; return f(*a, **kw); File ""/opt/Software/spark/spark-2.0.2-bin-hadoop2.6/python/lib/py4j-0.10.3-src.zip/py4j/protocol.py"", line 319, in get_return_value; py4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.; : org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/hail/test/BRCA1.raw_indel.vcf; 	at org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285); 	at org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228); 	at org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313); 	at org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:248); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:246); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:246); 	at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:248); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:246); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:246); 	at org.apache.spark.api.python.Pyth",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367:2735,test,test,2735,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322349367,1,['test'],['test']
Testability,"k-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; ```; ----------------------------; ```; >>> rdd = sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; ```; ----------------------------------; ```; >>> vds = hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.re",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071:1946,test,test,1946,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071,1,['test'],['test']
Testability,"k/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 4522, in fold; body = to_expr(f(accum_ref, elt_ref)); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 364, in f; ret = x(*args); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 221, in <lambda>; return collection._to_stream().fold(lambda x, y: f(x, y), zero); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 364, in f; ret = x(*args); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 68, in <lambda>; return hl.array(self).fold(lambda accum, elt: accum | f(elt), False); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 364, in f; ret = x(*args); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 364, in f; ret = x(*args); File ""test.py"", line 11, in <lambda>; (mt.locus.contig == hl.literal(x[0])) & \; File ""<decorator-gen-690>"", line 2, in literal; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/functions.py"", line 261, in literal; return literal(hl.eval(to_expr(x, dtype)), dtype); File ""<decorator-gen-668>"", line 2, in eval; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/expression_utils.py"", line 223, in eval; return eval_timed(expression)[0]; File ""<decorator-gen-666>"", line 2, in eval_timed; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/ex",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982:7236,test,test,7236,https://hail.is,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982,1,['test'],['test']
Testability,"kUI available at http://dk-m.c.broad-ctsa.internal:4041; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.16-277ccc7aec45; LOGGING: writing to /tmp/66c1d088108948b2b76bb607f61d7b3f/hail-20190703-2330-0.2.16-277ccc7aec45.log; yo dawg. [Stage 0:> (0 + 1) / 1]OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f2e73b00000, 1035468800, 0) failed; error='Cannot allocate memory' (errno=12); #; # There is insufficient memory for the Java Runtime Environment to continue.; # Native memory allocation (mmap) failed to map 1035468800 bytes for committing reserved memory.; # An error report file with more information is saved as:; # /tmp/66c1d088108948b2b76bb607f61d7b3f/hs_err_pid10896.log; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [66c1d088108948b2b76bb607f61d7b3f] failed with error:; Google Cloud Dataproc Agent reports job failure. If logs are available, they can be found in 'gs://dataproc-7f9e9d5e-03bd-4e95-bea1-fe0321239b35-us/google-cloud-dataproc-metainfo/f03fbc39-c07f-4e3e-8f21-47ffa986058e/jobs/66c1d088108948b2b76bb607f61d7b3f/driveroutput'.; Traceback (most recent call last):; File ""/usr/local/bin/hailctl"", line 10, in <module>; sys.exit(main()); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/__main__.py"", line 91, in main; cli.main(args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/cli.py"", line 99, in main; jmp[args.module].main(args, pass_through_args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/submit.py"", line 72, in main; check_call(cmd); File ""/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py"", line 347, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'dataproc', 'jobs', 'submit', 'pyspark', 'foo.py', '--cluster=dk', '--files=', '--py-files=/var/folders/cq/p_l4jm3x72j7wkxqxswccs180000gq/T/pyscripts_yg_wzlu0.zip', '--properties=']' ret",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815:1466,log,logs,1466,https://hail.is,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815,1,['log'],['logs']
Testability,"keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3329,test,test,3329,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"l quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unannotated.vcf) snpEffFile=(RodBinding name=snpEffFile source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snpeff.vcf) dbsnp=(RodBinding name= source=UNBOUND) comp=[] resource=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub annotation=[SnpEff] excludeAnnotation=[] group=[] expression=[] useAllAnnotations=false list=false alwaysAppendDbsnpId=false MendelViolationGenotypeQualityThreshold=0.0 requireStrictAlleleMatch=false filter_mismatching_base_and_quals=false""; ##VariantFiltration=""analysis_type=VariantFiltration input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:18596,stub,stubs,18596,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"l script ran into this too many files open issue running pc_relate. ```; pc_relate_pop2.py; import pandas as pd; import numpy as np; from scipy.special import chdtri; from numpy import median; from math import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tint,; 'ADC8_aa': hl.ti",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:1023,log,log,1023,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,l.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldVal,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2294,Test,TestNG,2294,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,"l/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pk",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:1726,test,test-benchmark,1726,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['test'],['test-benchmark']
Testability,"l/components/pre-uninstall/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/configure_docker.sh; /run/docker.sock; /tmp/dataproc/uninstall/docker-ce; /tmp/dataproc/components/uninstall/docker-ce.running; /tmp/dataproc/components/uninstall/docker-ce.done; /tmp/dataproc/components/pre-uninstall/docker-ce.running; /tmp/dataproc/components/pre-uninstall/docker-ce.done; /etc/apt/preferences.d/docker-ce.pref; /etc/apt/preferences.d/docker-ce-cli.pref; /etc/apt/sources.list.d/docker.list; /var/lib/apt/lists/download.docker.com_linux_debian_dists_buster_InRelease; /var/lib/apt/lists/download.docker.com_linux_debian_dists_buster_stable_binary-amd64_Packages; ```. </details>. There is a `/run/docker.sock` but notice it is not `/var/run/...`. However, if I install Docker by hand into this worker of a *non-Hail* Dataproc cluster, it just works. ---. I also tried to replicate the failure using an initialization action, but that also just worked.; ```; gcloud dataproc clusters create dk-test2 --initialization-actions=gs://hail-common/dk-test.sh; ```; `gs://hail-common/dk-test.sh`:; ```; apt-get update; apt-get -y install \; apt-transport-https \; ca-certificates \; curl \; gnupg2 \; software-properties-common \; tabix; curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -; sudo add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable""; apt-get update; apt-get install -y --allow-unauthenticated docker-ce; ```. ---. Our users often report this error. In my experience, it has happened in 2/8 test_dataproc steps that I have run myself or seen run. The more workers you have, the higher the chance at least one worker fails. As @bpblanken suggested [here](https://github.com/hail-is/hail/issues/12936#issuecomment-1589956412), restarting docker on a failed worker works. Docker starts fine. However, I missed a subtlety: we must restart *after* installation but *before* we try to pull our VEP docker image. I also add",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:13506,test,test,13506,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['test']
Testability,l> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1280,test,test,1280,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"l_api; _request_timeout=_request_timeout); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/api_client.py"", line 355, in request; headers=headers); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/rest.py"", line 231, in GET; query_params=query_params); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/rest.py"", line 222, in request; raise ApiException(http_resp=r); INFO | 2019-06-25 12:37:07,703 | batch.py | mark_complete:501 | no logs for batch-2554-job-4-main-cc8d4 due to previous error, rescheduling pod; INFO | 2019-06-25 12:37:07,730 | batch.py | _create_pod:205 | created pod name: batch-2554-job-4-main-vsk7h for job (2554, 4), task main; INFO | 2019-06-25 12:37:07,788 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; INFO | 2019-06-25 12:37:07,846 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; INFO | 2019-06-25 12:37:07,881 | web_log.py | log:233 | 10.32.14.87 [25/Jun/2019:12:37:07 +0000] ""GET /api/v1alpha/batches/2669/jobs/1 HTTP/1.1"" 200 208 ""-"" ""Python/3.6 aiohttp/3.5.4""; INFO | 2019-06-25 12:37:07,906 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; ```. The new pod:; ```; + kubectl get pod batch-2554-job-4-main-vsk7h -n batch-pods -o yaml; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-06-25T12:37:07Z""; generateName: batch-2554-job-4-main-; labels:; app: batch-job; hail.is/batch-instance: cd50b95a89914efb897965a5e982a29d; uuid: 0c8e6bfd45294d738957b42a3874e25e; name: batch-2554-job-4-main-vsk7h; namespace: batch-pods; resourceVersion: ""72793526""; selfLink: /api/v1/namespaces/batch-pods/pods/batch-2554-job-4-main-vsk7h; uid: f1d2b3ad-9745-11e9-8aa3-42010a80015f; spec:; containers:; - command:; - /bin/bash; - -c; - set -ex; mkdir -p /io/pipeline/pipeline-f559bb010746/__TASK__3/; __RESOURCE_FILE__747=/io/pipeline/pipeline-f559bb010746/inputs/5fa554a9;; __RES",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649:11510,log,log,11510,https://hail.is,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649,1,['log'],['log']
Testability,latest commit fixed tests -- forgot to remove review!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12753#issuecomment-1476371102:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/12753#issuecomment-1476371102,1,['test'],['tests']
Testability,latest test yields:; ```; write aggregate-throughput: 0.263 GiB/s; read aggregate-throughput: 0.083 GiB/s; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7593#issuecomment-558340651:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/7593#issuecomment-558340651,1,['test'],['test']
Testability,le(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImp,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1582,Test,TestMethodWorker,1582,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestMethodWorker']
Testability,le.d -MT build/NativeModule.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeLongFunc.cpp -MG -M -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeCodeSuite.cpp -MG -M -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeBoot.cpp -MG -M -MF build/NativeBoot.d -MT build/NativeBoot.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Logging.cpp -MG -M -MF build/Logging.d -MT build/Logging.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/al,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:8245,Log,Logging,8245,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,leStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13p,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4437,test,testng,4437,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,leStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlps,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4244,test,testng,4244,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,leValue.write(TableValue.scala:85); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:589); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:48); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:23); 	at is.hail.table.Table.write(Table.scala:607); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748)java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.annotations.RegionValueBuilder.addRegionValue(RegionValueBuilder.scala:417); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:345); 	at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:351); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:1024); 	at is.hail.expr.ir.MatrixAggregateColsByKey$$anonfun$33$$anonfun$apply$15.apply(MatrixIR.scala:980); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1087); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$22$$anon$3.next(OrderedRVD.scala:1081); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:4,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719:7971,Assert,AssertionError,7971,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,lect.InvocationTargetException: null; 	at sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source) ~[?:?]; 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_382]; 	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_382]; 	at is.hail.JVMEntryway$1.run(JVMEntryway.java:119) ~[jvm-entryway.jar:?]; 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_382]; 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_382]; 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_382]; 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_382]; 	at java.lang.Thread.run(Thread.java:750) ~[?:1.8.0_382]; Caused by: java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:208) ~[scala-library-2.12.15.jar:?]; 	at is.hail.io.StreamBlockInputBuffer.readBlock(InputBuffers.scala:552) ~[gs:__hail-query-ger0g_jars_be9d88a80695b04a2a9eb5826361e0897d94c042.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.BlockingInputBuffer.ensure(InputBuffers.scala:384) ~[gs:__hail-query-ger0g_jars_be9d88a80695b04a2a9eb5826361e0897d94c042.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.BlockingInputBuffer.readInt(InputBuffers.scala:409) ~[gs:__hail-query-ger0g_jars_be9d88a80695b04a2a9eb5826361e0897d94c042.jar.jar:0.0.1-SNAPSHOT]; 	at __C16collect_distributed_array_table_coerce_sortedness.__m20INPLACE_DECODE_r_int32_TO_r_int32(Unknown Source) ~[?:?]; 	at __C16collect_distributed_array_table_coerce_sortedness.__m19INPLACE_DECODE_r_struct_of_r_int32ANDr_int32ANDr_binaryANDr_int64ANDr_int64ANDr_boolEND_TO_r_struct_of_r_int32ANDr_int32ANDr_stringANDr_int64ANDr_int64ANDr_boolEND(Unknown Source) ~[?:?]; 	at __C16collect_distributed_array_table_coerce_s,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553:3364,Assert,AssertionError,3364,https://hail.is,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,ledException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRun,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1299,test,testng,1299,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,"les/795132/tests.zip). There are two differences that I can tell between the current build and the previous times I've tried. 1. I was using a local installation of spark when it worked, whereas now I am using the HPC's version of spark 2.1.0. However, it passed the tests just fine when I was using a local copy of spark 2.0.2 on both my laptop and HPC. . 2. Initially I followed the recommendations on the doc pages to setup the python path references to py4j under `alias hail=""PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar python""` This perhaps didn't export the PYTHONPATH to the py4j 10.4 .zip library if I hadn't run the `hail` command before I tried testing. My initial reaction was to just install a local copy of py4j via pip in my local copy of python since the tests were failing out with complaints about missing py4j module. That worked to get a little farther in the test script, to the point where it was failing out with the breeze function. But, since then I've re-jiggered the PYTHONPATH in the .bash_profile to always be defined to point to the SPARK_HOME version of py4j. This doesn't seem like it would be a problem as the py4j versions via pip and and SPARK_HOME are both 10.4, and moreover this setup worked with spark 2.0.2, but a possible confound. Perhaps change the getting started docs so the PYTHONPATH is always defined to point to the spark version of py4j?. Anyway, here are the current paths as you requested. . `echo $SPARK_HOME /share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7`. `echo $PYTHONPATH; /home/stockham/bin/python/Python-2.7.12:/share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7/python:/share/sw/free/spark.2.1.0/spark-2.1.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip:/scratch/PI/dpwall/computeEnvironments/hail/python`. `echo $HAIL_HOME; /scratch/PI/dpwall/computeEnvironments/hail`. Thank you, and if you have any ideas why the above tests ar",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721:1754,test,test,1754,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721,1,['test'],['test']
Testability,let's add back that assertion for now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4585#issuecomment-431703700:20,assert,assertion,20,https://hail.is,https://github.com/hail-is/hail/pull/4585#issuecomment-431703700,1,['assert'],['assertion']
Testability,letting ci tell me where I need to add the testing argument,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14207#issuecomment-1915348303:43,test,testing,43,https://hail.is,https://github.com/hail-is/hail/pull/14207#issuecomment-1915348303,1,['test'],['testing']
Testability,lgtm. test maybe?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7106#issuecomment-533892685:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/7106#issuecomment-533892685,1,['test'],['test']
Testability,"lient session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches running on the batch service managed by the Hail team. positional arguments:; {billing,list,get,canc",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1651,test,test-tiny-limit,1651,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test-tiny-limit']
Testability,"list,get} ... Manage billing on the service managed by the Hail team. positional arguments:; {list,get}; list List billing projects; get Get a particular billing project's info. optional arguments:; -h, --help show this help message and exit; (base) wmecc-475:hail jigold$ hailctl batch billing fake; usage: hailctl batch billing [-h] {list,get} ...; hailctl batch billing: error: invalid choice: 'fake' (choose from 'list', 'get'); Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1205,test,test,1205,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test']
Testability,ll -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeLongFunc.cpp -MG -M -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeCodeSuite.cpp -MG -M -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux NativeBoot.cpp -MG -M -MF build/NativeBoot.d -MT build/NativeBoot.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Logging.cpp -MG -M -MF build/Logging.d -MT build/Logging.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Decoder.cpp -MG -M -MF build/Decoder.d -MT build/Decoder.o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:8294,Log,Logging,8294,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,ll PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PA,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1277,test,test,1277,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"ll quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unfiltered.vcf) discordance=(RodBinding name= source=UNBOUND) concordance=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sample_name=[] sample_expressions=null sample_file=null exclude_sample_name=[] exclude_sample_file=[] select_expressions=[] excludeNonVariants=false excludeFiltered=false regenotype=false restrictAllelesTo=ALL keepOriginalAC=false mendelianViolation=false mendelianViolationQualThreshold=0.0 select_random_fraction=0.0 remove_fraction_genotypes=0.0 selectTypeToInclude=[INDEL] keepIDs=null fullyDecode=false forceGenotypesDecode=false justRead=false maxIndelSize=2147483647 ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES=false filter_mismatching_base_and_quals=false""; ##UnifiedGenotyper=""analysis_type=UnifiedGenotyper input_file=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.bam.list] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/scatter/temp_0001_of_1200/scattered.intervals] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:13026,stub,stubs,13026,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"ll,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:6142,test,test,6142,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,4,"['log', 'test']","['login', 'test', 'test-']"
Testability,"llaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3514,test,test,3514,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,lling_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8473,test,test,8473,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"local notebook works fine for me as well, looks to be just dataproc that's not working as expected. submitting that test command as a script finished in 36.2s. notebook is currently still hanging with this output (it's been 11 minutes):; ```; BokehJS 3.2.2 successfully loaded.; Initializing Hail with default parameters...; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; SPARKMONITOR_LISTENER: Started SparkListener for Jupyter Notebook; SPARKMONITOR_LISTENER: Port obtained from environment: 55989; SPARKMONITOR_LISTENER: Application Started: application_1695402030462_0001 ...Start Time: 1695402594764; Running on Apache Spark version 3.3.0; SparkUI available at http://notebook-slowdown-repro-m.c.broad-ctsa.internal:43055/; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.124-ee7fef6fc40d; LOGGING: writing to /home/hail/hail-20230922-1709-0.2.124-ee7fef6fc40d.log; [Stage 0:> (0 + 2) / 2]; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13690#issuecomment-1731791216:116,test,test,116,https://hail.is,https://github.com/hail-is/hail/issues/13690#issuecomment-1731791216,5,"['LOG', 'log', 'test']","['LOGGING', 'log', 'logging', 'test']"
Testability,"looked into the failing tests concerning randomness, and tracked down the source of the failures:. - `ApplySeeded` is an `AbstractApplyNode`. this means the interpreter will try to ""memoize"" the function definition so as to generate it only once even if you call it in multiple places in the IR. ; - memoization is based on referential equality, so they need to be the exact same IR object in order for reuse to trigger; - the ""seeded function"" implementations used by the test suite will create a new randomness state per generated function; - the Interpret pipeline used to rewrite each ApplySeeded node to be different objects, but with your changes they are the same, so their functions get memoized, thus sharing the same state. im not entirely sure which of these was doing the wrong thing, but IMO your changes in this PR should not have introduced any problems",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7567#issuecomment-556266727:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/7567#issuecomment-556266727,2,['test'],"['test', 'tests']"
Testability,looking into test failure,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2531#issuecomment-350003512:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/2531#issuecomment-350003512,1,['test'],['test']
Testability,looks fine to me. @konradjk can you approve once tested? thanks!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-401421444:49,test,tested,49,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-401421444,1,['test'],['tested']
Testability,"looks like a compile error in TestUtils.scala. The rest looks good, will approve when tests pass",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5077#issuecomment-452945059:30,Test,TestUtils,30,https://hail.is,https://github.com/hail-is/hail/pull/5077#issuecomment-452945059,2,"['Test', 'test']","['TestUtils', 'tests']"
Testability,"looks like the differences between `--unsafe-fixes` and my manual edits based on the feedback the linter gave were:; * `assert <boolean value> == True` becomes `assert <boolean value> is True`, not `assert <boolean value>`; * `if <value> == foo or <value> == bar` becomes `if <value> in (foo, bar)`, not `if <value> in {foo, bar}`; * `<unused variable> = foo` becomes `foo` instead of being deleted outright. those seem fine, though i think the manual version of the latter two is better in the cases where i had added it, as i only used sets for hashable types and deleted things that didn't have side effects, afaik",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14128#issuecomment-1883396355:120,assert,assert,120,https://hail.is,https://github.com/hail-is/hail/pull/14128#issuecomment-1883396355,3,['assert'],['assert']
Testability,"looks like your change is breaking this assertion on VEP line 84:; ` assert(ht.key.contains(FastIndexedSeq(""locus"", ""alleles"")))`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4361#issuecomment-423248241:40,assert,assertion,40,https://hail.is,https://github.com/hail-is/hail/pull/4361#issuecomment-423248241,2,['assert'],"['assert', 'assertion']"
Testability,"looks very reasonable on first scan, will have time to look more carefully tomorrow. If this passes tests I'm pretty confident it's fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8123#issuecomment-588545378:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/8123#issuecomment-588545378,1,['test'],['tests']
Testability,lots of test failues,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7479#issuecomment-553991453:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7479#issuecomment-553991453,1,['test'],['test']
Testability,"loy_config import HAIL_CONFIG_DIR, get_deploy_config; ; __all__ = [; + 'HAIL_CONFIG_DIR',; 'get_deploy_config'; ]; diff --git a/hail/python/hailtop/config/deploy_config.py b/hail/python/hailtop/config/deploy_config.py; index 627d1792c..7d2eeeca0 100644; --- a/hail/python/hailtop/config/deploy_config.py; +++ b/hail/python/hailtop/config/deploy_config.py; @@ -4,6 +4,8 @@ import logging; from aiohttp import web; ; log = logging.getLogger('gear'); +HAIL_CONFIG_DIR = os.path.join(os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config')),; + 'hail'); ; ; class DeployConfig:; @@ -15,7 +17,7 @@ class DeployConfig:; def from_config_file(config_file=None):; if not config_file:; config_file = os.environ.get(; - 'HAIL_DEPLOY_CONFIG_FILE', os.path.expanduser('~/.hail/deploy-config.json')); + 'HAIL_DEPLOY_CONFIG_FILE', os.path.join(HAIL_CONFIG_DIR, 'deploy-config.json')); if os.path.isfile(config_file):; with open(config_file, 'r') as f:; config = json.loads(f.read()); diff --git a/hail/python/hailtop/hailctl/auth/login.py b/hail/python/hailtop/hailctl/auth/login.py; index 343de7bda..e740f7b3d 100644; --- a/hail/python/hailtop/hailctl/auth/login.py; +++ b/hail/python/hailtop/hailctl/auth/login.py; @@ -5,7 +5,7 @@ import webbrowser; import aiohttp; from aiohttp import web; ; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; from hailtop.auth import get_tokens, namespace_auth_headers; ; ; @@ -77,9 +77,8 @@ Opening in your browser.; ; tokens = get_tokens(); tokens[auth_ns] = token; - dot_hail_dir = os.path.expanduser('~/.hail'); - if not os.path.exists(dot_hail_dir):; - os.mkdir(dot_hail_dir, mode=0o700); + if not os.path.exists(HAIL_CONFIG_DIR):; + os.makedirs(HAIL_CONFIG_DIR, mode=0o700); tokens.write(); ; if auth_ns == 'default':; diff --git a/hail/python/hailtop/hailctl/dev/config/cli.py b/hail/python/hailtop/hailctl/dev/config/cli.py; index c032e7731..d293b07cf 100644; --- a/hail/python/hailtop/hailctl/dev/con",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:3393,log,login,3393,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['login']
Testability,"ls.package$.using(package.scala:635); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:59); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:339); 	at is.hail.backend.spark.SparkBackend.$anonfun$executeEncode$1(SparkBackend.scala:483); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.backend.spark.SparkBackend.executeEncode(SparkBackend.scala:482); 	at sun.reflect.GeneratedMethodAccessor88.invoke(Unknown Source); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.lang.Thread.run(Thread.java:750). Hail version: 0.2.107-2387bb00ceee; Error summary: SparkException: Job aborted due to stage failure: Task 0 in stage 23.0 failed 4 times, most recent failure: Lost task 0.3 in stage 23.0 (TID 26) (all-of-us-56-w-0.c.terra-vpc-sc-8f5cdfd2.internal executor 5): ExecutorLostFailure (executor 5 exited caused by one of the running tasks) Reason: Container from a bad node: container_1691092255852_0001_01_000005 on host: all-of-us-56-w-0.c.terra-vpc-sc-8f5cdfd2.internal. Exit status: 137. Diagnostics: [2023-08-03 20:14:25.441]Container killed on request. Exit code is 137; [2023-08-03 20:14:25.442]Container exited with a non-zero exit code 137. ; [2023-08-03 20:14:25.442]Killed by external signal; .; Driver stacktrace:. ```; [hail-20230803-1955-0.2.107-2387bb00ceee.log](https://github.com/hail-is/hail/files/12254716/hail-20230803-1955-0.2.107-2387bb00ceee.log); Log file attached.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287#issuecomment-1664593619:11578,log,log,11578,https://hail.is,https://github.com/hail-is/hail/issues/13287#issuecomment-1664593619,3,"['Log', 'log']","['Log', 'log']"
Testability,ls.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.S,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3098,Test,TestUtils,3098,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,lush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a sympt,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3931,Test,TestMethodWorker,3931,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestMethodWorker']
Testability,lush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a sympt,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4124,Test,TestMethodWorker,4124,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestMethodWorker']
Testability,m.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; u,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4018,Test,TestMethodWorker,4018,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestMethodWorker']
Testability,m.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; u,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4211,Test,TestMethodWorker,4211,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestMethodWorker']
Testability,"m/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2688,test,test,2688,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"mCitybehindaProxyServer):. ``` apache; <IfModule mod_ssl.c>; <VirtualHost *:443>; # The ServerName directive sets the request scheme, hostname and port that; # the server uses to identify itself. This is used when creating; # redirection URLs. In the context of virtual hosts, the ServerName; # specifies what hostname must appear in the request's Host: header to; # match this virtual host. For the default virtual host (this file) this; # value is not decisive as it is used as a last resort host regardless.; # However, you must set it for any further virtual host explicitly.; ServerName hail.is; ServerAlias www.hail.is. ServerAdmin webmaster@localhost; DocumentRoot /var/www/html. RedirectMatch 404 /\.git. # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,; # error, crit, alert, emerg.; # It is also possible to configure the loglevel for particular; # modules, e.g.; #LogLevel info ssl:warn. ErrorLog ${APACHE_LOG_DIR}/error.log; CustomLog ${APACHE_LOG_DIR}/access.log combined. # For most configuration files from conf-available/, which are; # enabled or disabled at a global level, it is possible to; # include a line for only one particular virtual host. For example the; # following line enables the CGI configuration for this host only; # after it has been globally disabled with ""a2disconf"".; #Include conf-available/serve-cgi-bin.conf; SSLCertificateFile /etc/letsencrypt/live/hail.is/fullchain.pem; SSLCertificateKeyFile /etc/letsencrypt/live/hail.is/privkey.pem; Include /etc/letsencrypt/options-ssl-apache.conf; </VirtualHost>. <VirtualHost *:443>; ServerName ci.hail.is; ServerAdmin webmaster@localhost. LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so; LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so; LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so; LoadModule proxy_wstunnel_module /usr/lib/apache2/modules/mod_proxy_wstunnel.so. ProxyRequests Off; ProxyPreserveHost On; ProxyPass /app/subscriptions ws:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/674#issuecomment-243899170:1525,log,log,1525,https://hail.is,https://github.com/hail-is/hail/issues/674#issuecomment-243899170,1,['log'],['log']
Testability,man these tests take a while in ci,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7751#issuecomment-567170120:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/7751#issuecomment-567170120,1,['test'],['tests']
Testability,"march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin build/davies.o build/ibs.o build/Decoder.o build/Encoder.o build/Logging.o build/NativeCodeSuite.o build/NativeLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/Hadoop.o -o lib/darwin/libhail.dylib; > Building 33% > :compileScala. :compileScala; :processResources; :classes; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:2748,test,test,2748,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,1,['test'],['test']
Testability,"me time reading about this over the last ~month, and besides relatively consistent messaging about the messiness of Python's ecosystem, performance and user experience are deeply important to me, so when I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that funda",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:2324,test,tested,2324,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,2,"['benchmark', 'test']","['benchmarks', 'tested']"
Testability,"me/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Hadoop.d -MT build/Hadoop.o -c Hadoop.cpp; c++ -fvisibility=default -dynamiclib -Wl,-undefined,dynamic_lookup -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin build/davies.o build/ibs.o build/Decoder.o build/Encoder.o build/Logging.o build/NativeCodeSuite.o build/NativeLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/Hadoop.o -o lib/darwin/libhail.dylib; > Building 33% > :compileScala. :compileScala; :processResources; :classes; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,i",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:2480,test,testClasses,2480,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,5,"['Test', 'test']","['Test', 'test', 'testClasses', 'testForwardingOps']"
Testability,merged into https://github.com/hail-is/hail/pull/11599 because I need both fixes together to pass all the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11589#issuecomment-1073060132:106,test,tests,106,https://hail.is,https://github.com/hail-is/hail/pull/11589#issuecomment-1073060132,1,['test'],['tests']
Testability,"mespace, **kwargs); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/apis/core_v1_api.py"", line 18644, in read_namespaced_pod_log_with_http_info; collection_formats=collection_formats); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/api_client.py"", line 334, in call_api; _return_http_data_only, collection_formats, _preload_content, _request_timeout); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/api_client.py"", line 168, in __call_api; _request_timeout=_request_timeout); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/api_client.py"", line 355, in request; headers=headers); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/rest.py"", line 231, in GET; query_params=query_params); File ""/usr/local/lib/python3.6/dist-packages/kubernetes/client/rest.py"", line 222, in request; raise ApiException(http_resp=r); INFO | 2019-06-25 12:37:07,703 | batch.py | mark_complete:501 | no logs for batch-2554-job-4-main-cc8d4 due to previous error, rescheduling pod; INFO | 2019-06-25 12:37:07,730 | batch.py | _create_pod:205 | created pod name: batch-2554-job-4-main-vsk7h for job (2554, 4), task main; INFO | 2019-06-25 12:37:07,788 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; INFO | 2019-06-25 12:37:07,846 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; INFO | 2019-06-25 12:37:07,881 | web_log.py | log:233 | 10.32.14.87 [25/Jun/2019:12:37:07 +0000] ""GET /api/v1alpha/batches/2669/jobs/1 HTTP/1.1"" 200 208 ""-"" ""Python/3.6 aiohttp/3.5.4""; INFO | 2019-06-25 12:37:07,906 | batch.py | update_job_with_pod:976 | update job (2554, 4) with pod batch-2554-job-4-main-vsk7h; ```. The new pod:; ```; + kubectl get pod batch-2554-job-4-main-vsk7h -n batch-pods -o yaml; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-06-25T12:37:07Z""; generateName: batch-2554-job-4-main-; labels:; app: batch-job; hail.is/batch-instan",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649:10990,log,logs,10990,https://hail.is,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649,1,['log'],['logs']
Testability,"meters</h2>; <ul><li>x : int First number to add.</li><li>y : int Second number to add.</li></ul>; <h2>Returns</h2>; <a href=""https://python3.org/..../int"">int</a>; {% endraw %}; </div>; {% include ""nav-bottom.html"" %}; {% include ""base-foot.html"" %}; </body>; </html>. ```. The `website` service/k8s-pod/program ""serves the website"" wherein it *runs jinja2 again* and finally produces the HTML that you see on the website. That looks vaguely like this:. ```; <!DOCTYPE html>; <html lang=""en"">; <head>; <title>Hail | {% block title %}{% endblock %}</title>. <link rel=""stylesheet"" href=""/static/css/style.css?v=0.2.64-1ef70187dc78"">; <script src=""https://kit.fontawesome.com/7cdc07e2ca.js"" crossorigin=""anonymous""></script>; <!-- more Hail stuff -->. <link href=""_static/sphinx-style.css"">; <!-- more sphinx stuff here -->; </head>; <body>; <nav class=""navbar align-content-start justify-content-start sticky"" id=""hail-navbar"">; <div class=""container-fluid align-content-start justify-content-start d-flex"" id=""hail-container-fluid"">; <div class=""navbar-header"" id=""hail-navbar-header"">; <a class=""active"" id=""hail-navbar-brand"" href=""/"">; <img alt=""Hail"" height=""30"" id=""logo"" src=""/static/hail-logo-cropped-sm-opt.png"">; </a>; <button type=""button"" id=""navbar-toggler"" class=""navbar-toggler"" data-toggle=""collapse"" data-target=""#hail-navbar-collapse"" aria-expanded=""false"">; <span class=""icon-bar""></span>; <span class=""icon-bar""></span>; <span class=""icon-bar""></span>; </button>; </div>; <div class=""collapse navbar-collapse"" id=""hail-navbar-collapse"">; <span class=""algolia-autocomplete"" ...></span>; <ul class=""nav navbar-nav navbar-right"" id=""hail-menu"">; <li class=""nav-item""><a href=""/docs/0.2/index.html"">Docs</a></li>; <!-- more hail pages -->; </ul>; </div>; </div>; </nav>. <div id=""main'>; <h1><code>my_function</code></h1>; <p>Adds two numbers!</p>; <h2>Parameters</h2>; <ul><li>x : int First number to add.</li><li>y : int Second number to add.</li></ul>; <h2>Returns</h2>; <a href=""h",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10278#issuecomment-814433087:2689,log,logo,2689,https://hail.is,https://github.com/hail-is/hail/pull/10278#issuecomment-814433087,2,['log'],"['logo', 'logo-cropped-sm-opt']"
Testability,"me}, timeout=120); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 116, in post; return request('post', url, data=data, json=json, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 60, in request; return session.request(method=method, url=url, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 524, in request; resp = self.send(prep, **send_kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 637, in send; r = adapter.send(request, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/adapters.py"", line 529, in send; raise ReadTimeout(e, request=request); requests.exceptions.ReadTimeout: HTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=120); INFO | 2018-10-23 03:58:08,124 | server.py | run_forever:416 | run_forever: run target kube_event_loop; INFO | 2018-10-23 03:59:30,729 | server.py | mark_complete:175 | wrote log for job 153 to logs/job-153.log; INFO | 2018-10-23 03:59:30,730 | server.py | set_state:141 | job 153 changed state: Created -> Complete; INFO | 2018-10-23 03:59:30,730 | server.py | mark_complete:184 | job 153 complete, exit_code 2; INFO | 2018-10-23 03:59:30,737 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,806 | _internal.py | _log:88 | 10.56.142.33 - - [23/Oct/2018 03:59:30] ""GET /jobs HTTP/1.1"" 200 -; INFO | 2018-10-23 03:59:30,815 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,816 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,817 | server.py | refresh_k8s_state:385 | started k8s state refresh; INFO | 2018-10-23 03:59:31,183 | server.py | _create_pod:80 | created pod name: job-99-f4gwv for job 99; INFO | 2018-10-23 03:59:31,191 | server.py | _create_pod:80 | created pod name: job-150-h6snc for",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038:2195,log,log,2195,https://hail.is,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038,1,['log'],['log']
Testability,minor nitpick---can we move the logic from TableMapIRNew back into TableMapRows.execute and delete TableMapIRNew? I'd prefer to keep the locations of the execute logic consistent.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7654#issuecomment-562222241:32,log,logic,32,https://hail.is,https://github.com/hail-is/hail/pull/7654#issuecomment-562222241,2,['log'],['logic']
Testability,"ms as much as ~12 GB/s of aggregate bandwidth. We seem to have room for improvement, but this seems good enough for now. # On AWS, GCS -> S3. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 34 seconds | 154.5 MB/s |; | 1 | 42.9 GB | 4 minutes | 161.6 MB/s |; | 200 | 5.4 GB | 35 seconds | 151.1 MB/s |; | 40000 | 5.4 GB | 4 minutes | 22.0 MB/s |. # On GCP, S3 -> GCS. | Files | Bytes | Time | Rate |; | ----- | ----- | ---- | ---- |; | 1 | 5.4 GB | 17 seconds | 304.2 MB/s |; | 1 | 42.9 GB | 3 minutes | 235.5 MB/s |; | 200 | 5.4 GB | 20 seconds | 267.8 MB/s |; | 40000 | 5.4 GB | 6 minutes | 13.3 MB/s |. # machine parsable form; ```; [{'config': 'one',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/one',; 'times': [34.76],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/one'},; {'config': 'some',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/some',; 'times': [35.527],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/some'},; {'config': 'many',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/many',; 'times': [244.154],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/many'},; {'config': 'huge',; 'from': 'gs://1-day/tmp/test-copy/dking-benchmark/huge',; 'times': [265.719],; 'to': 's3://hail-test-dy5rg/tmp/target/dking-benchmark/huge'},; {'config': 'one',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/one',; 'times': [17.65],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/one'},; {'config': 'some',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/some',; 'times': [20.048],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/some'},; {'config': 'many',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/many',; 'times': [402.267],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/many'},; {'config': 'huge',; 'from': 's3://hail-test-dy5rg/tmp/test-copy/dking-benchmark/huge',; 'times': [182.355],; 'to': 'gs://1-day/tmp/test-copy/target/dking-benchmark/huge'}].",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697:1198,test,test-,1198,https://hail.is,https://github.com/hail-is/hail/pull/10752#issuecomment-897651697,4,"['benchmark', 'test']","['benchmark', 'test-', 'test-copy']"
Testability,"n I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aioh",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:2511,benchmark,benchmarks,2511,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['benchmark'],['benchmarks']
Testability,"n email; + except httpx.ClientResponseError as e:; + if e.status in (400, 401):; + return None; + raise; +; +; +class AadJwk(TypedDict):; + kid: str; + x5c: List[str]; +; ; class AzureFlow(Flow):; + _aad_keys: Optional[List[AadJwk]] = None; +; def __init__(self, credentials_file: str):; with open(credentials_file, encoding='utf-8') as f:; data = json.loads(f.read()); ; tenant_id = data['tenant']; authority = f'https://login.microsoftonline.com/{tenant_id}'; - client = msal.ConfidentialClientApplication(data['appId'], data['password'], authority); -; - self._client = client; + self._client = msal.ConfidentialClientApplication(data['appId'], data['password'], authority); self._tenant_id = tenant_id; ; def initiate_flow(self, redirect_uri: str) -> dict:; @@ -107,10 +170,31 @@ class AzureFlow(Flow):; ; return FlowResult(token['id_token_claims']['oid'], token['id_token_claims']['preferred_username'], token); ; -; -def get_flow_client(credentials_file: str) -> Flow:; - cloud = get_global_config()['cloud']; - if cloud == 'azure':; - return AzureFlow(credentials_file); - assert cloud == 'gcp'; - return GoogleFlow(credentials_file); + @staticmethod; + def perform_installed_app_login_flow(oauth2_client: Dict[str, Any]) -> Dict[str, Any]:; + tenant_id = oauth2_client['tenant']; + authority = f'https://login.microsoftonline.com/{tenant_id}'; + app = msal.PublicClientApplication(oauth2_client['appId'], authority=authority); + credentials = app.acquire_token_interactive([oauth2_client['userOauthScope']]); + return {**oauth2_client, 'refreshToken': credentials['refresh_token']}; +; + @staticmethod; + async def get_identity_uid_from_access_token(session: httpx.ClientSession, access_token: str, *, oauth2_client: dict) -> Optional[str]:; + audience = oauth2_client['appIdentifierUri']; +; + try:; + kid = jwt.get_unverified_header(access_token)['kid']; +; + if AzureFlow._aad_keys is None:; + resp = await session.get_read_json('https://login.microsoftonline.com/common/discovery/keys'); +",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329:5420,assert,assert,5420,https://hail.is,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329,2,"['assert', 'log']","['assert', 'login']"
Testability,n | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1690,test,test,1690,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"n's ecosystem, performance and user experience are deeply important to me, so when I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/respo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:2425,benchmark,benchmark,2425,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['benchmark'],['benchmark']
Testability,"n(ArrayBuffer(SeqOp(0,ArrayBuffer(Ref(__iruid_303,int64)),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum())))))),ResultOp(0,WrappedArray(AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None))),WrappedArray(AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None))),GetTupleElement(Ref(__iruid_302,tuple(int64)),0))))). java.lang.ClassCastException: is.hail.expr.types.physical.PStream cannot be cast to is.hail.expr.types.physical.PContainer. 	at is.hail.expr.ir.EmitStream$.is$hail$expr$ir$EmitStream$$emitStream$1(EmitStream.scala:631). #### Let's try to return x from streamify catch-all case (instead of if(...) ToStream(x) else x). With:. ```scala; private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TArray]) {; ToStream(node); } else {; node; }; }; }; }; ````. Again issue in testArrayAggScan (and 8 others in IRSuite):. Before Lower: ; MakeTuple(ArrayBuffer((0,RunAggScan(GetTupleElement(In(0,PCTuple[0:PCArray[PCStruct{x:PCCall,y:PInt32}]]),0),__iruid_400,Begin(ArrayBuffer(InitOp(0,ArrayBuffer(I32(2)),AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None),CallStats()))),Begin(ArrayBuffer(SeqOp(0,ArrayBuffer(GetField(Ref(__iruid_400,struct{x: call, y: int32}),x)),AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None),CallStats()))),Let(__iruid_401,ResultOp(0,WrappedArray(AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None))),ApplyBinaryPrimOp(Add(),GetField(Ref(__iruid_400,struct{x: call, y: int32}),y),GetField(GetTupleElement(Ref(__iruid_401,tuple(struct{AC: array<int32>, AF: array<float64>, AN: int32, homozygote_count: array<int32>})),0),AN))),WrappedArray(AggStateSignature(Map(Ca",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113:3942,test,testArrayAggScan,3942,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113,1,['test'],['testArrayAggScan']
Testability,"n:. ```; mysql> EXPLAIN SELECT batches.*, batches_cancelled.id IS NOT NULL AS cancelled, COALESCE(SUM(`usage` * rate), 0) AS cost, batches_n_jobs_in_complete_states.n_completed, batches_n_jobs_in_complete_states.n_succeeded, batches_n_jobs_in_complete_states.n_failed, batches_n_jobs_in_complete_states.n_cancelled; -> FROM batches; -> LEFT JOIN batches_n_jobs_in_complete_states; -> ON batches.id = batches_n_jobs_in_complete_states.id; -> LEFT JOIN batches_cancelled; -> ON batches.id = batches_cancelled.id; -> LEFT JOIN aggregated_batch_resources; -> ON batches.id = aggregated_batch_resources.batch_id; -> LEFT JOIN resources; -> ON aggregated_batch_resources.resource = resources.resource; -> STRAIGHT_JOIN billing_project_users ON batches.billing_project = billing_project_users.billing_project; -> WHERE (billing_project_users.`user` = 'test' AND billing_project_users.billing_project = batches.billing_project) AND NOT deleted AND (batches.id < 1114186) AND ; -> (batches.`user` = 'test'); -> GROUP BY batches.id; -> ORDER BY batches.id DESC; -> LIMIT 51;; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | 1 | SIMPLE | batches | NULL | range | PRIMARY,batches_deleted,batches_token,batches_user_state,batches_time_completed,batches_billing_project_state | PRIMARY | 8 | NULL | 1348998 | 5.00 | Using ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910:1004,test,test,1004,https://hail.is,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910,1,['test'],['test']
Testability,"nIter, firthIter = va.firth.fit.nIter')); ```. Beta for all variants, note that Firth resolves quasi-separation issues and regresses toward the zero:; ![logregbetalrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867286/9e219bc2-f153-11e6-896a-c49e55593312.png). Pvals for all variants, note that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5-a04af188c276.png). Pvals for variants with at least 20 hets, basically the same:; ![logregpval20hets](https://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-9443-1a00bb2e9848.png). LRT iterations:; ![logreglrtiter](https://cloud.githubusercontent.com/assets/3201642/22859676/816119b4-f0b2-11e6-8401-2b6600d6f443.png). Firth iterations:; ![logregfirthiter](https://cloud.githubusercontent.com/assets/3201642/22859677/883c4a6a-f0b2-11e6-9aad-b79e613f2ba7.png). For the record, Wald is mis-calibrated for small counts:; ![logregpvalwaldlrt](https://cloud.githubusercontent.com/assets/3201642/22859691/f629f5fe-f0b2-11e6-98fe-b96b3ef497ec.png). Score is more conservative than LRT:; ![logregpvalscorelrt](https://cloud.githubusercontent.com/assets/3201642/22859708/92750f7a-f0b3-11e6-93af-3219eb9e025f.png). Firth is more conservative than score:; ![logregpvalscorefirth](https://cloud.githubusercontent.com/assets/3201642/22859693/fed4555a-f0b2-11e6-9636-2a8075b0a04a.png). And linear betas are super conservative:; ![logregbetafirthlin](https:/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:2396,log,logregiter,2396,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logregiter']
Testability,"nJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87); 	at org.apache.spark.scheduler.Task.run(Task.scala:108); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:338); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-e6de08e; Error summary: ClassCastException: is.hail.codegen.generated.C14 cannot be cast to is.hail.asm4s.AsmFunction2; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [3c5f402fed564ccd85257c0919d4bffb] entered state [ERROR] while waiting for [DONE].; Traceback (most recent call last):; File ""pyhail.py"", line 128, in <module>; main(args, pass_through_args); File ""pyhail.py"", line 109, in main; subprocess.check_output(job); File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py"", line 573, in check_output; raise CalledProcessError(retcode, cmd, output=output); subprocess.CalledProcessError: Command '['gcloud', 'dataproc', 'jobs', 'submit', 'pyspark', '/Users/gtiao/gnomad_qc/hail/sample_qc/assign_subpops.py', '--cluster', 'gt1', '--files=gs://hail-common/builds/devel/jars/hail-devel-38dbf156b630-Spark-2.2.0.jar', '--py-files=gs://hail-common/builds/devel/python/hail-devel-38dbf156b630.zip,/var/folders/rn/t2xcx1ps4h96txll46qkkfsj2q8bnl/T/pyscripts_fYVAte.zip', '--properties=spark.executor.extraClassPath=./hail-devel-38dbf156b630-Spark-2.2.0.jar,spark.driver.extraClassPath=./hail-devel-38dbf156b630-Spark-2.2.0.jar,spark.files=./hail-devel-38dbf156b630-Spark-2.2.0.jar,spark.submit.pyFiles=./gs://hail-common/builds/devel/python/hail-devel-38dbf156b630.zip', '--driver-log-levels', 'root=FATAL,is.hail=INFO', '--', '--population', 'eur', '--overwrite']' returned non-zero exit status 1; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3446#issuecomment-384671627:8775,log,log-levels,8775,https://hail.is,https://github.com/hail-is/hail/issues/3446#issuecomment-384671627,1,['log'],['log-levels']
Testability,"nValueAggregator. This is a compiler backend. Too much abstraction in your output! Let's compile that shit away.; - ExtractAggregators should return an Array[AggSum]. These are expressions ending in AggSum containing aggregator operations (filter, map, etc.) defined in terms of the aggregated element and associated context.; - Add a function AggSum => RegionValueAggregator. This is the way to generalize: make AggSum into Agg(op: AggOp) where AggOp (like unary and binary op) are all the possible aggregator types, and there is a function that maps the op to the corresponding RegionValueAggregator*; - compiling the Array[AggSum] should product a function that takes the array of aggregators and a single value (with context) of the collection we're aggregating over and updates them with that element. *I think you need an array of arguments to handle things like call_stats which are evaluated in the aggregator scope (the only scope available to evaluate something). Imagine you have `gs.filter(g => g.GT.isHet()).map(g => g.DP).sum() + gs.flatMap(g => g.PL).sum()`. The Array[AggSum] will be. ```; Array(AggSum(AggMap(; AggFilter(AggIn(...), ; ""g"", g.GT.isHet()),; ""g"", (getField (Ref ""g"") ""DP""),; AggSum(AggFlatMap(AggIn(...),; ""g"", (getField (Ref ""g"") ""PL))); ```. The generated function should look like:. ```; def f(aggs: Array[AggSum], region: MemoryBuffer, g: Long, mg: Boolean, ...) {; if (g.GT.isHet()) { // RV-ified, of course; val DP = g.DP // actually fieldOffset; aggs(0).seqOp(DP); }; for (PLi in g.PL) { // actually elementOffset; aggs(1).seqOp(PLi); }; }; ```. This is straight-line and should be fast. It immediately allows you to do common subexpression elimination on aggregator prefixes which is something that is quite common, that is, if you have `gs.filter(g => g.isHet).map(g => g.DP).mean() < 10 gs.filter.map(g => g.GQ).mean() < 50` then in the aggregation function you can do:. ```; if (g.isHet) { // only test once!; aggs(0).seqOp(g.DP); aggs(1).seqOp(g.GQ); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2555#issuecomment-350868684:2049,test,test,2049,https://hail.is,https://github.com/hail-is/hail/pull/2555#issuecomment-350868684,1,['test'],['test']
Testability,"n[T] -> (U -> Boolean) -> Gen[Unit]`; - A `Gen[Unit]` is a bit artificial because the test framework halts execution (presumably with an exception) when a counter-example is found. I instead prefer that `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Boolean]`; - Now `Prop.forAll` has the same type as `Gen.flatMap[Boolean]`. It seems the difference between `forAll` and `flatMap` is that `forAll` conceptually preforms a product operation while `flatMap` performs a sampling. However, I think they are, in reality, the same operation: sampling. The implementation for `GenProp3` looks like:. ``` scala; for (i <- 0 until p.count) {; val v1 = g1(p); val v2 = g2(p); val v3 = g3(p); val r = f(v1, v2, v3); if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; }; ```. Which could be re-written as:. ``` scala; for (i <- 0 until p.count) {; (for (v1 <- g1; v2 <- g2; v3 <- g3) {; if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; })(p); }; ```. The primary difference between `flatMap` and `forAll` seems to be in error reporting. We can fix this by noting `Gen[T]` is currently a Reader monad on `Parameters`. If we add a ""forAll stack"" to `Parameters` we could implement `forAll` as:. ``` scala; def forAll[T,U](gt: Gen[T], gu: T -> Gen[U]): Gen[U] =; for (t <- gt; u <- local(pushQuantified(t), gu(t)) yield u. def pushQuantified(x: Any)(Parameters p): Paramters =; new Parameters(p.rng, p.size, p.count, (x :: p.quanitifed)); ```. We complete the Reader monad transformation by adding the `local` operation to `class Gen[T]`. ``` scala; // in class Gen; def local(modify: Parameters -> Parameters, gu: Gen[U]): Gen[U] =; Gen { p => gu(modify(p)) }; ```. Finally, the `check` method can access this stack of quantified variables to provide a useful error message. Thoughts?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/400#issuecomment-238901220:1250,test,tests,1250,https://hail.is,https://github.com/hail-is/hail/issues/400#issuecomment-238901220,2,"['assert', 'test']","['assert', 'tests']"
Testability,nal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4979,Test,TestNG,4979,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,nal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.ru,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4786,Test,TestNG,4786,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,"nce is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; Exception in thread ""main"" java.lang.NoClassDefFoundError: is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; 	at java.lang.ClassLoader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:13",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1251,test,testng,1251,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,"nceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.unfiltered.vcf) mask=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub filterExpression=[FS>200.0, QD<2.0, ReadPosRankSum<-20.0, InbreedingCoeff<-0.8] filterName=[Indel_FS, Indel_QD, Indel_ReadPosRankSum, Indel_InbreedingCoeff] genotypeFilterExpression=[] genotypeFilterName=[] clusterSize=3 clusterWindowSize=0 maskExtension=0 maskName=Mask missingValuesInExpressionsShouldEvaluateAsFailing=false invalidatePreviousFilters=false filter_mismatching_base_and_quals=false""; ##contig=<ID=1,length=248956422>; ##contig=<ID=2,length=242193529>; ##contig=<ID=3,length=198295559>; ##contig=<ID=4,length=190214555>; ##contig=<ID=5,length=181538259>; ##contig=<ID=6,length=170805979>; ##contig=<ID=7,length=159345973>; ##contig=<ID=8,length=145138636>; ##contig=<ID=9,length=138394717>; ##contig=<ID=10,length=133797422>; ##contig=<ID=11,length=135086622>; ##contig=<ID=12,length=133275309>; ##contig=<ID=13,length=114364328>; ##contig=<ID=14,length=107043718>; ##contig=<ID=15,length=101991189>; ##contig=<ID=16,length=90338345>; ##contig=<ID=17,lengt",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:20668,stub,stubs,20668,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"nches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3984,test,test,3984,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"nclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1560,test,test,1560,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,neClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.Clas,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1638,Test,TestRunner,1638,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,"need some new tests then! Let's add two tables to the src/test/resources dir, one of which has some schema that is all optional, one of which is all required. We can union them for segfaults!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580538063:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580538063,2,['test'],"['test', 'tests']"
Testability,need the hail.log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4127#issuecomment-412018951:14,log,log,14,https://hail.is,https://github.com/hail-is/hail/issues/4127#issuecomment-412018951,1,['log'],['log']
Testability,"needs bump, looks like random failure (shuffler was last test run)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9223#issuecomment-670168023:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/9223#issuecomment-670168023,1,['test'],['test']
Testability,"nees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3889,test,test,3889,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,ner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.Na,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1566,test,testng,1566,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"nes/jdk1.8.0_202.jdk/Contents/Home/include/darwin build/davies.o build/ibs.o build/Decoder.o build/Encoder.o build/Logging.o build/NativeCodeSuite.o build/NativeLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/Hadoop.o -o lib/darwin/libhail.dylib; > Building 33% > :compileScala. :compileScala; :processResources; :classes; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0)))) PASSED; Running test: Test method testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1))))(is.hail.expr.ir.ForwardLetsSuite)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:2788,test,testForwardingOps,2788,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,4,"['Test', 'test']","['Test', 'test', 'testForwardingOps']"
Testability,"ng in person what makes the most sense for 0.1. Here are the pieces I think we should separate for devel, though we could consider providing a meta-interface as well that combines some of them for usability. I'm writing (U, S, L) for a local matrix of eigenvectors U, an array of eigenvalues S, and an array of labels L on the rows of U (as with labels for SymmetricMatrix). 1) VDS to a (labeled) symmetric matrix (we have these: GRM, RRM, LD matrix, and Dan is working on a way to read and write them). 2) Symmetric matrix to (U, S, L), which we'll want to write and read. This modularizes the single-core eigen-decomposition bottleneck. 3) Variant-labeled (V, S, L) and VDS with those variants to transport (V, S, L) to sample-labeled (U, S, L). Currently this also requires knowing the number of samples used to make the LDMatrix since that number is used in its normalization. I agree it feels unnatural to need to remember this; to avoid it we'd need an unnormalized version. 4) Sample-labeled (U, S, L) and VDS to global fit of LMM including delta. This is currently a local computation that's been pretty fast in practice but as sample sizes increase we will want to distribute evaluating many values of delta in parallel. Note this step only uses the sample annotations on the VDS, so logically it could also be on KeyTable (which would be the sample KeyTable of the VDS). 5) Sample-labeled (U, S, L), VDS, and delta to per-variant-fit of LMM. This VDS can now contain exactly the variants one wants to fit. (5) should eventually be decomposed as well. The first command should project from Matrix to Matrix (projecting both numeric cells and a list of numeric sample annotations) and some additional small data. Then (6) will do per variant tests starting from after this projection (that is, after what is the BIG computation when you have tens of millions of variants). That way users can quickly iterate on exploration of covariates, fine mapping, and so on, for any fixed set of samples.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-319971210:1395,log,logically,1395,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-319971210,2,"['log', 'test']","['logically', 'tests']"
Testability,ng.NoClassDefFoundError: is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; 	at java.lang.ClassLoader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apach,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1374,test,testng,1374,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,"ng_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.unfiltered.vcf) mask=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub filterExpression=[FS>200.0, QD<2.0, ReadPosRankSum<-20.0, InbreedingCoeff<-0.8] filterName=[Indel_FS, Indel_QD, Indel_ReadPosRankSum, Indel_InbreedingCoeff] genotypeFilterExpression=[] genotypeFilterName=[] clusterSize=3 clusterWindowSize=0 maskExtension=0 maskName=Mask missingValuesInExpressionsShouldEvaluateAsFailing=false invalidatePreviousFilters=false filter_mismatching_base_and_quals=false""; ##contig=<ID=1,length=248956422>; ##contig=<ID=2,length=242193529>; ##contig=<ID=3,length=198295559>; ##contig=<ID=4,length=190214555>; ##contig=<ID=5,length=181538259>; ##contig=<ID=6,length=170805979>; ##contig=<ID=7,length=159345973>; ##contig=<ID=8,length=145138636>; ##contig=<ID=9,length=138394717>; ##contig=<ID=10,length=133797422>; ##",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:20440,stub,stubs,20440,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,nice test : code ratio,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4121#issuecomment-416343633:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/4121#issuecomment-416343633,1,['test'],['test']
Testability,nice tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3792#issuecomment-398748205:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/3792#issuecomment-398748205,1,['test'],['tests']
Testability,nice! can you run benchmarks?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10094#issuecomment-786111977:18,benchmark,benchmarks,18,https://hail.is,https://github.com/hail-is/hail/pull/10094#issuecomment-786111977,1,['benchmark'],['benchmarks']
Testability,nice! don't forget to make a discuss post once this goes in! (I think a post on this thread is probably sufficient?). http://discuss.hail.is/t/log-of-breaking-changes-in-0-2-beta/454/6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3518#issuecomment-388498058:143,log,log-of-breaking-changes-in-,143,https://hail.is,https://github.com/hail-is/hail/pull/3518#issuecomment-388498058,1,['log'],['log-of-breaking-changes-in-']
Testability,"no red flags in benchmarks: https://gist.github.com/tpoterba/f30db3931faf2448badd3860d772f2b1. (I don't believe this branch is >5% faster though, no reason to trust that)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10477#issuecomment-840938150:16,benchmark,benchmarks,16,https://hail.is,https://github.com/hail-is/hail/pull/10477#issuecomment-840938150,1,['benchmark'],['benchmarks']
Testability,"no, its just a question of where we put the checking logic. When we add a reference genome in Emit, we'll probably just have to set some boolean flag that tells us if something has already been set, and only call the `loader` code if it hasn't been set.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3357#issuecomment-380970181:53,log,logic,53,https://hail.is,https://github.com/hail-is/hail/pull/3357#issuecomment-380970181,1,['log'],['logic']
Testability,"none-any.whl"" which is different from old value ""gs://hail-30-day/hailctl/dataproc/edmund-dev/0.2.129-827516e474c3/hail-0.2.129-py3-none-any.whl""; mkdir -p env; printf ""gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" > env/wheel_cloud_path; rm -f python/hailtop/hailctl/deploy.yaml; echo ""dataproc:"" >> python/hailtop/hailctl/deploy.yaml; for FILE in init_notebook.py vep-GRCh37.sh vep-GRCh38.sh; do \; echo "" $FILE: gs://hail-common/hailctl/dataproc/0.2.129/$FILE"" >> python/hailtop/hailctl/deploy.yaml || exit 1; done; echo "" wheel: gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" >> python/hailtop/hailctl/deploy.yaml; printf "" pip_dependencies: "" >> python/hailtop/hailctl/deploy.yaml; cat python/pinned-requirements.txt | sed '/^[[:blank:]]*#/d;s/#.*//' | grep -v pyspark | tr ""\n"" ""|||"" | tr -d '[:space:]' >> python/hailtop/hailctl/deploy.yaml; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; gcloud storage cp python/hailtop/hailctl/dataproc/resources/init_notebook.py python/hailtop/hailctl/dataproc/resources/vep-GRCh37.sh python/hailtop/hailctl/dataproc/resources/vep-GRCh38.sh build/deploy/dist/hail-0.2.129-py3-none-any.whl gs://hail-common/hailctl/dataproc/0.2.129; gcloud storage objects update -r gs://hail-common/hailctl/dataproc/0.2.129 --add-acl-grant=entity=AllUsers,role=READER; gcloud storage objects update ""gs://hail-common/hailctl/dataproc/0.2.129/*"" --temporary-hold; ```. Note the following:; - mill is not invoked; - deploy.yaml is re-made with the correct uris; - the wheel is built",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145:1759,test,test,1759,https://hail.is,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145,2,"['log', 'test']","['log', 'test']"
Testability,"not moved to table there. Same needs to be done for VDS, this isn't too hard); - Add the non-core methods to `hail.methods` / `hail.genetics.methods`; - some stuff here is much harder than the rest, like `filter_alleles`; - This is mostly just labor, but some require more thought than others, like moving TDT to use hail2 expr; - Support intervals in the `index_*` methods. It's possible now to join by locus, but not using the `annotateLociTable` fast path.; - Move to Python 3 so argument order is preserved; - Test the hail2 api much more rigorously than we do now (at the very least, call each parameter branch for each method!; - Typecheck the expression language. This isn't super trivial, and making a nice system to integrate our `typecheck` module and expressions will require some thoughtful design work.; - Some more organization around the package: monkey patching with `import hail.genetics` is an idea I like, but want to think about the edge cases first. ## Documentation; - Document the `index_*` methods / joins; - Translate the _Hail Overview_ tutorial; - Make new tutorials to replace the 2 expr ones we have; - Fill in docs on api2 methods (they're not all there yet); - Fill in docs on expression language (things like __mul__ on NumericExpression haven't been documented); - Write ""integrative docs"" that provide how-tos for common types of workflows. Show the power of annotate / select / group_by/aggregate, etc. ## Longer term QoL:; - Move over tests to Python as much as possible. I looked at the linear regression suite and it can be moved entirely into Python without many problems.; - Write a type parser in Python. The nested calls into the JVM for Type._from_java make the library feel extremely sluggish on teensy data.; - Integrate RV with C/C++, so we can transmit data much more efficiently between Python and Java.; - Rethink the expr language function registry, because many functions there can be implemented in terms of others in Python.; - add back in de novo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554:1737,test,tests,1737,https://hail.is,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554,1,['test'],['tests']
Testability,"not passing tests:; ```; + java -cp 'hail-test.jar:/spark-2.4.0-bin-hadoop2.7/jars/*' org.testng.TestNG -listener is.hail.LogTestListener testng-build.xml; [[ClassInfoMap]] Unable to open class is.hail.stats.LeveneHaldane - unable to resolve class reference is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; Exception in thread ""main"" java.lang.NoClassDefFoundError: is/hail/relocated/org/apache/commons/math3/distribution/AbstractIntegerDistribution; 	at java.lang.ClassLoader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.T",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,6,"['Log', 'Test', 'test']","['LogTestListener', 'TestNG', 'test', 'testng', 'testng-build', 'tests']"
Testability,not testing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4944#issuecomment-446447752:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/4944#issuecomment-446447752,1,['test'],['testing']
Testability,"now it looks like ArrayAgg isn't matched on in LowerArrayToStream, despite existing in testArrayAggContexts with an ArrayRange child. Will look more tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583797420:87,test,testArrayAggContexts,87,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583797420,1,['test'],['testArrayAggContexts']
Testability,ns.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRe,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1073,test,test,1073,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,nstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitut,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1038,test,test,1038,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,nstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2000,test,test,2000,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],['test']
Testability,nstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilt,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2231,test,test,2231,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,ntext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestN,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3687,test,testng,3687,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['testng']
Testability,nvoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(B,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4789,Test,TestNG,4789,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,nvoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4596,Test,TestNG,4596,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,"o create a pod, including the secret, which is slightly surprising to me. Does the ability create a pod give ability to mount any secret? Surely not. At the same time, my rbac for notebook clearly defines the only secret it can access:. ```; (base) alex:~/projects/hail/notebook2:$ k get role read-get-user-secret -o json; {; ""apiVersion"": ""rbac.authorization.k8s.io/v1"",; ""kind"": ""Role"",; ""rules"": [; {; ""apiGroups"": [; """"; ],; ""resourceNames"": [; ""get-users""; ],; ""resources"": [; ""secrets""; ],; ""verbs"": [; ""get""; ]; }; ]; }; ```. The other permissions are for service and pod resources. These pods are bound to the user's service account. I also don't appear to need to give that service account that is bound (SA ""B"") permission to read the mounted secret. This makes sense to me: the container should be able to access anything on its file system. The notebook leader defines what that is. cc @cseed, thought you may want to know. The following was from a manual in-cluster test:; <img width=""940"" alt=""Screenshot 2019-04-02 15 55 39"" src=""https://user-images.githubusercontent.com/5543229/55432272-78989e00-5560-11e9-960e-1362d277d759.png"">. Partial description of a recently created pod (sans status); ```sh; (base) alex:~/projects/hail/notebook2:$ k get pod notebook2-worker-d4snh -o yaml; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-04-02T19:50:21Z""; generateName: notebook2-worker-; labels:; app: notebook2-worker; hail.is/notebook2-instance: f4dc8213468f4799a3c7f94cb6969309; jupyter_token: 484b71e2c12d42c79b169b1991602d45; name: a_notebook; user_id: e7e7b9c420f0b0ff503ab6711355f27748522a8a37d9d22b2c8e0af4; uuid: 84873cf540014e128cce18f5481fb682; name: notebook2-worker-d4snh; namespace: default; resourceVersion: ""41241284""; selfLink: /api/v1/namespaces/default/pods/notebook2-worker-d4snh; uid: 8cb3c1c2-5580-11e9-bcd4-42010a8000c9; spec:; containers:; - command:; - jupyter; - notebook; - --NotebookApp.token=484b71e2c12d42c79b169b1991602d45; - --NotebookApp.base_",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611:1010,test,test,1010,https://hail.is,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611,1,['test'],['test']
Testability,"o pick up CI's credentials instead of the test account's credentials. ```; E hail.utils.java.FatalError: GoogleJsonResponseException: 403 Forbidden; E GET https://storage.googleapis.com/storage/v1/b/hail-test-requester-pays-fds32/o/zero-to-nine?fields=bucket,name,timeCreated,updated,generation,metageneration,size,contentType,contentEncoding,md5Hash,crc32c,metadata&userProject=hail-vdc; E {; E ""code"": 403,; E ""errors"": [; E {; E ""domain"": ""global"",; E ""message"": ""ci-910@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project. Permission 'serviceusage.services.use' denied on resource (or it may not exist)."",; E ""reason"": ""forbidden""; E }; E ],; E ""message"": ""ci-910@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project. Permission 'serviceusage.services.use' denied on resource (or it may not exist).""; E }; E ; E Java stack trace:; E java.io.IOException: Error accessing gs://hail-test-requester-pays-fds32/zero-to-nine; E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageImpl.getObject(GoogleCloudStorageImpl.java:1986); E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageImpl.getItemInfo(GoogleCloudStorageImpl.java:1882); E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageFileSystemImpl.getFileInfoInternal(GoogleCloudStorageFileSystemImpl.java:861); E 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.gcsio.GoogleCloudStorageFileSystemImpl.getFileInfo(GoogleCloudStorageFileSystemImpl.java:833); E 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem.getFileStatus(GoogleHadoopFileSystem.java:724); E 	at org.apache.hadoop.fs.Globber.getFileStatus(Globber.java:115); E 	at org.apache.hadoop.fs.Globber.doGlob(Globber.java:349); E 	at org.apache.hadoop.fs.Globber.glob(Globber.java:202); E 	at org.apache.hadoop.fs.FileSystem.globStat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1969609236:1587,test,test-requester-pays-,1587,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1969609236,1,['test'],['test-requester-pays-']
Testability,"o that REST call was a successful looking JSON object (which indicates a create repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1405,test,test,1405,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,oader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	... 30 more; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1707,Test,TestRunner,1707,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,25,"['Test', 'test']","['TestNG', 'TestRunner', 'testng']"
Testability,oader.defineClass1(Native Method); 	at java.lang.ClassLoader.defineClass(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1504,test,testng,1504,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,oadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broad,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1501,test,test,1501,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,ocessTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :test; objc[30146]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldan,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1159,test,testSorted,1159,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],"['test', 'testSorted']"
Testability,"odd, it looks like we're using python2 to test this file.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4789#issuecomment-440805729:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/4789#issuecomment-440805729,1,['test'],['test']
Testability,"odified the `VirtualHost` set up to use [name-based VirtualHost discrimination](https://httpd.apache.org/docs/2.4/vhosts/name-based.html) based on information from the [TeamCity wiki](https://confluence.jetbrains.com/pages/viewpage.action?pageId=74845225#HowTo...-SetUpTeamCitybehindaProxyServer):. ``` apache; <IfModule mod_ssl.c>; <VirtualHost *:443>; # The ServerName directive sets the request scheme, hostname and port that; # the server uses to identify itself. This is used when creating; # redirection URLs. In the context of virtual hosts, the ServerName; # specifies what hostname must appear in the request's Host: header to; # match this virtual host. For the default virtual host (this file) this; # value is not decisive as it is used as a last resort host regardless.; # However, you must set it for any further virtual host explicitly.; ServerName hail.is; ServerAlias www.hail.is. ServerAdmin webmaster@localhost; DocumentRoot /var/www/html. RedirectMatch 404 /\.git. # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,; # error, crit, alert, emerg.; # It is also possible to configure the loglevel for particular; # modules, e.g.; #LogLevel info ssl:warn. ErrorLog ${APACHE_LOG_DIR}/error.log; CustomLog ${APACHE_LOG_DIR}/access.log combined. # For most configuration files from conf-available/, which are; # enabled or disabled at a global level, it is possible to; # include a line for only one particular virtual host. For example the; # following line enables the CGI configuration for this host only; # after it has been globally disabled with ""a2disconf"".; #Include conf-available/serve-cgi-bin.conf; SSLCertificateFile /etc/letsencrypt/live/hail.is/fullchain.pem; SSLCertificateKeyFile /etc/letsencrypt/live/hail.is/privkey.pem; Include /etc/letsencrypt/options-ssl-apache.conf; </VirtualHost>. <VirtualHost *:443>; ServerName ci.hail.is; ServerAdmin webmaster@localhost. LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so; LoadModule proxy_http_",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/674#issuecomment-243899170:1256,log,loglevels,1256,https://hail.is,https://github.com/hail-is/hail/issues/674#issuecomment-243899170,1,['log'],['loglevels']
Testability,"oh damn!. ```python; @benchmark; def table_aggregate_take_by_strings():; ht = hl.read_table(resource('many_strings_table.ht')); ht.aggregate(hl.tuple([hl.agg.take(ht['f18'], 25, ordering=ht[f'f{i}']) for i in range(12)])); ```. master:; ```; [1/1] Running table_aggregate_take_by...; run 1: 13.09; run 2: 13.19; run 3: 12.18; run 4: 11.57; run 5: 11.48; table_aggregate_take_by	12.302	12.181	0.725; ```. PR:; ```; [1/1] Running table_aggregate_take_by...; run 1: 4.84; run 2: 3.97; run 3: 3.81; run 4: 4.23; run 5: 4.12; table_aggregate_take_by	4.194	4.123	0.351; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6942#issuecomment-525928431:22,benchmark,benchmark,22,https://hail.is,https://github.com/hail-is/hail/pull/6942#issuecomment-525928431,1,['benchmark'],['benchmark']
Testability,"oh wait, I see. they got bundled into `assertEvalsTo`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-434401739:39,assert,assertEvalsTo,39,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-434401739,1,['assert'],['assertEvalsTo']
Testability,"oh, nice, I didn't see this. Let's benchmark!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7113#issuecomment-534322797:35,benchmark,benchmark,35,https://hail.is,https://github.com/hail-is/hail/pull/7113#issuecomment-534322797,1,['benchmark'],['benchmark']
Testability,"oh, this fixes my test. got it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10934#issuecomment-935176776:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/10934#issuecomment-935176776,1,['test'],['test']
Testability,"oject: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches running on the batch service managed by the Hail team. positional arguments:; {billing,list,get,cancel,delete,log,job,wait}; billing List billing; list List batches; get Get a particular batch's info; cancel Cancel a batch; delete Delete a batch; log Get log for a job; job Get the status and specification for a job; wait Wait for a batch to complete, then print JSON stat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1922,test,test,1922,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test']
Testability,ok maybe that fixes it? Testing locally doesn't seem to encounter the issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8576#issuecomment-615476103:24,Test,Testing,24,https://hail.is,https://github.com/hail-is/hail/pull/8576#issuecomment-615476103,1,['Test'],['Testing']
Testability,"ok"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pk",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:2398,benchmark,benchmark,2398,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['benchmark'],['benchmark']
Testability,"ok, I ended up pulling the Table stuff out of this PR (will push up another PR for it shortly) and hooking it in to InferPTypes in this PR (it won't handle stuff like RunAgg, etc. so I'll probably add a fallback to the original ptypes logic for now.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8602#issuecomment-622471229:235,log,logic,235,https://hail.is,https://github.com/hail-is/hail/pull/8602#issuecomment-622471229,1,['log'],['logic']
Testability,"ok, I've updated this PR so that billing projects can be ""open"", ""closed"", or ""deleted"". Allowed flow is `open` <--> `closed` --> `deleted`. Closed billing projects will still show up in the UI and billing reports; deleted projects show up in neither, but batches belonging to deleted billing projects will still show up in the batches table unless they're deleted. There's no endpoint here for deleting closed projects; I'll add an API endpoint in the billing project API PR so that I can run the tests properly there, but currently don't intend to add a button to the UI.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9579#issuecomment-705774492:498,test,tests,498,https://hail.is,https://github.com/hail-is/hail/pull/9579#issuecomment-705774492,1,['test'],['tests']
Testability,"ok, added failing test!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7455#issuecomment-549903705:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/7455#issuecomment-549903705,1,['test'],['test']
Testability,"ok, great. @cseed I've essentially already implemented the thing that you've described (although I need to actually duplicate the IR nodes in python for the loop function to work, and add some tests), although I haven't peeled off the ifs and lets to emit separately (and I don't know if we need to? seems to work fine with the current code generator); we check that all recurs are in tail position when we typecheck the IR. I will clean up the python and give the loops names and then assign this to someone.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-560028289:193,test,tests,193,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-560028289,1,['test'],['tests']
Testability,"ok, so back to the same error. I think your Spark cluster must be configured incorrectly, which is something we can't really help with. You should be able to do:; ```; pyspark; ```; and then:; ```python; sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); ```; without error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321224012:223,test,test,223,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321224012,1,['test'],['test']
Testability,"ok, tests added. Let me know if you can think of other cases that should get tested as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2950#issuecomment-367424171:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/2950#issuecomment-367424171,2,['test'],"['tested', 'tests']"
Testability,"ok, the includedVariants logic makes this super hacky and terrible. I'm going to close this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5515#issuecomment-469288996:25,log,logic,25,https://hail.is,https://github.com/hail-is/hail/pull/5515#issuecomment-469288996,1,['log'],['logic']
Testability,ok-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/google-fluentd/embedded/lib/ruby/gems/2.7.0/gems/fluent-plugin-kubernetes_metadata_filter-2.5.2/test/cassettes/kubernetes_docker_metadata_dotted_labels.yml; /opt/google-fluentd/embedded/lib/ruby/gems/2.7.0/gems/fluent-plugin-kubernetes_metadata_filter-2.5.2/test/cassettes/kubernetes_docker_metadata_annotations.yml; /usr/share/man/man1/gcloud_artifacts_docker_images_scan.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_images_list-vulnerabilities.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_describe.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_scan.1.gz; /usr/share/man/man1/gcloud_alpha_auth_configure-docker.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_list.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_images_delete.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_images_delete.1.gz; /usr/share/man/man1/gcloud_alpha_artifacts_docker_images.1.gz; /usr/share/man/man1/gcloud_beta_auth_configure-docker.1.gz; /usr/share/man/man1/gcloud_artifacts_docker_tags_list.1.gz; /usr/share/man/man1/gcloud_beta_artifacts_docker_tags_list.1.gz; /usr/share/man/man1/gcloud_alpha_artifacts_docker.1.gz; /usr/share/man/man1/gcloud_alpha_artifacts_docker_images_list.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:2273,test,test,2273,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['test']
Testability,"ok. Figured it out. The issue is that the build of the new image finally succeeded after 18 minutes, but the test timed out and batch must have been shut down already.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8440#issuecomment-614882682:109,test,test,109,https://hail.is,https://github.com/hail-is/hail/pull/8440#issuecomment-614882682,1,['test'],['test']
Testability,"ok. this question about what n_jobs means for a job group is also blocking this query that's needed for the rest of the tests to pass. ```mysql; # compute global number of new ready jobs from root job group; INSERT INTO user_inst_coll_resources (user, inst_coll, token, n_ready_jobs, ready_cores_mcpu); SELECT user, inst_coll, 0, @n_ready_jobs := COALESCE(SUM(n_ready_jobs), 0), @ready_cores_mcpu := COALESCE(SUM(ready_cores_mcpu), 0); FROM job_groups_inst_coll_staging; JOIN batches ON batches.id = job_groups_inst_coll_staging.batch_id; WHERE batch_id = in_batch_id AND update_id = in_update_id AND job_group_id = 0; GROUP BY `user`, inst_coll; ON DUPLICATE KEY UPDATE; n_ready_jobs = n_ready_jobs + @n_ready_jobs,; ready_cores_mcpu = ready_cores_mcpu + @ready_cores_mcpu;; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1932776114:120,test,tests,120,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1932776114,1,['test'],['tests']
Testability,oke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.clo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4618,test,testng,4618,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,oke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.c,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4425,test,testng,4425,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,"olving tiny systems (dimension number of covariates) is dwarfed by time spent working with vectors and matrices with primary dimension the number of samples (as in QR), and because BLAS3 matrix multiplication is fast. I also checked that upping to 8 covariates didn't balance things out. It didn't. The fancy approach basically trades X.t * X and generic k-dim solve for a QR on X and triangular k-dim solve...better for larger k and smaller n. ```; Standard. 2 cov; Lin 7s; Score 54.5s; LRT 93s; Wald 90s. 2 cov, QR / TriSolve; Lin 7.42s; Score 53.6s, 53.1s; LRT 2m06s, 1m59s; Wald 1m53s, 1m54s. 8 cov; Lin 7.16s; Score 59.1s; LRT 2m25s, 2m20s, 2m26s; Wald 2m27s, 2m27s, 2m25s. 8 cov, QR / TriSolve; Lin 7.76s; Score 52.7s; LRT 3m30s; Wald 3m26s; ```. For Firth, since I'm using QR anyway, may as will use TriSolve (though the timing is not particularly effected even with 8 covariates):. ```; 2 cov:; Firth 5m 10s, 4m55s, 5m7s. 8 cov:; Firth 10m37s, 10m50s, 10m28s; ```. For reference, here's the core logic of the QR approach. This corresponds to another version of LogisticRegressionFit where I tried to reduce unnecessary computation, see below. ```; while (!converged && !exploded && iter <= maxIter) {; try {; val mu = sigmoid(X * b); val sqrtW = sqrt(mu :* (1d - mu)); val QR = qr.reduced(X(::, *) :* sqrtW). deltaB = TriSolve(QR.r, QR.q.t * ((y - mu) :/ sqrtW)). if (max(abs(deltaB)) < tol) {; converged = true; if (computeScoreR) {; optScore = Some(X.t * (y - mu)); optR = Some(QR.r); }; if (computeSe) {; val invR = inv(QR.r) // could speed up inverting as upper triangular, or avoid altogether as 1 / se(-1) = fit.fisherSqrt(-1, -1); optSe = Some(norm(invR(*, ::))); }; if (computeLogLkld); optLogLkhd = Some(sum(breeze.numerics.log((y :* mu) + ((1d - y) :* (1d - mu))))); } else {; iter += 1; b += deltaB; }; }; ```. ```; case class LogisticRegressionFit(; b: DenseVector[Double],; optScore: Option[DenseVector[Double]],; optR: Option[DenseMatrix[Double]],; optSe: Option[DenseVector[Doub",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833:1135,log,logic,1135,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833,1,['log'],['logic']
Testability,om aggregated_billing_project_user_resources_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8284,test,test,8284,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"om/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/h",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5940,test,test,5940,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,ome/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.Leve,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1382,test,test,1382,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,on.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); 	at scala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	a,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2026,Test,TestUtils,2026,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,"on/hailtop/config/deploy_config.py; index 627d1792c..7d2eeeca0 100644; --- a/hail/python/hailtop/config/deploy_config.py; +++ b/hail/python/hailtop/config/deploy_config.py; @@ -4,6 +4,8 @@ import logging; from aiohttp import web; ; log = logging.getLogger('gear'); +HAIL_CONFIG_DIR = os.path.join(os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config')),; + 'hail'); ; ; class DeployConfig:; @@ -15,7 +17,7 @@ class DeployConfig:; def from_config_file(config_file=None):; if not config_file:; config_file = os.environ.get(; - 'HAIL_DEPLOY_CONFIG_FILE', os.path.expanduser('~/.hail/deploy-config.json')); + 'HAIL_DEPLOY_CONFIG_FILE', os.path.join(HAIL_CONFIG_DIR, 'deploy-config.json')); if os.path.isfile(config_file):; with open(config_file, 'r') as f:; config = json.loads(f.read()); diff --git a/hail/python/hailtop/hailctl/auth/login.py b/hail/python/hailtop/hailctl/auth/login.py; index 343de7bda..e740f7b3d 100644; --- a/hail/python/hailtop/hailctl/auth/login.py; +++ b/hail/python/hailtop/hailctl/auth/login.py; @@ -5,7 +5,7 @@ import webbrowser; import aiohttp; from aiohttp import web; ; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; from hailtop.auth import get_tokens, namespace_auth_headers; ; ; @@ -77,9 +77,8 @@ Opening in your browser.; ; tokens = get_tokens(); tokens[auth_ns] = token; - dot_hail_dir = os.path.expanduser('~/.hail'); - if not os.path.exists(dot_hail_dir):; - os.mkdir(dot_hail_dir, mode=0o700); + if not os.path.exists(HAIL_CONFIG_DIR):; + os.makedirs(HAIL_CONFIG_DIR, mode=0o700); tokens.write(); ; if auth_ns == 'default':; diff --git a/hail/python/hailtop/hailctl/dev/config/cli.py b/hail/python/hailtop/hailctl/dev/config/cli.py; index c032e7731..d293b07cf 100644; --- a/hail/python/hailtop/hailctl/dev/config/cli.py; +++ b/hail/python/hailtop/hailctl/dev/config/cli.py; @@ -1,6 +1,6 @@; import os; import json; -from hailtop.config import get_deploy_config; +from hailtop.config import HA",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:3570,log,login,3570,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['login']
Testability,"one more:; ```; File ""/home/hail/.conda/envs/hail/lib/python3.6/doctest.py"", line 1330, in __run; compileflags, 1), test.globs); File ""<doctest genetics.rst[21]>"", line 1; female_pheno = hl.case(); ^; SyntaxError: multiple statements found while compiling a single statement; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4458#issuecomment-425258445:116,test,test,116,https://hail.is,https://github.com/hail-is/hail/pull/4458#issuecomment-425258445,1,['test'],['test']
Testability,"oops---there's also a couple of logging methods in here that aren't used, but are handy to have for tests/debugging. Can move onto a separate PR if desired, but they're pretty small/straightforward.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6644#issuecomment-511512794:32,log,logging,32,https://hail.is,https://github.com/hail-is/hail/pull/6644#issuecomment-511512794,2,"['log', 'test']","['logging', 'tests']"
Testability,oops. thanks for preempting the test failure!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4380#issuecomment-423268427:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/4380#issuecomment-423268427,1,['test'],['test']
Testability,"orce_bgz=True); - meta_ht = meta_ht.key_by(""s""); - meta_ht = meta_ht.filter(hl.is_defined(meta_ht.cram_path) & hl.is_defined(meta_ht.crai_path), keep=True); - meta_ht = meta_ht.repartition(1000); - meta_ht = meta_ht.checkpoint(; - re.sub("".tsv(.b?gz)?"", """", args.sample_metadata_tsv) + "".ht"", overwrite=True, _read_if_exists=True); -; + hl.init(log=""/tmp/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); vds = gnomad_v4_genotypes.vds(); ; # see https://github.com/broadinstitute/ukbb_qc/pull/227/files; @@ -55,19 +48,8 @@ def main(args):; ; v4_qc_meta_ht = meta.ht(); ; - mt = vds.variant_data; - #mt = vds.variant_data._filter_partitions([41229]); -; - mt = mt.filter_cols(v4_qc_meta_ht[mt.s].release); -; - meta_join = meta_ht[mt.s]; - mt = mt.annotate_cols(; - meta=hl.struct(; - sex_karyotype=meta_join.sex_karyotype,; - cram=meta_join.cram_path,; - crai=meta_join.crai_path,; - ); - ); + #mt = vds.variant_data; + mt = vds.variant_data._filter_partitions([41229]); ; logger.info(""Adjusting samples' sex ploidy""); lgt_expr = hl.if_else(; @@ -88,9 +70,9 @@ def main(args):; logger.info(""Filter variants with at least one non-ref GT""); mt = mt.filter_rows(hl.agg.any(mt.GT.is_non_ref())); ; - #logger.info(f""Saving checkpoint""); - #mt = mt.checkpoint(os.path.join(args.temp_bucket, ""readviz_select_samples_checkpoint1.vds""),; - # overwrite=True, _read_if_exists=True); + logger.info(f""Saving checkpoint""); + mt = mt.checkpoint(""readviz_select_samples_checkpoint1.vds"",; + overwrite=True, _read_if_exists=True); ; def sample_ordering_expr(mt):; """"""For variants that are present in more than 10 samples (or whatever number args.num_samples is set to),; ```. And tried running the bad step:. ```bash; python3 step1__select_samples.py; ```. I was able to get past the checkpoint: ; ```; INFO (Readviz_prep 73): Saving checkpoint; [Stage 0:> (0 + 1) / 1]. 2023-09-01 18:10:29.262 Hail: INFO: wrote matrix table with 11450 rows and 955359 columns in 1 partition to",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664:1865,log,logger,1865,https://hail.is,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664,1,['log'],['logger']
Testability,"order as listed"">; ##INFO=<ID=AN,Number=1,Type=Integer,Description=""Total number of alleles in called genotypes"">; ##INFO=<ID=BaseQRankSum,Number=1,Type=Float,Description=""Z-score from Wilcoxon rank sum test of Alt Vs. Ref base qualities"">; ##INFO=<ID=DB,Number=0,Type=Flag,Description=""dbSNP Membership"">; ##INFO=<ID=DP,Number=1,Type=Integer,Description=""Approximate read depth; some reads may have been filtered"">; ##INFO=<ID=DS,Number=0,Type=Flag,Description=""Were any of the samples downsampled?"">; ##INFO=<ID=Dels,Number=1,Type=Float,Description=""Fraction of Reads Containing Spanning Deletions"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""Stop position of the interval"">; ##INFO=<ID=FS,Number=1,Type=Float,Description=""Phred-scaled p-value using Fisher's exact test to detect strand bias"">; ##INFO=<ID=HaplotypeScore,Number=1,Type=Float,Description=""Consistency of the site with at most two segregating haplotypes"">; ##INFO=<ID=InbreedingCoeff,Number=1,Type=Float,Description=""Inbreeding coefficient as estimated from the genotype likelihoods per-sample when compared against the Hardy-Weinberg expectation"">; ##INFO=<ID=MLEAC,Number=A,Type=Integer,Description=""Maximum likelihood expectation (MLE) for the allele counts (not necessarily the same as the AC), for each ALT allele, in the same order as listed"">; ##INFO=<ID=MLEAF,Number=A,Type=Float,Description=""Maximum likelihood expectation (MLE) for the allele frequency (not necessarily the same as the AF), for each ALT allele, in the same order as listed"">; ##INFO=<ID=MQ,Number=1,Type=Float,Description=""RMS Mapping Quality"">; ##INFO=<ID=MQ0,Number=1,Type=Integer,Description=""Total Mapping Quality Zero Reads"">; ##INFO=<ID=MQRankSum,Number=1,Type=Float,Description=""Z-score From Wilcoxon rank sum test of Alt vs. Ref read mapping qualities"">; ##INFO=<ID=OriginalContig,Number=1,Type=String,Description=""The name of the source contig/chromosome prior to liftover."">; ##INFO=<ID=OriginalStart,Number=1,Type=String,Description=""The p",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:7279,test,test,7279,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,2,['test'],['test']
Testability,"ore: \n${node} of typ: ${node.typ}\nafter: ${streamified} of typ: ${streamified.typ}\n\n""); assert(streamified.typ == node.typ); streamified; }. private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TArray]) {; ToStream(node); } else {; node; }; }; }; }. // in streamify; case _ =>; val newChildren = node.children.map(child => boundary(child.asInstanceOf[IR])); val x = if ((node.children, newChildren).zipped.forall(_ eq _)); node; else; node.copy(newChildren). if(x.typ.isInstanceOf[TArray]); ToStream(x); else; x; ```. IRSuite.testDictContains:. Before Lower: ; MakeTuple(ArrayBuffer((0,ApplyIR(contains,ArrayBuffer(GetTupleElement(In(0,PCTuple[0:PCDict[PInt32,PCString]]),0), NA(int32)))))); ...; before: ; ToArray(Ref(__iruid_56,dict<int32, str>)) of typ: array<struct{key: int32, value: str}>; after: Ref(__iruid_56,dict<int32, str>) of typ: dict<int32, str>. java.lang.AssertionError: assertion failed. 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.ir.LowerArrayToStream$.is$hail$expr$ir$LowerArrayToStream$$boundary(LowerArrayToStream.scala:19). #### Fix:; ```scala; private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TIterable]) {; ToStream(node); } else {; node; }; }; }; }; ```. New issues (many more failures in IRSuite, and surely plenty more in other tests):. First of these:; Before Lower: ; MakeTuple(ArrayBuffer((0,Let(__iruid_302,RunAgg(Begin(ArrayBuffer(Begin(ArrayBuffer(InitOp(0,ArrayBuffer(),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum()))), ArrayFor(ArrayMap(ArrayRange(I32(0),I32(4),I32(1)),__iruid_304,Cast(Ref(__iruid_304,int32),int64)),__iruid_303,Begin(ArrayBuffer(SeqOp(0,ArrayBuffer(Ref(__iruid_303,int64)),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum())))))),ResultOp(0,WrappedArray(AggStateSignature(Map(Sum(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113:1345,assert,assert,1345,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113,1,['assert'],['assert']
Testability,ose(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4002,test,testng,4002,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,ose(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4195,test,testng,4195,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,"ote that Firth is more conservative:; ![logregpvallrtfirth](https://cloud.githubusercontent.com/assets/3201642/22867294/a86b012c-f153-11e6-8155-23004f9127fe.png). Beta for variants with at least 20 hets, basically the same:; ![logregbeta20hets](https://cloud.githubusercontent.com/assets/3201642/22859644/23feabb6-f0b1-11e6-88d5-a04af188c276.png). Pvals for variants with at least 20 hets, basically the same:; ![logregpval20hets](https://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-9443-1a00bb2e9848.png). LRT iterations:; ![logreglrtiter](https://cloud.githubusercontent.com/assets/3201642/22859676/816119b4-f0b2-11e6-8401-2b6600d6f443.png). Firth iterations:; ![logregfirthiter](https://cloud.githubusercontent.com/assets/3201642/22859677/883c4a6a-f0b2-11e6-9aad-b79e613f2ba7.png). For the record, Wald is mis-calibrated for small counts:; ![logregpvalwaldlrt](https://cloud.githubusercontent.com/assets/3201642/22859691/f629f5fe-f0b2-11e6-98fe-b96b3ef497ec.png). Score is more conservative than LRT:; ![logregpvalscorelrt](https://cloud.githubusercontent.com/assets/3201642/22859708/92750f7a-f0b3-11e6-93af-3219eb9e025f.png). Firth is more conservative than score:; ![logregpvalscorefirth](https://cloud.githubusercontent.com/assets/3201642/22859693/fed4555a-f0b2-11e6-9636-2a8075b0a04a.png). And linear betas are super conservative:; ![logregbetafirthlin](https://cloud.githubusercontent.com/assets/3201642/22867304/c63d2b76-f153-11e6-87b3-445c58796695.png). But linear pvals are okay:; ![logregpvalfirthlin](https://cloud.githubusercontent.com/assets/3201642/22867309/dc0f0d70-f153-11e6-840d-308dc0570a6a.png). And essentially identical to score test:; ![logregpva",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:2669,log,logregfirthiter,2669,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logregfirthiter']
Testability,ource); 	at __C372collect_distributed_array_matrix_native_writer.apply(Unknown Source); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$16(BackendUtils.scala:91); 	at is.hail.utils.package$.using(package.scala:637); 	at is.hail.annotations.RegionPool.scopedRegion(RegionPool.scala:162); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$15(BackendUtils.scala:90); 	at is.hail.backend.service.Worker$.$anonfun$main$12(Worker.scala:167); 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); 	at is.hail.services.package$.retryTransientErrors(package.scala:182); 	at is.hail.backend.service.Worker$.$anonfun$main$11(Worker.scala:166); 	at is.hail.backend.service.Worker$.$anonfun$main$11$adapted(Worker.scala:164); 	at is.hail.utils.package$.using(package.scala:637); 	at is.hail.backend.service.Worker$.main(Worker.scala:164); 	at is.hail.backend.service.Main$.main(Main.scala:14); 	at is.hail.backend.service.Main.main(Main.scala); 	... 11 more. Logs; Main; Log ; 2023-09-24 17:23:30.055 JVMEntryway: ERROR: Exception encountered in QoB cancel thread.; org.newsclub.net.unix.SocketClosedException: Not open; 	at org.newsclub.net.unix.AFCore.validFdOrException(AFCore.java:90) ~[jvm-entryway.jar:?]; 	at org.newsclub.net.unix.AFSocketImpl$AFInputStreamImpl.read(AFSocketImpl.java:510) ~[jvm-entryway.jar:?]; 	at java.io.DataInputStream.readInt(DataInputStream.java:388) ~[?:1.8.0_382]; 	at is.hail.JVMEntryway$2.run(JVMEntryway.java:136) ~[jvm-entryway.jar:?]; 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_382]; 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_382]; 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_382]; 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolEx,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13704#issuecomment-1734170888:4398,Log,Logs,4398,https://hail.is,https://github.com/hail-is/hail/issues/13704#issuecomment-1734170888,2,['Log'],"['Log', 'Logs']"
Testability,ource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1486,test,test,1486,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""network_count"": 0,; ""subscribers_count"": 0; }; ```. [2]:; ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:7063,test,test,7063,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,9,['test'],['test']
Testability,"pOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1953); at org.apache.spark.scheduler.TaskResultGetter$$anon$3.run(TaskResultGetter.scala:124); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ```; `pyhail-submit`:; ```bash; #!/bin/bash. if [ $# -ne 2 ]; then; echo 'usage: gcp-pyhail-submit <cluster> <py-file>'; exit 1; fi. cluster=$1; script=$2. echo cluster = $cluster; echo script = $script. HASH=`gsutil cat gs://hail-common/latest-hash.txt`. JAR_FILE=hail-hail-is-master-all-spark2.0.2-$HASH.jar; JAR=gs://hail-common/$JAR_FILE. PYHAIL_ZIP=gs://hail-common/pyhail-hail-is-master-$HASH.zip. gcloud dataproc jobs submit pyspark \; $script \; --cluster $cluster \; --files=$JAR \; --py-files=$PYHAIL_ZIP \; --properties=""spark.driver.extraClassPath=./$JAR_FILE,spark.executor.extraClassPath=./$JAR_FILE"" \; --; ```; cluster JSON:; ```; {; ""projectId"": ""broad-ctsa""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:2109,log,logUncaughtExceptions,2109,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['log'],['logUncaughtExceptions']
Testability,parkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66); 	at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109); ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3825,test,testng,3825,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,29,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testng']"
Testability,passes beside batch test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8134#issuecomment-589502275:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/8134#issuecomment-589502275,1,['test'],['test']
Testability,"pc_rel['kin'] >= 0.0883); print(""finding Max ind set""); related_samples_to_remove = hl.maximal_independent_set(pairs.i, pairs.j,keep=False); print(""writing related samples to remove""); related_samples_to_remove.export(""file:////restricted/projectnb/adgc/topmed.r2.analysis/pc_relate/related_samples_""+pop+"".tsv""); result = mt.filter_cols(; hl.is_defined(related_samples_to_remove[mt.col_key]), keep=False); print(""final unrelated count""); print(result.count); eigenvalues, scores, loadings = hl.hwe_normalized_pca(result.GT, k=10); scores.export('file:////restricted/projectnb/adgc/topmed.r2.analysis/pc_relate/unrelated_pcs_'+pop+'.tsv'). ```. ```; Running on Apache Spark version 2.4.3; SparkUI available at http://scc-hadoop.bu.edu:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.46-6ef64c08b000; LOGGING: writing to logs/adgc_pc_relate.autosome_all.log; 2020-08-20 10:14:00 Hail: INFO: Reading table to impute column types; [Stage 0:===========================================================(1 + 0) / 1]2020-08-20 10:14:07 Hail: INFO: Loading 76 fields. Counts by type:; 66 fields: user-specified int32; 6 fields: user-specified str; 3 fields: user-specified float64; 1 field: imputed int32; (63110, 64048); running omit filter; [Stage 1:> (0 + 1) / 1](63110, 52877); running pc_relate; [Stage 3:==================================================>(12794 + 2) / 12796]2020-08-20 10:14:38 Hail: INFO: hwe_normalized_pca: running PCA using 63110 variants.; [Stage 5:==================================================>(12795 + 1) / 12796]2020-08-20 10:14:59 Hail: INFO: pca: running PCA with 10 components...; [Stage 102:================================================>(12795 + 1) / 12796]Traceback (most recent call last):; File ""/restricted/projectnb/adgc/topmed.r2.analysis/pc_relate_pop2.py"", line 128, in <module>; pc_rel = hl.pc_relate(mt.GT, 0.01, k=10, statistics='kin',min_kinship=0.0883); File ""<decorator-gen-1543>"", line 2, in pc_relate; [Sta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:4304,log,log,4304,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,"pc_relate_pop2.py; import pandas as pd; import numpy as np; from scipy.special import chdtri; from numpy import median; from math import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tint,; 'ADC8_aa': hl.tint,; 'ADC8_ea': hl.tint,; 'ADC8_hisp': hl.tint,; 'ADC9_aa': hl.tint,; 'AD",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:1060,log,log,1060,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,per.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4881,Test,TestNG,4881,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,per.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$100,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4688,Test,TestNG,4688,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,performance tests should catch stuff like this,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4178#issuecomment-414487778:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/4178#issuecomment-414487778,1,['test'],['tests']
Testability,"performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=[(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recalibrated.vcf), (RodBinding name=variant2 source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.filtered.vcf)] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub genotypemergeoption=UNSORTED filteredrecordsmergetype=KEEP_IF_ANY_UNFILTERED multipleallelesmergetype=BY_TYPE rod_priority_list=null printComplexMerges=false filteredAreUncalled=false minimalVCF=false setKey=set assumeIdenticalSamples=true minimumN=1 suppressCommandLineHeader=false mergeInfoWithMaxAC=false filter_mismatching_base_and_quals=false""; ##FILTER=<ID=Indel_FS,Description=""FS>200.0"">; ##FILTER=<ID=Indel_InbreedingCoeff,Description=""InbreedingCoeff<-0.8"">; ##FILTER=<ID=Indel_QD,Description=""QD<2.0"">; ##FILTER=<ID=Indel_ReadPosRankSum,Description=""ReadPosRankSum<-20.0"">; ##FILTER=<ID=LowQual,Description=""Low quality"">; ##FILTER=<ID=VQSRTrancheSNP98.50to98.60,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -1.4503 <= x < -1.2551"">; ##FILTER=<ID=VQSRTrancheSNP98.60to98.80,Description=""Truth sensitivity tranche level for SNP model at VQS Lod: -2.0727 <= x < -1.4503",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:3794,stub,stubs,3794,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"pi.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9f",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2501,test,test,2501,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"pile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our test code references these third-party classes:; ```; import breeze.linalg.DenseMatrix; import breeze.linalg._; import breeze.linalg.{*, diag, DenseMatrix => BDM, DenseVector => BDV}; import breeze.linalg.{DenseMatrix => BDM, _}; import breeze.linalg.{DenseMatrix => BDM}; import breeze.linalg.{DenseMatrix, DenseVector, eigSym, svd}; import breeze.linalg.{DenseMatrix, DenseVector}; import breeze.linalg.{DenseMatrix, Matrix, Vector}; import breeze.linalg.{Vector => BVector}; import htsjdk.samtools.reference.ReferenceSequenceFileFactory; import htsjdk.samtools.util.BlockCompressedFilePointerUtil; import htsjdk.tribble.readers.{TabixReader => HtsjdkTabixReader}; import org.apache.avro.SchemaBuilder; import org.apache.avro.file.DataFileWri",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:1727,test,testCompileOnly,1727,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['testCompileOnly']
Testability,"ping @chrisvittal ; There is 1 failure left, which seems difficult to replicate, and for which I have developed a (small) prior belief that it may be uncorrelated with this PR's changes. . The failure is in the Dataproc test of [cluster-tests/cluster-read-vcfs-check.py, line 143 of HadoopFS, in _fileSystem, new hadoop.fs.Path(filename).getFileSystem(conf)](https://ci2.hail.is/jobs/17044/log). This calls hadoop.fs.FileSystem.get , which in turn calls Configuration.get (instance method). ```java; // In Path.java; public FileSystem getFileSystem(Configuration conf) throws IOException {; return FileSystem.get(this.toUri(), conf);; }. // In FileSystem.java; public static FileSystem get(Configuration conf) throws IOException {; return get(getDefaultUri(conf), conf);; }. public static FileSystem get(final URI uri, final Configuration conf,; final String user) throws IOException, InterruptedException {; String ticketCachePath =; conf.get(CommonConfigurationKeys.KERBEROS_TICKET_CACHE_PATH);; UserGroupInformation ugi =; UserGroupInformation.getBestUGI(ticketCachePath, user);; return ugi.doAs(new PrivilegedExceptionAction<FileSystem>() {; @Override; public FileSystem run() throws IOException {; return get(uri, conf);; }; });; }; ```. For some reasons the line numbers reported in CI log don't quite match up (using either IntelliJ's goto def - which could say be the result of referencing a different copy on the system - or the [2.7.1 branch on GitHub](https://github.com/apache/hadoop/blob/branch-2.7.1/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java)), so I followed the parameterization. Still need to figure out why lines reported don't match, but I've seen line number differences before between that reported for the compiled binary, and the uncompiled source. Lines of evidence:; 1) The line specified in the ci log suggests that Hadoop's fileSystem.open() command fails. It appears from examining the line and source, that the Hadoop Configurat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803:220,test,test,220,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803,3,"['log', 'test']","['log', 'test', 'tests']"
Testability,"pipeline/pipeline-f559bb010746/__TASK__3/60d62d9d;; __RESOURCE_FILE__20=/io/pipeline/pipeline-f559bb010746/inputs/6d001f3e; Rscript; /usr/local/bin/step2_SPAtests.R --vcfFile=${__RESOURCE_FILE__18} --vcfFileIndex=${__RESOURCE_FILE__19}; --vcfField=GT --minMAF=0 --minMAC=1 --maxMAFforGroupTest=0.5 --chrom=chr1 --sampleFile=${__RESOURCE_FILE__747}; --GMMATmodelFile=${__RESOURCE_FILE__6} --varianceRatioFile=${__RESOURCE_FILE__8}; --SAIGEOutputFile=${__RESOURCE_FILE__748} --groupFile=${__RESOURCE_FILE__20}; --sparseSigmaFile=${__RESOURCE_FILE__9} --IsSingleVarinGroupTest=TRUE --IsOutputAFinCaseCtrl=TRUE; 2>&1 | tee ${__RESOURCE_FILE__749}; env:; - name: POD_IP; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: status.podIP; - name: POD_NAME; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: metadata.name; image: konradjk/saige:0.35.8.2.2; imagePullPolicy: IfNotPresent; name: main; resources:; requests:; cpu: ""1""; memory: 500M; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /gsa-key; name: gsa-key; - mountPath: /io; name: batch-2554-job-4-8vvgl; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: default-token-8h99c; readOnly: true; dnsPolicy: ClusterFirst; enableServiceLinks: true; nodeName: gke-vdc-preemptible-pool-9c7148b2-4gq2; priority: 500000; priorityClassName: user; restartPolicy: Never; schedulerName: default-scheduler; securityContext: {}; serviceAccount: default; serviceAccountName: default; terminationGracePeriodSeconds: 30; tolerations:; - key: preemptible; value: ""true""; - effect: NoExecute; key: node.kubernetes.io/not-ready; operator: Exists; tolerationSeconds: 300; - effect: NoExecute; key: node.kubernetes.io/unreachable; operator: Exists; tolerationSeconds: 300; volumes:; - name: gsa-key; secret:; defaultMode: 420; secretName: konradk-gsa-key; - name: batch-2554-job-4-8vvgl; persistentVolumeClaim:; claimName: batch-2554-job-4-8vvgl; - name: default-token-8h99c; secret:; defaultMode: ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649:14091,log,log,14091,https://hail.is,https://github.com/hail-is/hail/issues/6466#issuecomment-505429649,1,['log'],['log']
Testability,"ple, if I replace ""implicatedSample"" by pasting the body in the closure instead, then the serialization error at that point goes away. but there are a bunch of other ones from the toLine below. ```; org.apache.spark.SparkException: Task not serializable; at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.ru",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1275,test,testng,1275,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,ply$27.apply(ContextRDD.scala:359); 	at is.hail.sparkextras.ContextRDD$$anonfun$run$1$$anonfun$apply$5.apply(ContextRDD.scala:139); 	at is.hail.sparkextras.ContextRDD$$anonfun$run$1$$anonfun$apply$5.apply(ContextRDD.scala:139); 	at scala.collection.Iterator$$anon$12.nextCur(Iterator.scala:434); 	at scala.collection.Iterator$$anon$12.hasNext(Iterator.scala:440); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1336); 	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59); 	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104); 	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48); 	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310); 	at scala.collection.AbstractIterator.to(Iterator.scala:1336); 	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302); 	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1336); 	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289); 	at scala.collection.AbstractIterator.toArray(Iterator.scala:1336); 	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:936); 	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:936); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87); 	at org.apache.spark.scheduler.Task.run(Task.scala:108); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:338); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-f80a6f10bc84; Error summary: AssertionError: assertion failed; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719:12335,Assert,AssertionError,12335,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412764719,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"plyBinaryPrimOp(Add(),GetField(Ref(__iruid_400,struct{x: call, y: int32}),y),GetField(GetTupleElement(Ref(__iruid_401,tuple(struct{AC: array<int32>, AF: array<float64>, AN: int32, homozygote_count: array<int32>})),0),AN))),WrappedArray(AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None)))))). is.hail.utils.HailException: not a streamable IR: (GetTupleElement 0; (In PCTuple[0:PCArray[PCStruct{x:PCCall,y:PInt32}]] 0)); ...; at is.hail.expr.ir.EmitStream$.is$hail$expr$ir$EmitStream$$emitStream$1(EmitStream.scala:850). ```scala; private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TContainer]) {; ToStream(node); } else {; node; }; }; }; }; ````. with . ```scala; private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TContainer]) {; ToStream(node); } else {; node; }; }; }; }. 4 failures in IRSuite, again testArrayAggScan:. Before Lower: ; MakeTuple(ArrayBuffer((0,RunAggScan(GetTupleElement(In(0,PCTuple[0:PCArray[PCStruct{x:PCCall,y:PInt32}]]),0),__iruid_400,Begin(ArrayBuffer(InitOp(0,ArrayBuffer(I32(2)),AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None),CallStats()))),Begin(ArrayBuffer(SeqOp(0,ArrayBuffer(GetField(Ref(__iruid_400,struct{x: call, y: int32}),x)),AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None),CallStats()))),Let(__iruid_401,ResultOp(0,WrappedArray(AggStateSignature(Map(CallStats() -> AggSignature(CallStats(),ArrayBuffer(int32),ArrayBuffer(call))),CallStats(),None))),ApplyBinaryPrimOp(Add(),GetField(Ref(__iruid_400,struct{x: call, y: int32}),y),GetField(GetTupleElement(Ref(__iruid_401,tuple(struct{AC: array<int32>, AF: array<float64>, AN: int32, homozygote_count: array<int32>})),0),AN))),WrappedArray(AggStateSignature(Map(CallStat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113:6771,test,testArrayAggScan,6771,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113,1,['test'],['testArrayAggScan']
Testability,presumably related to: https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/topic/mysterious.20behavior/near/182390817 (log posted next message down),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7638#issuecomment-561430746:137,log,log,137,https://hail.is,https://github.com/hail-is/hail/issues/7638#issuecomment-561430746,1,['log'],['log']
Testability,"priate init method. Edit: re-running ./gradlew shadowJar fixes this. Tests are not passing, but seemingly not because of any of these changes. If I checkout last commit in master, they also fail. Furthermore, I can restore all changes from last FS PR manually, and no benefit. ```; HEAD is now at 117c365c3 [ci] also handle batch Ready state (#5909); (hail) alex:~/projects/hail/hail/python:$ pytest test/ -x; ======================================================================================= test session starts ========================================================================================; platform darwin -- Python 3.6.8, pytest-3.8.0, py-1.7.0, pluggy-0.8.1; rootdir: /Users/alex/projects/hail/hail/python, inifile:; plugins: xdist-1.22.2, metadata-1.8.0, html-1.19.0, forked-1.0.2; collected 591 items . test/hail/test_context.py E. ============================================================================================== ERRORS ==============================================================================================; _______________________________________________________________________ ERROR at setup of Tests.test_init_hail_context_twice _______________________________________________________________________. def startTestHailContext():; global _initialized; if not _initialized:; url = os.environ.get('HAIL_TEST_SERVICE_BACKEND_URL'); if url:; hl.init(master='local[2]', min_block_size=0, quiet=True, _backend=hl.backend.ServiceBackend(url)); else:; > hl.init(master='local[2]', min_block_size=0, quiet=True). test/hail/helpers.py:18: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwargs_); hail/context.py:264: in init; _optimizer_iterations,_backend); hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928:1221,Test,Tests,1221,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928,1,['Test'],['Tests']
Testability,probably can unkey in python to fix this. also need to test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4508#issuecomment-427574724:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/issues/4508#issuecomment-427574724,1,['test'],['test']
Testability,"ps://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2964,test,test,2964,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,pushed a bunch more tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5201#issuecomment-459357328:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/5201#issuecomment-459357328,1,['test'],['tests']
Testability,put the test back in,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2422#issuecomment-343985863:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/2422#issuecomment-343985863,1,['test'],['test']
Testability,"putting a test in hail-ci-build seems like the wrong thing. We should just run all our tests against a cluster-mode spark, no?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449492847:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449492847,2,['test'],"['test', 'tests']"
Testability,pytest and jvm-test pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8124#issuecomment-588572988:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/8124#issuecomment-588572988,1,['test'],['test']
Testability,python tests are fucked. will look tomorrow.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7959#issuecomment-580019710:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/7959#issuecomment-580019710,1,['test'],['tests']
Testability,qmOq13; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	| ; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:185) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExec,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:8822,test,test-,8822,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false input=[(RodBinding name=input source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.unfiltered.vcf)] recal_file=(RodBinding name=recal_file source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recal) tranches_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.tranches out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub ts_filter_level=98.5 ignore_filter=null mode=SNP filter_mismatching_base_and_quals=false""; ##CombineVariants=""analysis_type=CombineVariants input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:1953,stub,stubs,1953,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"r node syslogs as well as the Hail log file. For some reason all logs other than the Hail logs are missing from this file. We separately need to determine why all the Spark logs etc. are missing. Based on the syslog, after system start up and just before the Jupyter notebook starts, the system is already using ~8,500MiB:; ```; Nov 22 14:29:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 43808 of 52223 MiB (83.89%), swap free: 0 of 0 MiB ( 0.00%); ```; So, the effective maximum memory that Hail could possibly use is around 43808MiB. After the Notebook and Spark initialize we're down to 42,700 MiB (about ~1000MiB more in use).; ```; Nov 22 14:30:06 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 42760 of 52223 MiB (81.88%), swap free: 0 of 0 MiB ( 0.00%); ```. `hailctl` sets the VM RAM limit to 80% of the instance type's memory, so 80% * 52GiB = 42598MiB. This means the JVM is permitted to effectively use all the remaining memory. At time of sigkill the total memory allocated by the JVM was about 2000MiB below the max heap size. Note that the heap is contained within all memory allocated by the JVM.; ```; Nov 22 15:31:05 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 43 of 52223 MiB ( 0.08%), swap free: 0 of 0 MiB ( 0.00%); Nov 22 15:31:09 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: low memory! at or below SIGTERM limits: mem 0.12%, swap 1.00%; Nov 22 15:31:09 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: sending SIGTERM to process 8421 uid 0 ""java"": badness 1852, VmRSS 40578 MiB; ```. Indeed, the VmRSS is the memory in use from the kernel's perspective so it includes any off-heap memory created by Hail. The Hail log indicates the region pools are tiny, ~10s of MiB. Not a concern. After the JVM is killed, memory jumps back up to 40683MiB (which checks out, that's roughly what the killed process was using).; ```; Nov 22 15:31:10 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 40683 of 52223 MiB (77.90%), swap free: 0 of 0 MiB ( 0.00%); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419:2461,log,log,2461,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419,1,['log'],['log']
Testability,r | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1479,test,test,1479,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,r$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_382]; 	at java.lang.Thread.run(Thread.java:750) ~[?:1.8.0_382]; Caused by: is.hail.relocated.com.google.cloud.storage.StorageException: Missing Range header in response; 	|> PUT https://storage.googleapis.com/upload/storage/v1/b/1-day/o?name=parallelizeAndComputeWithIndex/al3OJfYZMMNoi9F2jvcAf0jBirVTayRVqro03dnIa1g%3D/result.7028&uploadType=resumable&upload_id=ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	| ; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:185) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:8301,test,test-,8301,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,r.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWrite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4991,Test,TestNG,4991,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,r.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWri,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4798,Test,TestNG,4798,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,r.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:10958,test,test-,10958,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"r: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/10 09:10:21 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; ```; ----------------------------; ```; >>> rdd = sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; ```; ----------------------------------; ```; >>> vds = hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailCo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071:1649,test,test,1649,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071,1,['test'],['test']
Testability,rage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:13339,test,test-,13339,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,random test failure...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6349#issuecomment-504085816:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/6349#issuecomment-504085816,1,['test'],['test']
Testability,"rappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0)))) PASSED; Running test: Test method testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1)))) PASSED; Running test: Test method testForwardingOps[4](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyUnaryPrimOp(Negate(),Ref(x,int32))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[4](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyUnaryPrimOp(Negate(),Ref(x,int32)))) PASSED. BUILD SUCCESSFUL. Total time: 2 mins 12.282 secs; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:3636,test,testForwardingOps,3636,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,11,"['Test', 'test']","['Test', 'test', 'testForwardingOps']"
Testability,rces_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8324,test,test,8324,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"rdd cannot be accessed in package org.apache.spark.rdd; override def coalesce(maxPartitions: Int, shuffle: Boolean = false, partitionCoalescer: Option[PartitionCoalescer] = Option.empty); ^; missing or invalid dependency detected while loading class file 'package.class'.; Could not access type DataFrame in package org.apache.spark.sql.package,; because it (or its dependencies) are missing. Check your build definition for; missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); A full rebuild may help if 'package.class' was compiled against an incompatible version of org.apache.spark.sql.package.; /gpfs/home/tpathare/haillatest/hail/src/main/scala/is/hail/variant/VariantSampleMatrix.scala:1143: ambiguous reference to overloaded definition,; both method coalesce in class OrderedRDD of type (maxPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[<error>])(implicit ord: Ordering[(is.hail.variant.Variant, (is.hail.annotations.Annotation, Iterable[is.hail.variant.Genotype]))])org.apache.spark.rdd.RDD[(is.hail.variant.Variant, (is.hail.annotations.Annotation, Iterable[is.hail.variant.Genotype]))]; and method coalesce in class RDD of type (numPartitions: Int, shuffle: Boolean)(implicit ord: Ordering[(is.hail.variant.Variant, (is.hail.annotations.Annotation, Iterable[is.hail.variant.Genotype]))])org.apache.spark.rdd.RDD[(is.hail.variant.Variant, (is.hail.annotations.Annotation, Iterable[is.hail.variant.Genotype]))]; match argument types (Int,shuffle: Boolean); Error occurred in an application involving default arguments.; start.copy(rdd = start.rdd.coalesce(k, shuffle = shuffle)(null).asOrderedRDD); ^; 5 errors found; :compileScala FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':compileScala'.; > Compilation failed. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 42.509 secs",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1327#issuecomment-277494831:3444,log,log,3444,https://hail.is,https://github.com/hail-is/hail/issues/1327#issuecomment-277494831,1,['log'],['log']
Testability,"re: test failures, that policy makes sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3322#issuecomment-379580976:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/3322#issuecomment-379580976,1,['test'],['test']
Testability,"ready for review, of course it's failing the tests right now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9379#issuecomment-685130327:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/9379#issuecomment-685130327,1,['test'],['tests']
Testability,ready to approve once tests passing (test_hail_java has current failures),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8243#issuecomment-594854003:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/8243#issuecomment-594854003,1,['test'],['tests']
Testability,"ready to look at, all tests pass. open to suggestions for the name, not happy with it. would prefer to just rename the new function, smaller change, limited time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958#issuecomment-578213912:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/7958#issuecomment-578213912,1,['test'],['tests']
Testability,"rebased and testing locally first, then will push and let ol' CI have a go",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2908#issuecomment-367150888:12,test,testing,12,https://hail.is,https://github.com/hail-is/hail/pull/2908#issuecomment-367150888,1,['test'],['testing']
Testability,"rebased on diagonal bug fix, added the Python diagonal test back in",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3164#issuecomment-374383075:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/3164#issuecomment-374383075,1,['test'],['test']
Testability,rebased. one merge change in `object TableValue` `apply` I wasn't sure about (a constructor deleted). tests likely failing. will follow up on both tonight.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6425#issuecomment-509820038:102,test,tests,102,https://hail.is,https://github.com/hail-is/hail/pull/6425#issuecomment-509820038,1,['test'],['tests']
Testability,"ref: https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/topic/Error.20importing.20dbsnp.20VCF/near/177209550. I have confirmed that the test I added fails with the same error laurent saw in the linked conversation, and passes with the change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7182#issuecomment-537763919:155,test,test,155,https://hail.is,https://github.com/hail-is/hail/pull/7182#issuecomment-537763919,1,['test'],['test']
Testability,"regarding doc test failure, you need `g.DP`, not `g.dp`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2497#issuecomment-348701713:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/2497#issuecomment-348701713,1,['test'],['test']
Testability,renced case analysis in 2.17.1](https://github.com/googleapis/java-storage/blame/v2.17.1/google-cloud-storage/src/main/java/com/google/cloud/storage/BlobWriteChannel.java). There seems to have been a rewrite [two months ago](https://github.com/googleapis/java-storage/blame/main/google-cloud-storage/src/main/java/com/google/cloud/storage/BlobWriteChannel.java) (here's [the main commit](https://github.com/googleapis/java-storage/commit/1b52a1053130620011515060787bada10c324c0b)). That landed in [2.25.0](https://github.com/googleapis/java-storage/releases/tag/v2.25.0) which was released in July. ```; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:1502,test,test-ezlis,1502,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['test-ezlis']
Testability,"repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4569,test,test,4569,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"res=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.indels.unfiltered.vcf) mask=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub filterExpression=[FS>200.0, QD<2.0, ReadPosRankSum<-20.0, InbreedingCoeff<-0.8] filterName=[Indel_FS, Indel_QD, Indel_ReadPosRankSum, Indel_InbreedingCoeff] genotypeFilterExpression=[] genotypeFilterName=[] clusterSize=3 clusterWindowSize=0 maskExtension=0 maskName=Mask missingValuesInExpressionsShouldEvaluateAsFailing=false invalidatePreviousFilters=false filter_mismatching_base_and_quals=false""; ##contig=<ID=1,length=248956422>; ##contig=<ID=2,length=242193529>; ##contig=<ID=3,length=198295559>; ##contig=<ID=4,length=190214555>; ##contig=<ID=5,length=181538259>; ##contig=<ID=6,length=170805979>; ##contig=<ID=7,length=159345973>; ##contig=<ID=8,length=145138636>; ##contig=<ID=9,length=138394717>; ##contig=<ID=10,length=133797422>; ##contig=<ID=11,length=135086622>; ##contig=<ID=12,length=133275309>; ##contig=<ID=13,length=114364328>; ##contig=<ID=14,length=107043718>; ##contig=<ID=15,length",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:20600,stub,stubs,20600,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1348,test,test,1348,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:297); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3115,test,testSeekMoreThanMaxInt,3115,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testSeekMoreThanMaxInt']
Testability,retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:317); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:3308,test,testSeekMoreThanMaxInt,3308,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testSeekMoreThanMaxInt']
Testability,"return CreateDatabaseStep(; + return CreateDatabase2Step(; params,; json['databaseName'],; json['namespace'],; @@ -1111,12 +1113,12 @@ EOF; attributes={'name': self.name},; secrets=[; {; - 'namespace': self.database_server_config_namespace,; + 'namespace': self.namespace,; 'name': 'database-server-config',; 'mount_path': '/sql-config',; }; ],; - service_account={'namespace': DEFAULT_NAMESPACE, 'name': 'ci-agent'},; + service_account={'namespace': self.namespace, 'name': 'admin'},; input_files=input_files,; parents=[self.create_passwords_job] if self.create_passwords_job else self.deps_parents(),; network='private',; @@ -1125,42 +1127,4 @@ EOF; ); ; def cleanup(self, batch, scope, parents):; - if scope in ['deploy', 'dev'] or self.cant_create_database:; - return; -; - cleanup_script = f'''; -set -ex; -; -commands=$(mktemp); -; -cat >$commands <<EOF; -DROP DATABASE IF EXISTS \\`{self._name}\\`;; -DROP USER IF EXISTS '{self.admin_username}';; -DROP USER IF EXISTS '{self.user_username}';; -EOF; -; -until mysql --defaults-extra-file=/sql-config/sql-config.cnf <$commands; -do; - echo 'failed, will sleep 2 and retry'; - sleep 2; -done; -; -'''; -; - self.cleanup_job = batch.create_job(; - CI_UTILS_IMAGE,; - command=['bash', '-c', cleanup_script],; - attributes={'name': f'cleanup_{self.name}'},; - secrets=[; - {; - 'namespace': self.database_server_config_namespace,; - 'name': 'database-server-config',; - 'mount_path': '/sql-config',; - }; - ],; - service_account={'namespace': DEFAULT_NAMESPACE, 'name': 'ci-agent'},; - parents=parents,; - always_run=True,; - network='private',; - regions=[REGION],; - ); + pass; diff --git a/ci/test/resources/build.yaml b/ci/test/resources/build.yaml; index e6f67bb486..662c873590 100644; --- a/ci/test/resources/build.yaml; +++ b/ci/test/resources/build.yaml; @@ -190,7 +190,7 @@ steps:; to: /io/pyproject.toml; dependsOn:; - hello_image; - - kind: createDatabase; + - kind: createDatabase2; name: hello_database; databaseName: hello; image:; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600:3756,test,test,3756,https://hail.is,https://github.com/hail-is/hail/pull/13022#issuecomment-1542233600,4,['test'],['test']
Testability,rg.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.Li,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1537,test,test,1537,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],['test']
Testability,rialization error at that point goes away. but there are a bunch of other ones from the toLine below. ```; org.apache.spark.SparkException: Task not serializable; at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1367,test,testng,1367,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"rk.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 18:18:30 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583:1928,test,test,1928,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321215583,1,['test'],['test']
Testability,rkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1731,Test,TestRunner,1731,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestRunner']
Testability,"rly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aiohttp. This is strange to say the least. I was really curious about this, so I ran the bench. First, I upgraded Sanic to a recent version. Then I ran their test. In short, their results were not what I found. Sanic is 50% faster, and the timeouts are what you'd expect. 26 timeouts for Sanic, 45 for aiohttp. Sanic Run 1:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 640.64ms 947.31ms 7.97s 85.89%; Req/Sec 385.62 137.55 2.32k 77.21%; 274143 requests in 1.00m, 41.70MB read; Socket errors: connect 0, read 2072, write 0, ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:3132,test,tests,3132,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['test'],['tests']
Testability,"rm... using builtin-java classes where applicable; 17/08/10 08:41:32 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 08:41:32 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 3.5.2 (default, Jul 12 2017 14:00:23); SparkSession available as 'spark'. In [1]: ; ```; -----------------------------; Step2 : read the file with sc.textFile; ```; In [1]: rdd = sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); ```; -----------------------------; Step3, import hail and read the file with hail:; ```; In [2]: from hail import *; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); <ipython-input-2-3181c5d8fca5> in <module>(); ----> 1 from hail import *. /opt/Software/hail/python/hail/__init__.py in <module>(); ----> 1 import hail.expr; 2 from hail.representation import *; 3 from hail.context import HailContext; 4 from hail.dataset import VariantDataset; 5 from hail.expr import *. /opt/Software/hail/python/hail/expr.py in <module>(); 1 import abc; 2 from hail.java import scala_object, Env, jset; ----> 3 from hail.representation import Variant, AltAllele, Genotype, Locus, Interval, Struct, Call; 4 ; 5 . /opt/Software/hail/python/hail/representation/__init__.py in <module>(); ----> 1 from hail.representation.variant import Variant, Locus, AltAllele; 2 from hail.representation.interval import Interv",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160:2178,test,test,2178,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321420160,1,['test'],['test']
Testability,"roduction work:; ```; /Users/dking/projects/hail/batch/batch/worker/worker.py:484: # * gcr.io/hail-vdc/hailgenetics/python-dill; /Users/dking/projects/hail/batch/batch/worker/worker.py:705: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/datasets/extract/extract_CADD.py:26: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (sel",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1079,test,test,1079,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['test'],['test']
Testability,rorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Nati,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1955,test,testng,1955,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"rtionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.execute(BlockMatrixIR.scala:269); E 	at is.hail.expr.ir.BlockMatrixMap2.execute(BlockMatrixIR.scala:393); E 	at is.hail.expr.ir.Interpret$.run(Interpret.scala:875); E 	at is.hail.expr.ir.Interpret$.alreadyLowered(Interpret.scala:59); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.evaluate$1(LowerOrInterpretNonCompilable.scala:20); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:67); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.rewrite$1(LowerOrInterpretNonCompilable.scala:53); E 	at is.hail.expr.ir.LowerOrInterpretNonCompilable$.apply(LowerOrInterpretNonCompilable.scala:72); E 	at is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass$.transform(LoweringPass.scala:69); E 	at is.hail.expr.ir.lowering.LoweringPass.$anonfun$apply$3(LoweringPass.scala:16); E 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:81); E 	at is.hail.expr.ir.lowering.LoweringPass.$a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:2850,assert,assert,2850,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,1,['assert'],['assert']
Testability,rument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneH,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1483,test,test,1483,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,running tests now!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10900#issuecomment-978194003:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/10900#issuecomment-978194003,1,['test'],['tests']
Testability,ry>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2371,Test,TestCaseFunction,2371,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,2,['Test'],['TestCaseFunction']
Testability,s UP-TO-DATE; :classes UP-TO-DATE; :compileTestJava UP-TO-DATE; :compileTestScala UP-TO-DATE; :processTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :test; objc[30146]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined. Gradle suite > Gradle test > org.broadinstitute.hail.annotations.AnnotationsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSui,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1060,test,testSameAsOrig,1060,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],"['test', 'testSameAsOrig']"
Testability,"s config was needed & works successfuly for an old version of Hail (0.2.60)... can be revisit if not appropriate for recent version; ```sh; sudo mkdir /opt/hail/; sudo ln -sf /home/hadoop/.local/lib/python3.9/site-packages/hail/backend /opt/hail/backend; ```; * start pyspark; ```sh; $ pyspark; Python 3.9.18 (main, Oct 25 2023, 05:26:35) ; [GCC 7.3.1 20180712 (Red Hat 7.3.1-17)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 3.3.2-amzn-0.1; /_/. Using Python version 3.9.18 (main, Oct 25 2023 05:26:35); Spark context Web UI available at http://ip-192-168-125-39.ap-southeast-1.compute.internal:4040; Spark context available as 'sc' (master = yarn, app id = application_1698211907929_0001).; SparkSession available as 'spark'.; >>> import hail as hl; >>> hl.version(); '0.2.124-e739a95489e4'; hl.init(sc); pip-installed Hail requires additional configuration options in Spark referring; to the path to the Hail Python module directory HAIL_DIR,; e.g. /path/to/python/site-packages/hail:; spark.jars=HAIL_DIR/backend/hail-all-spark.jar; spark.driver.extraClassPath=HAIL_DIR/backend/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jarRunning on Apache Spark version 3.3.2-amzn-0.1; SparkUI available at http://ip-192-168-110-1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949:1766,log,logging,1766,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949,1,['log'],['logging']
Testability,"s follows:; ```; [root@tele-1 ~]# PYSPARK_PYTHON=""ipython"" pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; /usr/local/lib/python3.5/site-packages/IPython/core/history.py:228: UserWarning: IPython History requires SQLite, your history will not be saved; warn(""IPython History requires SQLite, your history will not be saved""); Python 3.5.2 (default, Jul 12 2017, 14:00:23) ; Type ""copyright"", ""credits"" or ""license"" for more information. IPython 5.1.0 -- An enhanced Interactive Python.; ? -> Introduction and overview of IPython's features.; %quickref -> Quick reference.; help -> Python's own help system.; object? -> Details about 'object', use 'object??' for extra details.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/09 12:51:55 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 12:51:55 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 12:51:55 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 12:51:55 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 12:51:56 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ ver",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321152609:1053,log,logging,1053,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321152609,1,['log'],['logging']
Testability,"s would be great. My current thoughts on this:. I only looked at the failure in PCA. I was never able to reproduce. My next step to try to reproduce was to run PCA on Lindo's full dataset on dataproc (can't use batch because the error is in spark PCA). I did look carefully through the stack trace, trying to understand what could possibly be happening. The number 177860 from the error isn't either matrix dimension, which is 210234 by 8893. Everything in `org.apache.spark.mllib.linalg.EigenValueDecomposition$.symmetricEigs(EigenValueDecomposition.scala:106)` is independent of the number of rows, so only the number 8893 of cols should be relevent. I wrote a simple test to execute spark PCA with 8893 rows in scala, so I could step through with a debugger:; ```scala; var mt = rangeMatrix(10000, 8893); mt = MatrixMapEntries(mt, InsertFields(Ref(""g"", mt.typ.entryType), Seq(""a"" -> F64(1)))); val t = MatrixToTableApply(mt, PCA(""a"", 10, false)); val n = TableToValueApply(t, ForceCountTable()); assertEvalsTo(n, 8893L); ```; The array `v` in `symmetricEigs` has length 177860 = 8893*20, and I didn't find anything else with that size. The only line I could find that could generate an exception that looks like this is line 555 of `dev.ludovic.netlib.arpack.AbstractARPACK.dsaupd`; ```scala; public void dsaupd(org.netlib.util.intW ido, String bmat, int n, String which, int nev, org.netlib.util.doubleW tol, double[] resid, int offsetresid, int ncv, double[] v, int offsetv, int ldv, int[] iparam, int offsetiparam, int[] ipntr, int offsetipntr, double[] workd, int offsetworkd, double[] workl, int offsetworkl, int lworkl, org.netlib.util.intW info) {; if (debug) System.err.println(""dsaupd"");; checkArgument(""DSAUPD"", 2, lsame(""I"", bmat) || lsame(""G"", bmat));; checkArgument(""DSAUPD"", 3, n >= 0);; checkArgument(""DSAUPD"", 4, lsame(""LA"", which) || lsame(""SA"", which) || lsame(""LM"", which) || lsame(""SM"", which) || lsame(""BE"", which));; checkArgument(""DSAUPD"", 5, 0 < nev && nev < n);; checkArgum",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313:1025,assert,assertEvalsTo,1025,https://hail.is,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313,1,['assert'],['assertEvalsTo']
Testability,"s://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-9443-1a00bb2e9848.png). LRT iterations:; ![logreglrtiter](https://cloud.githubusercontent.com/assets/3201642/22859676/816119b4-f0b2-11e6-8401-2b6600d6f443.png). Firth iterations:; ![logregfirthiter](https://cloud.githubusercontent.com/assets/3201642/22859677/883c4a6a-f0b2-11e6-9aad-b79e613f2ba7.png). For the record, Wald is mis-calibrated for small counts:; ![logregpvalwaldlrt](https://cloud.githubusercontent.com/assets/3201642/22859691/f629f5fe-f0b2-11e6-98fe-b96b3ef497ec.png). Score is more conservative than LRT:; ![logregpvalscorelrt](https://cloud.githubusercontent.com/assets/3201642/22859708/92750f7a-f0b3-11e6-93af-3219eb9e025f.png). Firth is more conservative than score:; ![logregpvalscorefirth](https://cloud.githubusercontent.com/assets/3201642/22859693/fed4555a-f0b2-11e6-9636-2a8075b0a04a.png). And linear betas are super conservative:; ![logregbetafirthlin](https://cloud.githubusercontent.com/assets/3201642/22867304/c63d2b76-f153-11e6-87b3-445c58796695.png). But linear pvals are okay:; ![logregpvalfirthlin](https://cloud.githubusercontent.com/assets/3201642/22867309/dc0f0d70-f153-11e6-840d-308dc0570a6a.png). And essentially identical to score test:; ![logregpvalscorelin](https://cloud.githubusercontent.com/assets/3201642/22867310/e475f730-f153-11e6-9cba-acec78a12964.png). Here's a QQ-plot:; ![logreg qqplot](https://cloud.githubusercontent.com/assets/3201642/23096398/c6c3db0e-f5e9-11e6-97e8-4a565bcc9cb8.png). Here's a QQ-plot restricted to variants with > 20 hets:; ![logreg qqplot 20het](https://cloud.githubusercontent.com/assets/3201642/23096496/ed0cf5b4-f5eb-11e6-8283-d4c02dfb9f76.png)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:3176,log,logregpvalscorefirth,3176,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,7,"['log', 'test']","['logreg', 'logregbetafirthlin', 'logregpvalfirthlin', 'logregpvalscorefirth', 'logregpvalscorelin', 'test']"
Testability,"s=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false input=[(RodBinding name=input source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.unfiltered.vcf)] recal_file=(RodBinding name=recal_file source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recal) tranches_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.tranches out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub ts_filter_level=98.5 ignore_filter=null mode=SNP filter_mismatching_base_and_quals=false""; ##CombineVariants=""analysis_type=CombineVariants input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=n",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:1810,stub,stubs,1810,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,sableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInne,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2194,Test,TestUtils,2194,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,"same as #9851, will rollup if it passes tests",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9852#issuecomment-754163535:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/9852#issuecomment-754163535,1,['test'],['tests']
Testability,sample mmskat group test: . /humgen/gsa-hphome1/sek/akihiro/Software/EPACTS-3.2.6/bin/epacts group --groupf ${GROUP}.txt \; --vcf ${VCF_dir}/FinEst.WGS.QCed_Lipids.chr1.vcf.gz \; --ped ${Phen_dir}/EstoniaOnlyLipids.ped --max-maf 0.01 \; --kin ${Kin_dir}/FinEstKinship.kinf --sepchr --pheno ${PHENO} \; --cov AGE --cov FAST10 --cov SEX \; --cov LCSET.7048 --cov LCSET.7049 --cov LCSET.7123 --cov LCSET.7125 --cov LCSET.7130 --cov LCSET.7131 --cov LCSET.7132 --cov LCSET.7148 --cov LCSET.7162 --cov LCSET.7174 --cov LCSET.7175 --cov LCSET.7176 --cov LCSET.7257 --cov LCSET.7263 --cov LCSET.7308 --cov LCSET.7331 --cov LCSET.7334 --cov LCSET.7339 --cov LCSET.7340 --cov LCSET.7341 --cov LCSET.7353 --cov LCSET.7354 --cov LCSET.7355 --cov LCSET.7356 --cov LCSET.7357 --cov LCSET.7419 --cov LCSET.7420 --cov LCSET.7473 --cov LCSET.7494 \; --test mmskat --out ${OUT}.ESTonly --run 4,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/363#issuecomment-248430677:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/issues/363#issuecomment-248430677,2,['test'],['test']
Testability,scala test is failing due to failed typecheck I think,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3895#issuecomment-405244577:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/3895#issuecomment-405244577,1,['test'],['test']
Testability,scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&u,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4141,Test,TestRunner,4141,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestRunner']
Testability,scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&u,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4334,Test,TestRunner,4334,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestRunner']
Testability,scooped! Cotton must have fixed this in order to make tests pass after rowType is always required.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8443#issuecomment-609863055:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/8443#issuecomment-609863055,1,['test'],['tests']
Testability,"se preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unannotated.vcf) snpEffFile=(RodBinding name=snpEffFile source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snpeff.vcf) dbsnp=(RodBinding name= source=UNBOUND) comp=[] resource=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub annotation=[SnpEff] excludeAnnotation=[] group=[] expression=[] useAllAnnotations=false list=false alwaysAppendDbsnpId=false MendelViolationGenotypeQualityThreshold=0.0 requireStrictAlleleMatch=false filter_mismatching_base_and_quals=false""; ##VariantFiltration=""analysis_type=VariantFiltration input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false perf",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:18664,stub,stubs,18664,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"self.assertEqual is unittest style. We use pytest now, which rewrites Python assert statements to provide good failure messages. New code should use `assert`, I think.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-559186521:5,assert,assertEqual,5,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-559186521,3,['assert'],"['assert', 'assertEqual']"
Testability,"ser move_selected_cells/main. COPY ./resources/ /home/jovyan; ```. And the actual worker creation in notebook.py. ```py; def start_pod(jupyter_token, image, labels={}):; print(""IMAGE IN START IS"", image); pod_id = uuid.uuid4().hex; service_spec = kube.client.V1ServiceSpec(; selector={; 'app': 'notebook-worker',; 'hail.is/notebook-instance': INSTANCE_ID,; 'uuid': pod_id},; ports=[kube.client.V1ServicePort(port=80, target_port=8888)]); service_template = kube.client.V1Service(; metadata=kube.client.V1ObjectMeta(; generate_name='notebook-worker-service-',; labels={; 'app': 'notebook-worker',; 'hail.is/notebook-instance': INSTANCE_ID,; 'uuid': pod_id,; **labels}),; spec=service_spec); svc = k8s.create_namespaced_service(; 'default',; service_template,; _request_timeout=KUBERNETES_TIMEOUT_IN_SECONDS; ); pod_spec = kube.client.V1PodSpec(; containers=[; kube.client.V1Container(; command=[; 'jupyter',; 'notebook',; f'--NotebookApp.token={jupyter_token}',; f'--NotebookApp.base_url=/instance/{svc.metadata.name}/'; ],; name='default',; image=image,; ports=[kube.client.V1ContainerPort(container_port=8888)],; resources=kube.client.V1ResourceRequirements(; requests={'cpu': '1.601', 'memory': '1.601G'}),; readiness_probe=kube.client.V1Probe(; http_get=kube.client.V1HTTPGetAction(; path=f'/instance/{svc.metadata.name}/login',; port=8888)))]); pod_template = kube.client.V1Pod(; metadata=kube.client.V1ObjectMeta(; generate_name='notebook-worker-',; labels={; 'app': 'notebook-worker',; 'hail.is/notebook-instance': INSTANCE_ID,; 'uuid': pod_id,; 'svc_name': svc.metadata.name,; **labels; },),; spec=pod_spec); pod = k8s.create_namespaced_pod(; 'default',; pod_template,; _request_timeout=KUBERNETES_TIMEOUT_IN_SECONDS,; ). return svc, pod; ``` . In the pod definition he runs `jupyter notebook --NotebookApp.token={jupyter_token} --NotebookApp.base_url=/instance/{svc.metadata.name}/` which overrides yours. I'm going to try to run headless mode, and if not, maybe we should install jupyterlab?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5243#issuecomment-460097218:3634,log,login,3634,https://hail.is,https://github.com/hail-is/hail/pull/5243#issuecomment-460097218,1,['log'],['login']
Testability,"ser) throws IOException, InterruptedException {; String ticketCachePath =; conf.get(CommonConfigurationKeys.KERBEROS_TICKET_CACHE_PATH);; UserGroupInformation ugi =; UserGroupInformation.getBestUGI(ticketCachePath, user);; return ugi.doAs(new PrivilegedExceptionAction<FileSystem>() {; @Override; public FileSystem run() throws IOException {; return get(uri, conf);; }; });; }; ```. For some reasons the line numbers reported in CI log don't quite match up (using either IntelliJ's goto def - which could say be the result of referencing a different copy on the system - or the [2.7.1 branch on GitHub](https://github.com/apache/hadoop/blob/branch-2.7.1/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java)), so I followed the parameterization. Still need to figure out why lines reported don't match, but I've seen line number differences before between that reported for the compiled binary, and the uncompiled source. Lines of evidence:; 1) The line specified in the ci log suggests that Hadoop's fileSystem.open() command fails. It appears from examining the line and source, that the Hadoop Configuration object could be null, which suggests a serialization error in HadoopFS. However, there are many others tests that by touch HadoopFS serialization, and none of them have problems. If it's not a serialization error (say the URI object that hadoop looks for is null, or CACHE is null), it would not seem PR specific. 2) On local, with or without the google storage connector, I cannot replicate the error in cluster-read-vcfs.py. Attempts to replicate:; 1) Local hail install, not using google storage connector, and reading 2 local vcfs:. ```python; gvcfs = ['./HG00096.g.vcf.gz',; './HG00268.g.vcf.gz']; hl.init(default_reference='GRCh38'); parts = [; {'start': {'locus': {'contig': 'chr20', 'position': 17821257}},; 'end': {'locus': {'contig': 'chr20', 'position': 18708366}},; 'includeStart': True,; 'includeEnd': True},; {'start': {'locus': {'contig': 'c",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803:1868,log,log,1868,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-494037803,1,['log'],['log']
Testability,"serguide/building_java_projects.html#sec:java_dependency_management_overview) (search for ""compile""):. > **Why no compile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our test code references these third-party classes:; ```; import breeze.linalg.DenseMatrix; import breeze.linalg._; import breeze.linalg.{*, diag, DenseMatrix => BDM, DenseVector => BDV}; import breeze.linalg.{DenseMatrix => BDM, _}; import breeze.linalg.{DenseMatrix => BDM}; import breeze.linalg.{DenseMatrix, DenseVector, eigSym, svd}; import breeze.linalg.{DenseMatrix, DenseVector}; import breeze.linalg.{DenseMatrix, Matrix, Vector}; import breeze.linalg.{Vector => BVector}; import htsjdk.samtools.reference.ReferenceSequenceFileFactory; import htsjdk.samtools.util.BlockCompressedFilePointerUtil; import htsjdk.tribble.read",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:1601,test,testCompileClasspath,1601,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['testCompileClasspath']
Testability,sertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG.run(TestNG.java:1060); at org.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1561,test,testng,1561,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,should make the tests significantly faster by removing the slowest one.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2202#issuecomment-327510614:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/2202#issuecomment-327510614,1,['test'],['tests']
Testability,"should pass now. I reverted the requiredness change in TableRange, so I think the test would pass on master now, but will fail as soon as Cotton's meatball goes in (Without my fix)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8443#issuecomment-609062840:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/8443#issuecomment-609062840,1,['test'],['test']
Testability,sionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:9699,test,test-,9699,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"so like to report a similar `orjson.JSONDecodeError: unexpected character: line 1 column 1 (char 0)` bug first reported by https://discuss.hail.is/t/hail-fails-after-installing-it-on-a-single-computer/3653. Hail installed from https://anaconda.org/sfe1ed40/hail; EDIT: the same error occurs after `pip install hail` into a fresh conda env, which produced hail `version 0.2.130-bea04d9c79b5`. Terminal output: ; ```; Python 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import hail as hl; hl.init(); >>> hl.init(); SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; Running on Apache Spark version 3.4.1; SparkUI available at http://xxxx:xxxx; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.127-d18228b9bc5b; LOGGING: writing to xxxx.log; >>> hl.utils.range_table(10).collect(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-1234>"", line 2, in collect; File ""/xxxx/lib/python3.10/site-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/xxxx/lib/python3.10/site-packages/hail/table.py"", line 2213, in collect; return Env.backend().execute(e._ir, timed=_timed); File ""/xxxx/lib/python3.10/site-packages/hail/backend/backend.py"", line 188, in execute; result, timings = self._rpc(ActionTag.EXECUTE, payload); File ""/xxxx/lib/python3.10/site-packages/hail/backend/py4j_backend.py"", line 219, in _rpc; error_json = orjson.loads(resp.content); orjson.JSONDecodeError: unexpected character: line 1 column 1 (char 0); ```. Log file:; ```; 2024-04-25 16:07:16.773 Hail: INFO: SparkUI: http://xxxx:xxxx; 2024-04-25 16:07:21.589 Hail: INFO: Running Hail version 0.2.127-d18228b9bc5b; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14049#issuecomment-2077624076:1081,LOG,LOGGING,1081,https://hail.is,https://github.com/hail-is/hail/issues/14049#issuecomment-2077624076,3,"['LOG', 'Log', 'log']","['LOGGING', 'Log', 'log']"
Testability,so tests pass; happy to throw this behind a feature flag anyway,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8522#issuecomment-615506715:3,test,tests,3,https://hail.is,https://github.com/hail-is/hail/pull/8522#issuecomment-615506715,1,['test'],['tests']
Testability,some arguments in favor:; 1) symmetry (more logical from dev standpoint); 2) future proofing (i'd bet there are labs focused on structural variation in Y that already phase in PAR); 3) this way we are very explicit about our definition of PAR on Y. Who knows how it was defined for any given data set (though our current settings are consistent with GATK).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/499#issuecomment-235430971:44,log,logical,44,https://hail.is,https://github.com/hail-is/hail/pull/499#issuecomment-235430971,1,['log'],['logical']
Testability,some failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8574#issuecomment-615356354:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/8574#issuecomment-615356354,1,['test'],['tests']
Testability,some inference assertion failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8013#issuecomment-580526563:15,assert,assertion,15,https://hail.is,https://github.com/hail-is/hail/pull/8013#issuecomment-580526563,1,['assert'],['assertion']
Testability,"something is wrong with CI tests, I'll look into it as soon as I can",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4924#issuecomment-447375781:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/4924#issuecomment-447375781,1,['test'],['tests']
Testability,"sorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:237); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). ```. I instead tried to run the same code in two separate jupyter notebooks, with the same code inside but different ways to initialize the hailcontext, one like this (works and exports):. ```; from hail import *; hc = HailContext(); ```; With startup messages looking like this:. ```; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 18/01/08 13:51:03 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 18/01/08 13:51:03 WARN SparkConf: In Spark 1.0 and later spark.local.dir will be overridden by the value set by the cluster manager (via SPARK_LOCAL_DIRS in mesos/standalone and LOCAL_DIRS in YARN).; 18/01/08 13:51:03 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783:5828,log,logging,5828,https://hail.is,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783,1,['log'],['logging']
Testability,"sorry, I didn't quite understand your last comment. Suppose we have a `PFixedLengthArray(length: Int, element: PType, required: Boolean)`. We need an algorithm that will have the following properties:; ```; unify(; PCanonicalArray(PInt32Required, true),; PFixedLengthArray(1, PInt32Required, false)); returns PCanonicalArray(PInt32Required, false); ```. ```; unify(; PFixedLengthArray(1, PInt32Required, false)); PCanonicalArray(PInt32Required, true),; returns PCanonicalArray(PInt32Required, false); ```. ```; unify(; PFixedLengthArray(1, PInt32Required, false),; PFixedLengthArray(1, PInt32Required, true)); returns PFixedLengthArray(1, PInt32Required, false); ```. calling something on the head is wrong, as is matching on the head alone. This is going to be a complicated thing, and I want all the logic (at least for each interface like PArray) in the same place.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7927#issuecomment-576372543:802,log,logic,802,https://hail.is,https://github.com/hail-is/hail/pull/7927#issuecomment-576372543,1,['log'],['logic']
Testability,"sortBy is called by hl.sorted in Python in the case you give it a comparison function. You should be able to test it from Python (there are not tests, I just checked.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3816#issuecomment-399561532:109,test,test,109,https://hail.is,https://github.com/hail-is/hail/pull/3816#issuecomment-399561532,2,['test'],"['test', 'tests']"
Testability,source_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8513,test,test,8513,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"sources/build-info.properties; echo 'date=2023-10-19T03:09:40Z' >> src/main/resources/build-info.properties; echo 'sparkVersion=3.3.2' >> src/main/resources/build-info.properties; echo 'hailPipVersion=0.2.124' >> src/main/resources/build-info.properties; creating env/HAIL_DEBUG_MODE which does not exist; ELASTIC_MAJOR_VERSION is set to ""7"" which is different from old value """"; printf ""7"" > env/ELASTIC_MAJOR_VERSION; make -C src/main/c prebuilt; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/i",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:5065,test,testutils,5065,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,2,['test'],"['tests', 'testutils']"
Testability,"spark.jar' as a work-around.; 18/01/08 13:51:03 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 13:51:03 WARN Utils: Your hostname, <my computer name> resolves to a loopback address: <my local IP>; using <my IP> instead (on interface enp3s0); 18/01/08 13:51:03 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address; ```. And the other initialize hail like this (crashes with the stack trace/error in the issue):; ```; from pyspark import *; from hail import *; conf = SparkConf(); conf.set('spark.sql.files.maxPartitionBytes','60000000000') ; conf.set('spark.sql.files.openCostInBytes','60000000000') ; conf.set('spark.driver.cores','1') #test with 1 core; sc = SparkContext(conf=conf); hc = HailContext(sc); ```. With startup messages looking like this:; ```; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 18/01/08 15:16:23 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 18/01/08 15:16:23 WARN SparkConf: In Spark 1.0 and later spark.local.dir will be overridden by the value set by the cluster manager (via SPARK_LOCAL_DIRS in mesos/standalone and LOCAL_DIRS in YARN).; 18/01/08 15:16:23 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 18/01/08 15:16:23 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-around.; 18/01/08 15:16:23 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/home/ludvig/Programs/hail/jars/hail-all-spark.jar' as a work-a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783:7660,log,logging,7660,https://hail.is,https://github.com/hail-is/hail/issues/2527#issuecomment-355985783,1,['log'],['logging']
Testability,"specific Hail Query functionality, let's mirror that structure. Let's move REGENIE and any non-Python dependencies of it into `hailtop/batch/genetics/regenie`. Sure. > How is the Dockerfile meant to be used? As written it doesn't appear that it would work because there doesn't exist any regenie source code to COPY in. It's meant to create a Regenie docker image that we could use. It's a copy of the regenie c++ repo's dockerfile, with the removal of the ENTRYPOINT /usr/local/bin/regenie, so that I could issue a command that included an executable, which is convenient to give me the ability to check that intermediate files are actually created (wc, ls) by batch, and because that seems more idiomatic for batch. I don't think there is a published regenie image, but docker hub is down so can't double check. . You're right, I shouldn't have deleted the bulk of the repo, kept as is. Didn't want to deal with submodules. > I've made some other in-line comments in the python file. It's not clear to me how all those other files are related to the python files and I'm a bit uncomfortable adding a whole directory with a LICENSE file, especially when not all the files in the directory fall under that license (e.g. the regenie py file) and moreover the license makes claims about things linking to BGEN, which none of our code here does. The license is only contained within the folder with the licensed files. In a previous conversation with Nate/Cotton, if we use any open-source software, best to keep those files segregated, alongside their license (license must be kept alongside the code, easier to see the demarcation if in a separate folder). > We have some BGEN files for testing in the Hail src/test/resources. I already have an example provided. The example folder contains the config for that, and the regenie folder contains the example. We need an example that has a known result, and regenie's c++ repo conveniently provides that. This is what the regenie/regenie folder contains.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987:2014,test,testing,2014,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987,2,['test'],"['test', 'testing']"
Testability,"ssBuilder.scala b/hail/src/main/scala/is/hail/expr/ir/EmitClassBuilder.scala; index 115df824b3..6e5ee81e6a 100644; --- a/hail/src/main/scala/is/hail/expr/ir/EmitClassBuilder.scala; +++ b/hail/src/main/scala/is/hail/expr/ir/EmitClassBuilder.scala; @@ -59,6 +59,35 @@ class EmitModuleBuilder(val ctx: ExecuteContext, val modb: ModuleBuilder) {; new StaticFieldRef(rgField); }; ; + class LoweredReferenceGenome(; + name: SStringPointerValue,; + contigs: SIndexablePointerValue,; + lengths: SIndexablePointerValue,; + xContigs: SIndexablePointerValue,; + yContigs: SIndexablePointerValue,; + mtContigs: SIndexablePointerValue,; + parInterval: SIntervalPointerValue; + ); +; + private val loweredReferences: mutable.Map[String, StaticField[Long]] = mutable.Map.empty; +; + def getLoweredReferenceGenome(cb: EmitCodeBuilder, name: String): LoweredReferenceGenome = {; + loweredReferences.getOrElseUpdate(name, {; + val ecb = genEmitClass[Unit](s""lowered_reference_${name}""); + val rg = ctx.getReference(name); + assert(rg.name == name); + new LoweredReferenceGenome(; + ecb.addLiteral(cb, rg.name, VirtualTypeWithReq.fullyRequired(TString)).asInstanceOf[SStringPointerValue],; + ecb.addLiteral(cb, rg.contigs, VirtualTypeWithReq.fullyRequired(TArray(TString))).asInstanceOf[SIndexablePointerValue],; + ecb.addLiteral(cb, rg.lengths, VirtualTypeWithReq.fullyRequired(TArray(TInt32))).asInstanceOf[SIndexablePointerValue],; + ecb.addLiteral(cb, rg.xContigs, VirtualTypeWithReq.fullyRequired(TSet(TString))).asInstanceOf[SIndexablePointerValue],; + ecb.addLiteral(cb, rg.yContigs, VirtualTypeWithReq.fullyRequired(TSet(TString))).asInstanceOf[SIndexablePointerValue],; + ecb.addLiteral(cb, rg.mtContigs, VirtualTypeWithReq.fullyRequired(TSet(TString))).asInstanceOf[SIndexablePointerValue],; + ecb.addLiteral(cb, Interval(rg.parInput._1, rg.parInput._2), VirtualTypeWithReq.fullyRequired(TInterval(TLocus(rg.name)))).asInstanceOf[SIntervalPointerValue]; + ); + }; + }; +; def referenceGenomes(): IndexedSeq[Re",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13862#issuecomment-1771508011:1522,assert,assert,1522,https://hail.is,https://github.com/hail-is/hail/issues/13862#issuecomment-1771508011,1,['assert'],['assert']
Testability,ssLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$App,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1578,Test,TestRunner,1578,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,"sses; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0)))) PASSED; Running test: Test method testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1)))) PASSED; Running test: Test method testForwardingOps[4](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyUnaryPrimOp(Negate(),Ref(x,int32))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gra",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:3240,test,testForwardingOps,3240,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,4,"['Test', 'test']","['Test', 'test', 'testForwardingOps']"
Testability,st | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2554,test,test,2554,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2588,test,test,2588,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2966,test,test,2966,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |;,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3070,test,test,3070,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +----------------------------------+------+-------------+-------+---,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3174,test,test,3174,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11365,test,test,11365,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11413,test,test,11413,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8852,test,test,8852,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9182,test,test,9182,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9230,test,test,9230,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9751,test,test,9751,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2547,test,test,2547,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9798,test,test,9798,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2581,test,test,2581,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9845,test,test,9845,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10223,test,test,10223,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2959,test,test,2959,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 4,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3063,test,test,3063,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +----------------------------------+------+-------------+----,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3167,test,test,3167,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1897,test,test,1897,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10508,test,test,10508,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +----------------------------------+------+-------------+-------+------------+; 100 rows in set,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3201,test,test,3201,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 202,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11358,test,test,11358,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,st | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 202,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11406,test,test,11406,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"st-6boype3d'...; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 10, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 85, in main; start.main(args); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/start.py"", line 210, in main; check_call(cmd); File ""/home/hail/.conda/envs/hail/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'ci-test-6boype3d', '--image-version=1.2-deb9', '--metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip', '--properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false', '--initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-1.0-GRCh37-init-docker.sh', '--master-machine-type=n1-standard-1', '--master-boot-disk-size=40GB', '--num-master-local-ssds=0', '--num-preemptible-workers=0', '--num-worker-local-ssds=0', '--num-workers=2', '--preemptible-worker-boot-disk-size=40GB', '--worker-boot-disk-size=40', '--worker-machine-type=n1-standard-1', '--zone=us-central1-b', '--initialization-action-timeout=20m', '--bucket=hail-ci-0-1-dataproc-staging-bucket', '--max-idle=10m']' returned non-zero exit status 1. real	20m34.381s; user	0m6.329s; sys	0m1.522s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:10715,log,logging,10715,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['log'],['logging']
Testability,"st-7.4.3, pluggy-1.3.0; rootdir: /private/tmp; configfile: pytest.ini; plugins: xdist-2.5.0, timeout-2.2.0, instafail-0.5.0, devtools-0.12.2, asyncio-0.21.1, timestamper-0.0.9, metadata-3.0.0, html-1.22.1, anyio-4.2.0, forked-1.6.0, accept-0.1.9, image-diff-0.0.11; asyncio: mode=strict; collected 1 item . foo.py F [100%]. ================================================= FAILURES =================================================; ___________________________________________________ test ___________________________________________________. def test():; > assert False, 'b' * 1000; E AssertionError: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb; E assert False. foo.py:2: AssertionError; ========================================= short test summary info ==========================================; FAILED foo.py::test - AssertionError: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb...; ============================================ 1 failed in 0.05s =============================================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019:925,test,test,925,https://hail.is,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019,8,"['Assert', 'assert', 'test']","['AssertionError', 'assert', 'test']"
Testability,stSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testSt,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1452,test,test,1452,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,stUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3050,assert,assertEvalsTo,3050,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,2,"['Test', 'assert']","['TestUtils', 'assertEvalsTo']"
Testability,still failing test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1632#issuecomment-291121033:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/1632#issuecomment-291121033,1,['test'],['test']
Testability,still failing:; ```gsutil cat gs://hail-ci-0-1/deploy/c28a3f9863a0\*/job-log ```; ```; + gcloud -q auth activate-service-account --key-file=/secrets/gcr-push-service-account-key.json; Activated service account credentials for: [gcr-push@broad-ctsa.iam.gserviceaccount.com]; + gcloud -q auth configure-docker; Docker configuration file updated.; + make push-batch; docker build -t batch .; Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.38/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&session=nt5ube8nzit2kbdia2afrfify&shmsize=0&t=batch&target=&ulimits=null&version=1: dial unix /var/run/docker.sock: connect: permission denied; make: *** [build-batch] Error 1; Makefile:14: recipe for target 'build-batch' failed. ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4443#issuecomment-424716708:73,log,log,73,https://hail.is,https://github.com/hail-is/hail/issues/4443#issuecomment-424716708,1,['log'],['log']
Testability,still got test failures: https://ci.hail.is/batches/48405/jobs/45,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8778#issuecomment-631468022:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/8778#issuecomment-631468022,1,['test'],['test']
Testability,stitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSu,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1824,test,test,1824,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],['test']
Testability,stry/client/__pycache__/docker_name_.cpython-39.pyc; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/docker_puller_.py; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/docker_pusher_.py; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/docker_appender_.py; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/__pycache__/docker_appender_.cpython-39.pyc; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/__pycache__/docker_puller_.cpython-39.pyc; /usr/lib/google-cloud-sdk/lib/third_party/containerregistry/tools/__pycache__/docker_pusher_.cpython-39.pyc; /usr/local/share/google/dataproc/npd-config/docker-monitor-counter.json; /usr/local/share/google/dataproc/npd-config/docker-monitor.json; /usr/local/share/google/dataproc/npd-config/health-checker-docker.json; /usr/local/share/google/dataproc/npd-config/docker-monitor-filelog.json; /usr/local/share/google/dataproc/bdutil/fluentd/container_logging/plugin/test/Dockerfile; /usr/local/share/google/dataproc/bdutil/components/initialize/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/components/install/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/components/uninstall/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/components/post-install/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/components/activate/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/components/shared/docker.sh; /usr/local/share/google/dataproc/bdutil/components/pre-uninstall/docker-ce.sh; /usr/local/share/google/dataproc/bdutil/configure_docker.sh; /run/docker.sock; /tmp/dataproc/uninstall/docker-ce; /tmp/dataproc/components/uninstall/docker-ce.running; /tmp/dataproc/components/uninstall/docker-ce.done; /tmp/dataproc/components/pre-uninstall/docker-ce.running; /tmp/dataproc/components/pre-uninstall/docker-ce.done; /etc/apt/preferences.d/docker-ce.pref; /etc/apt/preferences.d/docker-ce-cli.pref; /etc/apt/sources.list.d/docker.list; /var/lib/apt/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:11962,test,test,11962,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['test'],['test']
Testability,submitting benchmarks now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10581#issuecomment-860829964:11,benchmark,benchmarks,11,https://hail.is,https://github.com/hail-is/hail/pull/10581#issuecomment-860829964,1,['benchmark'],['benchmarks']
Testability,t * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; +----------------------------------+------+-------------+-------+------------+; 4 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; | test | test | 6 | 15 | 54592 |; | test | test | 6 | 35 | 53568 |; | test | test | 6 | 78 | 39104 |; | test | test | 6 | 135 | 35712 |; | test | test | 6 | 164 | 54080 |; +----------------------------------+------+-------------+-------+------------+; 9 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; | test | test | 6 | 10 | 49984 |; | test | test | 6 | 15 | 54592 |; | test | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:5193,test,test,5193,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,14,['test'],['test']
Testability,"t = meta_ht.repartition(1000); - meta_ht = meta_ht.checkpoint(; - re.sub("".tsv(.b?gz)?"", """", args.sample_metadata_tsv) + "".ht"", overwrite=True, _read_if_exists=True); -; + hl.init(log=""/tmp/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); vds = gnomad_v4_genotypes.vds(); ; # see https://github.com/broadinstitute/ukbb_qc/pull/227/files; @@ -55,19 +48,8 @@ def main(args):; ; v4_qc_meta_ht = meta.ht(); ; - mt = vds.variant_data; - #mt = vds.variant_data._filter_partitions([41229]); -; - mt = mt.filter_cols(v4_qc_meta_ht[mt.s].release); -; - meta_join = meta_ht[mt.s]; - mt = mt.annotate_cols(; - meta=hl.struct(; - sex_karyotype=meta_join.sex_karyotype,; - cram=meta_join.cram_path,; - crai=meta_join.crai_path,; - ); - ); + #mt = vds.variant_data; + mt = vds.variant_data._filter_partitions([41229]); ; logger.info(""Adjusting samples' sex ploidy""); lgt_expr = hl.if_else(; @@ -88,9 +70,9 @@ def main(args):; logger.info(""Filter variants with at least one non-ref GT""); mt = mt.filter_rows(hl.agg.any(mt.GT.is_non_ref())); ; - #logger.info(f""Saving checkpoint""); - #mt = mt.checkpoint(os.path.join(args.temp_bucket, ""readviz_select_samples_checkpoint1.vds""),; - # overwrite=True, _read_if_exists=True); + logger.info(f""Saving checkpoint""); + mt = mt.checkpoint(""readviz_select_samples_checkpoint1.vds"",; + overwrite=True, _read_if_exists=True); ; def sample_ordering_expr(mt):; """"""For variants that are present in more than 10 samples (or whatever number args.num_samples is set to),; ```. And tried running the bad step:. ```bash; python3 step1__select_samples.py; ```. I was able to get past the checkpoint: ; ```; INFO (Readviz_prep 73): Saving checkpoint; [Stage 0:> (0 + 1) / 1]. 2023-09-01 18:10:29.262 Hail: INFO: wrote matrix table with 11450 rows and 955359 columns in 1 partition to readviz_select_samples_checkpoint1.vds; ```. @bw2 are you still encountering this issue? Did my diff oversimplify it? Do you suspect the issue after the checkpoint?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664:2089,log,logger,2089,https://hail.is,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664,2,['log'],['logger']
Testability,t org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(Delegating,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1689,Test,TestMethodWorker,1689,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestMethodWorker']
Testability,t org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTarg,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1890,test,testng,1890,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,t | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2623,test,test,2623,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2657,test,test,2657,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2898,test,test,2898,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2932,test,test,2932,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3001,test,test,3001,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3036,test,test,3036,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |;,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3105,test,test,3105,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +---------------------------------,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3140,test,test,3140,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +-----------,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11461,test,test,11461,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +--------------+----------------------------------+------+--,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11509,test,test,11509,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +--------------+----------------------------------+------+-------------+-------+------------+; 100 rows in s,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11557,test,test,11557,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +----------------------------------+------+-------------+-------+------------+; 100 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; +----------------------------------+------+-------------+-------+------------+; 4 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; | test | test | 6 | 15 | 54592 |; | test | test | 6 | 35 | 53568 |; | test | test | 6 | 78 | 39104 |; | test | test | 6 | 135 | 35712 |; | test | test | 6 | 164 | 54080 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:4572,test,test,4572,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,4,['test'],['test']
Testability,t | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1758,test,test,1758,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9278,test,test,9278,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9609,test,test,9609,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2616,test,test,2616,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9893,test,test,9893,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2650,test,test,2650,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9940,test,test,9940,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10176,test,test,10176,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2891,test,test,2891,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 1148,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2925,test,test,2925,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2994,test,test,2994,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3029,test,test,3029,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 3,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3098,test,test,3098,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test | test | 6 | 105 | 399872 |; | test | test | 6 | 106 | 617600 |; | test | test | 6 | 107 | 114880 |; | test | test | 6 | 108 | 47616 |; | test | test | 6 | 109 | 98304 |; | test | test | 6 | 110 | 73472 |; | test | test | 6 | 111 | 44928 |; | test | test | 6 | 112 | 37696 |; +--------------------------,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:3133,test,test,3133,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10556,test,test,10556,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10603,test,test,10603,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10651,test,test,10651,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1931,test,test,1931,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +----,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11454,test,test,11454,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +--------------+----------------------------------+--,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11502,test,test,11502,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,t | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +--------------+----------------------------------+------+-------------+-------+------------+; 100 ro,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11550,test,test,11550,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"t(mt.count()); print(""running pc_relate""); pc_rel = hl.pc_relate(mt.GT, 0.01, k=10, statistics='kin',min_kinship=0.0883); pairs = pc_rel.filter(pc_rel['kin'] >= 0.0883); print(""finding Max ind set""); related_samples_to_remove = hl.maximal_independent_set(pairs.i, pairs.j,keep=False); print(""writing related samples to remove""); related_samples_to_remove.export(""file:////restricted/projectnb/adgc/topmed.r2.analysis/pc_relate/related_samples_""+pop+"".tsv""); result = mt.filter_cols(; hl.is_defined(related_samples_to_remove[mt.col_key]), keep=False); print(""final unrelated count""); print(result.count); eigenvalues, scores, loadings = hl.hwe_normalized_pca(result.GT, k=10); scores.export('file:////restricted/projectnb/adgc/topmed.r2.analysis/pc_relate/unrelated_pcs_'+pop+'.tsv'). ```. ```; Running on Apache Spark version 2.4.3; SparkUI available at http://scc-hadoop.bu.edu:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.46-6ef64c08b000; LOGGING: writing to logs/adgc_pc_relate.autosome_all.log; 2020-08-20 10:14:00 Hail: INFO: Reading table to impute column types; [Stage 0:===========================================================(1 + 0) / 1]2020-08-20 10:14:07 Hail: INFO: Loading 76 fields. Counts by type:; 66 fields: user-specified int32; 6 fields: user-specified str; 3 fields: user-specified float64; 1 field: imputed int32; (63110, 64048); running omit filter; [Stage 1:> (0 + 1) / 1](63110, 52877); running pc_relate; [Stage 3:==================================================>(12794 + 2) / 12796]2020-08-20 10:14:38 Hail: INFO: hwe_normalized_pca: running PCA using 63110 variants.; [Stage 5:==================================================>(12795 + 1) / 12796]2020-08-20 10:14:59 Hail: INFO: pca: running PCA with 10 components...; [Stage 102:================================================>(12795 + 1) / 12796]Traceback (most recent call last):; File ""/restricted/projectnb/adgc/topmed.r2.analysis/pc_relate_pop2.py"", line 128, in ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:4251,LOG,LOGGING,4251,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,2,"['LOG', 'log']","['LOGGING', 'logs']"
Testability,t.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASS,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2116,test,test,2116,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,t_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function test_hadoop_methods_1[local]>; <Function test_hadoop_methods_2[remote]>; <Function test_hadoop_methods_2[local]>; <Function test_hadoop_methods_3[remote]>; <Function test_hadoop_methods_3[local]>; <Function test_read_overwrite[remote]>; <Function test_read_overwrite[local]>; <Function test_hadoop_exists[remote]>; <Function test_hadoop_exists[local]>; <Function test_hadoop_is_file[remote,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2718,Test,Tests,2718,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,3,['Test'],"['TestCaseFunction', 'Tests']"
Testability,"takes 10m, similar to other tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864#issuecomment-583542097:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/7864#issuecomment-583542097,1,['test'],['tests']
Testability,"tandard-1 \; --master-boot-disk-size=40GB \; --num-master-local-ssds=0 \; --num-preemptible-workers=0 \; --num-worker-local-ssds=0 \; --num-workers=2 \; --preemptible-worker-boot-disk-size=40GB \; --worker-boot-disk-size=40 \; --worker-machine-type=n1-standard-1 \; --zone=us-central1-b \; --initialization-action-timeout=20m \; --bucket=hail-ci-0-1-dataproc-staging-bucket \; --max-idle=10m; Starting cluster 'ci-test-6boype3d'...; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 10, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 85, in main; start.main(args); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/start.py"", line 210, in main; check_call(cmd); File ""/home/hail/.conda/envs/hail/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'ci-test-6boype3d', '--image-version=1.2-deb9', '--metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip', '--properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false', '--initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-1.0-GRCh37-init-docker.sh', '--master-machine-type=n1-standard-1', '--master-boot-disk-size=40GB', '--num-master-loca",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:10118,test,test-,10118,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['test'],['test-']
Testability,"te about the `compile` configuration [here](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_dependency_management_overview) (search for ""compile""):. > **Why no compile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our test code references these third-party classes:; ```; import breeze.linalg.DenseMatrix; import breeze.linalg._; import breeze.linalg.{*, diag, DenseMatrix => BDM, DenseVector => BDV}; import breeze.linalg.{DenseMatrix => BDM, _}; import breeze.linalg.{DenseMatrix => BDM}; import breeze.linalg.{DenseMatrix, DenseVector, eigSym, svd}; import breeze.linalg.{DenseMatrix, DenseVector}; import breeze.linalg.{DenseMatrix, Matrix, Vector}; import breeze.linalg.{Vector => BVector}; import htsjdk.samtools.reference.ReferenceSequenceFileFactory; import ht",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:1539,test,testRuntimeClasspath,1539,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['test'],['testRuntimeClasspath']
Testability,"te repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1478,test,test,1478,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,te.hail.io.compress.BGzipCodecSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hai,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1132,test,testGenotypeStream,1132,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['testGenotypeStream']
Testability,"tebook; user_id: e7e7b9c420f0b0ff503ab6711355f27748522a8a37d9d22b2c8e0af4; uuid: 84873cf540014e128cce18f5481fb682; name: notebook2-worker-d4snh; namespace: default; resourceVersion: ""41241284""; selfLink: /api/v1/namespaces/default/pods/notebook2-worker-d4snh; uid: 8cb3c1c2-5580-11e9-bcd4-42010a8000c9; spec:; containers:; - command:; - jupyter; - notebook; - --NotebookApp.token=484b71e2c12d42c79b169b1991602d45; - --NotebookApp.base_url=/instance/84873cf540014e128cce18f5481fb682/; - --ip; - 0.0.0.0; - --no-browser; image: gcr.io/hail-vdc/hail-jupyter:2c2281012d0b2171837e99fe50c8656395c7adafd93b3821af6c0a605ffaea1e; imagePullPolicy: IfNotPresent; name: default; ports:; - containerPort: 8888; protocol: TCP; readinessProbe:; failureThreshold: 3; httpGet:; path: /instance/84873cf540014e128cce18f5481fb682/login; port: 8888; scheme: HTTP; periodSeconds: 5; successThreshold: 1; timeoutSeconds: 1; resources:; requests:; cpu: ""1.601""; memory: 1.601G; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /gsa-key-secret-name; name: gsa-key-secret-name; readOnly: true; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: user-kmpnh-token-hbdd4; readOnly: true; dnsPolicy: ClusterFirst; nodeName: gke-vdc-non-preemptible-pool-0106a51b-l48l; restartPolicy: Always; schedulerName: default-scheduler; securityContext: {}; serviceAccount: user-kmpnh; serviceAccountName: user-kmpnh; terminationGracePeriodSeconds: 30; tolerations:; - effect: NoExecute; key: node.kubernetes.io/not-ready; operator: Exists; tolerationSeconds: 300; - effect: NoExecute; key: node.kubernetes.io/unreachable; operator: Exists; tolerationSeconds: 300; volumes:; - name: gsa-key-secret-name; secret:; defaultMode: 420; secretName: gsa-key-j7gwm; - name: user-kmpnh-token-hbdd4; secret:; defaultMode: 420; secretName: user-kmpnh-token-hbdd4. hostIP: 10.128.0.32; phase: Running; podIP: 10.32.19.165; qosClass: Burstable; startTime: ""2019-04-02T19:50:21Z""; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611:2591,log,log,2591,https://hail.is,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611,1,['log'],['log']
Testability,"ted the command above, the results are as follows:; ```; [root@tele-1 ~]# PYSPARK_PYTHON=""ipython"" pyspark --conf spark.sql.files.openCostInBytes=1099511627776 --conf spark.sql.files.maxPartitionBytes=1099511627776 --conf spark.hadoop.parquet.block.size=1099511627776 --conf spark.serializer=org.apache.spark.serializer.KryoSerializer; /usr/local/lib/python3.5/site-packages/IPython/core/history.py:228: UserWarning: IPython History requires SQLite, your history will not be saved; warn(""IPython History requires SQLite, your history will not be saved""); Python 3.5.2 (default, Jul 12 2017, 14:00:23) ; Type ""copyright"", ""credits"" or ""license"" for more information. IPython 5.1.0 -- An enhanced Interactive Python.; ? -> Introduction and overview of IPython's features.; %quickref -> Quick reference.; help -> Python's own help system.; object? -> Details about 'object', use 'object??' for extra details.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; 17/08/09 12:51:55 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 17/08/09 12:51:55 WARN SparkConf: ; SPARK_CLASSPATH was detected (set to '/opt/Software/hail/build/libs/hail-all-spark.jar').; This is deprecated in Spark 1.0+. Please instead use:; - ./spark-submit with --driver-class-path to augment the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/09 12:51:55 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 12:51:55 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/09 12:51:56 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321152609:1021,log,log,1021,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321152609,1,['log'],['log']
Testability,"ter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py"", line 430, in main; run(); File ""/home/edmund/.vscode/extensions/ms-python.python-2023.10.1/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py"", line 284, in run_file; runpy.run_path(target, run_name=""__main__""); File ""/home/edmund/.vscode/extensions/ms-python.python-2023.10.1/pythonFiles/lib/python/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 321, in run_path; return _run_module_code(code, init_globals, run_name,; File ""/home/edmund/.vscode/extensions/ms-python.python-2023.10.1/pythonFiles/lib/python/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 135, in _run_module_code; _run_code(code, mod_globals, init_globals,; File ""/home/edmund/.vscode/extensions/ms-python.python-2023.10.1/pythonFiles/lib/python/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 124, in _run_code; exec(code, run_globals); File ""/home/edmund/.local/src/hail/test.py"", line 10, in <module>; expr = hl.any(lambda x:; File ""/home/edmund/.local/src/hail/hail/python/hail/expr/functions.py"", line 3530, in any; collection = arg_check(args[1], 'any', 'collection', collection_type); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 586, in arg_check; raise TypeError(""{fname}: parameter '{argname}': ""; TypeError: any: parameter 'collection': expected expression of type set<any> or array<any>, found list: [['10', 123, 'G', 'C'], ['10', 456, 'T', 'A']]; ```; So, hail doesn't support heterogeneous arrays. Converting to a homogeneous array:. ```python; variants = [(""10"", 123, [""G"", ""C""]), (""10"", 456, [""T"", ""A""])]. expr = hl.any(; lambda x:; (mt.locus.contig == hl.literal(x[0])) & \; (mt.locus.position == hl.literal(int(x[1]))) & \; (mt.alleles == hl.literal(x[2])),; variants; ). hl.eval(expr). ```; Leads to the following error (which looks like the bug!):; ```; Traceback (most recent call last):; File ""test.py"", line 10, ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982:4242,test,test,4242,https://hail.is,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982,1,['test'],['test']
Testability,test failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8231#issuecomment-594308654:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8231#issuecomment-594308654,3,['test'],['test']
Testability,"test failures related to locals, ugh.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8394#issuecomment-606100914:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8394#issuecomment-606100914,1,['test'],['test']
Testability,test failures were caused by PType inference bugs that are now fixed,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8297#issuecomment-600361269:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8297#issuecomment-600361269,1,['test'],['test']
Testability,test how?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2998#issuecomment-368885298:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/2998#issuecomment-368885298,1,['test'],['test']
Testability,test module doesn't compile,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8536#issuecomment-613042838:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8536#issuecomment-613042838,1,['test'],['test']
Testability,"test time seemed a little bit lower, but not as much as I'd hoping (and probably not statistically lower)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8246#issuecomment-595892761:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8246#issuecomment-595892761,1,['test'],['test']
Testability,test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2070,test,test,2070,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2104,test,test,2104,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2139,test,test,2139,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2174,test,test,2174,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2208,test,test,2208,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2381,test,test,2381,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2415,test,test,2415,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2450,test,test,2450,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11127,test,test,11127,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11174,test,test,11174,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11221,test,test,11221,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2063,test,test,2063,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2097,test,test,2097,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2132,test,test,2132,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2167,test,test,2167,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2201,test,test,2201,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2374,test,test,2374,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2408,test,test,2408,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2443,test,test,2443,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1827,test,test,1827,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11120,test,test,11120,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-0,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11167,test,test,11167,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11214,test,test,11214,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9040,test,test,9040,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9087,test,test,9087,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,test-dataproc passed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13573#issuecomment-1709205959:0,test,test-dataproc,0,https://hail.is,https://github.com/hail-is/hail/pull/13573#issuecomment-1709205959,1,['test'],['test-dataproc']
Testability,test-dataproc passes after latest change,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10523#issuecomment-880104667:0,test,test-dataproc,0,https://hail.is,https://github.com/hail-is/hail/pull/10523#issuecomment-880104667,1,['test'],['test-dataproc']
Testability,test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-e,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:9274,test,test-,9274,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4962,test,test,4962,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5065,test,test,5065,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,test.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1353,Test,TestInvoker,1353,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,test/hail/methods/test_impex.py::BGENTests::test_import_bgen_no_entries FAILED. a deserialization error,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8282#issuecomment-598486137:0,test,test,0,https://hail.is,https://github.com/hail-is/hail/pull/8282#issuecomment-598486137,1,['test'],['test']
Testability,testTableJoin takes five minutes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9139#issuecomment-663255065:0,test,testTableJoin,0,https://hail.is,https://github.com/hail-is/hail/pull/9139#issuecomment-663255065,1,['test'],['testTableJoin']
Testability,"test_ld_score_regression is failing now, caused by . ```scala; case GetTupleElement(o, idx) =>; infer(o); val t = coerce[PTuple](o.pType2); assert(idx >= 0 && idx < t.size); ```. in inferPType throwing. Will track down. I've seen this before, once. edit:. t.size 1, idx: 1; GetTupleElement(Ref(__iruid_28388,tuple(1:float64))),1)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586753124:140,assert,assert,140,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586753124,1,['assert'],['assert']
Testability,"tested this out in my dev namespace with [this PR](https://github.com/hail-ci-test/ci-test-fhkslcwtu6ij/pull/1) in the associated test repo, which didn't merge until it was approved and had the `ci-test` commit status passing, while the `hail-ci-azure` commit status has failed (the test repo configuration requires one approval and just the `ci-test` commit status to be passing)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14676#issuecomment-2349266606:0,test,tested,0,https://hail.is,https://github.com/hail-is/hail/pull/14676#issuecomment-2349266606,7,['test'],"['test', 'test-', 'tested']"
Testability,"tested, it works.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9502#issuecomment-698604882:0,test,tested,0,https://hail.is,https://github.com/hail-is/hail/pull/9502#issuecomment-698604882,1,['test'],['tested']
Testability,testing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/370#issuecomment-217297231:0,test,testing,0,https://hail.is,https://github.com/hail-is/hail/pull/370#issuecomment-217297231,2,['test'],['testing']
Testability,"testing is changing a lot, wont fix",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5199#issuecomment-506360273:0,test,testing,0,https://hail.is,https://github.com/hail-is/hail/issues/5199#issuecomment-506360273,1,['test'],['testing']
Testability,testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldValues$extension(SerializationDebugger.scala:240); at org.apache.spark.serializer.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2364,test,testng,2364,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"tests all passing (python and jvm), ready to look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7959#issuecomment-580063888:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7959#issuecomment-580063888,1,['test'],['tests']
Testability,tests and lints resolved,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12571#issuecomment-1397707655:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/12571#issuecomment-1397707655,1,['test'],['tests']
Testability,tests are green now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11323#issuecomment-1041946188:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/11323#issuecomment-1041946188,1,['test'],['tests']
Testability,tests pass rolling up,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9851#issuecomment-754182658:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/9851#issuecomment-754182658,1,['test'],['tests']
Testability,"tests should pass when this re-runs, ready for review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2961#issuecomment-367779655:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/2961#issuecomment-367779655,1,['test'],['tests']
Testability,tests still failing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7868#issuecomment-574486661:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7868#issuecomment-574486661,1,['test'],['tests']
Testability,tests took 8m for this PR and 10m for another recent PR that didn't change pipeline,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864#issuecomment-580362794:0,test,tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7864#issuecomment-580362794,1,['test'],['tests']
Testability,"thank you very much for the reply,; when I upgrade the decorator from 3.4.0 to 4.1.2 , this error disappears：. ```; Installing collected packages: decorator; Found existing installation: decorator 3.4.0; Uninstalling decorator-3.4.0:; Successfully uninstalled decorator-3.4.0; Successfully installed decorator-4.1.2. ```. But there is another error, as follows：. ```; bash-4.2$ pyspark; WARNING: User-defined SPARK_HOME (/opt/cloudera/parcels/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/lib/spark2) overrides detected (/opt/cloudera/parcels/SPARK2/lib/spark2).; WARNING: Running pyspark from user-defined location.; Python 2.7.5 (default, Nov 6 2016, 00:28:07) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.2.0.cloudera1; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; >>> from hail import *; >>> hc = hail.Context(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'hail' is not defined; >>> hc = hail.HailContext(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'hail' is not defined; >>> hc = HailContext(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-470>"", line 2, in __init__; File ""/opt/Software/hail/python/hail/typecheck/check.py"", line 245, in _typecheck; return f(*args, **kwargs); File ""/opt/Software/hail/python/hail/context.py"", line 88, in __init__; parquet_compression, min_block_size, branching_factor, tmp_dir); TypeError: 'JavaPackage' object is not callable; ```; My Java version; ```; [root@mg opt]# java -version; java version ""1.8.0_91""; Java(TM) SE Runtime Environment (bui",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337132579:803,log,log,803,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337132579,2,['log'],"['log', 'logging']"
Testability,thanks. I had an initial version of the artifacts stuff using `.log` extensions but that wasn't enough! I hypothesized that .log was auto downloaded and never changed it back from no-ext. :(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4536#issuecomment-429328072:64,log,log,64,https://hail.is,https://github.com/hail-is/hail/pull/4536#issuecomment-429328072,2,['log'],['log']
Testability,that was the plan. done. http://discuss.hail.is/t/breaking-change-rename-of-methods-fields-ctt-chisq-hardy-weinberg-hardy-weinberg-p-variant-qc-transition-disequilibrium-test/590/2,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4032#issuecomment-409216569:170,test,test,170,https://hail.is,https://github.com/hail-is/hail/pull/4032#issuecomment-409216569,1,['test'],['test']
Testability,that's almost certainly within the (considerable) measurement noise. I'll run that benchmark locally to make sure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8292#issuecomment-598094208:83,benchmark,benchmark,83,https://hail.is,https://github.com/hail-is/hail/pull/8292#issuecomment-598094208,1,['benchmark'],['benchmark']
Testability,the PR that concatenated global fields in table join didn't put logic in PruneDeadFields for that,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4311#issuecomment-420252895:64,log,logic,64,https://hail.is,https://github.com/hail-is/hail/issues/4311#issuecomment-420252895,1,['log'],['logic']
Testability,the artifacts page has the same problem - testing multiple projects means you have to encode the full set of information somewhere...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4667#issuecomment-433943710:42,test,testing,42,https://hail.is,https://github.com/hail-is/hail/pull/4667#issuecomment-433943710,1,['test'],['testing']
Testability,"the data should be really deterministic so I'm not sure why those counts are off, but at least those counts and times are more accurate to what we are seeing so probably it means your test environment is reasonable. I would recommend against using the `hail_search/fixtures` data for anything other than running the test suite, its not designed to play nicely with real data",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1821636774:184,test,test,184,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1821636774,2,['test'],['test']
Testability,"the driver classpath; - spark.executor.extraClassPath to augment the executor classpath; ; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.executor.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; 17/08/10 09:10:21 WARN SparkConf: Setting 'spark.driver.extraClassPath' to '/opt/Software/hail/build/libs/hail-all-spark.jar' as a work-around.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.0.2; /_/. Using Python version 2.7.5 (default, Nov 6 2016 00:28:07); SparkSession available as 'spark'.; ```; ----------------------------; ```; >>> rdd = sc.textFile('/hail/test/BRCA1.raw_indel.vcf'); >>> from hail import *; >>> hc = HailContext(sc); hail: info: SparkUI: http://192.168.1.4:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; ```; ----------------------------------; ```; >>> vds = hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071:1996,test,test,1996,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-321424071,1,['test'],['test']
Testability,"the error in #4529 was:; ```; ERROR: Create cluster failed!; ERROR: gcloud crashed (AttributeError): 'Operation' object has no attribute 'details'. If you would like to report this issue, please run the following command:; gcloud feedback. To check gcloud for common problems, please run the following command:; gcloud info --run-diagnostics; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 11, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 76, in main; start.main(args); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/start.py"", line 237, in main; check_call(cmd); File ""/home/hail/.conda/envs/hail/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'ci-test-nhxn5owt', '--image-version=1.2-deb9', '--metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/ba8134f0f121a49ea96d7dd30ea3be330802cfef/784ab2796878cd2f825c554e80d29d304f21d0f4/hail.jar,ZIP=gs://hail-ci-0-1/temp/ba8134f0f121a49ea96d7dd30ea3be330802cfef/784ab2796878cd2f825c554e80d29d304f21d0f4/hail.zip', '--properties=spark:spark.driver.memory=41g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1', '--initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-init-docker.sh', '--master-machine-type=n1-highmem-8', '--master-boot-disk-size=100GB', '--num-master-local-ssds=0', '--num-preemptible-workers=0', '--num-worker-local-ssds=0', '--num-workers=2', '--preemptible-worker-boot-disk-size=40GB', '--worker-boot-disk-size=40', '--worker-machine-type=n1-highmem-8', '--",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-431996515:936,test,test-,936,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-431996515,1,['test'],['test-']
Testability,"the test:; ```; ___________________ Tests.test_balding_nichols_model_phased ____________________; [gw1] linux -- Python 3.7.15 /usr/bin/python3. self = <test.hail.methods.test_statgen.Tests testMethod=test_balding_nichols_model_phased>. def test_balding_nichols_model_phased(self):; bn_ds = hl.balding_nichols_model(1, 5, 5, phased=True); assert bn_ds.aggregate_entries(hl.agg.all(bn_ds.GT.phased)) == True; actual = bn_ds.GT.collect(); expected = [; hl.Call(a, phased=True); for a in [; [0, 1], [0, 0], [0, 1], [0, 0], [1, 0],; [1, 1], [0, 1], [1, 1], [0, 0], [0, 1],; [1, 0], [0, 0], [1, 0], [0, 0], [0, 0],; [1, 1], [1, 1], [1, 0], [0, 1], [1, 1],; [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]]; > assert actual == expected; E assert [Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True)] == [Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 0], phased=True), Call",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495,6,"['Test', 'assert', 'test']","['Tests', 'assert', 'test', 'testMethod']"
Testability,"the virtual type is serialized without requiredness now. earlier versions have assertions that `decodedPType.virtualType == encodedVirtualType`, and this assertion fails on new files",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8257#issuecomment-595910770:79,assert,assertions,79,https://hail.is,https://github.com/hail-is/hail/pull/8257#issuecomment-595910770,2,['assert'],"['assertion', 'assertions']"
Testability,"this adds a substantial amount of time to the tests, so don't approve until I've given some thought to that",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11444#issuecomment-1067243551:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/11444#issuecomment-1067243551,1,['test'],['tests']
Testability,"this is now failing (previously passed, no issues on output) due to subsetTo assertion in master. edit: Strange the subsetTo commit was made 19 days ago. The assertion failure originates from subsetTo, but must have been caused by something else. Ah, my local master branch was old.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-582140545:77,assert,assertion,77,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-582140545,2,['assert'],['assertion']
Testability,this is ready for review. the tests failed spectacularly for reasons I don't understand with py4j errors. https://ci.hail.is/batches/7644244,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1638415522:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1638415522,1,['test'],['tests']
Testability,"this seems like a lot of hassle, and doesn't test an important piece - whether idempotent initialization actually works from Python. We can test creation of a JVM much more easily from Python than from Scala.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5871#issuecomment-482346641:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/5871#issuecomment-482346641,2,['test'],['test']
Testability,this was blocked on no lowering for TableCalculateNewPartitions. Added that; testing now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11665#issuecomment-1079066630:77,test,testing,77,https://hail.is,https://github.com/hail-is/hail/pull/11665#issuecomment-1079066630,1,['test'],['testing']
Testability,thods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.metho,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1417,test,test,1417,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,thods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMa,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1833,test,testng,1833,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,though I would like to see some repr/eval tests!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-322287098:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-322287098,1,['test'],['tests']
Testability,"timings for `cseed/fs-baseline` (`hail-is/main` plus some bug fixes to get the tests to run): https://gist.github.com/cseed/80a3f1bca7a91a1b0f1240cd3663184c. timings for this branch, `cseed/s3-opt`: https://gist.github.com/cseed/6d6a541784d6bb3dc7610ae9a99c70b4. `hail-is/main` actually does pretty well, which surprised me, when I was testing earlier (but similar?) versions copying data from GCS to S3, I saw much slower speeds and I'm not totally sure why. Note, I didn't do cloud-to-cloud tests here, so you should do that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752#issuecomment-894603668:79,test,tests,79,https://hail.is,https://github.com/hail-is/hail/pull/10752#issuecomment-894603668,3,['test'],"['testing', 'tests']"
Testability,tionHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.acces,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4874,test,testng,4874,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,tionHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.acc,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4681,test,testng,4681,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,tionHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldValues$extension(SerializationDebugger.scala:240); at ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2338,Test,TestNG,2338,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,titute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTe,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1916,test,test,1916,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],['test']
Testability,titute.hail.variant.CallSuite.testCall PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrig PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Sui,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:1733,test,testGenotype,1733,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,2,['test'],"['test', 'testGenotype']"
Testability,"to elaborate, I'm seeing this test case hit the same error:; ```; t = hl.utils.range_table(10).annotate(**{f'f{i}': 0 for i in range(1300)}); mt = hl.utils.range_matrix_table(10, 10). mt.annotate_cols(foo=t[mt.col_idx])._force_count_rows(); ```. with the following stack trace: ; ```; 2019-10-28 17:15:08 root: ERROR: Verify Output 1 for is/hail/codegen/generated/C_etypeDecode_9:; 2019-10-28 17:15:08 root: ERROR: RuntimeException: Method code too large!; From java.lang.RuntimeException: Method code too large!; 	at is.hail.relocated.org.objectweb.asm.MethodWriter.a(Unknown Source); 	at is.hail.relocated.org.objectweb.asm.ClassWriter.toByteArray(Unknown Source); 	at is.hail.asm4s.FunctionBuilder.classAsBytes(FunctionBuilder.scala:333); 	at is.hail.asm4s.FunctionBuilder.result(FunctionBuilder.scala:372); 	at is.hail.expr.types.encoded.EType$.buildDecoder(EType.scala:199); 	at is.hail.io.TypedCodecSpec.buildDecoder(RowStore.scala:36); 	at is.hail.rvd.RVD.collect(RVD.scala:694); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:750); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:90); 	at is.hail.expr.ir.Interpret$.apply(Interpret.scala:59); 	at is.hail.expr.ir.InterpretNonCompilable$$anonfun$5.apply(InterpretNonCompilable.scala:16); 	at is.hail.expr.ir.InterpretNonCompilable$$anonfun$5.apply(InterpretNonCompilable.scala:16); 	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); 	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33); 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186); 	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234); 	at scala.collection.mutable.ArrayOps$ofRef.map(ArrayOps.scala:186); 	at is.hail.expr.ir.InterpretNonCompilable$.apply(InterpretNonCompilable.scala:16); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:1125); 	at is.hail.expr.ir.Interpr",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7396#issuecomment-547153723:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/issues/7396#issuecomment-547153723,1,['test'],['test']
Testability,"to link `hail-all-spark.jar`... This config was needed & works successfuly for an old version of Hail (0.2.60)... can be revisit if not appropriate for recent version; ```sh; sudo mkdir /opt/hail/; sudo ln -sf /home/hadoop/.local/lib/python3.9/site-packages/hail/backend /opt/hail/backend; ```; * start pyspark; ```sh; $ pyspark; Python 3.9.18 (main, Oct 25 2023, 05:26:35) ; [GCC 7.3.1 20180712 (Red Hat 7.3.1-17)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 3.3.2-amzn-0.1; /_/. Using Python version 3.9.18 (main, Oct 25 2023 05:26:35); Spark context Web UI available at http://ip-192-168-125-39.ap-southeast-1.compute.internal:4040; Spark context available as 'sc' (master = yarn, app id = application_1698211907929_0001).; SparkSession available as 'spark'.; >>> import hail as hl; >>> hl.version(); '0.2.124-e739a95489e4'; hl.init(sc); pip-installed Hail requires additional configuration options in Spark referring; to the path to the Hail Python module directory HAIL_DIR,; e.g. /path/to/python/site-packages/hail:; spark.jars=HAIL_DIR/backend/hail-all-spark.jar; spark.driver.extraClassPath=HAIL_DIR/backend/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jarRunning on Apache Spark version 3.3.2-amzn-0.1; SparkUI ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949:1734,log,log,1734,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949,1,['log'],['log']
Testability,"today in a fairly simple and isolated test. I'm beginning to wonder if this is just a new form of transient error. We pick 22 random characters from a 62 character alphabet. Odds of collision are minuscule:; ```; In [2]: (1/62)**22; Out[2]: 3.693029961058969e-40; ```; I verified `SecureRandom` with no constructor uses a randomly chosen seed. There's three exceptions there (all the same one). The deepest one came during a write. The next two came during closes. The outermost exception is from the `using` cleaning up. I'm not sure where the middle exception comes from, I can't imagine who would try to `close` the stream other than `using`. Regardless, it appears that the upload fails in some unrecoverable way. We're writing 2GiB in 256 8MiB chunks in this test, so we have more chances for something to go wrong. Maybe we just have to retry the entire partition when this happens?. https://ci.hail.is/batches/7404773/jobs/145; ```; starting test is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt...; Exception:; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:1006,test,testSeekMoreThanMaxInt,1006,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testSeekMoreThanMaxInt']
Testability,too bad I haven't added a PCA benchmark yet :(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6666#issuecomment-512274651:30,benchmark,benchmark,30,https://hail.is,https://github.com/hail-is/hail/pull/6666#issuecomment-512274651,1,['benchmark'],['benchmark']
Testability,"top_level references are references to things that should be in the EvalContext. top_level=False are references intermediate variables. Inside the view_join_x stuff, we constructed top_level=False references to things like `row` and `va`, so these threw errors if used inside aggregators. I'll add a test for this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3055#issuecomment-369985720:300,test,test,300,https://hail.is,https://github.com/hail-is/hail/pull/3055#issuecomment-369985720,1,['test'],['test']
Testability,"tors and matrices with primary dimension the number of samples (as in QR), and because BLAS3 matrix multiplication is fast. I also checked that upping to 8 covariates didn't balance things out. It didn't. The fancy approach basically trades X.t * X and generic k-dim solve for a QR on X and triangular k-dim solve...better for larger k and smaller n. ```; Standard. 2 cov; Lin 7s; Score 54.5s; LRT 93s; Wald 90s. 2 cov, QR / TriSolve; Lin 7.42s; Score 53.6s, 53.1s; LRT 2m06s, 1m59s; Wald 1m53s, 1m54s. 8 cov; Lin 7.16s; Score 59.1s; LRT 2m25s, 2m20s, 2m26s; Wald 2m27s, 2m27s, 2m25s. 8 cov, QR / TriSolve; Lin 7.76s; Score 52.7s; LRT 3m30s; Wald 3m26s; ```. For Firth, since I'm using QR anyway, may as will use TriSolve (though the timing is not particularly effected even with 8 covariates):. ```; 2 cov:; Firth 5m 10s, 4m55s, 5m7s. 8 cov:; Firth 10m37s, 10m50s, 10m28s; ```. For reference, here's the core logic of the QR approach. This corresponds to another version of LogisticRegressionFit where I tried to reduce unnecessary computation, see below. ```; while (!converged && !exploded && iter <= maxIter) {; try {; val mu = sigmoid(X * b); val sqrtW = sqrt(mu :* (1d - mu)); val QR = qr.reduced(X(::, *) :* sqrtW). deltaB = TriSolve(QR.r, QR.q.t * ((y - mu) :/ sqrtW)). if (max(abs(deltaB)) < tol) {; converged = true; if (computeScoreR) {; optScore = Some(X.t * (y - mu)); optR = Some(QR.r); }; if (computeSe) {; val invR = inv(QR.r) // could speed up inverting as upper triangular, or avoid altogether as 1 / se(-1) = fit.fisherSqrt(-1, -1); optSe = Some(norm(invR(*, ::))); }; if (computeLogLkld); optLogLkhd = Some(sum(breeze.numerics.log((y :* mu) + ((1d - y) :* (1d - mu))))); } else {; iter += 1; b += deltaB; }; }; ```. ```; case class LogisticRegressionFit(; b: DenseVector[Double],; optScore: Option[DenseVector[Double]],; optR: Option[DenseMatrix[Double]],; optSe: Option[DenseVector[Double]],; optLogLkhd: Option[Double],; nIter: Int,; converged: Boolean,; exploded: Boolean); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833:1872,log,log,1872,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279532833,2,"['Log', 'log']","['LogisticRegressionFit', 'log']"
Testability,"tp://127.0.0.1:5000/pod_changed', json={'pod_name': name}, timeout=120); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 116, in post; return request('post', url, data=data, json=json, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/api.py"", line 60, in request; return session.request(method=method, url=url, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 524, in request; resp = self.send(prep, **send_kwargs); File ""/usr/lib/python3.6/site-packages/requests/sessions.py"", line 637, in send; r = adapter.send(request, **kwargs); File ""/usr/lib/python3.6/site-packages/requests/adapters.py"", line 529, in send; raise ReadTimeout(e, request=request); requests.exceptions.ReadTimeout: HTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=120); INFO | 2018-10-23 03:58:08,124 | server.py | run_forever:416 | run_forever: run target kube_event_loop; INFO | 2018-10-23 03:59:30,729 | server.py | mark_complete:175 | wrote log for job 153 to logs/job-153.log; INFO | 2018-10-23 03:59:30,730 | server.py | set_state:141 | job 153 changed state: Created -> Complete; INFO | 2018-10-23 03:59:30,730 | server.py | mark_complete:184 | job 153 complete, exit_code 2; INFO | 2018-10-23 03:59:30,737 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,806 | _internal.py | _log:88 | 10.56.142.33 - - [23/Oct/2018 03:59:30] ""GET /jobs HTTP/1.1"" 200 -; INFO | 2018-10-23 03:59:30,815 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,816 | _internal.py | _log:88 | 127.0.0.1 - - [23/Oct/2018 03:59:30] ""POST /pod_changed HTTP/1.1"" 204 -; INFO | 2018-10-23 03:59:30,817 | server.py | refresh_k8s_state:385 | started k8s state refresh; INFO | 2018-10-23 03:59:31,183 | server.py | _create_pod:80 | created pod name: job-99-f4gwv for job 99; INFO | 2018-10-23 03:59:31,191 | server.py ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038:2163,log,log,2163,https://hail.is,https://github.com/hail-is/hail/issues/4608#issuecomment-432083038,2,['log'],"['log', 'logs']"
Testability,"tr, *, oauth2_client: dict) -> Optional[str]:; + oauth2_client_audience = oauth2_client['installed']['client_id']; + try:; + userinfo = await retry_transient_errors(; + session.get_read_json,; + 'https://www.googleapis.com/oauth2/v3/tokeninfo',; + params={'access_token': access_token},; + ); + if userinfo['aud'] != oauth2_client_audience and userinfo['aud'] != userinfo['sub']:; + return None; +; + email = userinfo['email']; + if email.endswith('iam.gserviceaccount.com'):; + return userinfo['sub']; + # We don't currently track user's unique GCP IAM ID (sub) in the database, just their email.; + return email; + except httpx.ClientResponseError as e:; + if e.status in (400, 401):; + return None; + raise; +; +; +class AadJwk(TypedDict):; + kid: str; + x5c: List[str]; +; ; class AzureFlow(Flow):; + _aad_keys: Optional[List[AadJwk]] = None; +; def __init__(self, credentials_file: str):; with open(credentials_file, encoding='utf-8') as f:; data = json.loads(f.read()); ; tenant_id = data['tenant']; authority = f'https://login.microsoftonline.com/{tenant_id}'; - client = msal.ConfidentialClientApplication(data['appId'], data['password'], authority); -; - self._client = client; + self._client = msal.ConfidentialClientApplication(data['appId'], data['password'], authority); self._tenant_id = tenant_id; ; def initiate_flow(self, redirect_uri: str) -> dict:; @@ -107,10 +170,31 @@ class AzureFlow(Flow):; ; return FlowResult(token['id_token_claims']['oid'], token['id_token_claims']['preferred_username'], token); ; -; -def get_flow_client(credentials_file: str) -> Flow:; - cloud = get_global_config()['cloud']; - if cloud == 'azure':; - return AzureFlow(credentials_file); - assert cloud == 'gcp'; - return GoogleFlow(credentials_file); + @staticmethod; + def perform_installed_app_login_flow(oauth2_client: Dict[str, Any]) -> Dict[str, Any]:; + tenant_id = oauth2_client['tenant']; + authority = f'https://login.microsoftonline.com/{tenant_id}'; + app = msal.PublicClientApplication(oauth2",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329:4762,log,login,4762,https://hail.is,https://github.com/hail-is/hail/pull/13131#issuecomment-1668558329,1,['log'],['login']
Testability,"ts for Sanic, 45 for aiohttp. Sanic Run 1:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 640.64ms 947.31ms 7.97s 85.89%; Req/Sec 385.62 137.55 2.32k 77.21%; 274143 requests in 1.00m, 41.70MB read; Socket errors: connect 0, read 2072, write 0, timeout 26; Requests/sec: 4563.11; Transfer/sec: 710.67KB. Sanic Run 2:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 615.91ms 878.25ms 7.86s 85.85%; Req/Sec 391.30 118.76 1.61k 72.83%; 278943 requests in 1.00m, 42.46MB read; Socket errors: connect 0, read 2079, write 0, timeout 12; Requests/sec: 4642.59; Transfer/sec: 723.58KB. Sanic Run 3 (very large background task spike in last 1-2s of run):; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 543.65ms 839.00ms 7.93s 87.81%; Req/Sec 392.47 118.69 1.42k 73.81%; 279206 requests in 1.00m, 42.54MB read; Socket errors: connect 0, read 2101, write 0, timeout 35; Requests/sec: 4646.20; Transfer/sec: 724.97KB. Aiohttp Run 1:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 747.49ms 1.00s 7.88s 86.77%; Req/Sec 280.95 103.65 1.60k 79.52%; 199147 requests in 1.00m, 36.47MB read; Socket errors: connect 0, read 2058, write 1, timeout 45; Requests/sec: 3313.70; Transfer/sec: 621.36KB. Aiohttp Run 2:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 696.00ms 967.04ms 7.93s 86.48%; ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:4841,test,test,4841,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['test'],['test']
Testability,"ts pod via nginx). We're failing on that last step. It appears that the repository creation succeeded, the response to that REST call was a successful looking JSON object (which indicates a create repository with the expected name, `REPO_NAME=ci-test-p4a9fxo7`) [1]. It is unclear if repository deletion succeeded [2], I should find a way to make curl print the HTTP status code returned by cluster deletion. FWIW, the repository appears to be deleted now (https://github.com/hail-ci-test/ci-test-p4a9fxo7), and, AFAIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1294,test,test,1294,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,"ttps://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""mileston",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4266,test,test,4266,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"ttps://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2138,test,test,2138,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"ttpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:442); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:408); 	at java.base/java.lang.Thread.run(Thread.java:834). Hail version: 0.2.128-ce3ca9c77507; Error summary: SocketTimeoutException: connect timed out; File ""/home/edmund/.local/src/hail/hail/python/hail/backend/py4j_backend.py"", line 223, in _rpc; raise fatal_error_from_java_error_triplet(; File ""/home/edmund/.local/src/hail/hail/python/hail/backend/backend.py"", line 190, in execute; raise e.maybe_user_error(ir) from None; File ""/home/edmund/.local/src/hail/hail/python/hail/backend/backend.py"", line 190, in execute; raise e.maybe_user_error(ir) from None; File ""/home/edmund/.local/src/hail/hail/python/hail/table.py"", line 2002, in write; Env.backend().execute(; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/test.py"", line 6, in <module>; ht.write('gs://ehigham-hail-tmp/test_hail_in_notebook.ht'); hail.utils.java.FatalError: SocketTimeoutException: connect timed out. Java stack trace:; java.io.IOException: Error getting access token from metadata server at: http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token; 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.util.CredentialFactory.getCredentialFromMetadataServiceAccount(CredentialFactory.java:254); 	at com.google.cloud.hadoop.repackaged.gcs.com.google.cloud.hadoop.util.CredentialFactory.getCredential(CredentialFactory.java:406); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.getCredential(GoogleHadoopFileSystemBase.java:1471); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.createGcsFs(GoogleHadoopFileSystemBase.java:1630); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.configure(GoogleHadoopFileSystemBase.java:1612); 	at com.google.cloud.hadoop",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13904#issuecomment-1973731699:11447,test,test,11447,https://hail.is,https://github.com/hail-is/hail/issues/13904#issuecomment-1973731699,1,['test'],['test']
Testability,"tus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/Hadoop.o -o lib/darwin/libhail.dylib; > Building 33% > :compileScala. :compileScala; :processResources; :classes; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedArray(I32(1), ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))) PASSED; Running test: Test method testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[2](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),If(True(),Ref(x,int32),I32(0)))) PASSED; Running test: Test method testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[3](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),ApplyBinaryPrimOp(Add(),ApplyBinaryPrimOp(Add(),I32(2),Ref(x,int32)),I32(1)))) PASSED; ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:3200,test,test,3200,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,1,['test'],['test']
Testability,"tute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best o",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2208,test,test,2208,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"tute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best of 3: 1m48.5s; - map-any, best of 3: 1m43.1s. read, filtervariants --keep -c 'va.info.MQ>20' filtergenotypes --keep -c 'g.gq > 20' count; - master, best of 3: 2m55s; - map-any, bes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2387,test,test,2387,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,"u linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aiohttp. This is strange to say the least. I was really curious about this, so I ran the bench. First, I upgraded Sanic to a recent version. Then I ran their test. In short, their results were not what I found. Sanic is 50% faster, and the timeouts are what you'd expect. 26 timeouts for Sanic, 45 for aiohttp. Sanic Run 1:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 640.64ms 947.31ms 7.97s 85.89%; Req/Sec 385.62 137.55 2.32k 77.21%; 274143 requests in 1.00m, 41.70MB read; Socket errors: connect 0, read 2072, write 0, timeout 26; Requests/sec: 4563.11; Transfer/sec: 710.67KB. Sanic Run 2:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 615.91ms 878.25ms 7.86s 85.85%; Req/Sec 391.30 118.76 1.61k 72.83%; 278943 requests in 1.00m, 42.46MB read; Socket errors: connect 0, read 2079, write 0, timeout 12; Requests/sec: 4642.59; Transfer/sec: 723.58KB. Sanic Run 3 (very large background task spike in last 1-2s of run):; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connect",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:3856,test,test,3856,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['test'],['test']
Testability,"uality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unannotated.vcf) snpEffFile=(RodBinding name=snpEffFile source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snpeff.vcf) dbsnp=(RodBinding name= source=UNBOUND) comp=[] resource=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub annotation=[SnpEff] excludeAnnotation=[] group=[] expression=[] useAllAnnotations=false list=false alwaysAppendDbsnpId=false MendelViolationGenotypeQualityThreshold=0.0 requireStrictAlleleMatch=false filter_mismatching_base_and_quals=false""; ##VariantFiltration=""analysis_type=VariantFiltration input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_leg",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:18521,stub,stubs,18521,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"uals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false input=[(RodBinding name=input source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.unfiltered.vcf)] recal_file=(RodBinding name=recal_file source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recal) tranches_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.tranches out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub ts_filter_level=98.5 ignore_filter=null mode=SNP filter_mismatching_base_and_quals=false""; ##CombineVariants=""analysis_type=CombineVariants input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_qua",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:1885,stub,stubs,1885,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,uesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:13774,test,test-,13774,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,uffer.scala:49); 	at scala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(Te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2060,Test,TestUtils,2060,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,ugh actually doing this is not super straightforward! so unless you have super strong objections to this I'll probably jut put the logic directly into emit.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3357#issuecomment-380967820:131,log,logic,131,https://hail.is,https://github.com/hail-is/hail/pull/3357#issuecomment-380967820,1,['log'],['logic']
Testability,"ugh, ok. On Mon, Aug 17, 2020 at 10:41 AM Tim Poterba <notifications@github.com>; wrote:. > *@tpoterba* requested changes on this pull request.; >; > needs a test; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/9283#pullrequestreview-468525706>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADZNYW26LMF4NJHR4TDHL23SBE6SNANCNFSM4QBW7UJA>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9283#issuecomment-674927789:158,test,test,158,https://hail.is,https://github.com/hail-is/hail/pull/9283#issuecomment-674927789,1,['test'],['test']
Testability,"ugh, test failure in local backend. Will debug in a bit.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9618#issuecomment-713077513:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/9618#issuecomment-713077513,1,['test'],['test']
Testability,"ugh, this PR is quite mislabeled. This was meant to be the secondary indexing stub -- the last commit here -- but was stacked on the keyed_intersection stuff (which has merged to main in another PR) and I didn't fix up the title. I'll rebase to make this clearer as an example for us to poke at indexing for seqr, and make the warning fix in another PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12539#issuecomment-1349720433:78,stub,stub,78,https://hail.is,https://github.com/hail-is/hail/pull/12539#issuecomment-1349720433,1,['stub'],['stub']
Testability,"ugh. This must depend on another PR I have open, to remove that assertion.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5740#issuecomment-478736550:64,assert,assertion,64,https://hail.is,https://github.com/hail-is/hail/pull/5740#issuecomment-478736550,1,['assert'],['assertion']
Testability,ugh. inexplicable NPE in TestNG with that version. Switching to the lowest version known to work.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8801#issuecomment-629588732:25,Test,TestNG,25,https://hail.is,https://github.com/hail-is/hail/pull/8801#issuecomment-629588732,1,['Test'],['TestNG']
Testability,ule test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function test_hadoop_methods_1[local]>; <Function test_hadoop_methods_2[remote]>; <Function test_hadoop_methods_2[local]>; <Function test_hadoop_methods_3[remote]>; <Function test_hadoop_methods_3[local]>; <Function test_read_overwrite[remote]>; <Function test_read_overwrite[local]>; <Function test_hadoop_exists[remote]>; <Function test_hadoop_exists[local]>; <Function test_hadoop_is_file[remote]>; <Function test_hadoop_is_file[local]>; <Function test_hadoop_stat[remote]>; <Function test_hadoop_stat[local]>; <Function test_subdirs[remote]>; <Function test_subdirs[local]>; <Function test_rmtree_empty_is_ok[remote]>; <Function test_rmtree_empty_is_ok[local]>; <Function test_rmtree_empty_subdir_is_ok[remote]>; <Function test_rmtree_empty_subdir_is_ok[local]>; <Function test_remove_and_rmtree[remote]>; <Function test_remove_and_rmtree[lo,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:3143,Test,Tests,3143,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,3,['Test'],"['TestCaseFunction', 'Tests']"
Testability,"ull sample_ploidy=2 min_quality_score=1 max_quality_score=40 site_quality_prior=20 min_power_threshold_for_calling=0.95 min_reference_depth=100 exclude_filtered_reference_sites=false heterozygosity=0.0010 genotyping_mode=DISCOVERY output_mode=EMIT_VARIANTS_ONLY standard_min_confidence_threshold_for_calling=30.0 standard_min_confidence_threshold_for_emitting=30.0 alleles=(RodBinding name= source=UNBOUND) max_alternate_alleles=6 p_nonref_model=EXACT_INDEPENDENT contamination_fraction_to_filter=0.0 contamination_percentage_per_sample_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.v1.contamination_levels.txt logRemovedReadsFromContaminationFiltering=null exactcallslog=null dbsnp=(RodBinding name=dbsnp source=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.dbsnp.vcf) comp=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub debug_file=null metrics_file=null annotation=[] excludeAnnotation=[] filter_mismatching_base_and_quals=false""; ##VariantAnnotator=""analysis_type=VariantAnnotator input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/references/HybSelOligos/whole_exome_agilent_1.1_refseq_plus_3_boosters/whole_exome_agilent_1.1_refseq_plus_3_boosters.Homo_sapiens_assembly19.targets.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=50 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potent",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:16503,stub,stubs,16503,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,"update: I made checking the keys in the RVD constructor optional, as it forced the broadcast of the partitioner every time we construct an RVD, and enabled it (via a flag HailContext.checkRVDKeys) only for the Scala tests. @tpoterba Thoughts on this? Should keep it enabled in production and just add a flag to disable it for the joint caller? If not, should we enable it for the Python tests? If so, we'll probably want some additional tests with it disabled so we at least test somewhat we release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5424#issuecomment-466819533:216,test,tests,216,https://hail.is,https://github.com/hail-is/hail/pull/5424#issuecomment-466819533,4,['test'],"['test', 'tests']"
Testability,"update: `calculateKeyRanges` doesn't work correctly when there's only one element (which we never hit, since `coerce` considers those to be sorted), which was causing the shuffle to drop the only moved element in some of my tests (which is why the tests were running so much faster than the non-shuffling version). . I did fix something in the ReorderedPartitions dependencies that was causing an extra partition to be included in the dependencies during the `union_rows`, and now this branch (sans explode_rows changes) is running at about the same speed as SplitMulti was previously, although there's still generally noticeable bump for the first iteration. so @tpoterba I think this is probably set for review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4076#issuecomment-410349941:224,test,tests,224,https://hail.is,https://github.com/hail-is/hail/pull/4076#issuecomment-410349941,2,['test'],['tests']
Testability,upload/storage/v1/b/1-day/o?name=parallelizeAndComputeWithIndex/al3OJfYZMMNoi9F2jvcAf0jBirVTayRVqro03dnIa1g%3D/result.7028&uploadType=resumable&upload_id=ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	| ; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:185) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-S,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:8562,test,test-,8562,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 0; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:297); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 		at is.hail.io.fs.FSPositionedOutputStream.write(FS.scala:219); 		at java.io.DataOutputStream.write(DataOutputStream.java:107); 		at is.hail.fs.FSSuite.$anonfun$testSeekMoreThanMaxInt$1(FSSuite.scala:329); 		at is.hail.fs.FSSuite.$anonfun$testSeekMoreThanMaxInt$1$adapted(FSSuite.scala:323); 		at is.hail.utils.package$.using(package.scala:635); 		... 26 more; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:8916,test,testSeekMoreThanMaxInt,8916,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,2,['test'],['testSeekMoreThanMaxInt']
Testability,"us-east4/us-west1/us-west2/us-west3/us-west4]: us-east1; WARNING: remote temporary directory ""gs://hail-batch-jigold-oxmmp/bar/foo"" is not located in the selected compute region for Batch jobs ""us-east1"".; Which backend do you want to use for Hail Query? [spark/batch/local]: batch; --------------------; FINAL CONFIGURATION:; --------------------; global/domain=hail.is; batch/remote_tmpdir=gs://hail-batch-jigold-oxmmp/bar/foo; batch/regions=us-east1; batch/backend=service; query/backend=batch; WARNING: Initialized Hail with warnings! The currently specified configuration will result in additional ingress and egress fees when using Hail Batch.; ```. Existing multiregional bucket:. ```; (py311) jigold@wm349-8c4 hail % hailctl batch init; Do you want to create a new bucket in project for temporary files generated by Hail? [y/n]: n; Enter a path to an existing remote temporary directory (ex: gs://my-bucket/batch/tmp): gs://hail-jigold-test-multi-regional; WARNING: remote temporary directory gs://hail-jigold-test-multi-regional is multi-regional. Using this bucket with the Batch Service will incur addtional ingress and egress fees.; Do you want to give service account jigold-59hi5@hail-vdc.iam.gserviceaccount.com read/write access to bucket hail-jigold-test-multi-regional? [y/n]: y; Granted service account jigold-59hi5@hail-vdc.iam.gserviceaccount.com read and write access to hail-jigold-test-multi-regional.; Which region do you want your jobs to run in? [us-central1/us-east1/us-east4/us-west1/us-west2/us-west3/us-west4]: us-east1; Which backend do you want to use for Hail Query? [spark/batch/local]: batch; --------------------; FINAL CONFIGURATION:; --------------------; global/domain=hail.is; batch/remote_tmpdir=gs://hail-jigold-test-multi-regional; batch/regions=us-east1; batch/backend=service; query/backend=batch; WARNING: Initialized Hail with warnings! The currently specified configuration will result in additional ingress and egress fees when using Hail Batch.; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1679133568:6268,test,test-multi-regional,6268,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1679133568,3,['test'],['test-multi-regional']
Testability,ute.hail.methods.FilterSuite.filterTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED; Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-171361971:2326,test,test,2326,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-171361971,1,['test'],['test']
Testability,"uting eigendecomposition of kinship matrix...; 2017-08-28 21:47:49 Hail: INFO: lmmreg: Estimating delta using REML... ; 2017-08-28 21:47:49 Hail: INFO: lmmreg: Evals 1 to 7: 3.09757, 2.66667, 2.23576, 0.00000, 0.00000, -0.00000, -0.00000; 2017-08-28 21:47:49 Hail: INFO: lmmreg: Evals 7 to 1: -0.00000, -0.00000, 0.00000, 0.00000, 2.23576, 2.66667, 3.09757; 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: beta = Map(intercept -> 0.48721539559123606, sa.cov.Cov1 -> 0.5924758486080468, sa.cov.Cov2 -> -0.23132255249379874); 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: sigmaG2 = 0.25961182888248313; 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: sigmaE2 = 0.02099926061895032; 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: delta = 0.08088714874566029; 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: h2 = 0.9251659631261897; 2017-08-28 21:47:50 Hail: INFO: lmmreg: global model fit: seH2 = 0.11525741506951385; 2017-08-28 21:47:50 Hail: INFO: baldingnichols: generating genotypes for 10 populations, 100 samples, and 300 variants...; 2017-08-28 21:47:50 Hail: INFO: Coerced sorted dataset; bash: line 12: 5047 Segmentation fault spark-submit --class org.testng.TestNG --jars ./hail-all-spark-test.jar --conf ""spark.driver.extraClassPath=./hail-all-spark-test.jar"" --conf 'spark.executor.extraClassPath=./hail-all-spark-test.jar' ./hail-all-spark-test.jar ./testng.xml; + TEST_EXIT_CODE=139; + set -e; + gcloud --project broad-ctsa compute scp --recurse cluster-ci-d1n0nk3vmzf4-m:test-output test-output; scp: test-output: No such file or directory; ERROR: (gcloud.compute.scp) [/usr/bin/scp] exited with return code [1].; + cleanup; + gcloud --project broad-ctsa -q dataproc clusters delete --async cluster-ci-d1n0nk3vmzf4; Deleting [https://dataproc.googleapis.com/v1/projects/broad-ctsa/regions/global/clusters/cluster-ci-d1n0nk3vmzf4] with operation [projects/broad-ctsa/regions/global/operations/3a35ffb5-aac5-4329-9762-67a8f4fadf66].; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-325495835:7423,test,testng,7423,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-325495835,10,"['Test', 'test']","['TestNG', 'test', 'test-output', 'testng']"
Testability,v6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:41528,test,test-,41528,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:36799,test,test-,36799,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.0\n2022-11-15 20:31:28.080 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:36584,test,test-,36584,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:37324,test,test-,37324,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:37109,test,test-,37109,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:37849,test,test-,37849,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:37634,test,test-,37634,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:38374,test,test-,38374,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3 response 200\n2022-11-15 20:31:28.812 ServiceBackend$: INFO: result 3 complete - 8157265 bytes\n2022-11-15 20:31:28.812 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:38159,test,test-,38159,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:38899,test,test-,38899,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.4\n2022-11-15 20:31:29.027 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.4 response 200\n2022-11-15 20:31:29.057 ServiceBackend$: INFO: result 4 complete - 8157265 bytes\n2022-11-15 20:31:29.057 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:38684,test,test-,38684,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:39424,test,test-,39424,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.5\n2022-11-15 20:31:29.250 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.5 response 200\n2022-11-15 20:31:29.272 ServiceBackend$: INFO: result 5 complete - 8157265 bytes\n2022-11-15 20:31:29.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:39209,test,test-,39209,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objec,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:39949,test,test-,39949,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.6\n2022-11-15 20:31:29.462 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.6 response 200\n2022-11-15 20:31:29.486 ServiceBackend$: INFO: result 6 complete - 8157265 bytes\n2022-11-15 20:31:29.487 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:39734,test,test-,39734,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/ob,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:40474,test,test-,40474,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.7\n2022-11-15 20:31:29.704 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.7 response 200\n2022-11-15 20:31:29.795 ServiceBackend$: INFO: result 7 complete - 8157265 bytes\n2022-11-15 20:31:29.795 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/obj,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:40259,test,test-,40259,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,vXjgv6-LMY%3D%2Fresult.8\n2022-11-15 20:31:29.983 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.8 response 200\n2022-11-15 20:31:30.006 ServiceBackend$: INFO: result 8 complete - 8157265 bytes\n2022-11-15 20:31:30.006 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9\n2022-11-15 20:31:30.249 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.9 response 200\n2022-11-15 20:31:30.271 ServiceBackend$: INFO: result 9 complete - 8157265 bytes\n2022-11-15 20:31:30.272 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:40784,test,test-,40784,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,va.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124); at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448); at java.lang.StringBuffer.append(StringBuffer.java:270); at org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.format(PatternParser.java:419); at org.apache.log4j.PatternLayout.format(PatternLayout.java:506); at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310); at org.apache.log4j.WriterAppender.append(WriterAppender.java:162); at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251); at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1953); at org.apache.spark.scheduler.TaskResultGetter$$anon$3.run(TaskResultGetter.scala:124); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ```; `pyhail-submit`:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:1459,log,logWarning,1459,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,2,"['Log', 'log']","['Logging', 'logWarning']"
Testability,va:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.fl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:5285,test,test-ezlis,5285,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['test-ezlis']
Testability,"ve summary. Excess JVM memory use is almost certainly not the issue. I've taken a close look at the import_gvs.py loop and the related Hail Python code. No obvious accumulation of RAM use. AFAICT, the oomkiller keeps killing the pipelines. We need to stop this because the oomkiller (a) acts before the JVM GC can free things and (b) prevents us from getting JVM diagnostics on failure. We control the JVM's max heap with hailctl's --master-memory-fraction (default is 0.8 for 80% of the master machine type's advertised RAM). I suggest we set this down to 0.6 and continue using an n1-highmem-16 driver.; If Hail is (incorrectly) accumulating garbage memory per-group, we'll have a better chance diagnosing that with a running JVM instead of one that's been SIGKILL'ed. To understand what's going on, we gotta see what is using RAM in the n1-highmem-16 case. If I could SSH to the cluster, a simple solution is a screen with top -s 300 -n 100 >memory.log (I'd guess no more than 500KiB per hour of logs) and retrieve that file if the cluster fails. If we could get Google Monitoring set up to retrieve process-level memory statistics from the driver node that should also work. Just to be clear, I don't anticipate any changes to Hail in the next week that would change the memory use of this pipeline. There could be a memory leak, but I have no clews that lead to it. I realize this is an unsatisfying answer. I'm pretty perplexed as to what could be the issue here. #### technical details. We'll call the second to most recent run Run A and the most recent run Run B. Run A (like all runs before it) only manages two sample groups before failing. Run B made it through 50 groups before failing on 51. Why did they fail? The syslog for Run A is clear: the oomkiller killed Run A. We lack syslogs for Run B, so we cannot be certain but the lack of a JVM stack trace suggests to me that (a) the driver failed and (b) the driver was killed by the system.; Let's focus on the driver machines. In Run A,",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449:1026,log,log,1026,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449,2,['log'],"['log', 'logs']"
Testability,"veLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/FS.o -o lib/linux-x86-64/libhail.so; cp -p -f lib/linux-x86-64/libboot.so lib/linux-x86-64/libhail.so ../../../prebuilt/lib/linux-x86-64/; make[1]: Leaving directory `/mnt/tmp/hail/hail/src/main/c'; ./gradlew shadowJar -Dscala.version=2.12.15 -Dspark.version=3.3.2 -Delasticsearch.major-version=7; Downloading https://services.gradle.org/distributions/gradle-8.3-bin.zip; ............10%............20%.............30%............40%.............50%............60%.............70%............80%.............90%............100%. Welcome to Gradle 8.3!. Here are the highlights of this release:; - Faster Java compilation; - Reduced memory usage; - Support for running on Java 20. For more details see https://docs.gradle.org/8.3/release-notes.html. Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; WARNING: Hail primarily tested with Spark 3.3.0, use other versions at your own risk. > Task :shadedazure:compileJava NO-SOURCE; > Task :shadedazure:processResources NO-SOURCE; > Task :shadedazure:classes UP-TO-DATE; > Task :shadedazure:shadowJar; > Task :compileJava NO-SOURCE; > Task :compileScala; > Task :processResources; > Task :classes; > Task :shadowJar. BUILD SUCCESSFUL in 4m 20s; 4 actionable tasks: 4 executed; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; WARNING: The wheel packa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:15964,test,tested,15964,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['tested']
Testability,versable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2264,Test,TestUtils,2264,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,"we don't have a way to test this right now, right? (we could write something that templates with mock data). I want to next add something that colors the status link - but this will involve a bit of jinja language which I'll probably get wrong at first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6105#issuecomment-491834040:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/6105#issuecomment-491834040,2,"['mock', 'test']","['mock', 'test']"
Testability,"we have a benchmarking suite in Python - it's very early, though, and not run as part of the CI. I'll add something there.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5075#issuecomment-454046705:10,benchmark,benchmarking,10,https://hail.is,https://github.com/hail-is/hail/pull/5075#issuecomment-454046705,1,['benchmark'],['benchmarking']
Testability,"we have some random failures of tests for some of our services related to resource contention, it's a big problem :(. If you push an empty commit, I can rerun the tests and hope they succeed this time...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6676#issuecomment-512935301:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/6676#issuecomment-512935301,2,['test'],['tests']
Testability,we need to add CI logic to prevent merging things that are stacked. This should have gone in after #6298,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6302#issuecomment-500597278:18,log,logic,18,https://hail.is,https://github.com/hail-is/hail/pull/6302#issuecomment-500597278,1,['log'],['logic']
Testability,"we now have our dev test environment running with hail 0.2.126 and this query took ~92 seconds. So faster, but we do still need some performance enhancements. @ehigham let me know what would be helpful for you to get you started on this effort",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1795785654:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1795785654,1,['test'],['test']
Testability,"we only use 1 core in the benchmarks anyway -- I think the right solution is to set the executor env by default, set them all in the docker script for benchmarks, and not worry too much about non-benchmark local mode for now",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583465417:26,benchmark,benchmarks,26,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583465417,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"we recently locked down our CI to run PRs only from the development team -- we intend to add a feature to our CI to let us run the test suite on a specific PR and SHA, but don't have that feature yet... 😦 . @cseed 	@danking this isn't hard, right?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6262#issuecomment-498911743:131,test,test,131,https://hail.is,https://github.com/hail-is/hail/pull/6262#issuecomment-498911743,1,['test'],['test']
Testability,we should also add logic to cloudtools that checks if it's looking at an out-of-date hash,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4239#issuecomment-417437115:19,log,logic,19,https://hail.is,https://github.com/hail-is/hail/pull/4239#issuecomment-417437115,1,['log'],['logic']
Testability,we test split multi,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1160#issuecomment-422370912:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/issues/1160#issuecomment-422370912,1,['test'],['test']
Testability,"well, this is odd. I just rebuilt it for the 6th time on the HPC and it is registering the breeze function. It still fails these tests on the most current version pulled from the github today. ` Gradle suite > Gradle test > is.hail.methods.IBDSuite.ibdPlinkSameOnRealVCF FAILED; Gradle suite > Gradle test > is.hail.methods.IBDSuite.testIBDPlink FAILED; Gradle suite > Gradle test > is.hail.methods.ImputeSexSuite.testImputeSexPlinkVersion FAILED; Gradle suite > Gradle test > is.hail.stats.InbreedingCoefficientSuite.testIbcPlinkVersion FAILED; Gradle suite > Gradle test > is.hail.methods.LinearMixedRegressionSuite.genAndFitLMM FAILED`. It fails out with 244 tests completed and 5 failed. I've attached the test report ; [tests.zip](https://github.com/hail-is/hail/files/795132/tests.zip). There are two differences that I can tell between the current build and the previous times I've tried. 1. I was using a local installation of spark when it worked, whereas now I am using the HPC's version of spark 2.1.0. However, it passed the tests just fine when I was using a local copy of spark 2.0.2 on both my laptop and HPC. . 2. Initially I followed the recommendations on the doc pages to setup the python path references to py4j under `alias hail=""PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar python""` This perhaps didn't export the PYTHONPATH to the py4j 10.4 .zip library if I hadn't run the `hail` command before I tried testing. My initial reaction was to just install a local copy of py4j via pip in my local copy of python since the tests were failing out with complaints about missing py4j module. That worked to get a little farther in the test script, to the point where it was failing out with the breeze function. But, since then I've re-jiggered the PYTHONPATH in the .bash_profile to always be defined to point to the SPARK_HOME version of py4j. This doesn't seem like it would be a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721:129,test,tests,129,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281846721,13,['test'],"['test', 'testIBDPlink', 'testIbcPlinkVersion', 'testImputeSexPlinkVersion', 'tests']"
Testability,what if you do a simpler benchmark: `filter_genotypes('g.gq > 20')`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1292#issuecomment-275122784:25,benchmark,benchmark,25,https://hail.is,https://github.com/hail-is/hail/pull/1292#issuecomment-275122784,1,['benchmark'],['benchmark']
Testability,what's my review responsibility here? Standard review process? How does this interact with Jon setting up tests?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-409783596:106,test,tests,106,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-409783596,1,['test'],['tests']
Testability,which do you mean?. - switch our exclusive spark testing/deployment from 2.2.0 to 2.3.X?; - test and deploy against 2.3.X as well as 2.2.0?; - something else?. I know people are using Hail with 2.3 successfully right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4578#issuecomment-431602419:49,test,testing,49,https://hail.is,https://github.com/hail-is/hail/issues/4578#issuecomment-431602419,2,['test'],"['test', 'testing']"
Testability,"while the 1kg vcf that generated the assertion error looks like ; ```; ##fileformat=VCFv4.2; ##ApplyRecalibration=""analysis_type=ApplyRecalibration input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false input=[(RodBinding name=input source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.unfiltered.vcf)] recal_file=(RodBinding name=recal_file source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recal) tranches_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.tranches out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub ts_filter_level=9",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:37,assert,assertion,37,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['assert'],['assertion']
Testability,will be interesting to see how rebase incorporating #3185 affects benchmark,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-383291647:66,benchmark,benchmark,66,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-383291647,1,['benchmark'],['benchmark']
Testability,will benchmark then assign.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11663#issuecomment-1095136763:5,benchmark,benchmark,5,https://hail.is,https://github.com/hail-is/hail/pull/11663#issuecomment-1095136763,1,['benchmark'],['benchmark']
Testability,will experiment with automatically generating TMP nodes and benchmark that.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8028#issuecomment-586726766:60,benchmark,benchmark,60,https://hail.is,https://github.com/hail-is/hail/pull/8028#issuecomment-586726766,1,['benchmark'],['benchmark']
Testability,will go here:; https://github.com/hail-is/hail/blob/18b57caf7779310eb0cbc2a70f47eda06fb037c5/benchmark/scripts/benchmark_in_pipeline.py#L56. Can you add those? Thanks!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583414827:93,benchmark,benchmark,93,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583414827,1,['benchmark'],['benchmark']
Testability,will look again with high prio when tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7009#issuecomment-531305458:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/7009#issuecomment-531305458,1,['test'],['tests']
Testability,with no assert,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-587144436:8,assert,assert,8,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-587144436,1,['assert'],['assert']
Testability,"with the new mypy update, mypy complains if we don't use the type stubs for our dependencies. This is fixed in main (we add the type stubs) but not in the previously released pip hail, because well it's already released. One option is we decide we don't like this requirement and disable that for mypy (though I do enjoy having the type hints). The problem remains that we lint the released version with the `setup.cfg` on main, so this will fail if we ever tighten our linting. It's not clear to me why we want to lint already-released hail",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1061947409:66,stub,stubs,66,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1061947409,2,['stub'],['stubs']
Testability,"write. The next two came during closes. The outermost exception is from the `using` cleaning up. I'm not sure where the middle exception comes from, I can't imagine who would try to `close` the stream other than `using`. Regardless, it appears that the upload fails in some unrecoverable way. We're writing 2GiB in 256 8MiB chunks in this test, so we have more chances for something to go wrong. Maybe we just have to retry the entire partition when this happens?. https://ci.hail.is/batches/7404773/jobs/145; ```; starting test is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt...; Exception:; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:1307,test,test-ezlis,1307,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['test-ezlis']
Testability,xception: Task not serializable; at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:166); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.refle,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1497,test,testng,1497,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,xception: files not deleted:; gs://hail-test-ezlis/fs-suite/delete-many-files/376b0a1e-ee61-43ab-abb4-d67a0978ee46/791.suffix; 	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); 	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277:1176,test,testng,1176,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277,1,['test'],['testng']
Testability,"y=40.0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false input=[(RodBinding name=input source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.unfiltered.vcf)] recal_file=(RodBinding name=recal_file source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.recal) tranches_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.snps.tranches out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub ts_filter_level=98.5 ignore_filter=null mode=SNP filter_mismatching_base_and_quals=false""; ##CombineVariants=""analysis_type=CombineVariants input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.padded.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=0 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE downsample_to_fraction=null downsample_to_coverage=1000 use_legacy_downsampler=false baq=OFF baqGapOpenPenalty=40.0 fix_misencoded_qu",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:1725,stub,stubs,1725,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,yHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.writeAndClose(ApiaryUnbufferedWritableByteChannel.java:65) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_ja,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:11213,test,test-,11213,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"yeah, I saw that. Not quite sure what to think -- nose seems to do what we need for now, so maybe we don't need a highly maintained testing framework?. At least in the short term, this seems OK to me. I'll spend some time looking into pytest though.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3096#issuecomment-371535328:132,test,testing,132,https://hail.is,https://github.com/hail-is/hail/pull/3096#issuecomment-371535328,1,['test'],['testing']
Testability,"yeah, figured that out after your comment. . I'm a bit bothered by the differences between the build.yaml and the local development process. the build.yaml should be the single source of truth, but it's not in a form that's easy to look to for local testing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6734#issuecomment-515021721:250,test,testing,250,https://hail.is,https://github.com/hail-is/hail/pull/6734#issuecomment-515021721,1,['test'],['testing']
Testability,"yeah, how do I do this? We need test the new CI, build it, and use the new CI to build the rest.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4551#issuecomment-431455953:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/4551#issuecomment-431455953,1,['test'],['test']
Testability,"yeah, my ""test setup"" before the doc tests was wrong (I used ""vds1"" instead of ""vds"")",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2353#issuecomment-339469069:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/2353#issuecomment-339469069,2,['test'],"['test', 'tests']"
Testability,"yeah, saw the same thing after adding a test, thanks for catching!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8031#issuecomment-582095526:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/8031#issuecomment-582095526,1,['test'],['test']
Testability,"yeah, the local backend tests have way more coverage than the java.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9401#issuecomment-689833234:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/9401#issuecomment-689833234,1,['test'],['tests']
Testability,"yeah, we have loads of tests go through this path. If Python tests pass, I'm quite satisfied this is correct!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8057#issuecomment-583559299:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/8057#issuecomment-583559299,2,['test'],['tests']
Testability,"yeah, will add a test for the new functionality though",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558620422:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558620422,1,['test'],['test']
Testability,"yes oops maybe shouldn't post them at 3am. Left is old, right is new, indexed reads got faster, combiner got faster. ```; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; table_read_force_count_ints 120.7% 6.734 8.127 100.0% 1 1; ndarray_matmul_float64_benchmark 113.3% 2.968 3.363 100.0% 1 1; matrix_table_scan_count_rows_2 112.5% 84.908 95.516 100.0% 1 1; read_force_count_p1000 112.3% 3.286 3.692 100.0% 1 1; union_p1000_p1000 109.8% 6.860 7.531 100.0% 1 1; sentinel_read_gunzip_2 109.4% 16.148 17.659 100.0% 1 1; union_p10_p1000 109.3% 73.727 80.584 100.0% 1 1; write_range_matrix_table_p100 109.2% 5.292 5.777 100.0% 1 1; table_aggregate_counter 109.1% 20.077 21.911 100.0% 3 3; python_only_10k_transform 108.9% 34.839 37.950 100.0% 1 1; sentinel_read_gunzip_3 108.8% 16.276 17.712 100.0% 1 1; split_multi 108.1% 13.139 14.209 100.0% 1 1; sentinel_read_gunzip_1 107.6% 16.038 17.263 100.0% 1 1; join_p10_p100 107.4% 11.960 12.848 100.0% 1 1; table_aggregate_array_sum 107.2% 8.820 9.453 100.0% 1 1; table_foreign_key_join_same_cardinality 107.1% 11.470 12.281 100.0% 3 3; import_and_transform_gvcf 106.9% 88.277 94.371 100.0% 1 1; import_bgen_filter_count 106.8% 156.189 166.814 100.0% 7 7; table_annotate_many_nested_dependence_constants 106.8% 6.125 6.539 100.0% 1 1; king 106.3% 425.661 452.628 100.0% 4 4; union_p1000_p10 105.8% 75.901 80.305 100.0% 1 1; shuffle_order_by_10m_int 105.6% 54.898 57.987 100.0% 2 2; shuffle_key_by_aggregate_good_locality 105.3% 9.548 10.051 100.0% 24 24; table_big_aggregate_compilation 105.1% 69.388 72.944 100.0% 1 1; matrix_multi_write_nothing 104.9% 220.009 230.853 100.0% 1 1; blockmatrix_write_from_entry_expr_range_mt 104.9% 73.578 77.182 100.0% 1 1; write_range_table_p1000 104.7% 26.990 28.267 100.0% 1 1; sentinel_cpu_hash_1 104.7% 26.863 28.127 100.0% 1 1; sample_qc 104.4% 20.570 21.477 100.0% 2 2; import_gvcf_force_count 104.3% 74.809 78.025 100.0% 1 1; table_",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11060#issuecomment-971687705:122,Benchmark,Benchmark,122,https://hail.is,https://github.com/hail-is/hail/pull/11060#issuecomment-971687705,1,['Benchmark'],['Benchmark']
Testability,"yes, good idea. I added a hard-coded test of both the arrays and n_discordant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7663#issuecomment-562152990:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/7663#issuecomment-562152990,1,['test'],['test']
Testability,"yes, good idea. I checked OrderingSuite on my machine and all the tests except the first are running at 30ms vs 3-7s again, but it'll be good to double check the CI timings.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5578#issuecomment-471601643:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/5578#issuecomment-471601643,1,['test'],['tests']
Testability,"yes, sure. will do that after practicing talk once more. Also, this did remove the logic that prevents a remapping of entries if the field is a top level entry field. This will make UKBB regression performance worst in the very near term. Should we patch this?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4535#issuecomment-430342969:83,log,logic,83,https://hail.is,https://github.com/hail-is/hail/pull/4535#issuecomment-430342969,1,['log'],['logic']
Testability,"ylinux2014_x86_64.whl (269 kB); Building wheels for collected packages: avro; Building wheel for avro (pyproject.toml): started; Building wheel for avro (pyproject.toml): finished with status 'done'; Created wheel for avro: filename=avro-1.11.2-py2.py3-none-any.whl size=119738 sha256=d7f238f86de270b449b018590930a06270766887328bdb51066eccff2cd696a6; Stored in directory: /home/hadoop/.cache/pip/wheels/e3/a2/1e/5c1be0865f4170a89de34e0a798f32f674a7eaf63a93272c7f; Successfully built avro; Installing collected packages: sortedcontainers, pytz, py4j, commonmark, azure-common, xyzservices, wrapt, uvloop, urllib3, tzdata, typing-extensions, tornado, tenacity, tabulate, six, regex, pyyaml, python-json-logger, pyjwt, pygments, pycparser, pyasn1, protobuf, portalocker, pillow, packaging, orjs; on, oauthlib, numpy, nest-asyncio, multidict, markupsafe, jmespath, idna, humanize, google-crc32c, frozenlist, dill, decorator, charset-normalizer, certifi, cachetools, avro, attrs, asyncinit, async-timeout, yarl, typer, scipy, rsa, rich, requests, python-dateutil, pyasn1-modules, plotly, parsimonious; , jproperties, jinja2, janus, isodate, googleapis-common-protos, google-resumable-media, deprecated, contourpy, cffi, aiosignal, requests-oauthlib, pycares, pandas, google-auth, cryptography, botocore, azure-core, aiohttp, s3transfer, msrest, google-auth-oauthlib, google-api-core, bokeh, azure-storage; -blob, azure-mgmt-core, aiodns, msal, google-cloud-core, boto3, azure-mgmt-storage, msal-extensions, google-cloud-storage, azure-identity; Attempting uninstall: packaging; Found existing installation: packaging 23.2; Uninstalling packaging-23.2:; Successfully uninstalled packaging-23.2; Successfully installed aiodns-2.0.0 aiohttp-3.8.5 aiosignal-1.3.1 async-timeout-4.0.3 asyncinit-0.2.4 attrs-23.1.0 avro-1.11.2 azure-common-1.1.28 azure-core-1.29.3 azure-identity-1.14.0 azure-mgmt-core-1.4.0 azure-mgmt-storage-20.1.0 azure-storage-blob-12.17.0 bokeh-3.2.2 boto3-1.28.41 botocore-1.31.; 41 cache",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:41865,log,logger,41865,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['logger']
Testability,you need to fix up some makefile logic,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6437#issuecomment-504543247:33,log,logic,33,https://hail.is,https://github.com/hail-is/hail/pull/6437#issuecomment-504543247,1,['log'],['logic']
Testability,"you'll get even more benefit from staging, to get rid of the `loadField` overhead. please follow up with DSP for the 1kg gvcfs so we can add a benchmark!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7252#issuecomment-540783673:143,benchmark,benchmark,143,https://hail.is,https://github.com/hail-is/hail/pull/7252#issuecomment-540783673,2,['benchmark'],['benchmark']
Testability,"yping=5 min_indel_fraction_per_sample=0.25 indel_heterozygosity=1.25E-4 indelGapContinuationPenalty=10 indelGapOpenPenalty=45 indelHaplotypeSize=80 indelDebug=false ignoreSNPAlleles=false allReadsSP=false ignoreLaneInfo=false reference_sample_calls=(RodBinding name= source=UNBOUND) reference_sample_name=null sample_ploidy=2 min_quality_score=1 max_quality_score=40 site_quality_prior=20 min_power_threshold_for_calling=0.95 min_reference_depth=100 exclude_filtered_reference_sites=false heterozygosity=0.0010 genotyping_mode=DISCOVERY output_mode=EMIT_VARIANTS_ONLY standard_min_confidence_threshold_for_calling=30.0 standard_min_confidence_threshold_for_emitting=30.0 alleles=(RodBinding name= source=UNBOUND) max_alternate_alleles=6 p_nonref_model=EXACT_INDEPENDENT contamination_fraction_to_filter=0.0 contamination_percentage_per_sample_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.v1.contamination_levels.txt logRemovedReadsFromContaminationFiltering=null exactcallslog=null dbsnp=(RodBinding name=dbsnp source=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.dbsnp.vcf) comp=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub debug_file=null metrics_file=null annotation=[] excludeAnnotation=[] filter_mismatching_base_and_quals=false""; ##VariantAnnotator=""analysis_type=VariantAnnotator input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/references/HybSelOligos/whole_exome_agilent_1.1_refseq_plus_3_boosters/whole_exome_agilent_1.1_refseq_plus_3_boosters.Homo_sapiens_assembly19.targets.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=50 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_as",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:16118,log,logRemovedReadsFromContaminationFiltering,16118,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['log'],['logRemovedReadsFromContaminationFiltering']
Testability,| 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2761,test,test,2761,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2795,test,test,2795,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2830,test,test,2830,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| 78 | 39104 |; | test | test | 6 | 135 | 35712 |; | test | test | 6 | 164 | 54080 |; +----------------------------------+------+-------------+-------+------------+; 9 rows in set (0.00 sec). mysql> select * from aggregated_billing_project_user_resources_v3 where resource_id = 6 limit 100;; +----------------------------------+------+-------------+-------+------------+; | billing_project | user | resource_id | token | usage |; +----------------------------------+------+-------------+-------+------------+; | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4094463424 |; | test | test | 6 | 10 | 49984 |; | test | test | 6 | 15 | 54592 |; | test | test | 6 | 24 | 49280 |; | test | test | 6 | 29 | 53056 |; | test | test | 6 | 31 | 52480 |; | test | test | 6 | 32 | 48000 |; | test | test | 6 | 35 | 107008 |; | test | test | 6 | 37 | 44160 |; | test | test | 6 | 75 | 51520 |; | test | test | 6 | 78 | 39104 |; | test | test | 6 | 81 | 50688 |; | test | test | 6 | 83 | 216064 |; | test | test | 6 | 102 | 48384 |; | test | test | 6 | 119 | 52544 |; | test | test | 6 | 126 | 56064 |; | test | test | 6 | 135 | 81728 |; | test | test | 6 | 142 | 57408 |; | test | test | 6 | 145 | 55488 |; | test | test | 6 | 152 | 48128 |; | test | test | 6 | 155 | 50176 |; | test | test | 6 | 160 | 54464 |; | test | test | 6 | 164 | 54080 |; | test | test | 6 | 173 | 46080 |; | test | test | 6 | 175 | 48704 |; | test | test | 6 | 176 | 45696 |; | test | test | 6 | 183 | 46080 |; | test | test | 6 | 189 | 47168 |; | test | test | 6 | 194 | 30912 |; | test | test | 6 | 199 | 47232 |; +----------------------------------+------+-------------+-------+------------+; 33 rows in set (0.00 sec); ```. ```; mysql> select * from aggregated_billing_project_user_resources_by_date_v3 where resource_id = 6 limit 100;; +--------------+----------------------------------+------+------,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:5986,test,test,5986,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,62,['test'],['test']
Testability,| 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | test | test | 6 | 124 | 39616 |; | 2023-07-13 | test | test | 6 | 126 | 31232 |; | 2023-07-13 | test | test | 6 | 127 | 61696 |; | 2023-07-13 | test | test | 6 | 129 | 60096 |; | 2023-07-13 | test | test | 6 | 131 | 167040 |; | 2023-07-13 | test | test | 6 | 132 | 312768 |; | 2023-07-13 | test | test | 6 | 134 | 53312 |; | 2023-07-13 | test | test | 6 | 136 | 51840 |; | 2023-07-13 | test | test | 6 | 137 | 68224 |; +--------------+----------------------------------+------+-------------+-------+------------+; 100 rows in set (0.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11598,test,test,11598,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,36,['test'],['test']
Testability,| test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2754,test,test,2754,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2788,test,test,2788,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | test | 6 | 77 | 132736 |; | test | test | 6 | 78 | 42432 |; | test | test | 6 | 79 | 563648 |; | test | test | 6 | 80 | 943616 |; | test | test | 6 | 81 | 34048 |; | test | test | 6 | 82 | 23424 |; | test | test | 6 | 83 | 37952 |; | test | test | 6 | 84 | 428352 |; | test | test | 6 | 86 | 40576 |; | test | test | 6 | 88 | 141312 |; | test | test | 6 | 89 | 203584 |; | test | test | 6 | 90 | 465536 |; | test | test | 6 | 91 | 47808 |; | test | test | 6 | 92 | 35456 |; | test | test | 6 | 93 | 768192 |; | test | test | 6 | 94 | 172416 |; | test | test | 6 | 95 | 48384 |; | test | test | 6 | 96 | 146816 |; | test | test | 6 | 97 | 69568 |; | test | test | 6 | 99 | 203520 |; | test | test | 6 | 100 | 44608 |; | test | test | 6 | 101 | 120512 |; | test | test | 6 | 102 | 233472 |; | test | test | 6 | 103 | 219584 |; ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2823,test,test,2823,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10794,test,test,10794,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10841,test,test,10841,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10889,test,test,10889,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10936,test,test,10936,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07-13 | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11031,test,test,11031,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:2000,test,test,2000,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8899,test,test,8899,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8946,test,test,8946,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 |,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10787,test,test,10787,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10834,test,test,10834,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10882,test,test,10882,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10929,test,test,10929,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | test | test | 6 | 114 | 54400 |; | 2023-07-13 | test | test | 6 | 115 | 106240 |; | 2023-07-13 | test | test | 6 | 116 | 49216 |; | 2023-07-13 | test | test | 6 | 117 | 24640 |; | 2023-07-13 | test | test | 6 | 118 | 254080 |; | 2023-07-13 | test | test | 6 | 119 | 37056 |; | 2023-07-13 | test | test | 6 | 120 | 110784 |; | 2023-07-13 | test | test | 6 | 122 | 29888 |; | 2023-07,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:11024,test,test,11024,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,| test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | test | test | 6 | 74 | 28352 |; | test | test | 6 | 76 | 121536 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1993,test,test,1993,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,|; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1890,test,test,1890,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"|wHda9c265f2-fbd8|; 00000070 2d 34 66 31 62 2d 62 63 64 65 2d 66 62 66 32 39 |-4f1b-bcde-fbf29|; 00000080 31 38 30 63 33 34 37 00 00 00 00 |180c347....|; 0000008b; ```. code:; ```ipython3; In [1]: import hail as hl; ...: import gnomad.utils.sparse_mt; ...: ; ...: ; ...: tmp_dir = 'gs://danking/tmp/'; ...: vds_file = 'gs://neale-bge/bge-wave-1.vds'; ...: out = 'gs://danking/foo.vcf.bgz'; ...: ; ...: vds = hl.vds.read_vds(vds_file); ...: mt = hl.vds.to_dense_mt(vds); ...: t = gnomad.utils.sparse_mt.default_compute_info(mt); ...: t = t.annotate(info=t.info.drop('AS_SB_TABLE')); ...: t = t.annotate(info = t.info.drop(; ...: 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; ...: )); ...: t = t.drop('AS_lowqual'); ...: ; ...: hl.methods.export_vcf(dataset = t, output = out, tabix = True); ```; worker failure:; ```; 2023-09-27 16:43:10.389 JVMEntryway: INFO: is.hail.JVMEntryway received arguments:; 2023-09-27 16:43:10.389 JVMEntryway: INFO: 0: /hail-jars/gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar; 2023-09-27 16:43:10.389 JVMEntryway: INFO: 1: is.hail.backend.service.Main; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 2: /batch/83e7aee9e9244f6884b8a84ea81b4c7a; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 3: /batch/83e7aee9e9244f6884b8a84ea81b4c7a/log; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 4: gs://hail-test-ezlis/dking/jars/ch4g3zvqceyo/09526a168d57dac1a26f8caa4ab49593931ed2ef.jar; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 5: worker; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 6: gs://1-day/parallelizeAndComputeWithIndex/al3OJfYZMMNoi9F2jvcAf0jBirVTayRVqro03dnIa1g=; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 7: 7028; 2023-09-27 16:43:10.390 JVMEntryway: INFO: 8: 9060; 2023-09-27 16:43:10.390 JVMEntryway: INFO: Yielding control to the QoB Job.; 2023-09-27 16:43:10.393 Worker$: INFO: is.hail.backend.service.Worker 09526a168d57dac1a26f8caa4ab49593931ed2ef; 2023-09-27 16:43:10.394 Worker$: INFO: running job 7028/90",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:2102,test,test-,2102,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:--",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3795,test,test,3795,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"}),start),GetField(Ref(__iruid_374,struct{start: int32, end: int32}),end),I32(1),false),__iruid_375,MakeStruct(ArrayBuffer((idx,Ref(__iruid_375,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_370,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_290)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_369,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_376,GetField(Ref(__iruid_376,struct{fil",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:4887,test,test,4887,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,1,['test'],['test']
Testability,"}),start),GetField(Ref(__iruid_470,struct{start: int32, end: int32}),end),I32(1),false),__iruid_471,MakeStruct(ArrayBuffer((idx,Ref(__iruid_471,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_466,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_386)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_465,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_472,GetField(Ref(__iruid_472,struct{fil",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:4607,test,test,4607,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['test'],['test']
Testability,"~Actually, this does appear to be a gap in our test coverage. I put in a failing assertion, and both `BlockMatrixIRSuite.scala` and `test_linalg.py` passed.~ Never mind, just forgot to run in local mode. I didn't notice any obvious errors in your code, but I don't think this is the right way to do it, so I tried writing it myself. I'll try to write a test that exercises this path and test both implementations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13807#issuecomment-1766662634:47,test,test,47,https://hail.is,https://github.com/hail-is/hail/pull/13807#issuecomment-1766662634,4,"['assert', 'test']","['assertion', 'test']"
Testability,"~I verified this scales all the way to 50,000 partitions but the batch-driver can't schedule these fast enough to make the test fast. They take less than a second but more than 300ms. We'd need like 64 8-core (512 cores) nodes to bring test time down to a reasonable amount. We should strive to get there but batch would need to schedule at 512 jobs per second for that to make sense.~ Hmm, something went wrong. OK, we'll need to revisit 50k partition tables. But let's get this in, the current code is obviously wrong.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13065#issuecomment-1550142533:123,test,test,123,https://hail.is,https://github.com/hail-is/hail/pull/13065#issuecomment-1550142533,2,['test'],['test']
Testability,"~~Performance note: Was able to do 100k variants by 500k samples with 1000 partitions on 800 cores in 5m4s. We've never successfully done such a multiply on gCloud, but even 50k by 100k examples with the old method took a little more than 20 minutes, so safe to say this is an improvement.~~. Unfortunately, there was a bug that resulted in not all the work getting done and as such the method is not actually as performant as initial tests suggested.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1884#issuecomment-304080520:435,test,tests,435,https://hail.is,https://github.com/hail-is/hail/pull/1884#issuecomment-304080520,1,['test'],['tests']
Testability,~~The test_hail_python tests have mysteriously disappeared.~~ We don't run them in Azure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1564889454:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1564889454,1,['test'],['tests']
Testability,👍 testing now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6825#issuecomment-529527257:2,test,testing,2,https://hail.is,https://github.com/hail-is/hail/pull/6825#issuecomment-529527257,1,['test'],['testing']
Testability,🤔 . I will investigate whether the test coverage is sufficient this afternoon.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7557#issuecomment-555627357:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/7557#issuecomment-555627357,1,['test'],['test']
Usability," -; since we have several workers on a node, and possibly a master as well, all needing to put code; into a file (or wait for someone else to populate the file) so that they can load it. Depending on ; precisely how Spark manages things (which I wouldn't want to depend on too much anyway). In fact it's essential that all the workers share the same DLL file, because otherwise they'd be; trying to load multiple DLL's defining the same symbols. That aspect of it could be handled by; putting the files into a per-process directory and using in-memory (std::mutex) synchronization.; But y'know, given that we have to write the DLL's out, it just seemed natural to let them persist; (and until debugging it on MacOS, I thought I could manage it with nothing but atomic file-create; and atomic-rename, but that didn't quite pan out). As for writing LLVM IR, it can definitely be done, because that's what Endeca/Oracle did. But there; was such a huge learning curve that only 3 people ever did it successfully (I wasn't one of them),; and debugging seemed very unpleasant and slow. [It was also a masterful achievement in ; job-security-through-obscurity, because no-one in management was going to mess with the; two people who wrote it - until the whole project got canned]. ... and in the time I was there, the Endeca/Oracle stuff wasn't distributed, which could be another; place where the generate-LLVM-IR needs some kind of extra glue for distributing compiled code,; whereas the conventional DLL's are trivial to ship around. Not claiming that part of it is difficult,; just that it didn't happen at Oracle until long after I left. In contrast, at PhysicsSpeed it was fairly smooth to implement nice abstractions (dense-join-table,; hash-join-table, tuple-with-order) as template classes which could be tested and debugged; in a standalone environment, and then have simpler codegen using those abstractions. At least,; that's a good way to get a lot of functionality with modest effort - and it ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385:2215,learn,learning,2215,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385,1,['learn'],['learning']
Usability," RV. 4. The hash function on (options, source) is now beefed up to cope with having only a; few distinct values of options; and is modified with the output of ""$(CXX) --version"",; so that when you upgrade your compiler, you won't get hits on modules compiled with the old; compiler. 5. build.gradle has a new target ""nativeLibPrebuilt"", for updating the prebuilt/lib/linux-x86-64; or prebuilt/lib/darwin. 6. The committed prebuilt libraries are built thus:. darwin - On my MacOS laptop, with the default (clang-based) compiler, -march=sandybridge; From my reading, I believe this should be compatible withall MacBook Pro's; released since 2011, and all versions of MacOS since 10.9 (the first to use; libc++ rather than libstdc++ as the default C++ library) - we're now at 10.13,; with 10.14 arriving some time in the fall. linux-x86-64 - Built on my home desktop running Ubuntu-16.04 LTS, and g++-5.0.4, with; -fabi-version=9. In theory this should work with all systems based on g++5.x and; later. I made some effort to move std::string out of the interfaces between prebuilt; and dynamic code, which gives it some chance of working on systems based on; g++-4.x, but haven't tested that. I'm planning to fire up VM's either in cloud or under VirtualBox, to test this against Ubuntu-14.04,; Ubuntu-18.04, and the latest stable RHEL, which should cover most of the bases. In the interest of getting this committed, I have not made changes relating to logging and; error messages. The DLL's are still in the jar, and I think it has to stay that way because; all nodes need to see libhail.so. The header files are also in the jar, and have to be; unpacked in a convoluted way, and that could probably be simplified if/when we change; the approach to packaging. Once this goes in, I can follow it with a PR which adds the NativePackDecoder in RowStore.scala,; controlled by whether environment variable ""HAIL_ENABLE_CPP_CODEGEN"" is defined; (so defaulting to using the JVM bytecode CompiledPackDecoder).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-413997863:2307,simpl,simplified,2307,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-413997863,1,['simpl'],['simplified']
Usability," a near drop-in for Flask, and is the most popular afaik library built around asyncio. It has 2x as many stars as aiohttp, slightly more forks. The original motivation for considering aiohttp: ; https://magic.io/blog/uvloop-blazing-fast-python-networking. In short, one of the creators of asyncio discusses uvloop performance relative to other libraries. They key is:. ""However, the performance bottleneck in aiohttp turned out to be its HTTP parser, which is so slow, that it matters very little how fast the underlying I/O library is."". <img width=""1001"" alt=""screen shot 2019-02-06 at 7 29 00 pm"" src=""https://user-images.githubusercontent.com/5543229/52382977-77a62d00-2a45-11e9-8c04-b8142586eb5c.png"">. <img width=""936"" alt=""screen shot 2019-02-06 at 7 29 19 pm"" src=""https://user-images.githubusercontent.com/5543229/52382985-812f9500-2a45-11e9-9155-97c00ef9784b.png"">. As an aside I've spent some time reading about this over the last ~month, and besides relatively consistent messaging about the messiness of Python's ecosystem, performance and user experience are deeply important to me, so when I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference stand",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:1474,user experience,user experience,1474,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['user experience'],['user experience']
Usability," between them. The caller owns the widget, and the lifetime of `bar` is nested inside that of its caller, so lifetime management isn't an issue.; * If `bar` takes a `Widget` and needs to take ownership, it should take its argument as a `unique_ptr<Widget>`. This serves as documentation that the function is taking over responsibility for deleting the Widget, in a way enforced by the compiler.; * A `unique_ptr<Widget>*` or `unique_ptr<Widget>&` is an in-out parameter, where the function needs to be able to point the pointer somewhere else.; * A const pointer or reference to a unique_ptr should never be used. Just pass a raw pointer or reference. Essentially the same rubric should be used for shared_ptr, replacing ""take ownership"" with ""share ownership"". If a function is simply using a value and isn't concerned with its lifetime management, it should be taking a raw pointer or reference, not a shared_ptr. It should be completely agnostic what method the caller is using to manage the lifetime of the object. Herb Sutter gives his typical thorough analysis of this question [here](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/). > I would be fine with that extra learning curve and complexity if unique_ptr solved a difficult; problem. But - by definition! - it doesn't. It only works for the easy case where you have one; pointer to each object. The invariant that unique_ptr is designed to keep isn't that there is only one pointer to each object. There can be any number of aliases, changing over time, but at any time exactly one must be a unique_ptr, which documents which alias is the ""owner"". The design of and idioms around unique_ptr ensure that all non-owning aliases have lifetimes which are nested inside the lifetime of the owning pointer, and that ownership can be passed around unambiguously. I think the problem that they solve is in large part documentation of API, and the rest is letting the type system help enforce an essential invariant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638:2790,learn,learning,2790,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638,1,['learn'],['learning']
Usability," directly to your last comment. > We have a difference of opinion about the risks. I think I'd say we have a difference of opinion about the importance of the risks. I'm well aware of the potential pitfalls you list there, and more. I just don't think they're a very big deal. I'm also aware of a shit ton of things that are vastly more important than what we're arguing about and we're not talking about those. Let's talk about goals for the project and the landscape of technical risk in our next 1:1. This is assuming we're controlling the compiler in the packaged distribution and on the cloud, we're testing representative user pipelines against gcc and clang, so the scenario you're imagining is either a Hail developer or someone who is sophisticated enough to maintain a Spark cluster (1000x worse configuration nonsense than we're arguing about here, I promise) who is either (1) running old or obscure compiler, or (2) ran into a bug that had test coverage. You're worrying about (1)? What's the worst that will happen, seriously? We'll get a bug report? Let's make sure the compiler version is in the log. > A couple of years ago; > g++ take 40-60 seconds to compile; > fairly heavily templated cod. Can we avoid heavily (or even moderately) templated code? I'm already nervous long-term about the latency of the C++ compiler overhead and if I'm being honest would prefer to generate LLVM IR directly into memory. We should ship whatever compiler is best on the cloud and in the download package. That already covers a vast majority of our users. If clang is the clear winner, we can make that clear in the documentation and maybe warn about gcc it on startup. > But that becomes a problem in itself if we want the shipped compiler to work on a variety of OS'es. Variety isn't a requirement. We don't need to make this hard for ourselves. Let's have two versions: OSX and a recent linux. If we're getting a lot of requests/questions/issues about older versions of linux, we can reevaluate.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410134414:1599,clear,clear,1599,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410134414,2,['clear'],['clear']
Usability," happening. I believe Transaction 1 to be [here](https://github.com/hail-is/hail/blob/40d8882470af71f2d08dd1aa6b723357ca8a1245/batch/sql/estimated-current.sql#L1186-L1188) in MJC, and Transaction 2 to be [here](https://github.com/hail-is/hail/blob/40d8882470af71f2d08dd1aa6b723357ca8a1245/batch/sql/estimated-current.sql#L449-L453) in the jobs_after_update trigger. Looking at the second transaction in context now, it looks like that is probably another MJC transaction toward the end of its run after it updated the jobs table. I think it would make sense then that T2 would still hold the lock for `instances_free_cores_mcpu` but I'm not sure where the contention for `batch_inst_coll_cancellable_resources` is coming from, as I don't see how T1 could be holding any form of lock on it. Either way it seems like how we use these tables is similarly a mess. ```; *** (1) TRANSACTION:; TRANSACTION 644409381, ACTIVE 0 sec starting index read; mysql tables in use 1, locked 1; LOCK WAIT 39 lock struct(s), heap size 3520, 50 row lock(s), undo log entries 28; MySQL thread id 1941960, OS thread handle 140297909716736, query id 1869168359 10.32.3.8 dgoldste updating; UPDATE instances_free_cores_mcpu; SET free_cores_mcpu = free_cores_mcpu + cur_cores_mcpu; WHERE instances_free_cores_mcpu.name = in_instance_name; *** (1) WAITING FOR THIS LOCK TO BE GRANTED:; RECORD LOCKS space id 1263041 page no 3 n bits 264 index PRIMARY of table `dgoldste`.`instances_free_cores_mcpu` trx i; d 644409381 lock_mode X locks rec but not gap waiting; Record lock, heap no 192 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d64676f6c647374652d7374616e64617264; asc batch-worker-dgoldste-standard; (tot; al 36 bytes);; 1: len 6; hex 00002668e81a; asc &h ;;; 2: len 7; hex 710000071136b3; asc q 6 ;;; 3: len 4; hex 800029fe; asc ) ;;. *** (2) TRANSACTION:; TRANSACTION 644409370, ACTIVE 0 sec inserting; mysql tables in use 6, locked 6; 39 lock struct(s), heap size 35",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1036370116:1141,undo,undo,1141,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1036370116,1,['undo'],['undo']
Usability," push to a `:cache` tag, everyone uses that tag.; 2. List all the tags in the repository and include them all as --cache-from's (this doesn't actually work: https://github.com/moby/moby/issues/34715#issuecomment-425933774); 3. Push a tag for each git SHA and then include as --cache-from's the last ten git SHAs on this branch, the most recent common commit with main (i.e. `git merge-base origin/main this-branch`), maybe the current main, and maybe the PR number?; 4. Write our own OCI image builder so we can write our own OCI image cache that actually works the way it ought to (everything in the registry is considered fair game for the cache). It seems like 3 is actually a decent solution that should enable lots of caching.; 1. The last ten SHAs on the branch should speed up repeated builds when you're fixing little bugs.; 2. The most recent common commit with main should avoid rebuilds unless the packages changed.; 3. I suspect the current main is actually not helpful (either 2 will work or 3 wouldn't help).; 4. Pushing to something like `cache-11907` would allow force pushes to still access the last build's images. What do you think of the #3 proposal? . ---. [1]: I had two files:; ```; # cat sleep/Dockerfile; FROM ubuntu:18.04; RUN sleep 10; # cat touch/Dockerfile; FROM ubuntu:18.04; RUN touch foo; ```; To build I use this command (slightly different syntax from the buildctl syntax, but, AFAIK, uses the same backend):; ```; docker buildx \ ; build \; DIRECTORY_NAME_HERE \; --output 'type=image,""name=gcr.io/hail-vdc/dktest,gcr.io/hail-vdc/dktest:cache"",push=true' \; --cache-to type=inline \; --cache-from type=registry,ref=gcr.io/hail-vdc/dktest; ```; Before every build I clear the _local_ cache with:; ```; docker system prune -a; ```; I can clear the remote cache with:; ```; gcloud container images list-tags gcr.io/hail-vdc/dktest --format=""get(digest)"" \; | awk '{print ""gcr.io/hail-vdc/dktest@"" $1}' \; | xargs gcloud container images delete --force-delete-tags; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800:3256,clear,clear,3256,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800,2,['clear'],['clear']
Usability," secret generic secretesfile --from-file=prod/env.txt`. The .env for the web app, where localhost would be replaced by our sub.domain. If you get it running, you may notice there isn't a way to log out... I ripped out all of the UI stuff after speaking with Cotton, and began writing a minimal interface. Just clear the cookie if you need to log out. ```; AUTH0_CLIENT_ID=TD78k23CcdM4pMWoYZwYwKJbQPBj06jY; AUTH0_DOMAIN=hail.auth0.com; AUTH0_SCOPE='opened profile repo read:users read:user_idp_tokens'; AUTH0_AUDIENCE='hail'; AUTH0_REDIRECT_URI='https://localhost/auth0callback'; SCORECARD_URL='https://scorecard.localhost/json'; SCORECARD_USER_URL='https://scorecard.localhost/json/users'; GRAPHQL_URL='https://localhost/api/graphql'; ```. The .env for the gateway; ```; AUTH0_WEB_KEY_SET_URL=https://hail.auth0.com/.well-known/jwks.json; AUTH0_AUDIENCE=hail; AUTH0_DOMAIN=https://hail.auth0.com/. AUTH0_MANAGEMENT_API_CLIENT=eqDY6HWOKd6MzC8kWCFaZUAoZgNUHypA; AUTH0_MANAGEMENT_API_SECRET=<I'll give this>; AUTH0_MANAGEMENT_API_TOKEN_URL=https://hail.auth0.com/oauth/token; AUTH0_MANAGEMENT_API_URL=https://hail.auth0.com/api/v2/users; AUTH0_MANAGEMENT_API_AUDIENCE=https://hail.auth0.com/api/v2/; ```. Organization of the web app is simple. There is a pages directory. Routes match the folder structure. Pages that don't need to maintain their own state look a lot like HTML wrapped in a function:. ```js; export default function() { <div>Hello World </div> }; ```. or in JS ES6 form:; ```js; export default () => <div>Hello World</div>; ``` . Performance is excellent. SSR should run about as fast as jinja2 (will be getting faster in 2019). Client side interactions are obviously far more performant. Bundle sizes are on a downward trajectory; react + react-dom is about as big as jQuery today, and reducing that is a focus on facebook in 2019. There are alternatives to react-dom that are under 10kb, but in practice 20kb is nothing to worry about, especially when initial load doesn't require it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:3301,simpl,simple,3301,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,1,['simpl'],['simple']
Usability," simple hash-based cache: no need to walk complex graph to normalize cache, because in most cases I'm perfectly fine with not re-using cache across different queries (that may have some shared fields). Apollo does something ""smarter"", but much slower: walks a query, checks that the requested fields for a node are the same, and that the node's id is the same, as some other query. 2) no runtime validation of query shape via graphql-tag...uses simple template strings, which are free. We don't care about schema validation in the client...because the server will error when schema is invalid. This should be compile time validated instead, in this case via integration tests. Also removed react-icons... I was going to use this in place of material-design-icons, because I thought loading the full font, when I needed only a few icons, would be unnecessarily expensive. It turns out that I cannot find a library where a single icon import (react-icons or MaterialUI) is smaller than Google's entire material design font: a single font (there are several needed to cover all icons) is ~500B. A single react-icons icon is ~2KB on dev (production may be smaller due to tree shaking). Also, am opposed to CSS-in-JS: slower, worse tooling, larger. Benefits are dynamic selectors, which are really no advantage that I can see (without them can still dynamically apply classes, as in the yee ol days of pleb vanilla js). Home page down to <2kb when not logged in, and 3.1KB logged in. This includes header, simple body, and dark mode button.; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 49 59 pm"" src=""https://user-images.githubusercontent.com/5543229/50264482-ed4c3000-03e8-11e9-80d1-81d195a7b37a.png"">; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 50 33 pm"" src=""https://user-images.githubusercontent.com/5543229/50264483-ed4c3000-03e8-11e9-8180-1409ca16573f.png"">. edit: Further .1KB shaved (gzipped) by replacing the dark mode icon svg with a reference to the material-design-icons font.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665:1593,simpl,simple,1593,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665,1,['simpl'],['simple']
Usability," simplify the computation of the principal components. First let me summarize how the paper presents PC-AiR. ### Original Presentation. Suppose that there are $n_u$ individuals in the unrelated set and $p$ SNPs. Let $X$ be the $n_u \times p$ standardized genotype matrix for the unrelated individuals. The paper starts by computing. $$\Psi \coloneqq \frac{1}{p}XX^T.$$. Next the paper eigendecomposes $\Psi$:. $$\Psi = U \Sigma^2 U^T,$$. where $U$ are the eigenvectors and $\Sigma^2$ is the diagonal matrix with the eigenvalues along the diagonal. Then the paper computes a $p \times n$ matrix $W$ called the **SNP weight matrix**:. $$W \coloneqq X^T U.$$. Suppose that there are $n_r$ individuals in the related set and let $Y$ be the $n_r \times p$ standardized genotype matrix for the related individuals. The paper computes the principal components associated with the related samples with. $$ \frac{1}{p} Y W (\Sigma^2)^{-1}.$$. ### Simplifications. The first simplification that I noticed is that we can do away with the $\frac{1}{p}$ terms. Because $\Psi$ is scaled by $p^{-1}$, the inverse of the eigenvalues, $(\Sigma^2)^{-1}$ is scaled by $p$, which cancels out the $1/p$ term in the calculation of the principal components for the related individuals. From here on, let us redefine $\Sigma^2$ as the diagonal matrix containing the eigenvalues of $XX^T$ (not $\frac{1}{p} XX^T$). Next, by examining the relationship between singular value decomposition (SVD) and eigendecomposition ([Wikipedia link](https://en.m.wikipedia.org/wiki/Singular_value_decomposition#Relation_to_eigenvalue_decomposition)), I realized that it is not necessary to compute $\Psi$. Instead, we can get $U$ and $\Sigma$ from the SVD of $X$:. $$X = U\Sigma V^T,$$. where $V$ is a $p \times p$ basis of the new PCA coordinate space. Then while investigating the meaning of $W$, I realized that $W = X^T U = V \Sigma^T U^T U = V \Sigma^T$. Taking these simplifications into account, I realized that the paper is, in essen",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184:978,simpl,simplification,978,https://hail.is,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184,1,['simpl'],['simplification']
Usability," struct(s), heap size 3520, 50 row lock(s), undo log entries 28; MySQL thread id 1941960, OS thread handle 140297909716736, query id 1869168359 10.32.3.8 dgoldste updating; UPDATE instances_free_cores_mcpu; SET free_cores_mcpu = free_cores_mcpu + cur_cores_mcpu; WHERE instances_free_cores_mcpu.name = in_instance_name; *** (1) WAITING FOR THIS LOCK TO BE GRANTED:; RECORD LOCKS space id 1263041 page no 3 n bits 264 index PRIMARY of table `dgoldste`.`instances_free_cores_mcpu` trx i; d 644409381 lock_mode X locks rec but not gap waiting; Record lock, heap no 192 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d64676f6c647374652d7374616e64617264; asc batch-worker-dgoldste-standard; (tot; al 36 bytes);; 1: len 6; hex 00002668e81a; asc &h ;;; 2: len 7; hex 710000071136b3; asc q 6 ;;; 3: len 4; hex 800029fe; asc ) ;;. *** (2) TRANSACTION:; TRANSACTION 644409370, ACTIVE 0 sec inserting; mysql tables in use 6, locked 6; 39 lock struct(s), heap size 3520, 51 row lock(s), undo log entries 30; MySQL thread id 1941930, OS thread handle 140298159240960, query id 1869168731 10.32.3.8 dgoldste update; INSERT INTO batch_inst_coll_cancellable_resources (batch_id, inst_coll, token, n_running_cancellable_jobs, running_can; cellable_cores_mcpu); VALUES (OLD.batch_id, OLD.inst_coll, rand_token, -1, -OLD.cores_mcpu); ON DUPLICATE KEY UPDATE; n_running_cancellable_jobs = n_running_cancellable_jobs - 1,; running_cancellable_cores_mcpu = running_cancellable_cores_mcpu - OLD.cores_mcpu; *** (2) HOLDS THE LOCK(S):; RECORD LOCKS space id 1263041 page no 3 n bits 264 index PRIMARY of table `dgoldste`.`instances_free_cores_mcpu` trx i; d 644409370 lock_mode X locks rec but not gap; Record lock, heap no 192 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d64676f6c647374652d7374616e64617264; asc batch-worker-dgoldste-standard; (tot; al 36 bytes);; 1: len 6; hex 00002668e81a; asc &h ;;; 2: len 7; hex 7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1036370116:2123,undo,undo,2123,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1036370116,1,['undo'],['undo']
Usability,"""bootDiskSizeGb"": 10; }; },; ""softwareConfig"": {; ""imageVersion"": ""1.1.15"",; ""properties"": {; ""distcp:mapreduce.map.java.opts"": ""-Xmx2457m"",; ""distcp:mapreduce.map.memory.mb"": ""3072"",; ""distcp:mapreduce.reduce.java.opts"": ""-Xmx4915m"",; ""distcp:mapreduce.reduce.memory.mb"": ""6144"",; ""mapred:mapreduce.map.cpu.vcores"": ""1"",; ""mapred:mapreduce.map.java.opts"": ""-Xmx2457m"",; ""mapred:mapreduce.map.memory.mb"": ""3072"",; ""mapred:mapreduce.reduce.cpu.vcores"": ""2"",; ""mapred:mapreduce.reduce.java.opts"": ""-Xmx4915m"",; ""mapred:mapreduce.reduce.memory.mb"": ""6144"",; ""mapred:yarn.app.mapreduce.am.command-opts"": ""-Xmx4915m"",; ""mapred:yarn.app.mapreduce.am.resource.cpu-vcores"": ""2"",; ""mapred:yarn.app.mapreduce.am.resource.mb"": ""6144"",; ""spark:spark.driver.maxResultSize"": ""1920m"",; ""spark:spark.driver.memory"": ""3840m"",; ""spark:spark.executor.cores"": ""2"",; ""spark:spark.executor.memory"": ""5586m"",; ""spark:spark.yarn.am.memory"": ""5586m"",; ""spark:spark.yarn.am.memoryOverhead"": ""558"",; ""spark:spark.yarn.executor.memoryOverhead"": ""558"",; ""yarn:yarn.nodemanager.resource.memory-mb"": ""12288"",; ""yarn:yarn.scheduler.maximum-allocation-mb"": ""12288"",; ""yarn:yarn.scheduler.minimum-allocation-mb"": ""1024""; }; }; },; ""status"": {; ""state"": ""RUNNING"",; ""stateStartTime"": ""2016-12-15T19:00:51.004Z""; },; ""clusterUuid"": ""fb371071-cdd1-4bed-bd1b-3ce3049d07e5"",; ""statusHistory"": [; {; ""state"": ""CREATING"",; ""stateStartTime"": ""2016-12-15T18:59:19.745Z""; }; ],; ""metrics"": {}; }; ```. # Analysis Thus Far. The job doesn't terminate on its own. After stopping the job in the Google Cloud UI, subsequent jobs don't seem to be accepted (i.e. they hang before I see the Spark progress bar). The source of the error is a log statement. Apparently a task failure is triggering a giant log statement. The [log statement (from Spark 2.0 branch)](https://github.com/apache/spark/blob/branch-2.0/core/src/main/scala/org/apache/spark/scheduler/TaskSetManager.scala#L693) seems innocuous. So the real question is why are the tasks failing?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:6250,progress bar,progress bar,6250,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['progress bar'],['progress bar']
Usability,"""the implementations should rely directly on java.util.Random"" Umm, why? From my outsiders perspective I would have assumed that high quality software worked on by the Broad Institute would use a half decent Random Number Generator (RNG). . If I had time to spend on this I would be pushing to change it to something else, perhaps the Apache Commons RNG: commons.apache.org/proper/commons-rng/userguide/rng.html I'm not a Java programmer though, and don't really aspire to be. . The C++ standard rand() function is also well known to be quite bad, though C++11 distributions use an ok implementation (I think default is Mersenne Twister, but there are also other options http://en.cppreference.com/w/cpp/numeric/random). In some C code I was replacing rand() and found this nice library: http://www.pcg-random.org/ no Java implementation though http://www.pcg-random.org/download.html#java-implementation T.T, but the PCG algorithm is actually really simple to implement. The PCG site is worth exploring in general to understand the important differences between RNGs. The GNU Scientific Library also provides C/C++ coders with some RNG implementations https://www.gnu.org/software/gsl/manual/html_node/Random-Number-Generation.html . I realize that it is quite early in development (in terms of versioning, 0.2) so maybe this seems like an insignificant thing, but I also hear that it is actively being used, so.... it also may not matter much, I just would like to bring some attention to it in case it hasn't been considered because I know that the RNG is something that is frequently overlooked.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2314#issuecomment-384085976:951,simpl,simple,951,https://hail.is,https://github.com/hail-is/hail/issues/2314#issuecomment-384085976,1,['simpl'],['simple']
Usability,"# EDIT: DO NOT USE THIS APPROACH. To be clear, a broad user can execute this command on the cluster to fix their environment:. ```; cat >>~/.my.bash.rc <<EOF; mkdir ~/lib; ln -s /broad/software/free/Linux/redhat_7_x86_64/pkgs/openblas_0.2.20/lib/libopenblas.so ~/lib/libblas.so.3; export LD_LIBARRY_PATH=~/lib:$LD_LIBRARY_PATH; EOF; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5559#issuecomment-472956348:40,clear,clear,40,https://hail.is,https://github.com/hail-is/hail/issues/5559#issuecomment-472956348,1,['clear'],['clear']
Usability,# EDIT: See end of thread for new approach. The issue is that `use OpenBLAS` puts `libopenblas.so` on `LD_LIBRARY_PATH`. `netlib-java` links against `libblas.so` which is expected to contain the CBLAS symbols. It appears that Debian-style distributions use `update-alternatives` to symlink `libblas.so` to a library of the user's choice. Broad's UGER cluster does not provide such `update-alternatives` functionality. There exists two fixes:; - create a symlink to `libopenblas.so` named `libblas.so` and put it on the LD_LIBRARY_PATH; - use `LD_PRELOAD` to forcibly load `libopenblas.so`. The two solutions look like:. 1.; ```; mkdir ~/lib; ln -s /broad/software/free/Linux/redhat_7_x86_64/pkgs/openblas_0.2.20/lib/libopenblas.so ~/lib/libblas.so.3; export LD_LIBARRY_PATH=~/lib:$LD_LIBRARY_PATH; ```. 2.; ```; export LD_PRELOAD=/broad/software/free/Linux/redhat_7_x86_64/pkgs/openblas_0.2.20/lib/libopenblas.so; ```. Clearly neither of these are ideal. I recommend users place the lines from option 1 in an rc file.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5559#issuecomment-472953523:919,Clear,Clearly,919,https://hail.is,https://github.com/hail-is/hail/issues/5559#issuecomment-472953523,1,['Clear'],['Clearly']
Usability,"(and to be clear, I'm onboard with the idea of a single command which gets you from zero to simple batch pipelines; jury is out on the Artifact Registry. I think making sure that's configured correctly might be better upstreamed to Sam. Normal users might not have permission to enable/disable things like that.).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662843157:11,clear,clear,11,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662843157,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"(on restart, CI doesn't know that feature branches have been previously tested against master, so it tries to get at least one status finished, for developer feedback purposes)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5550#issuecomment-471026373:158,feedback,feedback,158,https://hail.is,https://github.com/hail-is/hail/issues/5550#issuecomment-471026373,1,['feedback'],['feedback']
Usability,") # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1312: >>> hl.eval(d.keys()) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1329: >>> hl.eval(d.map_values(lambda x: x * 10)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1366: >>> hl.eval(d.values()) # doctest: +NOTEST; Binary file /Users/dking/projects/hail/hail/python/hail/expr/expressions/__pycache__/typed_expressions.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/table.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/matrixtable.cpython-37.pyc matches; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:21: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:24: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:27: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:30: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:42: >>> hl.eval(hl.array([a, b, c])) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:50: >>> table.show() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198:9267,guid,guides,9267,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198,1,['guid'],['guides']
Usability,"* **#14451** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14451?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14451#issuecomment-2045755749:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14451#issuecomment-2045755749,1,['Learn'],['Learn']
Usability,"* **#14455** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14455?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14455#issuecomment-2046054784:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14455#issuecomment-2046054784,1,['Learn'],['Learn']
Usability,"* **#14496** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14496?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14514](https://github.com/hail-is/hail/pull/14514) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>) 👈; * **#14495** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14495?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14475** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14475?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14496#issuecomment-2070873404:1399,Learn,Learn,1399,https://hail.is,https://github.com/hail-is/hail/pull/14496#issuecomment-2070873404,1,['Learn'],['Learn']
Usability,"* **#14496** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14496?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14514](https://github.com/hail-is/hail/pull/14514) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14495** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14495?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14475** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14475?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14495#issuecomment-2070873392:1399,Learn,Learn,1399,https://hail.is,https://github.com/hail-is/hail/pull/14495#issuecomment-2070873392,1,['Learn'],['Learn']
Usability,"* **#14496** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14496?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14514](https://github.com/hail-is/hail/pull/14514) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14495** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14495?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14475** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14475?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14475#issuecomment-2059793128:1399,Learn,Learn,1399,https://hail.is,https://github.com/hail-is/hail/pull/14475#issuecomment-2059793128,1,['Learn'],['Learn']
Usability,"* **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14554](https://github.com/hail-is/hail/pull/14554) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>) 👈; * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14514#issuecomment-2086536884:1163,Learn,Learn,1163,https://hail.is,https://github.com/hail-is/hail/pull/14514#issuecomment-2086536884,1,['Learn'],['Learn']
Usability,"* **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14554](https://github.com/hail-is/hail/pull/14554) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14517#issuecomment-2091504683:1163,Learn,Learn,1163,https://hail.is,https://github.com/hail-is/hail/pull/14517#issuecomment-2091504683,1,['Learn'],['Learn']
Usability,"* **#14533** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14533?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14509** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14554](https://github.com/hail-is/hail/pull/14554) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14509#issuecomment-2080036916:1364,Learn,Learn,1364,https://hail.is,https://github.com/hail-is/hail/pull/14509#issuecomment-2080036916,1,['Learn'],['Learn']
Usability,"* **#14547** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14547?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14547#issuecomment-2105153451:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14547#issuecomment-2105153451,1,['Learn'],['Learn']
Usability,"* **#14551** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14551?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14550** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14550?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14551#issuecomment-2108604092:593,Learn,Learn,593,https://hail.is,https://github.com/hail-is/hail/pull/14551#issuecomment-2108604092,1,['Learn'],['Learn']
Usability,"* **#14551** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14551?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14550** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14550?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14550#issuecomment-2108442266:593,Learn,Learn,593,https://hail.is,https://github.com/hail-is/hail/pull/14550#issuecomment-2108442266,1,['Learn'],['Learn']
Usability,"* **#14553** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14553?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14553#issuecomment-2110596841:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14553#issuecomment-2110596841,1,['Learn'],['Learn']
Usability,"* **#14554** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14509](https://github.com/hail-is/hail/pull/14509) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14554#issuecomment-2110766283:1128,Learn,Learn,1128,https://hail.is,https://github.com/hail-is/hail/pull/14554#issuecomment-2110766283,1,['Learn'],['Learn']
Usability,"* **#14578** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14578?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14578#issuecomment-2163445582:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14578#issuecomment-2163445582,1,['Learn'],['Learn']
Usability,"* **#14582** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14582?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14582#issuecomment-2166604877:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14582#issuecomment-2166604877,1,['Learn'],['Learn']
Usability,"* **#14638** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14638?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14638#issuecomment-2252777195:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14638#issuecomment-2252777195,1,['Learn'],['Learn']
Usability,"* **#14663** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14663?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14662** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14662?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14662#issuecomment-2302524285:593,Learn,Learn,593,https://hail.is,https://github.com/hail-is/hail/pull/14662#issuecomment-2302524285,1,['Learn'],['Learn']
Usability,"* **#14673** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14673?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14673#issuecomment-2334696866:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14673#issuecomment-2334696866,1,['Learn'],['Learn']
Usability,"* **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>) 👈; * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14684#issuecomment-2349934247:1163,Learn,Learn,1163,https://hail.is,https://github.com/hail-is/hail/pull/14684#issuecomment-2349934247,1,['Learn'],['Learn']
Usability,"* **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14683#issuecomment-2349934211:1163,Learn,Learn,1163,https://hail.is,https://github.com/hail-is/hail/pull/14683#issuecomment-2349934211,1,['Learn'],['Learn']
Usability,"* **#14745** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14745?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14745#issuecomment-2435880729:357,Learn,Learn,357,https://hail.is,https://github.com/hail-is/hail/pull/14745#issuecomment-2435880729,1,['Learn'],['Learn']
Usability,". Then the paper computes a $p \times n$ matrix $W$ called the **SNP weight matrix**:. $$W \coloneqq X^T U.$$. Suppose that there are $n_r$ individuals in the related set and let $Y$ be the $n_r \times p$ standardized genotype matrix for the related individuals. The paper computes the principal components associated with the related samples with. $$ \frac{1}{p} Y W (\Sigma^2)^{-1}.$$. ### Simplifications. The first simplification that I noticed is that we can do away with the $\frac{1}{p}$ terms. Because $\Psi$ is scaled by $p^{-1}$, the inverse of the eigenvalues, $(\Sigma^2)^{-1}$ is scaled by $p$, which cancels out the $1/p$ term in the calculation of the principal components for the related individuals. From here on, let us redefine $\Sigma^2$ as the diagonal matrix containing the eigenvalues of $XX^T$ (not $\frac{1}{p} XX^T$). Next, by examining the relationship between singular value decomposition (SVD) and eigendecomposition ([Wikipedia link](https://en.m.wikipedia.org/wiki/Singular_value_decomposition#Relation_to_eigenvalue_decomposition)), I realized that it is not necessary to compute $\Psi$. Instead, we can get $U$ and $\Sigma$ from the SVD of $X$:. $$X = U\Sigma V^T,$$. where $V$ is a $p \times p$ basis of the new PCA coordinate space. Then while investigating the meaning of $W$, I realized that $W = X^T U = V \Sigma^T U^T U = V \Sigma^T$. Taking these simplifications into account, I realized that the paper is, in essence, computing $Y V$ to get the predicted scores associated with the related individuals. (Technically, I think that the paper is computing $Y V \Sigma^{-1}$. I am not sure why they scale the columns by the reciprocal of the eigenvalues here.). ### Simplified Approach. As I understand it, $V$ is a change-of-basis matrix from the original coordinates to the PCA scores. Letting $G$ denote the full standardized genotype matrix of all the individuals, I think we can just return $GV$, where $V$ is defined by the SVD of $X$:. $$X = U\Sigma V^T.$$",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184:1946,simpl,simplifications,1946,https://hail.is,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184,2,"['Simpl', 'simpl']","['Simplified', 'simplifications']"
Usabilitydone.; ERROR: Create cluster failed!; ERROR: gcloud crashed (AttributeError): 'Operation' object has no attribute 'details'. If you would like to report this issue, please run the following command:; gcloud feedback. To check gcloud for common problems, please run the following command:; gcloud info --run-diagnostics; gcloud command:; gcloud beta dataproc clusters create \; ci-test-6boype3d \; --image-version=1.2-deb9 \; --metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip \; --properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false \; --initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:8006,feedback,feedback,8006,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['feedback'],['feedback']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.561ms self 0.561ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.144ms self 0.144ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 1.561ms self 0.732ms children 0.829ms %children 53.12%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:107838,Simpl,Simplify,107838,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.614ms self 0.614ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.292ms self 0.292ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 1.500ms self 0.649ms children 0.852ms %children 56.76%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:93400,Simpl,Simplify,93400,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.759ms self 0.759ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.137ms self 0.137ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 1.862ms self 0.753ms children 1.109ms %children 59.55%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:72221,Simpl,Simplify,72221,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.785ms self 0.785ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.143ms self 0.143ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 2.010ms self 0.828ms children 1.182ms %children 58.80%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:57823,Simpl,Simplify,57823,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.948ms self 0.948ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.222ms self 0.222ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 2.451ms self 0.949ms children 1.502ms %children 61.30%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:49295,Simpl,Simplify,49295,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 3.651ms self 3.651ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 12.144ms self 12.144ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 9.513ms self 3.957ms children 5.556ms %children 58.40%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:40765,Simpl,Simplify,40765,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,".hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ExtractIntervalFilters, iteration: 0 total 0.898ms self 0.898ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/NormalizeNames, iteration: 0 total 2.553ms self 0.011ms children 2.543ms %children 99.59%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/NormalizeNames, iteration: 0/is.hail.expr.ir.NormalizeNames.apply total 2.543ms self 2.543ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/Simplify, iteration: 0 total 8.675ms self 8.675ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ForwardLets, iteration: 0 total 4.506ms self 3.993ms children 0.513ms %children 11.40%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ForwardLets, iteration: 0/is.hail.expr.ir.NormalizeNames.apply total 0.513ms self 0.513ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/is.hail.expr.ir.TypeCheck.apply total 0.120ms self 0.120ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966:3578,Simpl,Simplify,3578,https://hail.is,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966,2,['Simpl'],['Simplify']
Usability,".hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ExtractIntervalFilters, iteration: 1 total 0.021ms self 0.021ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/NormalizeNames, iteration: 1 total 0.384ms self 0.005ms children 0.379ms %children 98.72%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/NormalizeNames, iteration: 1/is.hail.expr.ir.NormalizeNames.apply total 0.379ms self 0.379ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/Simplify, iteration: 1 total 0.103ms self 0.103ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ForwardLets, iteration: 1 total 0.579ms self 0.273ms children 0.306ms %children 52.84%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/ForwardLets, iteration: 1/is.hail.expr.ir.NormalizeNames.apply total 0.306ms self 0.306ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, initial IR/Transform/is.hail.expr.ir.TypeCheck.apply total 0.143ms self 0.143ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966:6721,Simpl,Simplify,6721,https://hail.is,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966,2,['Simpl'],['Simplify']
Usability,".js; 450 B .next/static/css/commons.b770adbe.chunk.css; 5.74 kB .next/static/css/styles.4f393762.chunk.css; 6.93 kB .next/static/runtime/main-76ed****.js; 737 B .next/static/runtime/webpack-8917****.js; ```. Bundling cutoffs can be tweaked, but basically any common dependencies between pages are placed into one chunk. Chunks are loaded in parallel, and no chunks are needed to load the page; it's just HTML on initial render. At least some of the chunks could theoretically be served from a CDN (styles of course, some js). Each package expects a .env file, which organizes the environment variables used in that package. This can be used with Kubernetes. `kubectl create secret generic secretesfile --from-file=prod/env.txt`. The .env for the web app, where localhost would be replaced by our sub.domain. If you get it running, you may notice there isn't a way to log out... I ripped out all of the UI stuff after speaking with Cotton, and began writing a minimal interface. Just clear the cookie if you need to log out. ```; AUTH0_CLIENT_ID=TD78k23CcdM4pMWoYZwYwKJbQPBj06jY; AUTH0_DOMAIN=hail.auth0.com; AUTH0_SCOPE='opened profile repo read:users read:user_idp_tokens'; AUTH0_AUDIENCE='hail'; AUTH0_REDIRECT_URI='https://localhost/auth0callback'; SCORECARD_URL='https://scorecard.localhost/json'; SCORECARD_USER_URL='https://scorecard.localhost/json/users'; GRAPHQL_URL='https://localhost/api/graphql'; ```. The .env for the gateway; ```; AUTH0_WEB_KEY_SET_URL=https://hail.auth0.com/.well-known/jwks.json; AUTH0_AUDIENCE=hail; AUTH0_DOMAIN=https://hail.auth0.com/. AUTH0_MANAGEMENT_API_CLIENT=eqDY6HWOKd6MzC8kWCFaZUAoZgNUHypA; AUTH0_MANAGEMENT_API_SECRET=<I'll give this>; AUTH0_MANAGEMENT_API_TOKEN_URL=https://hail.auth0.com/oauth/token; AUTH0_MANAGEMENT_API_URL=https://hail.auth0.com/api/v2/users; AUTH0_MANAGEMENT_API_AUDIENCE=https://hail.auth0.com/api/v2/; ```. Organization of the web app is simple. There is a pages directory. Routes match the folder structure. Pages that don't need t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:2378,clear,clear,2378,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,1,['clear'],['clear']
Usability,.lang.reflect.Method.invoke(Method.java:498); E 	at is.hail.JVMEntryway$1.run(JVMEntryway.java:105); E 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); E 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); E 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); E 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); E 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); E 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); E 	at java.lang.Thread.run(Thread.java:748); E ; E java.util.concurrent.TimeoutException: Did not observe any item or terminal signal within 5000ms in 'flatMap' (and no fallback has been configured); E 	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.handleTimeout(FluxTimeout.java:294); E 	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.doTimeout(FluxTimeout.java:279); E 	at reactor.core.publisher.FluxTimeout$TimeoutTimeoutSubscriber.onNext(FluxTimeout.java:418); E 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79); E 	at reactor.core.publisher.MonoDelay$MonoDelayRunnable.propagateDelay(MonoDelay.java:270); E 	at reactor.core.publisher.MonoDelay$MonoDelayRunnable.run(MonoDelay.java:285); E 	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68); E 	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28); E 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); E 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180); E 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293); E 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); E 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); E 	at java.lang.Thread.run(Thread.java:748). ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11883#issuecomment-1144890222:4988,Resume,ResumeSubscriber,4988,https://hail.is,https://github.com/hail-is/hail/pull/11883#issuecomment-1144890222,1,['Resume'],['ResumeSubscriber']
Usability,.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_382]; 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_382]; 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_382]; 	at java.lang.Thread.run(Thread.java:750) ~[?:1.8.0_382]; Caused by: is.hail.relocated.com.google.cloud.storage.StorageException: Missing Range header in response; 	|> PUT https://storage.googleapis.com/upload/storage/v1/b/1-day/o?name=parallelizeAndComputeWithIndex/al3OJfYZMMNoi9F2jvcAf0jBirVTayRVqro03dnIa1g%3D/result.7028&uploadType=resumable&upload_id=ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdv7y3A6GjTh6Kv7vrUu2ap2Kv0peLVWsVTAghIs7RCZk9X3fI1BDkeHag1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	| ; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:185) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:7909,Resume,Resume,7909,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['Resume'],['Resume']
Usability,"1. For runImage steps, you can only copy out-of or copy into `/io` (the reasoning is a bit complicated and somewhat historical).; 2. For buildImage steps, you can copy out-of or copy into `/`; 3. the `to` of an `output` specifies a file path in a ""filesystem"" that another step can access if it `dependsOn` the outputting step; 4. the `from` of an `input` specifies a file path in the aforementioned ""filesystem""; the filesystem contains all `outputs` from steps in the inputting step's `dependsOn` clause. We also have a `docker/Makefile` which is an emergency manual build system. I update that so that `hail_version` appears in the root of the docker context. The `service-base` uses the entire repository as its docker context, so I place hail_version at the root of the repository. I moved the `version` function from `hailtop.hailctl` into `hailtop`. It seems broadly useful and isn't specific to hailctl in anyway. Your concern about loading from pkg_resources repeated seems well-founded, so I went ahead and loaded the hail_version at package import time. This seems likely to ensure we learn about a missing hail_version file as early as possible (presumably at service start-time). This also means all hailtop installs need a hail_version file. I only found two other places that use hailtop. One of them was a completely unused Dockerfile. I deleted that (`Dockerfile.hailtop`). The other was Dockerfile.ci-test, which I updated to copy the hail_version file just like service-base. https://github.com/hail-is/hail/compare/main...danking:add-version-endpoint. Do you want to cherry-pick that change onto your add-version-endpoint branch?. One more change request: can we remove the try-catch? I don't expect any errors in that call and I tend to avoid revealing anything about errors to our users. Aiohttp will log the error and the stack trace if you let it rise all the way. Sorry for all the complication! Our build system is the second service we built and is clearly showing its age.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-789279401:1900,learn,learn,1900,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-789279401,2,"['clear', 'learn']","['clearly', 'learn']"
Usability,"1. Functionally, it's already possible -- should be able to do `vds.annotate_variants_db('va.dann')` and get the `va.dann.score` annotation in your VDS. Taking a step further, you can even do `vds.annotate_variants_db('va')` and get all of the annotations. It's just a matter of designing the query builder to encourage people using the function in whatever way we think is optimal, I suppose. What are the downsides to carrying around a lot of annotations in a VDS? I worry that if we supplied a select-all `va` option, everybody would just use that -- but if there aren't any major drawbacks, maybe that's the way to go and we don't even really need a query builder. Or maybe just allowing top-level selections like `va.dann`, `va.chromHMM`, etc. would be a good intermediate solution. 2. Yes! I'd definitely be interested in working on a Scala implementation, if one of you would be willing to work with a newbie :). Though I think if we can get this Python version working & usable first, that may be best. 3. I'll look into this. I don't have a solution yet. That's why in the method documentation, I used ; `.. code-block:: python` statements to add example code snippets. With the `>>> ...` syntax, the build was trying to run those examples and throwing weird errors like you anticipated.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1914#issuecomment-308780378:979,usab,usable,979,https://hail.is,https://github.com/hail-is/hail/pull/1914#issuecomment-308780378,1,['usab'],['usable']
Usability,"1. I really don't understand what this code is trying to do. Can you give me a short explanation in English?. 2. I think you just need single-use Let forwarding to optimize this. It looks like:. Push down the TableCount. (TableCount (Paralellelize ...)) should turn into (ArrayLen (GetField rows ...)). Push the ArrayLen/GetField into the Let. (Is this what your ""MaximizeLets"" is doing? I think that would traditionally be called let lifting.). Now you have (Let __cols_and_globals (ArrayLen (GetField __cols (Ref __cols_and_globals))). Then you forward the single-use Let, and the rest of the code simplifies into (ArrayLen (TableCollect (TableRead ""cols""))), and that should have the static number of rows and be able to be simplified. 3. So how should single-use Let forwarding work? You need two things: to determine there is only one use, and that the single use isn't in a more expensive context, e.g. you don't want to forward a single-use Let into a loop: (Let expensive X (ArrayMap a x <use expensive once>)). Since our control flow is structured, there is a static notion of ""loop nesting depth"", e.g. in the above code, the Let has nesting depth 0, and the use in the ArrayMap body has nesting depth 1. You can only forward into the same nesting depth. 4. Final question is, do you want the let forwarding pass to also delete unused Lets? If you delete a let, that might delete references that make other lets single (or zero) use. In this case, it might be nice to build a ""use-def chain"" data structure, that keeps, for each let, its list of uses (and vice versa). Then, when you delete a Let, you can dynamically delete the references for the right hand side, possibly creating additional optimization opportunities.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5041#issuecomment-452863737:600,simpl,simplifies,600,https://hail.is,https://github.com/hail-is/hail/pull/5041#issuecomment-452863737,2,['simpl'],"['simplified', 'simplifies']"
Usability,"3/release-notes.html. Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; WARNING: Hail primarily tested with Spark 3.3.0, use other versions at your own risk. > Task :shadedazure:compileJava NO-SOURCE; > Task :shadedazure:processResources NO-SOURCE; > Task :shadedazure:classes UP-TO-DATE; > Task :shadedazure:shadowJar; > Task :compileJava NO-SOURCE; > Task :compileScala; > Task :processResources; > Task :classes; > Task :shadowJar. BUILD SUCCESSFUL in 4m 20s; 4 actionable tasks: 4 executed; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; WARNING: The wheel package is not available.; WARNING: The wheel package is not available.; installing to build/bdist.linux-x86_64/wheel; creating build/bdist.linux-x86_64/wheel/hail-0.2.124.dist-info/WHEEL; creating 'dist/hail-0.2.124-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it; adding 'hail/__init__.py'; adding 'hail/builtin_references.py'; adding 'hail/conftest.py'; adding 'hail/context.py'; adding 'hail/hail_logging.py'; adding 'hail/hail_pip_version'; adding 'hail/hail_revision'; adding 'hail/hail_version'; adding 'hail/matrixtable.py'; adding 'hail/table.py'; adding 'hail/backend/__init__.py'; adding 'hail/backend/backend.py'; adding 'hail/backend/hail-all-spark.jar'; adding 'hail/backend/local_backend.py'; adding 'hail/backend/py4j_backend.py'; adding 'hail/backend/service_backend.py'; adding 'hail/backend/spark_backend.py'; adding 'hail/experimental/__init__.py'; a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:16801,Clear,Clear,16801,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Clear'],['Clear']
Usability,"> > 1. It felt outside of the scope of my PR to change that to some queue solution.; > ; > OK, great, thanks for clarifying!. Sure, this is something I am focusing on improving moving forward. Thanks for your feedback.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461210710:209,feedback,feedback,209,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461210710,1,['feedback'],['feedback']
Usability,"> > Do you mean `estimated-current.sql` rather than `estimated-current.yaml` above?; > ; > Yes, sorry for the confusion; > ; > > Also another question is how does the schema update enforce certain order of operations.; > > The rename-job-groups-cancelled-column sql should run before other sqls that depend on the modified column name in job_groups_cancelled table, correct?; > ; > Migrations are applied successively. You cannot edit a previous migration or the order in which they're applied as they've already been applied to the production database. That's why I said this:; > ; > > > I fear you'll have to take inspiration from rename-job-groups-tables.sql by applying one ALTER TABLE command then drop and recreate EVERYTHING that references that name (constraints, triggers, procedures etc). This will likely involve copy+paste and rename.; > ; > I think you need to find any trigger or stored procedure that references that column, drop it and recreate it with the field renamed. It's a little scary. @ehigham Thanks for your comments above. I’ve added the triggers and stored procedures referencing the `job_groups_cancelled` table in `rename-job-groups-cancelled-column.sql`. I was initially confused by `estimate-current.sql`; I thought it was a system-generated file to track the latest batch DDLs after a schema update, rather than a file that is manually updated. After reading this [thread](https://hail.zulipchat.com/#narrow/stream/300487-Hail-Batch-Dev/topic/mysqldump), I completely agree with your point. In other organizations I've worked with, we maintained schema changes in a separate folder, identified by release versions (e.g., semver) and the DLLs are ordered by sequence number. This way, we had a clear history of DDLs and the order they were applied, eliminating the need for files like `estimate-current.sql`. I just have one question: Do we need to manually update `estimate-current.sql` with the schema changes from `rename-job-groups-cancelled-column.sql`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14672#issuecomment-2340993612:1726,clear,clear,1726,https://hail.is,https://github.com/hail-is/hail/pull/14672#issuecomment-2340993612,1,['clear'],['clear']
Usability,"> > I think I'm seeing more where this approach is coming from, specifically we put batches as they exist today in a special category of having no updates and avoid the new code path in that case. An alternative which pairs with my above suggestion of not adding new staging tables is that all batches have at least 1 update. I feel like if we can force all batches down the new code path we'll be incentivized to make it really low overhead for batches that only submit jobs once, and that will benefit all batches, as well as simplifying the mental model. I may be wrong that we can do this with minimal performance tradeoff, but I'd like to try it first.; > ; > Can you elaborate more? I'm not sure which code paths you are referring to. Mainly that the commit procedure branches on whether the start id is 1 and that we sometimes grab the update id from the batch token and sometimes from the update table. Not very different code paths but slightly different, which could lead to some confusion.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1220825403:528,simpl,simplifying,528,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1220825403,1,['simpl'],['simplifying']
Usability,"> @akotlar Ok, so I finally managed to remove the internal requests. The asyncio learning curve was higher than I expected.; > ; > The final product is a lot tighter than I expected. I eliminated all the run_forever and run_once stuff, all the threading, and I was able to move the log back into server.py.; > ; > It involves three new things:; > ; > * [kill the whole loop if anything goes wrong](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R899), which works wonderfully with k8s' automatic pod restarting; > * [use a concurrent thread pool](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R904) for any legacy blocking operations; > * [a blocking-to-async convertor](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R823) and a [blocking iterator to async iterator](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R828) both of which stick blocking operations on a separate thread pool.; > ; > Legacy blocking operations might end up queueing behind one another in the ""blocking pool"", but the rest of the application continues without interruption on the main event loop.; > ; > I took the chance to reorder the k8s refresh and the k8s watch functions to be closer together, but that made the diff worse :/.; > ; > Probably demands another review on Monday.; > ; > cc: @cseed, possibly some asyncio engineering best practices in this. Awesome work. I think this will make batch much more performant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-482761679:81,learn,learning,81,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-482761679,1,['learn'],['learning']
Usability,"> @daniel-goldstein - do you know if compacting or deleting will impact other backgroud processes? Is this table used for anything else after a job group completes?; > ; > ; > ; > Also, should we also compact failed job groups?. I don't believe so, this should be fine. I would usually grep the codebase for the table name. IIRC you should see it used in:; - job insertion, clearly no longer relevant; - triggers which won't fire on cold batches; - the scheduler/fair share which should only care about rows with >0 values and active job groups. Off the top of my head, I see no reason to distinguish between different `complete` states.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14623#issuecomment-2264264725:374,clear,clearly,374,https://hail.is,https://github.com/hail-is/hail/issues/14623#issuecomment-2264264725,1,['clear'],['clearly']
Usability,"> @ehigham the only reason i represented it this way is because that's how it is in the database, like we have job attributes and then we have the always run flag for a job separately from those, but on the frontend i don't think there would be a problem with representing it as an attribute. i could change the new table column on the Batch page to be Attributes and put ""Always Run"" in there only for jobs that are always run, and i could also move ""Always Run"" to be under the Attributes header on the Job page, instead of the Properties header. happy to make either or both changes, just lmk!. That sounds not too dissimilar to how google adds 'labels' to tabular data. Personally I prefer that style, especially as more information gets added and tables get wider.; That said, I don't know how much extra data we'd want to add to this UI so that route may be slightly crystal-balling! Let's keep it simple for now as you've done already and consider something like that in the future if we have more data to add.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14425#issuecomment-2030060565:904,simpl,simple,904,https://hail.is,https://github.com/hail-is/hail/pull/14425#issuecomment-2030060565,1,['simpl'],['simple']
Usability,"> @patrick-schultz have you thought about how to wrap MakeStream (split up to avoid JVM bytecode limits) in the old or new infrastructure?. In general, I don't know how to wrap pieces of a stream in methods, since streams need to be able to jump between labels defined by different stream nodes. Maybe to handle large `MakeStream`s, and decomposing other streams into multiple methods, we could compile some streams into iterators. That shouldn't be hard to do, and would let us experiment with the performance effects. (I've been nervous about stream code never getting jit compiled, and never considered this option. I think I like it.). > Also, ToArray(MakeStream(...)) seems seems like it will be less efficient since it switches of the index while MakeArray inlines the array construction. Yeah, that seems unavoidable. If MakeArray(...) generates better code than ToArray(MakeStream(...)), is it worth keeping MakeArray, with a ToArray(MakeStream(...)) -> MakeArray(...) simplify rule?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8148#issuecomment-590861391:977,simpl,simplify,977,https://hail.is,https://github.com/hail-is/hail/pull/8148#issuecomment-590861391,1,['simpl'],['simplify']
Usability,"> Ah sorry, I forgot to update the original commit message as that's not actually correct. The optimization is that we don't need to iterate through all blobs until we find the exact blob matching our path name. The list operation returns all blobs that start with the prefix of that path. If we see a blob with a different name that is a child of our path f'{path}/foo, then we know it's a directory and don't need to iterate anymore (although it could be a file as well, but in Scala we don't currently throw errors on paths that are both files and directories, so we just choose the first we see). If we see a blob that matches the path exactly, then we know it's a file and stop iterating. The only reason we need to iterate through more than one blob is if there's blobs that are like '{path}zzzzz/foo or '{path}szzzzz. We need to ignore these as they don't provide any information on whether {path} is a file or directory. This is where isChildOf is needed because we need to make sure the blob is actually a child of the path such as '{path}/file and not {path}zzzzz/file. Ah thanks, this makes more sense to me now. > The other option is to do 2 queries. One to check if it's a file and the next to check if there are any child blobs. This does sound simpler conceptually. I'm not sure off the top of my head what is better performance-wise: the two network requests for a directory or loading a whole page of results in a single request when we only need max 2 results. What do you prefer?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13390#issuecomment-1677489464:1259,simpl,simpler,1259,https://hail.is,https://github.com/hail-is/hail/pull/13390#issuecomment-1677489464,1,['simpl'],['simpler']
Usability,"> Ah, I thought I said I was happy to fix the optimized version rather than revert. I do think it can be simplified, though, per my comments.; > ; > Cotton also had the suggestion of writing this function unstaged using two utility functions:; > ; > ```scala; > def findFirstNonZeroByte(addr: Long, n: Long): Long; > def allPresent(addr: Long, n: Long): Long // uses findFirstNonZeroByte; > ```. How do we convert from address: Code[Long] to Long without going through emit? I suppose you mean creating an unstated version, and then calling it through invokeScalaObject?. I'm happy to write this. edit: In this version, if we don't want to assume alignment, what is an easier way other than checking the alignment of the addr? I think we're assuming int alignment in much of our codebase, but this is also not guaranteed (since we only aim to guarantee power of 2, as discussed last week).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561475978:105,simpl,simplified,105,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561475978,1,['simpl'],['simplified']
Usability,"> BTW, this is an extremely awesome change. I didn't think it would be so simple!. I am simply here for the negative LoC points",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11771#issuecomment-1100517115:74,simpl,simple,74,https://hail.is,https://github.com/hail-is/hail/pull/11771#issuecomment-1100517115,2,['simpl'],"['simple', 'simply']"
Usability,"> Banning versions completely is a little tricky because the user can specify a JAR url directly instead of a version. JARs don't currently have a simple way to report pip version to the worker, though we could cook something up. We could also just delete the old JARs. I feel like we should make a (cached) request to ensure that the JAR exists in the front-end upon job submission and return a 400 if it doesn't exist instead of waiting for the worker to error. It would:. - Allow us to remove support by deleting old jars; - Fail fast (I know I have accidentally messed up deploying a dev jar and had to wait until a worker came online to find out); - Avoid alerts from workers that can't find dev jars due to mistakes like I mention above",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1529754664:147,simpl,simple,147,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1529754664,1,['simpl'],['simple']
Usability,"> But I actually think we are in decent shape now. I agree that we’re in decent shape. At the same time, having undocumented methods in our public documentation is not excellent, and we should strive for excellence/complete coverage",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7292#issuecomment-558282593:112,undo,undocumented,112,https://hail.is,https://github.com/hail-is/hail/issues/7292#issuecomment-558282593,1,['undo'],['undocumented']
Usability,"> Commutativity is a nice property for all aggregators to have. In particular, why add restrictive semantics when nobody is asking for them?. Commutativity isn't a property you can add. It either has it or is doesn't. And it doesn't. Same for take. ; ""adding"" it gets you collectAsSet. My proposal only simplifies. We have two semantics for collect, and I want only one. What do I need to do besides delete some key_by simplifier rules (if they are there)? Aggregators should be sequential anyway. > currently agg.collect is non-deterministic. It is? How's that?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5015#issuecomment-448848528:303,simpl,simplifies,303,https://hail.is,https://github.com/hail-is/hail/pull/5015#issuecomment-448848528,2,['simpl'],"['simplifier', 'simplifies']"
Usability,"> Could you explain why you think the boundary is invalid?. Boundary can only be used by consumers who generate an iterator with a new context. Here we were just inserting a clear before each next(), no matter who was consuming the iterator. The particular pipeline that triggered this error was a TableMapPartitions with a ToArray(Ref rows) after an IR with a repartitionedOrderedRDD2",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9425#issuecomment-689597263:174,clear,clear,174,https://hail.is,https://github.com/hail-is/hail/pull/9425#issuecomment-689597263,1,['clear'],['clear']
Usability,"> Drive by comment here as I review PRs, but this is The Python Way, for better or worse. People call it ""easer to ask forgiveness than permission"". I don't personally have strong feelings one way or the other but we do this in many places in our codebase. Be that as it may, throwing if something does not exist is clearer and more robust that catching an error because some operation failed for what is arguably unexceptional, and just hoping that the `KeyError` that that operation threw is because the item did not exist, rather than another `KeyError` risen in any subsequent work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12864#issuecomment-1516489544:316,clear,clearer,316,https://hail.is,https://github.com/hail-is/hail/pull/12864#issuecomment-1516489544,1,['clear'],['clearer']
Usability,"> For an example, let's take DOCKER_PREFIX=gcr.io/hail-vdc. > If a user submits a job using `hailgenetics/python-dill`, what do we do? We see that `image_ref.name()` in `HAIL_GENETICS_IMAGES`, so the current implementation adds the domain gcr.io and image_ref.path becomes `hail-vdc/gcr.io/hailgenetics/python-dill`. Clearly that is incorrect. The proposed change would make the path `hail-vdc/hailgenetics/python-dill`. This does in fact exist! However, this doesn't feel like the intended path based on this part of `publish-public-images.sh`, which suggests it should be `hail-vdc/python-dill`:. Hmm, the proposed implementation actually prints 'hail-vdc/python-dill' for `image_ref.path`:. ```; image_ref = parse_docker_image_reference('hailgenetics/python-dill'); # image_ref.path == 'python-dill'. if image_ref.name() in HAIL_GENETICS_IMAGES:; image_ref.domain = DOCKER_PREFIX.split('/', maxsplit=1)[0] # 'gcr.io'; image_ref.path = '/'.join(DOCKER_PREFIX.split('/')[1:] + [image_ref.path]) . # image_ref.path == 'hail-vdc/python-dill'; ```. Though it should probably be `hail-vdc/hailgenetics/python-dill`? (I also just updated `publish-public-images.sh` to push to `$docker_prefix/hailgenetics/$name`).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10382#issuecomment-828117089:317,Clear,Clearly,317,https://hail.is,https://github.com/hail-is/hail/pull/10382#issuecomment-828117089,1,['Clear'],['Clearly']
Usability,"> For the tutorial, I'll just put a password. I think for Stanley Center stuff we should use GCP auth. Yes. I'm imagining we'll have a tutorial service for intermittent tutorials and a jupyter/Hail service, both, although maybe eventually the latter can be used for both?. > But yeah, I also saw timeouts if a pod can't be scheduled right away. I definitely saw this case (e.g. I refreshed and then got the notebook). > I think imagePullPolicy: Never is a bad idea. Agreed, too aggressive. > I think we should rely on k8s to pull the 5GB jupyter image in a reasonable time period. No. I'm going to be demanding about making our tools responsive with good feedback (not responsive in the sense of responsive web design, but responsive in the sense of fast). It has to be fast, and when can't be, it has to give clear feedback about what it's doing and how long it will take. We routinely see pulling a 5GB image take 1-2m. That's spin up a VM level nonsense. Kubernetes 1.6 had an SLO to schedule 99% of pre-pulled containers within 5s on a 5K node cluster (from the plots it looks like they were closer to 2s):. > Pod startup time: 99% of pods and their containers (with pre-pulled images) start within 5s. from http://webcache.googleusercontent.com/search?q=cache:Soglxt0kAI0J:blog.kubernetes.io/2017/03/scalability-updates-in-kubernetes-1.6.html+&cd=1&hl=en&ct=clnk&gl=us. When we have to pull an image, I want spinner and the estimated spin time. If we have to spin up a node, same. (I know this is a first cut. I'm just saying where I'd like to see us head.). > I just run make clean-jobs, but we could add a delete endpoint and a little web page. OK, here's my picture:; - first time, prompt for password,; - if no notebook is running launch one and go straight there,; - if notebook is running, get a page with a link to the notebook and a link to kill it. That might be considered strange web design (skip the console depending on the state), in which case I'd vote for the console always. (Wha",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4576#issuecomment-431248659:634,responsiv,responsive,634,https://hail.is,https://github.com/hail-is/hail/pull/4576#issuecomment-431248659,7,"['clear', 'feedback', 'responsiv']","['clear', 'feedback', 'responsive']"
Usability,"> Hi Ivan! Thanks so much for picking this up :) I haven't much experience on the batch system but I'll try my best to give accurate feedback. I have a few questions/observations up front:; > ; > 1. Your changes to stored procedures under `batch/sql` make me a little nervous.; > ; > Most of these are migrations applied in the order defined in the build step mentioned in [NOTE 1] except `estimated-current.sql` [NOTE 2].; > ; > I don't think changing these will have the desired effect and may make it impossible for someone to reproduce the database. The only changes to _existing_ sql you'll need to make are in the sql strings in python code.; > ; > 2. This needs to be written as a migration and maybe could be simplified?; > ; > I think this needs to be done as a database migration. We'll have no need for a stored procedure once complete. You can assume current columns and constraints exist, dispense with the error checking and simplify. Can you convert this to a sql script and add it to the end of the list of migrations in `build.yaml`? You'll probably want `online: false` too. I fear you'll have to take inspiration from `rename-job-groups-tables.sql` by applying one `ALTER TABLE` command then drop and recreate EVERYTHING that references that name (constraints, triggers, procedures etc). This will likely involve copy+paste and rename. Alternatively, create, execute then drop the procedure within `rename-job-groups-cancelled`.; > ; > [NOTE 1] migration applied in `build.yaml`; > ; > The relevant build step in `build.yaml` can be found by searching for the entry starting with the yaml below. This controls which migrations are applied and in what order.; > ; > ```yaml; > kind: createDatabase2; > name: batch_database; > databaseName: batch; > ```; > ; > [NOTE 2] estimated-current.yaml; > ; > I don't agree with why we have this. It would be nice to generate this automatically. Anyway, please keep your changes to this file as it's meant for documentation purposes only. None ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14672#issuecomment-2334778045:133,feedback,feedback,133,https://hail.is,https://github.com/hail-is/hail/pull/14672#issuecomment-2334778045,3,"['feedback', 'simpl']","['feedback', 'simplified', 'simplify']"
Usability,"> How do I use a single non-optional allowedOverlap to express this versus a TMP function that doesn't care about keying/sorting at all?. Ah, I see. I think the answer is: you can't. You would need another integer parameter to say ""I actually depend on this prefix of the key being sorted"". It seems like allowedOverlap and requiredSortedPrefix are completely independent. In the single key case (for simplicity), you may or may not care if keys are localized in one partition, and you may or may not care if they're sorted. I don't see any connection.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12587#issuecomment-1407126299:401,simpl,simplicity,401,https://hail.is,https://github.com/hail-is/hail/pull/12587#issuecomment-1407126299,1,['simpl'],['simplicity']
Usability,"> I also think this should just be defined inline in the makeNDArray emitter, we shouldn't need to change this file. Good point that's simpler",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9094#issuecomment-660299878:135,simpl,simpler,135,https://hail.is,https://github.com/hail-is/hail/pull/9094#issuecomment-660299878,1,['simpl'],['simpler']
Usability,"> I believe you're referencing Chrome Bug 675308 which suggests that lines thicker than 1 are broken in some versions of Chrome. My change uses line width 1. My point was that there are browser inconsistencies. > The screenshots you shared seem to suggest that Brave is making the lines somewhat fainter than Safari. I can't explain that. . I also can't explain it, and haven't found a Safari bug that would suggest why this is the case, and yet it is clear from that screenshot that there is a difference. > It feels brittle to fiddle with device pixel ratio and line width to try and simulate line widths smaller than a pixel. My current mental model is that we're just hitting a resolution issue. Internally threejs I believe sets the webgl buffer to pixelRatio * width/height. With resolution 1, resolution seems too low, and this causes fuzzy lines. I don't know why it doesn't work better. To test this hypothesis, I've tried setting pixelRatio to 1 manually on a hidpi display, and it gave a similar fuzzy/thick result, which of course doesn't make any sense if linewidth actually did what it seems it should, and so I agree that not relying on linewidth would be nicer, but would also be additional work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-646227792:452,clear,clear,452,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-646227792,1,['clear'],['clear']
Usability,"> I don't like the proliferation of `.copy` methods -- I find it extremely hard to reason about what they're actually doing and where they should be used. I think it would be reasonable for each PType to implement a `setRequired` method, which seems to require the same amount of total code, but makes things a bit simpler. Will do this. At the same time, would you mind helping me understand why you don't like .copy? This has come up before, and wasn't fully explained. The semantics seem straightforward to me, and for case classes require no new code (since case classes define this copy method): ""construct a new instance of this class, using constructor arguments whose defaults are the object's constructor arguments"". I'd like to understand how you see .copy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8127#issuecomment-589146282:315,simpl,simpler,315,https://hail.is,https://github.com/hail-is/hail/pull/8127#issuecomment-589146282,1,['simpl'],['simpler']
Usability,"> I don't think we have a clear policy on this. When I'm making stacked changes, I use one-commit per PR so that they can be reviewed independently. You're welcome to take either approach. I think the policy we've been roughly sticking to on the compilers team is that people don't need to make one commit per PR, but also shouldn't expect that stacked PRs are reviewed until the parent goes in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8920#issuecomment-638971130:26,clear,clear,26,https://hail.is,https://github.com/hail-is/hail/pull/8920#issuecomment-638971130,1,['clear'],['clear']
Usability,> I feel that I've learned more about RVDs and partitioners. Same here! Good discussion!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5424#issuecomment-467130254:19,learn,learned,19,https://hail.is,https://github.com/hail-is/hail/pull/5424#issuecomment-467130254,1,['learn'],['learned']
Usability,"> I realize I wanted `satisfiesAllowedOverlap(key.length - 1)`, not `satisfiesAllowedOverlap(0)`. Because `allowedOverlap` is tricky to think about, I also gave constructor overloads that take `partitionKey` like in the old style. So this case is equivalent to setting `partitionKey == key` in the constructor `def this(partitionKey: Array[String], kType: TStruct, rangeBounds: IndexedSeq[Interval])`, if you think that's clearer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5424#issuecomment-467085463:422,clear,clearer,422,https://hail.is,https://github.com/hail-is/hail/pull/5424#issuecomment-467085463,1,['clear'],['clearer']
Usability,"> I still generally find nginx and rules about trailing slashes confusing, but as far as I can tell this seems fine. What do you find confusing?. edit:; Not sure if this helps (if not, let me know, I should be able to clearly answer any questions you have):. Normal location blocks (meaning `location /path/to` with no modifiers or regex) match on prefix, which means that Nginx checks whether the specified `/path/to` exists entirely as a word in the longer url, starting from the beginning of that url (after the domain). A `location = /path/to` (with `=` modifier), is similar in that it is checked against the beginning of the url, with the change that the matched prefix must match exactly (there cannot be anything after `/path/to`). The proxy_pass rule with regard to slashes: Say I have `location /path/to/foo { proxy_pass http://127.0.0.1; }`. Upon matching, Nginx will redirect the request to `127.0.0.1/path/to/foo`, because in the absence of a trailing slash, the entire url (after the domain) is appended. If the proxy_pass directive has a trailing slash, the entire matched prefix is dropped, and only the uri after the prefix is appended. Ex: if the url was `http://domain.com/path/to/foo`, the redirect would be `http://127.0.0.1/`. If the url was `http://domain.com/path/to/foo/bar` the redirect would be to `http://127.0.0.1/bar`. In this PR, when no trailing slash is provided to `https://internal.hail.is/monitoring/service`, the exact location block matches, since the inexact match block has a trailing slash, and therefore doesn't match the slash-less url (moot point anyway: if we made both the inexact and exact location blocks have no slashes, the exact one would take precedence). Then we specify that the proxy_pass has a trailing slash for each block, so that the root of the internal website is `/` rather than `/monitoring/{service}`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-555152983:218,clear,clearly,218,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-555152983,1,['clear'],['clearly']
Usability,"> I think I can address collectively by removing all hailctl options that pass through to gcloud. This removes the question of providing them twice, makes all the commands consistent. Do you mean remove all options that are simple pass throughs (such as `--num-worker-local-ssds`) or all options that are also gcloud options (such as `--project`)? The latter could be difficult, since there are some gcloud options that hailctl also needs to read, like `hailctl dataproc start` using `--project` to set requester pays configuration, extending `--initialization-actions` with notebook/VEP init scripts, setting a higher default disk size when `--vep` is specified, etc. or `hailctl dataproc submit` automatically zipping `--py-files`. > I think this also addresses the issue hailctl dataproc submit not supporting --, because you can specify it twice: once to break out of hailctl options, and once to break out of gcloud options to specify options the script being submitted: hailctl dataproc submit --halictl-option -- --gcloud-options -- --script-options and-parameters. Nice. That would solve the problem. I would guess submitting script arguments is more common than using gcloud options here, so it would be nice for the gcloud arguments group to be optional, so that `hailctl dataproc submit cluster -- --script-options` would work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-758100479:224,simpl,simple,224,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-758100479,1,['simpl'],['simple']
Usability,"> I think I'm seeing more where this approach is coming from, specifically we put batches as they exist today in a special category of having no updates and avoid the new code path in that case. An alternative which pairs with my above suggestion of not adding new staging tables is that all batches have at least 1 update. I feel like if we can force all batches down the new code path we'll be incentivized to make it really low overhead for batches that only submit jobs once, and that will benefit all batches, as well as simplifying the mental model. I may be wrong that we can do this with minimal performance tradeoff, but I'd like to try it first. Can you elaborate more? I'm not sure which code paths you are referring to.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1219867494:526,simpl,simplifying,526,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1219867494,1,['simpl'],['simplifying']
Usability,"> I think if it's not too hard of a change, we should add the files with encoded secrets to something like `infra/gcp/data/...`. This makes it clear that these files have a different purpose and gives some indication that they're specific to your repo. If you want to also add prefixing the file name with the repo, then that would make it even clearer. But if it's too much work, don't bother. Maybe something like `infra/gcp/data/hail-is/` etc. I've put all deployment-specific configs in an `$ORGANIZATION_DOMAIN` subfolder now, which hopefully should avoid any collisions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11724#issuecomment-1173211731:143,clear,clear,143,https://hail.is,https://github.com/hail-is/hail/pull/11724#issuecomment-1173211731,2,['clear'],"['clear', 'clearer']"
Usability,"> I think pretty strongly that if nPreservedFields==0, you've done something very wrong. I don't disagree, but if you're concerned about this, I think an assert here is both in the wrong place and the wrong solution. I think for the design the IR, we should focus on (1) simple operations (this is already more complicated than I'd like), (2) that are composable, and (3) minimize special cases. By composability, I mean each IR should have a (local) contract, and each program composed from that local contract should be valid. Breaking this introduces a lot of potential bugs that can't be reasoned about locally, which is not good. The IR nodes do what they do. If you don't like what they do, we should probably find different ones. > so how could you possibly join this with another table? You'd have to create a single partition, and we'd never want to do that. Yeah, create a single partition. Or reshuffle if the partitioner has too little information. How much is too little? What if nPreservedFields==1 and we're down to 1 partition? Should that be an error? 2 partitions? How many partitions is too few? Any time nPreservedFields is less than the requested keys, you could get down to 1 partition. This is a continuous issue and rejecting the extreme case doesn't actually solve the problem. I guess isSorted isn't user exposed, but this seems dangerously close to reporting a user error with an assertion. When the service comes up, hopefully not too long, we're going to want to document the IR and make it public. So if we want to reject this case, we should do it early on: when the IR is parsed and/or constructed. (In general I think to give a nice experience we're going to have to do more up-front validation.) This is what I mean when I say ""find another IR"". In summary:; - If we're going to have this assertion, it needs to be in TableKeyBy constructor, and; - This is a complex and serious issue that isn't actually solved by your assertion.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8649#issuecomment-622415940:271,simpl,simple,271,https://hail.is,https://github.com/hail-is/hail/pull/8649#issuecomment-622415940,1,['simpl'],['simple']
Usability,"> I think we can also get rid of TIterable by refining the type casting in ToSet/ToDict/ToArray/ToStream nodes to reflect the new semantics. Yes, I will consider that in a later pass. > For python---the idea is that we're not really introducing any user-visible changes, right?. Correct. And yes, the optimizer should strip out any glue. > I'm a little nervous about the ToArray(ToStream(dict/set) idiom we're using here. OK, this is fixed. I added a CastToArray which takes a TContainer and does a no-op cast to array type. I use it wherever I can and I added a simplify rule to introduce it when possible.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8171#issuecomment-592219318:563,simpl,simplify,563,https://hail.is,https://github.com/hail-is/hail/pull/8171#issuecomment-592219318,1,['simpl'],['simplify']
Usability,"> I thought we were going to load the genome reference upon initializing the HailContext. That is correct. I just want to double-check the VDS reference matches the global one. We won't support multiple datasets with different references in a single Hail session with this change. That's an intentional assumption to make the first version of reference support simpler. . Right, so you should also add a reference option the HailContext constructor (last argument, named with default to GRCh37 not to break backward compatibility) to set the reference.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1789#issuecomment-302433569:361,simpl,simpler,361,https://hail.is,https://github.com/hail-is/hail/pull/1789#issuecomment-302433569,1,['simpl'],['simpler']
Usability,"> I understand what is going on now. The issue is that the temp directory is getting removed after the first batch.run(), but we're assuming those input files are still there.; > ; > I think we should just clear the files and definitions cache after submission. Ah I see, ya let's not go that far. In that case we don't need any of the changes in this PR that deal with the python input files right? Other than to clear those dictionaries after submit?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12530#issuecomment-1428760971:206,clear,clear,206,https://hail.is,https://github.com/hail-is/hail/pull/12530#issuecomment-1428760971,2,['clear'],['clear']
Usability,> I wanted to remove /batch in a different PR so it was clear what additional changes there were besides rm /batch. Smart. Disregard my suggestion.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7474#issuecomment-551180556:56,clear,clear,56,https://hail.is,https://github.com/hail-is/hail/pull/7474#issuecomment-551180556,1,['clear'],['clear']
Usability,"> I'm curious if there's a way to rewrite this to be more clear about the state machine?. Yes, this is quite confusing as written, I think.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6581#issuecomment-509610153:58,clear,clear,58,https://hail.is,https://github.com/hail-is/hail/pull/6581#issuecomment-509610153,1,['clear'],['clear']
Usability,"> I'm going to start testing, but I think the only thing that wasn't clear to me was how to resolve these sorts of comments. Do I try and fix them now or in a separate PR with an issue to make sure it gets noted? [#14170 (comment)](https://github.com/hail-is/hail/pull/14170#discussion_r1473442106). Since this is merely propagating existing bad behavior, let's change it separately so as to keep the conceptual overhead of this change as small as possible. Please make an issue and paste the link into each comment so that we can later track how we resolved each comment. . > Ok. Still working on getting the tests to pass and cleaning things up. However, I ran into a small snag. The code below needs to be ironed out. Should the number of jobs and state of the job group be recursive or specific to that job group? It's a bit weird for the billing and cancellation to be nested, but the number of jobs etc. are not. More concretely, if a child batch is running, should the parent also be running even if it has no direct child jobs that are running? Thoughts?; > ; > cc: @daniel-goldstein; > ; > ```sql; > UPDATE batches SET; > `state` = 'running',; > time_completed = NULL,; > n_jobs = n_jobs + expected_n_jobs; > WHERE id = in_batch_id;; > ; > ### FIXME FIXME what should the state be of nested job groups?; > UPDATE job_groups; > INNER JOIN (; > SELECT batch_id, job_group_id, CAST(COALESCE(SUM(n_jobs), 0) AS SIGNED) AS staged_n_jobs; > FROM job_groups_inst_coll_staging; > WHERE batch_id = in_batch_id AND update_id = in_update_id; > GROUP BY batch_id, job_group_id; > ) AS t ON job_groups.batch_id = t.batch_id AND job_groups.job_group_id = t.job_group_id; > SET `state` = 'running', time_completed = NULL, n_jobs = n_jobs + t.staged_n_jobs;; > ```. When you say ""billing and cancellation [is] nested"" do you mean that the bill for a group is the sum of the bill for all jobs directly in the group with all jobs in any descendent group?. Since we decided that groups are nested, my inclinatio",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1940341021:69,clear,clear,69,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1940341021,1,['clear'],['clear']
Usability,"> I'm not sure people actually use globals, though. I not sure either. I'm pretty sure @konradjk, does but it may be to work around other issues that can be fixed separately. We're going to set up a regular (quarterly?) meeting with the data group for Hail feedback. We could ask this there.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4027#issuecomment-408648344:257,feedback,feedback,257,https://hail.is,https://github.com/hail-is/hail/issues/4027#issuecomment-408648344,1,['feedback'],['feedback']
Usability,"> In general, I think it is safest not to rely on the order of evaluation. I'm not aware of where we do. Unless I'm missing something, this code splitter does rely on the evaluation order, which is why I asked about it. If a statement `x` has large children, it moves them to execute before `x`, evaluated in the `children` array order (more precisely, in the post-order traversal order), storing their results in locals. I think it's possible to avoid relying on order of evaluation, if instead of only splitting out sequences of statements, we can also split out a `ValueX` directly, replacing it by a call to new method which returns the result. I don't have strong feelings about whether the order should be guaranteed, just want to be clear which it is.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8958#issuecomment-645546246:740,clear,clear,740,https://hail.is,https://github.com/hail-is/hail/pull/8958#issuecomment-645546246,1,['clear'],['clear']
Usability,"> In my proposal, the body would have to have a stream type. It does:; https://github.com/hail-is/hail/pull/8028/files#diff-beb69e35856952c39b4b4929ac5fb987R973. This design is very similar to what you're looking for. The right structure for the node wasn't super clear (we aren't super far along in lowering, so the needs aren't obvious) but I think the core piece that we need in any kind of lowering intermediate is code-generated iterators, which are implemented here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8028#issuecomment-589016449:264,clear,clear,264,https://hail.is,https://github.com/hail-is/hail/pull/8028#issuecomment-589016449,1,['clear'],['clear']
Usability,"> Is it worth making a separate PR that explicitly manages the gcsfuse processes PIDs? If yes, can you do that?. Ya I can do this. Should we try to just keep it simple in this PR then? Like just what you had originally where we return after any calls to unmount fail",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12975#issuecomment-1533445556:161,simpl,simple,161,https://hail.is,https://github.com/hail-is/hail/pull/12975#issuecomment-1533445556,1,['simpl'],['simple']
Usability,"> Just to be clear, the other things you tried besides the nginx config shouldn't be in the PR?. I'm not sure. When I was debugging the issue, I tried a bunch of things, and in the end I'm not sure which ones actually worked. I didn't like timing out the scheduler because that can lead to double-schedule. I think ultimately we should control the work entering the driver by some metric of its performance: like CPU load or latency of handling job_complete messages or latency of scheduling per job.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8149#issuecomment-591935256:13,clear,clear,13,https://hail.is,https://github.com/hail-is/hail/pull/8149#issuecomment-591935256,1,['clear'],['clear']
Usability,"> Looks good to me. PNDArray is a little unstable at the moment and probably going to get shaken up in January, so I don't have a clear sense of any must have default methods. cool, we'll stay on top of it then.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7734#issuecomment-567166972:130,clear,clear,130,https://hail.is,https://github.com/hail-is/hail/pull/7734#issuecomment-567166972,1,['clear'],['clear']
Usability,"> Love this! I think this graph would be easier to reason about if you made all the bars the positive percentage runtime (i.e. runtime_i / mean(runtime)). Then add a gray line at 100% to indicate whether you're faster or slower. In this representation, the relative sizes of the bar are easy to see and meaningful (if bar 1 is half the size of bar 2, then option 1 is 2x as fast). I've taken a different approach. I've made the first argument the baseline against which all other runs are compared. the baseline result isn't plotted anymore, instead differences to the baseline are plotted. I think the plot is a lot clearer now. I also think negative values make more sense as we're comparing runs directly against a baseline. Let me know what you think!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12856#issuecomment-1503596842:617,clear,clearer,617,https://hail.is,https://github.com/hail-is/hail/pull/12856#issuecomment-1503596842,1,['clear'],['clearer']
Usability,"> On the other hand, query can be seen as a DSL on top of Python, so the same guidelines probably don't need to be applied to it. You've hit exactly on the center of a longstanding discussion on the team with no definitive resolution 😄",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9931#issuecomment-768742121:78,guid,guidelines,78,https://hail.is,https://github.com/hail-is/hail/pull/9931#issuecomment-768742121,1,['guid'],['guidelines']
Usability,> Or maybe this should be called [base_path](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)?. Also would appreciate feedback on the naming if you have any,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14056#issuecomment-1877749736:133,feedback,feedback,133,https://hail.is,https://github.com/hail-is/hail/pull/14056#issuecomment-1877749736,1,['feedback'],['feedback']
Usability,"> Re: testing, I wanted to wait on the spawned batch and ensure that it passed, but I had trouble doing that because it looks like the new rich progress bars are printed to stdout so I can't make use of json output and `jq`. Can we print the progress bars to stderr instead?. I think this is possible but I haven't looked into it. I'm opposed to stderr in Notebooks because I don't want it to appear with red background. I've recently realized that a lot of users find it concerning that we print so much red background text. You might also have a quiet mode? If you don't `wait` on the batch, do you still get a progress bar?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967:144,progress bar,progress bars,144,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967,3,['progress bar'],"['progress bar', 'progress bars']"
Usability,"> Right I understand. If a PType always places its items into one region, that doesn't seem problematic. I'm having trouble explaining why I think this is wrong. I think it basically makes nothing simpler, and makes many things more complicated (InferPTypes as written will not work, since you have no idea about regions at that point).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7826#issuecomment-575732118:197,simpl,simpler,197,https://hail.is,https://github.com/hail-is/hail/issues/7826#issuecomment-575732118,1,['simpl'],['simpler']
Usability,"> Sorry, I wasn't clear before. The Batch LD Clumping example does not require Hail Query (and, more importantly, a JVM) to be installed on *the computer that submits the batch*. Hail is imported and used inside of the Batch task that performs GWAS. That task runs inside a Docker container that has Hail installed (its derived from `hailgenetics/hail`).; > ; > ; > ; > I'm hesitant to make the *submission* of a batch dependent on the Hail Query library. Particularly when we have relatively low-effort alternative approaches. I'm delighted any time I see batch tasks use Hail Query! Konrad's Pan UKB work also does this. Right I realize this, why I mentioned unit test (to make unit tests work without calling hail, we would need to wrap each function we want to test in a cli interface, and then containerise those functions...this seems not so friendly to contributors). A 2nd question: how would a contributor submit write hybrid hail query/batch code that called batch from within a hail query script? So hail transforms data, say generates pc's, writes table, and then issues some batch commands that use a pre-built image, as opposed to requiring them to containerise their hail cod3. This will be useful: containerisation is the stated biggest pain point of batch, from my interviews. And one of the biggest hail issues is shuttling data between hail and other processes, which has led people to ask for tighter integration, or more statistical tools (so that they don't need to go out to those other tools, like plink). Showing Batch working from within hail-query scripts would be useful because it will show a much easier integration, and those examples or contributed modules should live somewhere (and that seems not to be hailtop, because this requires batch to be called from code that is calling hail directly, rather than through an image).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432:18,clear,clear,18,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432,1,['clear'],['clear']
Usability,"> That should be a simple fix, though perhaps at this point not worth it as this is not a fruitful optimization for this query. Agreed, although depending on the time line for a good optimization for this query I may circle back on this, as there is currently a bug in this deduplication so if the actual optimizaion won;t be available for a while it might be worth fixing in the meantime",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1839244525:19,simpl,simple,19,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1839244525,1,['simpl'],['simple']
Usability,"> The changes around `toJSON` seem to be unrelated to the introduction of `VType`. Can you explain the motivation there?. This was added as a step towards a greater refactoring effort where I applied a number of changes to try and make various backend implementations look the same.; `Type`, `TableType` and `MatrixType` had a `toJSON` method, with the exception of `BlockMatrixType`. Since these are all virtual types, it seemed like a simple change to unify these methods.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14678#issuecomment-2341475173:437,simpl,simple,437,https://hail.is,https://github.com/hail-is/hail/pull/14678#issuecomment-2341475173,1,['simpl'],['simple']
Usability,"> The check for duplicate key is necessary temporarily to make sure someone doesn't do this.; > ; > ```; > b = batch_client.create_batch(); > j = batch.create_job(); > b2 = batch_client.get_batch(b.id); > j2 = b2.create_job(); > ```; > ; > `j` and `j2` will have the same batch id and job id. Checking the job_id in some capacity is totally necessary, since you're no longer using an auto increment id for the job_id (since you're really emulating one job table per batch, by sticking into a denormalized table containing both batch and job information). However, in the time it takes you to check that the job_id doesn't exist, another process could issue that job_id, invalidating your request, and causing you to fail *anyhow*, despite your check. . I would use the table as the origin of truth of the value, and have python simply read that resulting value. We give MySQL back the control for incrementing the id (by using a nested query, checking the max id in a select statement, and then using +1 that as your id). This will guarantee the behavior that you want, because InnoDB will lock the table.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6238#issuecomment-498333308:828,simpl,simply,828,https://hail.is,https://github.com/hail-is/hail/pull/6238#issuecomment-498333308,1,['simpl'],['simply']
Usability,"> The end we're taking the max (in our favor). I'm not totally comfortable with that, e.g. a preemption happens after a job is finished, but the preemption event gets recorded first, you'll charge the user up to the preemption (max) even tho the job already finished. That doesn't seem right. So I see two options:. I intended to always take the min (user's favor) for the end time and the start time should never change but if it does I take it to be earlier in our favor. If the trigger isn't doing that then I got it wrong. Basically, the way I understood the trigger is as follows:. ```; IF OLD.end_time IS NOT NULL AND (NEW.end_time IS NULL OR NEW.end_time > OLD.end_time) THEN; SET NEW.end_time = OLD.end_time;; SET NEW.reason = OLD.reason;; END IF;; ```. This will update the record to have the new end time unless the old end time is not NULL and either the new end time is null (don't want to overwrite the existing value with a null value) or new end time > old end time (don't want to update the record with an end time that is greater than the existing end time in the database). To not override the values, then we need to set the new end time and reason to the old end time and reason to avoid updating the record. Does this make sense? . > Use the reason to update the end time. Completed time should be taken first, then I think whatever is earliest (in the user's favor) between deletion/preemption and cancellation. I can do this if you think it's clearer. I think the answer will be the same. > Alternatively, we just take the earliest time (in the user's favor) always which I think can only give up a small amount of compute on deletion/preemption or cancellation (where we see the event, and while it's being processed, the job completes). This is what I'm doing (or I think I'm doing). See comment above.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7600#issuecomment-558726375:1466,clear,clearer,1466,https://hail.is,https://github.com/hail-is/hail/pull/7600#issuecomment-558726375,1,['clear'],['clearer']
Usability,"> The missing permission is `storage.buckets.get` though? It seems reasonable for a user to [be able to read metadata](https://cloud.google.com/storage/docs/access-control/iam-permissions) about their own bucket. I'd wager that jgscm was designed for use with the `roles/storage.legacyBucketWriter` role granted on their bucket. What role are we currently granting?. The problem I believe is that they would need project-wide read/list permissions. The blob (folder) is not being created in their bucket, but as a new bucket in the project. edit: You can clearly see the difference if you click on the checkpoint folder, back up to the folder /bucket_name and try to create a folder. No additional permissions needed (it's being made in their bucket)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5788#issuecomment-480375549:555,clear,clearly,555,https://hail.is,https://github.com/hail-is/hail/pull/5788#issuecomment-480375549,1,['clear'],['clearly']
Usability,"> The one thing I'd say is just that when we make a user facing change, we try to make one of the commits look like:; >; > CHANGELOG: Added or_error method to SwitchBuilder; >; > This ends up being helpful when I have to go through and generate the change log for a new version release. Good to know, updated the commit message. It would be nice to document conventions like this in the [docs for software developers](https://hail.is/docs/0.2/getting_started_developing.html#contributing) and/or a [contributing file](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/setting-guidelines-for-repository-contributors).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468:609,guid,guidelines-for-repository-contributors,609,https://hail.is,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468,1,['guid'],['guidelines-for-repository-contributors']
Usability,"> The thinking behind this is that there's a huge amount of re-use of code for an individual from one Hail analysis to the next. So I'm not sure I buy this. Hail is a exploratory data analysis platform, it isn't a SQL engine running nightly billing reports. In particular, as we do whole stage optimization and code generation. It isn't clear to me how you do code-reuse when we're specializing each operation into the global context (happy to hear the plan). For example, tables that have many fields, you will need to load different ones for different queries and in general it is infeasible (exponential) to generate them all. Also, to get sharing you need to break the code up and now you're running the compiler multiple times which also seems bad. Given our focus on large-scale analysis, introducing optimization boundaries for code reuse seems like a bad trade off to me. A significant amount of analysis happens in the cloud where $HOME is ephemeral so you won't get savings between sessions. Finally, there are pipelines that are more standardized but it is my impression they are run on extremely large datasets (hours, overnight) in which case compilation speed isn't important. Finally, there's the complexity around locking that isn't easy and have real technical risk. A compiler cache potentially becomes more appealing in the context of an always-on service. There's no locking issue, and you can start to do things like speculative compilation (e.g. immediately start compiling the decoder (the full decoder? Hmm.) when a user opens the dataset.). I would say getting in a 3x decoder improvement is way more important than this. I would have punted it down the road and instrumented to estimate cache hit rates before building this out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410358596:337,clear,clear,337,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410358596,1,['clear'],['clear']
Usability,"> There are other implementations, such as LibreSSL, but they implement roughly the same interface as OpenSSL. LibreSSL introduced a new interface, libtls, that's designed to be easy to use, secure by default, and match the underlying socket semantics as much as possible. If we ever do any C level networking, we should use it. > ad nihilum. You mean ex nihilo, from nothing?. > I intend to eventually require all our services to refuse to speak anything other than TLS 1.3. Can we get a task for this in Asana? And for mTLS?. > Our system is simpler. We have no root certificate.; > Deploy will run create_certs on every master deploy.; > [O]nce incoming trust is fixed, I am unsure how to smoothly upgrade services. I think we should a have a root certificate for all services in the cluster and verify all certificates are signed by the root certificate. I don't know how to handle creating new certs on every deploy, either. I think we should just create them if they don't already exist. It looks like you're pinning keys for incoming and outgoing, which is awesome. It looks like you're duplicating the keys for each incoming/outgoing list it appears in. Alternatively, you could break the cert secret into two parts: the private key/config needed by the service, and the certs needed by the clients/servers. > In the long run, I want to fix batch to use an entirely different network for callbacks. I agree. Can we get a task for this? Using authorization to control who can talk to whom is great. We should enforce that with network policies. Defense in depth. Another task. > Readiness and liveness probes cannot use HTTP.; > Although k8s supports HTTPS, it does not support so-called ""mTLS"" or ""mutual TLS."". Ugh. But probes can be run via a command, so we should be able to use curl and our client certs for this: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/. ```; livenessProbe:; exec:; command:; - cat; - /tmp/healthy; initialDela",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8561#issuecomment-615209805:544,simpl,simpler,544,https://hail.is,https://github.com/hail-is/hail/pull/8561#issuecomment-615209805,1,['simpl'],['simpler']
Usability,"> This change achieves the effect you desire. What I additionally need from this PR is a mental model of why this change works. I think I communicated this above: as far as I understand it, the effective resolution of the graphic is dependent on both the viewport resolution and the pixel ratio. The observed resolution is too low with pixelRatio 1, gives thick lines. . reference: https://github.com/mrdoob/three.js/issues/16747. > You observe that pixelRatio affects the visual behavior, at least in Safari, when the lineWidth is set to 0.25. In particular, when the pixel ratio is set to 2 and the lineWidth is set to 0.25, the lines appear thinner. No, as you see above, regardless of pixel ratio, Safari's minimum line width is somewhere below one. Setting a linewidth below 1 has no drawbacks; it will just cause the browser to use the min. > If the intention is to make the lines less striking, can we apply an alpha filter instead? Is there another simple & consistent-across-platforms solution?. Not that I know of. Some people use cylinder geometry to get around line thickness issues. Yes, there may be an alpha-based solution, which I brought up above. This will be more complicated, and further increase the development cycle. > It seems to me that relying on this interpolation behavior will lead to code that is more difficult to understand and manipulate. I don't understand. Is there another fix that seems easier?; ; > If the intention is to make the lines less striking, can we apply an alpha filter instead? Is there another simple & consistent-across-platforms solution?. Potentially, but this will obviously be a significantly more complicated fix. The proposed fix is effectively 1 line, and takes care of the observed issue in a wide range of browsers.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-645572011:957,simpl,simple,957,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-645572011,2,['simpl'],['simple']
Usability,"> This has significantly improved the simplicity of the parser, so much so that much of the logic therein could be simplified further, though I think that's beyond the scope of this change. Agreed. But as my follow up will be a complete rewrite of the parser, I definitely don't want to do more to simplify the current one. > I like the separation of type-checking and parsing, however I'd prefer in your implementations of `typecheck` that you assert one thing at a time. That way when things fail, it'll be clear which assertion was fired (ie if `(a && b && c)` fails, you don't know if it's `a` or `b` or `c`, whereas; > ; > ```scala; > assert(a); > assert(b); > assert(c); > ```; > ; > would give you that information. Good suggestion. I only moved assertions here, didn't add any new ones, but I don't mind splitting up some that I moved.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400:38,simpl,simplicity,38,https://hail.is,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400,4,"['clear', 'simpl']","['clear', 'simplicity', 'simplified', 'simplify']"
Usability,"> This looks like it would work. Do you think think that after the region value transition, the Variant, AltAllele, etc., classes will be replaced with their associated views?. I think the classes and the views are roughly the same thing. Make the AltAllele, Variant, etc. classes abstract, and have a concrete implementation (in terms of Scala types) and another mutable one in terms of a RegionValue. See my altAllele comment above. I'm not completely happy with the existing type hierarchy. In particular, the way things are stored now, the contig and start are duplicated in the row (pk vs k) and the ref is duplicated per allele. We did this so AltAllele was a sensible object, but I think this can be rethought and simplified, esp. as we move stuff into the expr language. I still think `Locus` is good (but it should be a `Long`, the global genomic position on the reference) and Variant should be split apart where the alleles are just an `Array[String]` which contains all the alleles including ref. Then the row type for a variant indexed data set should look like:. ```; Struct {; locus: Locus [= Long],; alleles: Array[String],; va: ...; gs: Array[...]; }; ```. Then the question becomes, how do we formulate things like `isSNP`? Does it become `isSNP(alleles, i)`? Is it enough to hang the genome reference off the Locus type and the alleles? Also, we don't carry types with Python values which might cause problems, e.g. rendering Locus. @tpoterba might have thoughts on this, too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2434#issuecomment-344634493:721,simpl,simplified,721,https://hail.is,https://github.com/hail-is/hail/pull/2434#issuecomment-344634493,1,['simpl'],['simplified']
Usability,"> Two comments, and a meta-comment:; > ; > * I had looked over async http libraries and had preferred aiohttp over sanic because (1) ""aiohttp"" is a blessed aio library, (2) performance seemed comparable, (4) aiohttp seemed like a simpler solution which was attractive because the microservices are looking more and more like services and less like web servers (even more so moving all the rendering to the front end with the web app, the legacy version of scorecard using jinja is not the representative case). Did you look at aiohttp?; > * From the code:; > > Global variables that are modified ...; > ; > ; > I don't want to have to think about shared state and locking. I want a shared-nothing architecture in the microservices where the only globals are true constants and threads communication by sending immutable data through queues.; > * Finally, a meta-comment. I started reviewing this when it was just ujson, I did a bit of research about json packages to understand your choices and when I came back, the PR had expanded with all the async stuff. I would have approved the ujson stuff. The async stuff could have been a separate PR. Nobody wants to review a moving target, so the scope of a change should be roughly frozen when you assign a PR and additional changes should be minimized and restricted to that scope. You're welcome to have an open PR with no reviewer if you're still fleshing out the scope, of course. Thanks!. In response:. 1) aiohttp is an option, but appears to be generally considered slow on a per-response basis (published benchmarks, haven't had a chance to try it), even potentially slower than flask. It seems wrong to choose something slower if there are are reasonable alternatives.; 2) The globals were a feature of the initial implementation (the GitHub cache). It felt outside of the scope of my PR to change that to some queue solution. Meta comment. Ok. I didn't think it had been looked at, and expanded what it did pretty quickly, as I realized that ujso",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051:230,simpl,simpler,230,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051,1,['simpl'],['simpler']
Usability,"> Unless I'm missing something, this code splitter does rely on the evaluation order. I don't understand. I think I must be missing something. Maybe there is a bug I don't see. I'm particularly confused by your use of ""rely"". I think splitter, by lifting things out into separate statements (where Block has a clear order of evaluation) implements an order of evaluation. Now, you could ask if the order implemented by splitting is the same as the order of evaluation of the children of the parent. What I'm saying is the the order of evaluation of the children should be undefined, so any choice of splitting out large children is valid (but all orderings being valid, we should prefer left-to-right). Not, I'm just talking about the order of the evaluation of the children. Children are always evaluated before parents (as necessitated by the data flow), and blocks are executed linearly in order.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8958#issuecomment-645561070:310,clear,clear,310,https://hail.is,https://github.com/hail-is/hail/pull/8958#issuecomment-645561070,1,['clear'],['clear']
Usability,"> Why is writing the hail table first more efficient than just directly exporting from the grouped matrixtable?. We take special care to ensure our system is as efficient as possible when reading or writing to this native format. So, it's partly a sociological thing. On the practical end of things, Hail's native formats (for Tables and Matrix Tables) are a partitioned binary format. The partitioned part means Hail can use many cores in parallel to process and write the dataset. The binary part means that Hail need not use unnecessarily large (in terms of bytes) representations of values. These three things together make writing the native formats use less time, use less memory, and be more reliable. ---. > One thing I noticed is the mt_hwe_vals variable in my code below is a MatrixTable and not a GroupedMatrixTable. Is this correct?. Yes, after you aggregate you get back an MT with a different column key. ---. The `entries` method converts your matrix table from a compact and efficient matrix into a ""long"" and inefficient table. I generally recommend avoiding it if you can. However, if you only have a handful of ancestries, I wouldn't expect this to be *that* bad. You can just write the MT itself:. ```python3; ancestry_table = hl.Table.from_pandas(ancestry.astype({""person_id"":str}), key='person_id'); mt = mt.annotate_cols(ancestry = ancestry_table[mt.s].ancestry); mt_hwe_vals = mt.group_cols_by(mt.ancestry).aggregate(hwe = hl.agg.hardy_weinberg_test(mt.GT)); mt_hwe_vals = mt_hwe_vals.select_rows().select_cols() # drop irrelevant row and column fields; mt_hwe_vals.write(bucket + '/hwe.ht'); ```. ---. > I tried modifying the code to what is shown below but I'm still having the same issue. Just to be clear it's the exact same error ""Container exited with a non-zero exit code 137. ""? This makes me think we have an issue with `entries`, because, even though it's not great, it shouldn't be blowing RAM here. Can you share the log file from your previous or next attempt?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636:1727,clear,clear,1727,https://hail.is,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636,1,['clear'],['clear']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14533?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14533** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14533?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14509** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14554](https://github.com/hail-is/hail/pull/14554) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14533#issuecomment-2098889324:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14533#issuecomment-2098889324,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14663?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14663** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14663?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14662** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14662?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14663#issuecomment-2302524299:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14663#issuecomment-2302524299,2,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" targ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14686#issuecomment-2354274670:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14686#issuecomment-2354274670,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" targ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14690#issuecomment-2356990835:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14690#issuecomment-2356990835,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" targ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14691#issuecomment-2357221524:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14691#issuecomment-2357221524,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" targ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14692#issuecomment-2358958754:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14692#issuecomment-2358958754,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" ta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14693#issuecomment-2362149504:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14693#issuecomment-2362149504,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" ta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14696#issuecomment-2362438406:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14696#issuecomment-2362438406,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" ta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14698#issuecomment-2364681873:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14698#issuecomment-2364681873,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 2 dependent PRs ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>, [#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>) 👈; * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" ta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417750658:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417750658,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14732** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14748](https://github.com/hail-is/hail/pull/14748) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://sta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14732#issuecomment-2419668108:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14732#issuecomment-2419668108,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14751** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14747** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @grohli and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Grap",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14747#issuecomment-2438734907:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14747#issuecomment-2438734907,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14748** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14748?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14731** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14731?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14732](https://github.com/hail-is/hail/pull/14732) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14732?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14698** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14698?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14696** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14696?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14693** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14693?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://sta",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14748#issuecomment-2444958196:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14748#issuecomment-2444958196,1,['Learn'],['Learn']
Usability,"> [!WARNING]; > <b>This pull request is not mergeable via GitHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14751** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14747** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @grohli and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Grap",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14751#issuecomment-2457987492:360,Learn,Learn,360,https://hail.is,https://github.com/hail-is/hail/pull/14751#issuecomment-2457987492,1,['Learn'],['Learn']
Usability,"> agree: api is in GH, ergo public, so only point of contention is:. It's public to people who read GitHub and hail docs. It isn't really public to someone who is probing around for endpoints to exploit. > Yes, because I know I will make mistakes (and users will make config mistakes) and I want an easily debuggable system. Sure. > The risk is that an attacker may learn /jobs exists. If that knowledge substantially improves an attacker's ability to infiltrate batch, then we've made a severe error in securing batch. I agree in general, except I think of the problem seemingly inversely. If providing 401/403 responses to the end user substantially improves their experience, then we should do it. If not we shouldn't, because the degree to which an attacker is ""substantially"" enabled, is in my mind anything other than 0. Battles can be lost by small degrees. The choices should be user driven. . I think you told me that your system benefits, so let's do it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-483797170:366,learn,learn,366,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-483797170,1,['learn'],['learn']
Usability,"> all options that are also gcloud options (such as --project)? [That] could be difficult. Yes, this is what I was thinking. `hailctl` could parse (as much as is needed) the `gcloud` options to find options (like `--project`) and modify others (like `--initialization-actions`). The latter is somewhat surprising since one expects everything after the `--` to pass through unchanged. OK, summarizing our options so far:. - hailctl has no options that are also gcloud options. gcloud options go after the `--`, and get modified as needed by hailctl (with a message).; - hailctl has no gcloud options that are simply pass through. gcloud options that are needed by hailctl commands are hailctl options (like `--project`). When a gcloud option is needed by some hailctl command, all hailctl commands take that option (when it makes sense), even if in some cases that makes them simply pass through. This fixes the inconsistency issues, but the user still needs to keep track of which gcloud options needs to be passed to hailctl and which are passed to gcloud directly. If you specify an option twice, once to hailctl and once to gcloud, we invoke gcloud with the option duplicated. Pros and cons:; - The first option has the most consistent interface.; - The first option modifies options after the --, which is surprising.; - The first option involves replication (some of) the gcloud option parsing semantics, which is annoying.; - The second option requires the user to know which gcloud options need to be passed to hailctl instead (but globally, not per-command).; - With the second option, if we want to warn (or error) on duplicate options, we're back to duplicating the gcloud option parsing logic. I think I'm coming around to the second option. > so that hailctl dataproc submit cluster -- --script-options would work. I see, so if there is only one `--` it refers to script options, and if there are two, the first one corresponds to gcloud options? I think that should be doable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554:608,simpl,simply,608,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554,2,['simpl'],['simply']
Usability,"> it seems to provide visibility into what happened during the last run of lets encrypt?. Yes. As far as I know, certbot needs the previous config to do a renew (which I'm not doing yet). > I think the ""sidecar"" approach is simpler than this one (no extra nginx instance, no secrets, no service, no k8s secret creation privileges). We beef up the nginx pod to have a second container sharing a letsencrypt volume (which we've already defined in this PR). You can't mount volumes to multiple pods. You can't even mount volumes to the SAME pod if you want to do rolling updates (because the new instance can't launch because the old one is mounting the volume). I think this means volumes for certs and web root are out. volumes only work for replicated StatefulSets where you can take down one instance at a time for updates.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4624#issuecomment-432724868:224,simpl,simpler,224,https://hail.is,https://github.com/hail-is/hail/pull/4624#issuecomment-432724868,1,['simpl'],['simpler']
Usability,"> old world a MethodBuilder had a FunctionBuilder as a field, and now instead a FunctionBuilder has a ClassBuilder and also a way to make a MethodBuilder. Uh, so there are three pictures, the old way, this PR, and where I'm headed (the PR comment); - the old way, method builder had a function builder, because function builder was really also the class builder (for an AsmFunctionN); - now I added class builder and function builder (which was really building a class) has one; - in the final picture, function builder will be a simpler wrapper to class and method builders. Method builders will point back to their class.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8179#issuecomment-592278110:530,simpl,simpler,530,https://hail.is,https://github.com/hail-is/hail/pull/8179#issuecomment-592278110,1,['simpl'],['simpler']
Usability,"> the TableIR doesn't define partitionCounts. statically known partition counts are used to optimize `.count()` when we know the partition sizes. Here that doesn't apply, so I don't think you need to define that method (it inherits `def partitionCounts = None`). > perhaps ""LiftLiterals"" was changed to ""LiftNonCompilable"". Yes, it was. No need to write a rule for this. Separately, I think we should delete the checklist. It'll never be correct, since it's not checked against the codebase. To add an IR node, one needs to understand the compiler, and we can't adequately document that in a bullet list right now (over time, things should get simpler). . If a node is missing from somewhere it needs to appear, then tests should catch that case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766:644,simpl,simpler,644,https://hail.is,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766,1,['simpl'],['simpler']
Usability,"> validation. Checking the arguments to the `Variant` constructor and generating nice error messages. For CNV work, you want to parallelize over files and not lines within files? You need to process the each file serially?. I'm not against having an additional interface like ParseContext that you can use both for the RDD interface and for the CNV stuff. Another option might be to make `TableReader[C[_]](...): (TStruct, C[Annotation])` but you'll have to do some work to define a `C` that knows how to load itself from a file, for example. It would be useful to be able to write code that can be used with either RDDs or local collections. > For the 'annotation line' are you suggesting a general error-catching wrapper?. Yep! I'll look over your proposed interface. Letting my mind wander a little here. One of the challenges with Spark error handling is propagating errors from the workers back to the master. RDDs are naturally used functionally, so functional error handling might be a better approach. The `Try` monad is the normal way to do functional error handling in Scala. Since we have concurrency, we have multiple errors and we want to preserve them all. In addition, it would be nice if the new generalized `Try` monad tracked warnings (like VCFReport). The main thing it isn't clear how to handle is writing RDDs. You basically want a write to write out the values and return an RDD, but just with the errors and warnings, which you could transfer to the driver at the end with collect.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/462#issuecomment-233041581:1295,clear,clear,1295,https://hail.is,https://github.com/hail-is/hail/pull/462#issuecomment-233041581,1,['clear'],['clear']
Usability,"> what's the argument for a Notes. [Numpy style guide](https://numpydoc.readthedocs.io/en/latest/format.html) indicates that the notes section is the appropriate place for detail on the algorithm. In particular, the types of the column and entry fields produced aren't directly related to their names, and having them in the parameter description is unintuitive. This style is also inconsistent with the rest of our documentation. In reading the above link, I've realized that all our docs sections are out of order - the Parameters section should come first, then Returns, then Notes, then Examples. We were hoodwinked by the [Sphinx example page](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html). I also strongly reject a warning about a possible future scaling limitation of the function that might never even exist in the life of 0.2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5247#issuecomment-461285927:48,guid,guide,48,https://hail.is,https://github.com/hail-is/hail/pull/5247#issuecomment-461285927,1,['guid'],['guide']
Usability,"> you also don't need to add another resource VCF to make this fail. Yeah, I wasn't sure if the array_elements_required would be overridden if no missingness was found in the data. I wanted to test that possibility (updated my comment with the results of that test). > ah, crap, there's a simplify rule that turns a TableCount(TableUnion(...)) into the sum of the TableCounts for each child. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805:289,simpl,simplify,289,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805,1,['simpl'],['simplify']
Usability,"@akotlar Ok, so I finally managed to remove the internal requests. The asyncio learning curve was higher than I expected. The final product is a lot tighter than I expected. I eliminated all the run_forever and run_once stuff, all the threading, and I was able to move the log back into server.py. It involves three new things:; - [kill the whole loop if anything goes wrong](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R899), which works wonderfully with k8s' automatic pod restarting; - [use a concurrent thread pool](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R904) for any legacy blocking operations; - [a blocking-to-async convertor](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R823) and a [blocking iterator to async iterator](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R828) both of which stick blocking operations on a separate thread pool. Legacy blocking operations might end up queueing behind one another in the ""blocking pool"", but the rest of the application continues without interruption on the main event loop. I took the chance to reorder the k8s refresh and the k8s watch functions to be closer together, but that made the diff worse :/. Probably demands another review on Monday. cc: @cseed, possibly some asyncio engineering best practices in this",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047:79,learn,learning,79,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047,1,['learn'],['learning']
Usability,@bw2 any feedback on above? Should I close this issue or do you have more inquiries on symbolic variants?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/803#issuecomment-279597422:9,feedback,feedback,9,https://hail.is,https://github.com/hail-is/hail/issues/803#issuecomment-279597422,1,['feedback'],['feedback']
Usability,@catoverdrive @tpoterba rebased and simplified. have at it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2451#issuecomment-345880084:36,simpl,simplified,36,https://hail.is,https://github.com/hail-is/hail/pull/2451#issuecomment-345880084,1,['simpl'],['simplified']
Usability,"@catoverdrive I dismissed your review because I added more changes to address your comment on the FIXME. I think addRegionValue now does a minimal amount of work. In particular, if you write add a region value at the top level to the same region (rvb.start(t); rvb.addRegionValue(rv); rvb.end), it doesn't modify the region but simply sets start = rv.offset. This means that rvb.start can't actually do anything, and some other add routines need to check if they need to allocate. This adds some overhead that should get compiled away in the staged version. I also improved the tests to test adding to the same as well as a different region.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902:328,simpl,simply,328,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902,1,['simpl'],['simply']
Usability,"@catoverdrive I see now there is an unwrap that should have had this same effect, so I don't quite understand why this was necessary (although it seemed to be). Anyway, this still seems simpler/more correct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4499#issuecomment-428398568:186,simpl,simpler,186,https://hail.is,https://github.com/hail-is/hail/pull/4499#issuecomment-428398568,1,['simpl'],['simpler']
Usability,@catoverdrive review after #2238 goes in because this PR will simplify after #2238 merges.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2249#issuecomment-332245478:62,simpl,simplify,62,https://hail.is,https://github.com/hail-is/hail/pull/2249#issuecomment-332245478,1,['simpl'],['simplify']
Usability,"@catoverdrive this came up while Konrad and I were trying to understand a discrepancy with PCA in python sklearn, which automatically mean centers. This simplest solution would be to add a map that mean centers between irm and computeSVD here:; `val svd = irm.computeSVD(k, computeLoadings)`; But this is redundant when the data is already mean-centered, as in pca_of_normalized_genotypes. Let's discuss when you're back and I can make the changes and update the docs which need some work anyhow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2734#issuecomment-358096966:153,simpl,simplest,153,https://hail.is,https://github.com/hail-is/hail/issues/2734#issuecomment-358096966,1,['simpl'],['simplest']
Usability,"@cseed As I briefly mentioned in an email on Saturday, I moved notebook loading to a prefetched model. Data and page loading are decoupled: When one clicks on the Notebook link, routing to the page happens without waiting for data to come in from notebook-api.hail.is. If data is available, it is shown, else a loading indicator. To avoid loading screens, I call notebook-api.hail.is asynchronously immediately after a user hits app.hail.is, whether they're on the Notebook page or not. Therefore, typically a user will never see a Notebook page loading indicator, when they click from one page to Notebook (say they land on the home page: by the time they click on Notebook, the data is fetched, so no loading screen). Furthermore, web sockets keep that Notebook data up to date, again regardless of whether a user is on the Notebook page. So in all instances except when a user lands on Notebook directly, the time it takes to reach the Notebook page is << 16ms (seemingly ~3ms). A similar approach is now used for scorecard, except Scorecard will render data in the SSR phase (because I consider scorecard less important, and because most users of the web app won't need it), and will not prefetch data when on another page. However, clicking on ""Scorecard"" from another page will not cause routing to block while waiting for the https://scorecard.hail.is/json response; instead a loading indicator will be shown. In practice I find this preferable, because the GUI feels more responsive, and users get more feedback. This demonstrates the core benefit of universal rendering approaches, and how they can improve page loading times over even the leanest server-side rendered application.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-462221996:1480,responsiv,responsive,1480,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-462221996,2,"['feedback', 'responsiv']","['feedback', 'responsive']"
Usability,"@cseed FWIW, Java has a [`BitSet` class](https://docs.oracle.com/javase/8/docs/api/java/util/BitSet.html) that implements dynamically growing BitSets. It implements `set`, `clear` (for every bit), `clear` (your `reset`), and `get` (your `apply`).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1955#issuecomment-311982284:173,clear,clear,173,https://hail.is,https://github.com/hail-is/hail/pull/1955#issuecomment-311982284,2,['clear'],['clear']
Usability,"@cseed I think this is probably ready for review. There's a couple of things that I'm going to look at/do more that aren't in this PR:; - add better docs for how random functions behave; - add more tests for randomness in various IR nodes; - add more tests and make sure that the optimization rules preserve the context that random functions are going to be evaluated in. @tpoterba and I talked briefly about the last one and it might involve restructuring simplify, since some rules are fine in isolation but will return different results when performed in combination (and sometimes one of the rules in question doesn't even involve the random node, which is kind of difficult to account for currently)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967:457,simpl,simplify,457,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967,1,['simpl'],['simplify']
Usability,@cseed I'll close this and just ask for feedback on the branch diff once I have a pipeline working end-to-end and thoughts on proper integration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2890#issuecomment-366455460:40,feedback,feedback,40,https://hail.is,https://github.com/hail-is/hail/pull/2890#issuecomment-366455460,1,['feedback'],['feedback']
Usability,@cseed Merging this PR will make the diff for #536 simpler.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/558#issuecomment-238264351:51,simpl,simpler,51,https://hail.is,https://github.com/hail-is/hail/pull/558#issuecomment-238264351,1,['simpl'],['simpler']
Usability,"@cseed Should the behavior of the logs be to not have a link if the job is ready or pending or to report None? Right now, we report None for `status` if it's ready or pending and have a web.HTTPNotFound error for logs when it's pending or ready. I think we should have it be consistent between logs and status and I think having no links in the ready and pending case is clearer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769:371,clear,clearer,371,https://hail.is,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769,1,['clear'],['clearer']
Usability,@cseed thanks for the feedback; I'll try urlsafe_b64encode,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-459425712:22,feedback,feedback,22,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-459425712,1,['feedback'],['feedback']
Usability,@cseed this should be clear for merge now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/696#issuecomment-244097334:22,clear,clear,22,https://hail.is,https://github.com/hail-is/hail/pull/696#issuecomment-244097334,1,['clear'],['clear']
Usability,"@cseed, details below, exec summary: a series of confusions and confusing interfaces lead to cloud tools deployment issues. The resolution is to fix the deploy script to always deploy `cloudtools` for python 2 and 3 (because *it* works with both). Users will need `python2` somewhere on their PATH, but `gsutil` will guide them through that, i.e. not our problem. There is no problem except that I cannot approve my own PR. I noticed @catoverdrive wasn't actually assigned, so it wasn't in her scorecard queue. ---. There was a bit of confusion around this recently that @catoverdrive figured out. So, `gsutil` only supports `python2`, but it's happy to search through your path for a variety of binaries with suggestive names until it finds a valid python 2.x binary. `cloudtools` itself works with any version of python (there was a recent breaking change in the release of python 3.7, which broke cloud tools [but that's been resolved in an open PR](https://github.com/Nealelab/cloudtools/pull/91/files#diff-7decff7c08c5270a32982ea34483b8cbR11)). Now, wrt PYPI, @catoverdrive discovered that the version of python you use to run `setup.py bdist_wheel` determines which version of python is deployed. This is rather confusing and, since none (or many?) of us did not know this, we accidentally uploaded a variety of [cloud tools versions on pypi, as you've noted](https://pypi.org/simple/cloudtools/). There was some earlier confusion wherein I thought we should only support `python2`, but that was a mistake on my end. We should support both versions, and when the user tries to start a cluster, `gsutil` will provide an error message guiding them to install `python2`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419912588:317,guid,guide,317,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419912588,3,"['guid', 'simpl']","['guide', 'guiding', 'simple']"
Usability,"@daniel-goldstein Can you please check the last commit real quick? Should just be a simple rename, but want someone to double check I didn't do something bad.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475#issuecomment-1766736992:84,simpl,simple,84,https://hail.is,https://github.com/hail-is/hail/pull/13475#issuecomment-1766736992,1,['simpl'],['simple']
Usability,"@daniel-goldstein Here's my thoughts. Sound good?; I think we simply need to add an `is_rate_limit` check to `retry_transient_errors` in hailtop, and pass rather than logging it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779:62,simpl,simply,62,https://hail.is,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779,1,['simpl'],['simply']
Usability,"@daniel-goldstein I think these changes resolve the problems in hailtop.batch. My guiding philosophy there was sync methods are always shims around async methods. https://github.com/daniel-goldstein/hail/compare/fix-nest-asyncio-apply...danking:hail:fix-nest-asyncio-apply. The issue in Query is deeper. We lazily compute the type of IRs, but to know the type of reading a Table, MatrixTable, or BlockMatrix, we must make a network request to read the metadata from that object. I'm not exactly sure what to do here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13677#issuecomment-1769152362:82,guid,guiding,82,https://hail.is,https://github.com/hail-is/hail/pull/13677#issuecomment-1769152362,1,['guid'],['guiding']
Usability,@daniel-goldstein Let's put it at guide-analysis.hail.is.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14067#issuecomment-1839682395:34,guid,guide-analysis,34,https://hail.is,https://github.com/hail-is/hail/issues/14067#issuecomment-1839682395,1,['guid'],['guide-analysis']
Usability,"@daniel-goldstein When you get a chance, I'd appreciate your high level opinion on this addition before I start thoroughly testing everything. Goal is to have something before the ATGU Welcome Workshop September 5th. I know the import locations are an issue in `initialize.py`. I mainly want feedback on whether the code passes the high level smell test and whether I've over designed this with too many checks and prompts or am forgetting something that would be nice to check for.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180:292,feedback,feedback,292,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180,1,['feedback'],['feedback']
Usability,"@daniel-goldstein sorry for the slow review turnaround! the code looks good to me, and i'll try it out tomorrow morning to make sure i don't have any additional feedback. thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13632#issuecomment-1781834758:161,feedback,feedback,161,https://hail.is,https://github.com/hail-is/hail/pull/13632#issuecomment-1781834758,1,['feedback'],['feedback']
Usability,"@danking . The redirect was caused by lack of X-Forwarded-Host + X-Forwarded-Proto; * https://github.com/expressjs/express/blob/b8e50568af9c73ef1ade434e92c60d389868361d/lib/request.js#L429; * remoteAddress is the url from the last hop, not any forwarded address. > I'll revisit why ghost issues redirects with the new changes this afternoon.; Ghost doesn't read this header. They use X-Forwarded* headers, via Express: https://expressjs.com/en/guide/behind-proxies.html ; * Expresses finds ips using proxy-addr package (the getter is req.ips): https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/lib/request.js#L349; * The test: https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/test/req.ip.js; * proxy-addr does not support x-real-ip: https://github.com/jshttp/proxy-addr/issues/15. Ghost apparently uses X-Forwarded-For to rate limit malicious addresses:. * ""6. Include the X-Forwarded-For header, populated with the remote IP of the original request.; Without this, we aren't able to detect spam traffic patterns and your site risks being rate limited or incorrectly restricted.""; * https://ghost.org/faq/can-i-run-ghost-from-a-subdirectory/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066:444,guid,guide,444,https://hail.is,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066,1,['guid'],['guide']
Usability,"@danking @cseed should be ready for testing soon. pruned portions we're not using atm, wrote docker files, tested. if you want to run both packages on your local machine, you could use the top-level docker file (or each package's). To start a local instance of the web app, simply run:; `npm install && npm bootstrap`. To get a hot-reloading version of the web app (links to your browser, refreshes all changes): `cd packages/public && npm run dev`. To start the gateway: `cd packages/hail-api-gateway && nodemon index.js`. Dev mode routing is slow. To see a production, minified build: `cd packages/public && npm run build && npm run prod-test`.; * Build is a kind of compilation process. Dev dependencies are pruned, the app is split into static bundles, and minified. Some optimizations, like inlining of some React functions also occurs. This is independent of anything V8 does . This will also show a neat readout of all bundles:; ```; Browser assets sizes after gzip:. 2.79 kB .next/static/gZEz****/pages/_app.js; 2.42 kB .next/static/gZEz****/pages/_error.js; 502 B .next/static/gZEz****/pages/auth0callback.js; 349 B .next/static/gZEz****/pages/index.js; 745 B .next/static/gZEz****/pages/notebook.js; 856 B .next/static/gZEz****/pages/scorecard.js; 243 B .next/static/gZEz****/pages/tutorial.js; 99.4 kB .next/static/chunks/commons.294f****.js; 101 B .next/static/chunks/styles.9f25****.js; 450 B .next/static/css/commons.b770adbe.chunk.css; 5.74 kB .next/static/css/styles.4f393762.chunk.css; 6.93 kB .next/static/runtime/main-76ed****.js; 737 B .next/static/runtime/webpack-8917****.js; ```. Bundling cutoffs can be tweaked, but basically any common dependencies between pages are placed into one chunk. Chunks are loaded in parallel, and no chunks are needed to load the page; it's just HTML on initial render. At least some of the chunks could theoretically be served from a CDN (styles of course, some js). Each package expects a .env file, which organizes the environment variables used",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:274,simpl,simply,274,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,1,['simpl'],['simply']
Usability,"@danking I changed the homepage banner to ""Hail is hiring engineers!"" so it's clearer. I'll merge now but happy to keep iterating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1948#issuecomment-311694515:78,clear,clearer,78,https://hail.is,https://github.com/hail-is/hail/pull/1948#issuecomment-311694515,1,['clear'],['clearer']
Usability,"@danking I have a tab delimited file of pc-air pcs to try to run with the hail pc-relate (with header--SampleId, PC1, PC2,...PC10) . But I am not clear on the format of the scores_table.scores object needed to pass to pc-relate. Is it sorted by SampleId or indexed somehow? What are the steps in Hail to create that table from a tab delimited file? . `rel = hl.pc_relate(dataset.GT, 0.01,scores_expr=scores_table[dataset.col_key].scores, min_kinship=0.1)`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-390736100:146,clear,clear,146,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-390736100,1,['clear'],['clear']
Usability,"@danking I think this is set barring change to libsass compilation. If possible, I would like to keep the scss compilation in notebook.py, and create an issue to make a better solution as a step 2. I recognize what you want in broad terms, and am happy to do it, and at the same time the proposed alternative appears more complex, requires me to spend time on research (how to implement auto-reload, not having to retype `make scss` for every style change), and doesn't clearly add value compared to the remaining user-facing work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5430#issuecomment-467256972:470,clear,clearly,470,https://hail.is,https://github.com/hail-is/hail/pull/5430#issuecomment-467256972,1,['clear'],['clearly']
Usability,@danking I'm keeping the changes requested state on until I get the full scope of changes that need to be made. Would be good to get your feedback first after my responses so I can do all changes in one pass.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475#issuecomment-1739219812:138,feedback,feedback,138,https://hail.is,https://github.com/hail-is/hail/pull/13475#issuecomment-1739219812,1,['feedback'],['feedback']
Usability,"@danking I've made all of the changes except the one about the interface for `af_dist`. (I agree with the point you're making about it being confusing that both functions are seeded separately and need to be kept the same for the same dataset to be produced, but making it take a function might just add a lot of visual noise. Honestly, I'm really tempted to take all of the `seed` stuff out of `balding_nichols_model` and put a note in to the effect of ""for reproducible results, use `hl.set_global_seed()` just before creating a dataset."" How would you feel about that?). re: how seeding functions happens more generally---I don't think anything I've said in the docs is actually incorrect (I would consider array transformations a context, kind of like the axes of a table or matrix table, so the table should end up with `x = y = z` but different values for the elements in the array, and different values between rows), but I'll work on making the language clearer so that they actually say what I mean. w.r.t. `[z, z]` being two draws---I have sometimes waffled on this but in general I think I tend to disagree, in part because I have struggled to come up with a consistent definition of what that would mean. Happy to talk more about this, but I don't know if it's super relevant to balding nichols since all of the distributions are once-per-element draws.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4166#issuecomment-415848091:962,clear,clearer,962,https://hail.is,https://github.com/hail-is/hail/pull/4166#issuecomment-415848091,1,['clear'],['clearer']
Usability,"@danking IIUC the TeamCity build is now working with spark-2.1.0 but not spark-2.0.2; (even though running `./gradlew shadowJar archiveZip` on my laptop with spark-2.0.2 works fine.). From looking at the Maven repo; https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-spark-20_2.11; and the elasticsearch-spark connector docs; https://www.elastic.co/guide/en/elasticsearch/hadoop/master/spark.html; there's no indication that some versions only support v2.1, though it does say; ```; elasticsearch-hadoop allows Elasticsearch to be used in Spark in two ways: through the dedicated support available since 2.1 or through the Map/Reduce bridge since 2.0. Spark 2.0 is supported in elasticsearch-hadoop since version 5.0; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320274234:365,guid,guide,365,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320274234,1,['guid'],['guide']
Usability,"@danking So would be curious to get your thoughts. I was initially going to make this change such that instead of these activation tokens the batch worker authenticates with a cloud access token. I had a minor pause though because this means that other workers (even from other namespaces) could potentially impersonate each other, whereas they cannot in our current token system. Is that a concern to you? I suppose we are already pretty compromised if someone gets control of the batch worker's identity, considering the buckets that the batch worker has access to.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13071#issuecomment-1551928272:210,pause,pause,210,https://hail.is,https://github.com/hail-is/hail/pull/13071#issuecomment-1551928272,1,['pause'],['pause']
Usability,"@danking Tests are passing. What's the problem?. Strange, cloudtools is showing 2.0.0 available, but pip is installing 1.1.6. ```; + pip search cloudtools; cloudtools (2.0.0) - Collection of utilities for working on the Google Cloud Platform.; datawire-cloudtools (0.2.6) - Datawire Cloud Tools; cloudseed (0.0.1) - Cloudtools; + pip install -U cloudtools; Collecting cloudtools; Downloading https://files.pythonhosted.org/packages/47/f1/bec895151ea74b2117c66620840e9a86436b376927b557b080289b61f754/cloudtools-1.1.16-py3-none-any.whl; Installing collected packages: cloudtools; Successfully installed cloudtools-1.1.16; ```. Ah, cloudtools 1.2.0 and 2.0.0 were set up as python 2 packages, see https://pypi.org/simple/cloudtools/:. ```; cloudtools-1.1.16-py2-none-any.whl; cloudtools-1.1.16-py3-none-any.whl; cloudtools-1.2.0-py2-none-any.whl; cloudtools-2.0.0-py2-none-any.whl; ```. 1.1.16 is set up for both. @liameabbott I assume we're only supporting Python 3?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154:711,simpl,simple,711,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154,1,['simpl'],['simple']
Usability,"@danking and I are giving feedback on this branch. Patrick, the test failure is due to you testing on files in scratch that are only local to your system. You should remove the test annotation @Test on scratch before pushing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904:26,feedback,feedback,26,https://hail.is,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904,1,['feedback'],['feedback']
Usability,"@danking danking There is a lot of things going on in this dataset that makes PCs challenging. This has 3 replicate related samples (mother and 2 children). It also contains EA, AA and Dominicans. So there is lots of recent admixture. Among the 5000 samples, there are 800 related samples. We ran eigenstrat with the 5000 samples + 2500 1000 genomes samples and those PCs look good. . So I am not sure it is the replicates that are the underlying cause. It may simply be the lack of the 1000 Genomes samples in the dataset for the PCs. I am will try adding the 1000 genomes samples to see if that fixes things. If that works, the docs would just need to recommend merging in the 1000 genomes data. I will get back to you on those results. That would be great to implement PC-Air in Hail to help streamline the processing of this type of dataset! I will be glad to test it out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451:461,simpl,simply,461,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451,1,['simpl'],['simply']
Usability,@danking do you have an intuition for what the block size and capacity defaults should be for the cache?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3095#issuecomment-371984225:24,intuit,intuition,24,https://hail.is,https://github.com/hail-is/hail/pull/3095#issuecomment-371984225,1,['intuit'],['intuition']
Usability,"@danking img: https://github.com/genuinetools/img. ""Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder. img is more cache-efficient than Docker and can also execute multiple build stages concurrently, as it internally uses BuildKit's DAG solver. The commands/UX are the same as docker {build,tag,push,pull,login,logout,save} so all you have to do is replace docker with img in your scripts, command line, and/or life."". Oops, seems it doesn't quite work unprivileged yet, see: https://github.com/genuinetools/img#running-with-docker. Waiting on an upstream docker change, no movement in two months. Hrm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290:300,UX,UX,300,https://hail.is,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290,1,['UX'],['UX']
Usability,@danking ready for another review. This PR has expanded because we needed to properly store/clear session-specific stuff in a bunch of places.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5872#issuecomment-484569009:92,clear,clear,92,https://hail.is,https://github.com/hail-is/hail/pull/5872#issuecomment-484569009,1,['clear'],['clear']
Usability,"@danking this should be good to go. Works. In future PR, should we place move gateway to last line of projects.txt? Not clear to me if CI is enforcing gateway-last in a different way",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5412#issuecomment-466476158:120,clear,clear,120,https://hail.is,https://github.com/hail-is/hail/pull/5412#issuecomment-466476158,1,['clear'],['clear']
Usability,"@danking:. > Hey @shengqh !; > ; > Yeah, this is a bug in Kryo, a serialization library used by Spark, which cannot handle the size of data you're producing.; > ; > This is partly a deficiency in Hail: we assume that PLINK files are relatively small, in particular that the number of variants is small.; > ; > This issue was supposedly resolved in Spark 2.4.0+ and 3.0.0+ by [apache/spark@3e03303](https://github.com/apache/spark/commit/3e033035a3c0b7d46c2ae18d0d322d4af3808711) . You appear to be running Apache Spark version 3.3.2, so I'm surprised you encountered this. Can you confirm which version of the Kryo JAR you have in your environment?. I don't know the Kryo JAR. I tested on both docker images hailgenetics/hail:0.2.126-py3.11 and hailgenetics/hail:0.2.127-py3.11. > ; > Can you also share a bit of information about this PLINK file? `import_plink` could obviously be modified to support 30M+ variant PLINK files, but I'd like to understand better why such large PLINK files exist. Do you expect these files to continue to grow in size? Do other consumers of these PLINK files want one PLINK file per chromosome? Would it be possible to generate many PLINK files per chromosome such that all the PLINK files have roughly the same size in bytes?. We have a 35K cohort. The VCF format of chr1 is 2.4T. So we prefer to deliver plink bed format and hail matrix. And, the cohort will continue to grow in future. I will prefer to keep one file per chromosome. For large cohort, which format do you prefer? Hail matrix or Hail VDS?. > ; > Thanks for your feedback and help improving Hail!; > ; > Related issue: #5564 .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993:1562,feedback,feedback,1562,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993,1,['feedback'],['feedback']
Usability,"@illusional @lgruen Thanks for the feedback. I think the new changes address your comments, but let me know if you see something else.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11249#issuecomment-1020325698:35,feedback,feedback,35,https://hail.is,https://github.com/hail-is/hail/pull/11249#issuecomment-1020325698,1,['feedback'],['feedback']
Usability,"@jigold Did commit 23c9e2f fix the build or did the CI server break something? I guess either way, it's not clear why we had different results.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1012#issuecomment-257353710:108,clear,clear,108,https://hail.is,https://github.com/hail-is/hail/pull/1012#issuecomment-257353710,1,['clear'],['clear']
Usability,"@jigold Do I understand correctly that g2-standard-4 can only be created as a job private instance because there is no matching pool? If that's right, it looks like, unlike pool jobs, a JPIM job [will be correctly marked as error](https://github.com/hail-is/hail/blob/main/batch/batch/driver/instance_collection/job_private.py#L457-L467) if there are no available regions. Assuming all that is correct, do I also understand correctly that the only reason to block incoming jobs at the front-end is for a better user experience, not to protect the system from bad data? If yes, then I agree that need not be part of this PR because it merely improves user experience rather than being critical for correct functioning of the system. Are any of my assumptions or inferences wrong?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13430#issuecomment-1725778672:511,user experience,user experience,511,https://hail.is,https://github.com/hail-is/hail/pull/13430#issuecomment-1725778672,2,['user experience'],['user experience']
Usability,"@jigold OK, so here's the summary of what I learned:. We don't have tabix files for GRCh38 and we only test on small positions. Many large positions without tabix files seems to cause a problem for VEP (and make it slow, unsurprisingly). Fix seems to be to download the *indexed* homo_sapiens cache https://ftp.ensembl.org/pub/release-95/variation/indexed_vep_cache/ and upload that to our QoB VEP bucket. I presume you copied from the data we use in Dataproc? If yes, we should update that to also have tabix files. Also, in Dataproc, we use highmem machines for VEP. We should change _service_vep to also use highmem machines. <details><summary>Listing the tabix files for GRCh38 and GRCh37</summary>. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch38-us-central1/homo_sapiens/95_GRCh38/\*/\*.tbi; CommandException: One or more URLs matched no objects.; ```. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/\*/\*.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/1/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/10/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/11/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/12/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/13/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/14/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/15/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/16/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/17/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/18/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/19/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/2/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145:44,learn,learned,44,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145,1,['learn'],['learned']
Usability,"@jigold Ok I changed this in a way that will hopefully be more clear. The rules are as follows:. 1. We only use `ci-intermediate` for anonymous images. Images are named auth, batch, etc. even when they are in tests or dev deploys.; 1. Every image draws from the main branch cache tag, named `<DOCKER_PREFIX>/<image_name>:cache`; 2. Every image has an additional cache tag that it draws from and pushes to. For deploys, that is the same as the main branch cache, for PRs, it is `cache-pr-<pr_number>`, for dev deploys it is `cache-<dev_username>`, and for deploys conducted by CIs in a non-default namespace, it is `cache-<namespace-CI-is-in>-deploy`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450:63,clear,clear,63,https://hail.is,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450,1,['clear'],['clear']
Usability,"@jigold addressed those changes. . Regarding the margin of the `div.wy-nav-content` element, I'm reducing the padding on the right rather than increasing the max-width, I think that should keep the left margin aligned. Though I think that it might not be a bad idea to reduce the left margin across all of the doc pages. I changed one of the treeview parameters as well, hopefully will help with selection issue you were experiencing. Though it is still a bit finicky in certain situations, usually when selecting/unselecting some combination of parent and child nodes (such as in gnomad.exomes). Selecting child nodes on selection of the parent isn't a basic option in the treeview class unfortunately, and I haven't figured out a way to do it that is completely to my satisfaction yet. The clear selections button seems to reset everything appropriately, at least.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1936#issuecomment-315459328:792,clear,clear,792,https://hail.is,https://github.com/hail-is/hail/pull/1936#issuecomment-315459328,1,['clear'],['clear']
Usability,"@jigold addressed your comments and, after seeing how simple it'd be to do, I came around to your point that I might as well make the same change in v1.1. Simplified the docs accordingly. We still may want to drop v1.1 at some point but Cotton agrees there is no urgency while it's not causing problems.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2930#issuecomment-367113994:54,simpl,simple,54,https://hail.is,https://github.com/hail-is/hail/pull/2930#issuecomment-367113994,2,"['Simpl', 'simpl']","['Simplified', 'simple']"
Usability,"@jigold test are fixed, properly clean up; I think the test should be improved to check that deletion properly cleans up expected resources (rather than simply doesn't throw an error, which will happen if deletion fails for any reason other than 404), but I think that could wait for a subsequent PR, because as written, the only way they will fail to do so is if the wrong name or namespace are supplied (else they will throw an error and the test will fail).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367:153,simpl,simply,153,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367,1,['simpl'],['simply']
Usability,@jigold this should be simple. Last thing Dan wanted was that I fix the test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346:23,simpl,simple,23,https://hail.is,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346,1,['simpl'],['simple']
Usability,"@jigold this should pass now. I also learned that Mypy checks each command line argument as an independent module. Instead of specifying individual files, we have to tell it to check `batch`. I also added `google_storage.py` in an ill-fated attempt to let batch use that. I think we can only type check modules that depend on one another by installing them first. We'll leave that for future work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8968#issuecomment-662143859:37,learn,learned,37,https://hail.is,https://github.com/hail-is/hail/pull/8968#issuecomment-662143859,1,['learn'],['learned']
Usability,"@jigold you won the PR lottery, definitely ask me if you find something unclear (which may suggest ways to improve it). We can ask for feedback from @cseed or @tpoterba on the Spark question above.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2494#issuecomment-348243800:135,feedback,feedback,135,https://hail.is,https://github.com/hail-is/hail/pull/2494#issuecomment-348243800,1,['feedback'],['feedback']
Usability,"@jjfarrell Thanks for sharing that! This is really interesting information. I'm quite surprised, but the evidence is pointing to there being a PC that largely separates those 8 replicates from the entire remaining dataset (!!!). I'm personally quite surprised that 8 samples out of thousands could pull this off, but that definitely seems to be the issue, given that the PCs from PC-AiR avoid the issue. Thank you so much for hunting this down! It's very valuable information for us. ### Next Steps . So, clearly we need a solution for users that have substantial numbers of related individuals in their source dataset (especially if the pedigrees are unknown). For your _particular_ use case, I can add a blurb to the docs that recommends removing known replicates _before_ PCA and then projecting them using the loadings from PCA. A longer term solution is to simply implement PC-AiR in hail. I skimmed the implementation section of the paper earlier this week and it looks very straightforward. It seems to boil down to using the KING estimator to estimate relatedness, compute PCA on unrelated individuals, project related individuals into unrelated PC space. Finally, we can use pc_relate to improve on our original estimates of relatedness from KING. The timeline for the latter thing is kind of unclear and a bit further out given some other work I need to finish. I'll get the documentation improvement in this week. Is there anything else I can do that would have helped you avoid this issue? Is there anything else you need to resolve the issue now?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-391739992:505,clear,clearly,505,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-391739992,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"@jjfarrell Thanks for the information! This will be very helpful as I try to tease out what the issue is here. Also, I'm sorry my initial response was curt! I was a bit tired at the time and probably shouldn't have been responding to GitHub issues 😅. Hail's version of pc-relate does not identify an initial set of related and unrelated individuals. The R `pcrelate` implementation (the official / reference implementation by the authors of the paper) does this to identify a set of individuals on which to run the principal components analysis. It is not entirely clear to me why this is necessary, and we don't currently have a mechanism for doing so (since pc_relate _is_ our mechanism for determining related and unrelated individuals when there is population structure in the data set). If you have prior knowledge about related samples, you might try filtering to an known unrelated set and computing the scores from that set. I'm curious if that makes any difference in the results. Your invocations look very reasonable. I'll get in touch with the gnomAD team here at the broad to learn more about their experiences with pc_relate and see if I can better understand what's happening with the replicate samples. It's definitely possible there is an implementation error; however, I also want to rule out that the pc_relate model itself isn't breaking down here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-386639531:565,clear,clear,565,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-386639531,2,"['clear', 'learn']","['clear', 'learn']"
Usability,"@jmarshall @illusional Likewise, hopefully I captured the request clearly here but please provide more information if necessary!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14356#issuecomment-1964591127:66,clear,clearly,66,https://hail.is,https://github.com/hail-is/hail/issues/14356#issuecomment-1964591127,1,['clear'],['clearly']
Usability,@jmarshall thanks again for the feedback 0.2.128 should now be fixed: https://github.com/hail-is/hail/releases/tag/0.2.128 .,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14322#issuecomment-1967719780:32,feedback,feedback,32,https://hail.is,https://github.com/hail-is/hail/pull/14322#issuecomment-1967719780,1,['feedback'],['feedback']
Usability,"@jmarshall, thanks doing this - would you mind adding a simple unit test to lock down the behaviour?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555:56,simpl,simple,56,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555,1,['simpl'],['simple']
Usability,"@konradjk I fixed the instructions. I remembered investigating this a month ago when a user asked how to do this and I didn't know off the top of my head what the semantics were. And I remembered the ""--"" thing that's used to pass arguments to gcloud and got them mixed up. So this is really not a big docs change now, but I think it's a little clearer?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7029#issuecomment-530395992:345,clear,clearer,345,https://hail.is,https://github.com/hail-is/hail/pull/7029#issuecomment-530395992,1,['clear'],['clearer']
Usability,"@liameabbott I think you should go ahead and merge #3859. Once this is in, you can then use `locus_windows` to simplify, reduce memory req, and be more robust to catching out-of-order loci.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3873#issuecomment-401440022:111,simpl,simplify,111,https://hail.is,https://github.com/hail-is/hail/pull/3873#issuecomment-401440022,1,['simpl'],['simplify']
Usability,"@mhebrard. Just to be clear: *after* installing Hail, `/usr/bin/spark-shell --version` now shows `2.12.13` but `pip3 show pyspark` still shows ""Warning: Package(s) not found: pyspark""?. Is `/usr/bin/spark-shell` a symlink? What does it point to? Is `/usr/lib/spark` a symlink? Does it point to the same place? Actually, let's just check a bunch of things:; ```; ls -al /usr/bin/spark-shell; echo $(which spark-shell); ls -al $(which spark-shell); spark-shell --version. ls -al /usr/bin/spark-submit; echo $(which spark-submit); ls -al $(which spark-submit); spark-submit --version. ls -al /usr/bin/spark-class; echo $(which spark-class); ls -al $(which spark-class). echo SPARK_SCALA_VERSION=$SPARK_SCALA_VERSION. echo "">>>>>>>>>> before load-spark-env.sh <<<<<<<<<""; env. load-spark-env.sh. echo "">>>>>>>>>> after load-spark-env.sh <<<<<<<<<""; env. which scala; ls -al $(which scala); cat $(which scala); ```. And one more thing, can you edit `$(which spark-shell)` to add `set -x` then try `spark-shell` and see if there's anything mysterious?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1771296222:22,clear,clear,22,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1771296222,1,['clear'],['clear']
Usability,"@patrick-schultz I addressed your comments, would be happy to take more steps to make code clearer if you see some. Otherwise I'd like if you could check that you're now happy with how `oversamplingNum` is being used.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11050#issuecomment-992692981:91,clear,clearer,91,https://hail.is,https://github.com/hail-is/hail/pull/11050#issuecomment-992692981,1,['clear'],['clearer']
Usability,"@patrick-schultz So, I made the change. It doesn't change the speed to get the keys (which was already at ~ SSD read speed). I'm not sure it's any clearer. Is there another way I could have done it?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3893#issuecomment-403986055:147,clear,clearer,147,https://hail.is,https://github.com/hail-is/hail/pull/3893#issuecomment-403986055,1,['clear'],['clearer']
Usability,@patrick-schultz sounds like an opportunity to learn how to do a deploy from Tim 😉,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6567#issuecomment-509642293:47,learn,learn,47,https://hail.is,https://github.com/hail-is/hail/issues/6567#issuecomment-509642293,1,['learn'],['learn']
Usability,"@patrick-schultz, you may have tuned out the long thread about all the issues with the first Python Chained Linear Regression and pruning, but this one is now clear of all of that and is purely a Python implementation of Scala's `LinearRegressionChained`: https://github.com/hail-is/hail/blob/main/hail/src/main/scala/is/hail/methods/LinearRegression.scala#L175",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9634#issuecomment-718124825:159,clear,clear,159,https://hail.is,https://github.com/hail-is/hail/pull/9634#issuecomment-718124825,1,['clear'],['clear']
Usability,"@rcownie I think this design is a reasonable compromise on interface, at least until linear algebra is in the compiler and we can ""cancel"" conversion from ndarray to BlockMatrix and back. The optimal `complexity_bound` will be hugely dependent on cluster setup. To aid user intuition, I made the unit in terms of a single dimension rather than dimension-cubed. I've found the divide-and-conquer eigh method (with memory proportional to elements) to be 2.5-3x faster than the RRR eigh method (with memory proportional to dimension) when run on laptop and GCP; it takes greater advantage of vectorized BLAS3 ops. Since we're CPU rather than RAM limited on a high-core GCP machine, I've set this up to use divide-and-conquer whenever it won't result in an overflow on `lwork` which is still an int32 in the Python stack (boo). @cseed please let me know if you have any high-level feedback",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3977#issuecomment-407268618:274,intuit,intuition,274,https://hail.is,https://github.com/hail-is/hail/pull/3977#issuecomment-407268618,2,"['feedback', 'intuit']","['feedback', 'intuition']"
Usability,"@tpoterba @cseed . If y'all can take a look at the docs, tests, and implementation, I want to merge this. I included a log of running on `profile.vcf.bgz` (which has 2500 samples) below, total time is about 3.5 minutes. I expect it to scale roughly like `O(nSamples^2)`. For Kyle's use case this performance is acceptable. Further performance, model, and usability improvements will be separate PRs. ```; dking@wmb16-359 # hail read -i profile.vds ibd -o foo; hail: info: running: read -i profile.vds; [Stage 0:==============> (1 + 3) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o foo; [Stage 8:==================================================> (197 + 4) / 214]hail: info: timing:; read: 3.523s; ibd: 3m33.8s. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-250288185:355,usab,usability,355,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-250288185,1,['usab'],['usability']
Usability,@tpoterba @jigold committed some updates based on your feedback.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1936#issuecomment-314784714:55,feedback,feedback,55,https://hail.is,https://github.com/hail-is/hail/pull/1936#issuecomment-314784714,1,['feedback'],['feedback']
Usability,"@tpoterba I just did some back of the envelope calculations on this, and while I like the simplicity of it I don't think it scales in a tenable way. I'll let you know when I've fixed that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8071#issuecomment-584740001:90,simpl,simplicity,90,https://hail.is,https://github.com/hail-is/hail/pull/8071#issuecomment-584740001,1,['simpl'],['simplicity']
Usability,@tpoterba I'm assigning you since I've incorporated your feedback from when you reviewed these name changes before I separated them from the IR PR. I'll add a discuss post on breaking changes once this goes in.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4032#issuecomment-408850197:57,feedback,feedback,57,https://hail.is,https://github.com/hail-is/hail/pull/4032#issuecomment-408850197,1,['feedback'],['feedback']
Usability,@tpoterba why would these not go on the artifacts index page? It seems odd to couple the CI directly to the artifact structure of `hail-is/hail` when there's an equally simple alternative.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4667#issuecomment-433943049:169,simpl,simple,169,https://hail.is,https://github.com/hail-is/hail/pull/4667#issuecomment-433943049,1,['simpl'],['simple']
Usability,"A cluster monitoring terminal command also seems useful since you might forget to start your batch with the detailed information. I think a question for us is why this shouldn't be in the web UI? I think there's a clear benefit to having information directly in the CLI when you're using ipython or python or submit, but if you're starting a new terminal window to monitor a running job, why not start a browser window?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13063#issuecomment-1572346942:214,clear,clear,214,https://hail.is,https://github.com/hail-is/hail/issues/13063#issuecomment-1572346942,1,['clear'],['clear']
Usability,"A couple of notes:. - I moved the actual writing of the InsnNodes to the method's InsnList onto the MethodBuilder (MethodBuilder.close()) itself, per Dan's suggestion. This is a little weird because it gets called in fb.classAsBytes(), and so calling it earlier will basically add the instructions again, and we should never do this. I'm thinking of adding some logic to check that a method isn't ""closed"", or at least clearing out the instruction buffer afterwards.; - I want to implement `<init>` in terms of the method builder, but we don't have a way to deal with Unit return types well yet. Dan's made a crack at this as part of #2555, so I'm going to hold off on that until I can use that.; - We realized that the auto-adding of a return op at the end of the method was causing some extra bytecode to be added at the end of the method if you explicitly called Code._return() to return the last Code object in the method. We decided that keeping the return op in MethodBuilder and just not calling _return unless returning in the middle of a method was nicer, since Scala doesn't use return x either.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149:419,clear,clearing,419,https://hail.is,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149,1,['clear'],['clearing']
Usability,"A quick and dirty local test of different performances:; ```; 2017-09-22 18:05:57 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; [Stage 0:> (0 + 10) / 10]2017-09-22 18:05:58 Hail: INFO: Coerced sorted dataset; [Stage 374:==========================================> (3 + 1) / 4]. phi 27.4091310501. 2017-09-22 18:06:24 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:24 Hail: INFO: Coerced sorted dataset; [Stage 735:==========================================> (3 + 1) / 4]. phik2 34.3392460346. 2017-09-22 18:06:58 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:59 Hail: INFO: Coerced sorted dataset; [Stage 1192:==========================================> (3 + 1) / 4]. phik2k0 67.0002729893. 2017-09-22 18:08:05 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:08:06 Hail: INFO: Coerced sorted dataset; [Stage 1561:==========================================> (3 + 1) / 4]. all 102.006611109. ```. Time is in seconds. The most painful operation is clearly k0, but I bet most people will only want phi, maybe phi and k2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653:1230,clear,clearly,1230,https://hail.is,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653,1,['clear'],['clearly']
Usability,"AFAIK, we don't test credential discovery. A little tricky because you want to modify the file system, which isn't kosher on a developer's laptop. Also not clear what to do about, e.g., the metadata server. You could mock it, but I've always felt pretty negative about the value of mocking. You might try adding some build.yaml steps that use docker to replicate some common environments?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641:156,clear,clear,156,https://hail.is,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641,1,['clear'],['clear']
Usability,"Ack, this isn't working as written in cluster mode on GCP due to different meaning of file names locally and through Hadoop. I'll think on it but would also appreciate feedback before I go further on this branch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3114#issuecomment-371968730:168,feedback,feedback,168,https://hail.is,https://github.com/hail-is/hail/pull/3114#issuecomment-371968730,1,['feedback'],['feedback']
Usability,"Actually, a slightly longer answer:. The parent relationship is essentially a representation of the JVM stack. Each X corresponds to 1 JVM bytecode (except NewInstanceX which is fused). During emit, children are pushed on the stack left-to-right by necessity. Slightly more generally, there are two distinct questions here: what the implementation does, and what it guarantees. For what it guarantees, there are two options: fixed (like Java, which evaluates things left-to-right), and undefined (like C). In general, I think it is safest not to rely on the order of evaluation. I'm not aware of where we do. ; Our backend is simple enough and the mapping to the JVM concrete enough that I don't see any reason why we'd have reason to deviate from left-to-right. So I guess I fall somewhere in between (don't rely on it, but violate it).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8958#issuecomment-645533486:626,simpl,simple,626,https://hail.is,https://github.com/hail-is/hail/pull/8958#issuecomment-645533486,1,['simpl'],['simple']
Usability,"Actually, even simpler: . ```; def downsample_matrix_table(mt: hl.MatrixTable, n_divisions: int, p_threshold: float) -> hl.Table:; mt = mt.choose_cols(list(range(10))). x = mt.locus.global_position(); y = -hl.log10(mt.Pvalue). downsampled = mt.annotate_cols(; binned=hl.agg.downsample(; x,; y,; label=hl.str(mt.Pvalue),; n_divisions=n_divisions; ); ; ); downsampled = downsampled.cols(). return downsampled. mt = hl.balding_nichols_model(3, 100, 1000); pmt = mt.annotate_rows(Pvalue = hl.rand_unif(0, 1)); downed = downsample_matrix_table(pmt, 4, .05); downed.show(); ```. I'm now somewhat convinced that the downsample aggregator is accessing cleared memory",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8240#issuecomment-594754052:15,simpl,simpler,15,https://hail.is,https://github.com/hail-is/hail/issues/8240#issuecomment-594754052,2,"['clear', 'simpl']","['cleared', 'simpler']"
Usability,"Added in #115. We did not add AN, since this is simply `2 * nCalled`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/112#issuecomment-169052284:48,simpl,simply,48,https://hail.is,https://github.com/hail-is/hail/issues/112#issuecomment-169052284,1,['simpl'],['simply']
Usability,"Added support for a few more nodes, including {Insert, Select}Fields and Array{Range, Map, Filter} (deforested). I'm going to do ordering next. That should give us enough interesting stuff to play with when simple Table pipeline start working.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-433775154:207,simpl,simple,207,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-433775154,1,['simpl'],['simple']
Usability,"Added the ""CHANGELOG"" note to contribution guidelines in #9752.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9749#issuecomment-736676863:43,guid,guidelines,43,https://hail.is,https://github.com/hail-is/hail/pull/9749#issuecomment-736676863,1,['guid'],['guidelines']
Usability,"Adding a simple reproducible example. ```python; ht = hl.Table.from_pandas(pd.DataFrame({""variant"":['chr1:123:C:T']})); ht = ht.key_by(**hl.parse_variant(ht.variant)); pd_table = ht.to_pandas(); pd_table.to_pickle(os.path.join(bucket, 'test.pkl')); ```. The two examples below do not cause the same error. ; ```python; ht = hl.Table.from_pandas(pd.DataFrame({""foo"":['bar']})); ht = hl.Table.from_pandas(pd.DataFrame({""foo"":[1, 2, 3]})); ```. Hope this helps.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604:9,simpl,simple,9,https://hail.is,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604,1,['simpl'],['simple']
Usability,"Adding zulip thread for posterity:. Patrick Schultz (he/him); [12:38 pm](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/FastIndexedSeq/near/392155787); Ah, that's what I thought, originally FastSeq returned a Seq: https://github.com/hail-is/hail/commit/be415a850eb145c69a830e485d3192331799f14f#diff-75be823f33bdb7bc10ab85e3b954c91a4a7bd48176c2a39f2e3d2e7f7e30fab4. daniel king (he/him); [12:40 pm](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/FastIndexedSeq/near/392156010); huh, I wonder when/why that changed. Patrick Schultz (he/him); [12:40 pm](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/FastIndexedSeq/near/392156041); [toFastSeq](https://github.com/hail-is/hail/blob/995994c862b93406bc4b5fc37c7f022f7426cd52/hail/src/main/scala/is/hail/utils/richUtils/RichIterator.scala#L145) still does. If you make this change, you should get rid of toFastIndexedSeq too. [ 12:41 pm](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/FastIndexedSeq/near/392156191); daniel king (he/him) [said](https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/FastIndexedSeq/near/392156010):. huh, I wonder when/why that changed. [a month later](https://github.com/hail-is/hail/commit/e2458973ad2bb9b065a56f480e986554b40eed79#diff-75be823f33bdb7bc10ab85e3b954c91a4a7bd48176c2a39f2e3d2e7f7e30fab4), not clear why",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13676#issuecomment-1728108189:1393,clear,clear,1393,https://hail.is,https://github.com/hail-is/hail/pull/13676#issuecomment-1728108189,1,['clear'],['clear']
Usability,"After some reading, I am still not sure what exactly the difference is between dummy coding and one-hot encoding. Suppose there is a categorical variable with $n$ categories. The [referenced Stack Exchange question](https://stats.stackexchange.com/questions/224051/one-hot-vs-dummy-encoding-in-scikit-learn) suggests that a one-hot encoding converts the categorical variable to $n$ indicator variables (one for each category) and that a dummy coding converts the categorical variable to $n-1$ indicator variables. With these definitions, the dummy coding is the one-hot encoding without one of the indicator variables. However, from the prototype implementation in this issue, the [scikit-learn one-hot encoder documentation](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html), and the [dummy variable Wikipedia article](https://en.m.wikipedia.org/wiki/Dummy_variable_(statistics)), I get the impression that dummy coding and one-hot encoding are synonyms and that there is no real distinction. Anyway, I would like to work on this issue. I will base my implementation on the prototype, and perhaps we can add a parameter to drop one of the indicator variables similar to what the [scikit-learn one-hot encoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html) has.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13601#issuecomment-1932779413:301,learn,learn,301,https://hail.is,https://github.com/hail-is/hail/issues/13601#issuecomment-1932779413,5,['learn'],['learn']
Usability,"Agreed, this is good for useability. note it’s also a special case of simple linreg predicting y from x (we return the square r_sq. The sign is that of beta).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4479#issuecomment-425769239:70,simpl,simple,70,https://hail.is,https://github.com/hail-is/hail/issues/4479#issuecomment-425769239,1,['simpl'],['simple']
Usability,"Ah yes, this is what I meant by deploy. Patrick can learn how to do a release / pip deploy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6567#issuecomment-509643864:52,learn,learn,52,https://hail.is,https://github.com/hail-is/hail/issues/6567#issuecomment-509643864,1,['learn'],['learn']
Usability,"Ah, I thought I said I was happy to fix the optimized version rather than revert. I do think it can be simplified, though, per my comments. Cotton also had the suggestion of writing this function unstaged using two utility functions:; ```scala; def findFirstNonZeroByte(addr: Long, n: Long): Long; def allPresent(addr: Long, n: Long): Long // uses findFirstNonZeroByte; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561448054:103,simpl,simplified,103,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561448054,1,['simpl'],['simplified']
Usability,"Ah, got it. Pairwise is clearly no good. OK, one last question: what are the using for keys that they can compute the scores purely from the keys?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3425#issuecomment-385088990:24,clear,clearly,24,https://hail.is,https://github.com/hail-is/hail/pull/3425#issuecomment-385088990,1,['clear'],['clearly']
Usability,"Ah, you're totally right, this is unnecessary. I'm looking at a pipeline: split_multi, sampleqc. There wasn't a clear indication in the WebUI Spark wasn't recomputing this (it isn't shown as a green dot like persist), but after the job is complete, the shuffle is marked as ""skipped"" and wasn't recomputed. I don't know how long intermediate shuffle results are kept around or if/when they are flushed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1814#issuecomment-301566601:112,clear,clear,112,https://hail.is,https://github.com/hail-is/hail/pull/1814#issuecomment-301566601,1,['clear'],['clear']
Usability,Ah. One of them is the region.clear bug rear'ing its head in a new form. At least for that one I know roughly where to look.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3414#issuecomment-383178762:30,clear,clear,30,https://hail.is,https://github.com/hail-is/hail/pull/3414#issuecomment-383178762,1,['clear'],['clear']
Usability,"Ahh, hmm. Pylint agrees with me that this isn't Kosher:; ```; /hailtop/batch/backend.py:44:8: W0107: Unnecessary pass statement (unnecessary-pass); /hailtop/batch/backend.py:47:0: W0223: Method 'close' is abstract in class 'Backend' but is not overridden (abstract-method); ```. We've generally heeded pylint's advice even if it clashes with our intuition.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9191#issuecomment-667227984:346,intuit,intuition,346,https://hail.is,https://github.com/hail-is/hail/pull/9191#issuecomment-667227984,1,['intuit'],['intuition']
Usability,"All that messy state twiddling is because Scala's `Iterator` is the wrong model for most things we use it for, which is why I made `FlipbookIterator`. Using that, what you have would become; ```scala; private class BgenRecordStateMachine(; ctx: RVDContext,; p: BgenPartition,; settings: BgenSettings; ) extends StateMachine[RegionValue] {; private[this] val bfis = p.makeInputStream; private[this] val rv = RegionValue(ctx.region); private[this] val rvb = ctx.rvb; ; def isValid: Boolean = p.isValid; def value: RegionValue = rv; def advance() { p.advance(); findNextVariant() }; private def findNextVariant() {; // same as existing advance(), but without advancing p; }. findNextVariant() // make sure iterator is initialized in first valid state; }; ```; giving `BgenPartition` a `FlipbookIterator` style interface, with `isValid`, `value`, and `advance()` instead of `hasNext()` and `next()`. Then to create a new iterator `FlipbookIterator(new BgenRecordStateMachine(...))`. But honestly, what you had was clear enough, so if you benchmarked and the allocation isn't an issue, you should do whatever you find most readable. I've been conditioned to avoid `Option` in low-level code, but I don't have a good intuition for when it is or isn't actually a problem.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507:1010,clear,clear,1010,https://hail.is,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507,2,"['clear', 'intuit']","['clear', 'intuition']"
Usability,"Alright, I've addressed all of the above, you were right I was able to move things up to PContainer and simplify some of the code there. I didn't do the one decorator to test cxx and java in this PR because the cxx shape test ended up using some things I haven't implemented on jvm side yet so for now I just made a separate test. I'll add that in a separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895:104,simpl,simplify,104,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895,1,['simpl'],['simplify']
Usability,"Alright, think names are clear now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8867#issuecomment-634788030:25,clear,clear,25,https://hail.is,https://github.com/hail-is/hail/pull/8867#issuecomment-634788030,1,['clear'],['clear']
Usability,"Also when there is a binding outside the tiebreaker used in the tiebreaker it fails in python. The error is very inscrutable, but it simply does not work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12295#issuecomment-1431843216:133,simpl,simply,133,https://hail.is,https://github.com/hail-is/hail/pull/12295#issuecomment-1431843216,1,['simpl'],['simply']
Usability,"Also, interesting to note: . Home page (with menu bar, dark icon, not logged in): 1.5KB .gz . Logged in: 3.1KB. Bundle size: on order of 100KB. However, 30% of this is the auth0 client library; we can modify it to save space. I've commented on an issue with some light guidance on how to save 5.5KB of that. Effectively 70KB for React + React-Dom + Webpack tooling + all page js compares quite favorably with a jquery-only solution, while being faster than jQuery (https://github.com/jonmiles/react-performance-tests, https://medium.com/thothzocial-engineering/rendering-speed-performance-challenge-with-famous-front-end-framework-196c876a68af), far easier to manage, and with a much large ecosystem (and jquery-only solution would do nothing for universal rendering). The React side should drop this year substantially. They are also interested in writing a compiler to completely remove the vdom, compiling to optimized javascript or maybe web assembly. That may be something interesting to us as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700:269,guid,guidance,269,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700,1,['guid'],['guidance']
Usability,"Also, thanks for that detailed write up. That was incredibly clear and instructive.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8561#issuecomment-615210085:61,clear,clear,61,https://hail.is,https://github.com/hail-is/hail/pull/8561#issuecomment-615210085,1,['clear'],['clear']
Usability,"Am I strange in that I want to name something what it is (ci, batch, etc.) rather than give everything codenames? The purpose of codenames is to hide and obscure, you know. I think this should be called tutorial. And when it becomes a notebook service, notebook. And when it becomes the Hail service, it should just be the main website. The landing page should be password protected. We should think about whether we want to collect additional information there (e.g. email), although for now I don't think we need to, as everyone who signed up for the next tutorial filled out a questionnaire. I'm getting proxy timeouts. We need an ready endpoint and something on the client side to poll and redirect. Actually, awesome if it doesn't poll but uses, say, websockets, and the server watches the pod for a notification for k8s (or does this and also polls, which seems to be our standard pattern). Should we have an auto-scaling non-preemptible pool and schedule these there? If we do that, to optimize startup time, we should have imagePullPolicy: Never and then pull the image on startup and push it on update. When do you reap jupyter pods? jupyterhub has a simple management console that lets you shut down notebooks. > figure out how to teach flask url_for to use a root other than /. I don't think you can do this dynamically using headers. Blueprints seem to be the answer in Flask: https://stackoverflow.com/questions/18967441/add-a-prefix-to-all-flask-routes/18969161#18969161. Is there a reason you didn't make it a subdomain? I thought we decided we preferred that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4576#issuecomment-431037869:1160,simpl,simple,1160,https://hail.is,https://github.com/hail-is/hail/pull/4576#issuecomment-431037869,1,['simpl'],['simple']
Usability,And we should clearly document what we've implemented so there is no ambiguity.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/313#issuecomment-212074652:14,clear,clearly,14,https://hail.is,https://github.com/hail-is/hail/issues/313#issuecomment-212074652,1,['clear'],['clearly']
Usability,"Another (simpler) check that I think will produce a `ClassCastException` :. ``` scala; eval[Int]("""""" (if (true) 0 else 0.toLong).toInt """""" ; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/748#issuecomment-245384057:9,simpl,simpler,9,https://hail.is,https://github.com/hail-is/hail/pull/748#issuecomment-245384057,1,['simpl'],['simpler']
Usability,"Another set of eyes on this would be great. My current thoughts on this:. I only looked at the failure in PCA. I was never able to reproduce. My next step to try to reproduce was to run PCA on Lindo's full dataset on dataproc (can't use batch because the error is in spark PCA). I did look carefully through the stack trace, trying to understand what could possibly be happening. The number 177860 from the error isn't either matrix dimension, which is 210234 by 8893. Everything in `org.apache.spark.mllib.linalg.EigenValueDecomposition$.symmetricEigs(EigenValueDecomposition.scala:106)` is independent of the number of rows, so only the number 8893 of cols should be relevent. I wrote a simple test to execute spark PCA with 8893 rows in scala, so I could step through with a debugger:; ```scala; var mt = rangeMatrix(10000, 8893); mt = MatrixMapEntries(mt, InsertFields(Ref(""g"", mt.typ.entryType), Seq(""a"" -> F64(1)))); val t = MatrixToTableApply(mt, PCA(""a"", 10, false)); val n = TableToValueApply(t, ForceCountTable()); assertEvalsTo(n, 8893L); ```; The array `v` in `symmetricEigs` has length 177860 = 8893*20, and I didn't find anything else with that size. The only line I could find that could generate an exception that looks like this is line 555 of `dev.ludovic.netlib.arpack.AbstractARPACK.dsaupd`; ```scala; public void dsaupd(org.netlib.util.intW ido, String bmat, int n, String which, int nev, org.netlib.util.doubleW tol, double[] resid, int offsetresid, int ncv, double[] v, int offsetv, int ldv, int[] iparam, int offsetiparam, int[] ipntr, int offsetipntr, double[] workd, int offsetworkd, double[] workl, int offsetworkl, int lworkl, org.netlib.util.intW info) {; if (debug) System.err.println(""dsaupd"");; checkArgument(""DSAUPD"", 2, lsame(""I"", bmat) || lsame(""G"", bmat));; checkArgument(""DSAUPD"", 3, n >= 0);; checkArgument(""DSAUPD"", 4, lsame(""LA"", which) || lsame(""SA"", which) || lsame(""LM"", which) || lsame(""SM"", which) || lsame(""BE"", which));; checkArgument(""DSAUPD"", 5, 0 < ne",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313:689,simpl,simple,689,https://hail.is,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313,1,['simpl'],['simple']
Usability,"Another very simple pipeline reported https://hail.zulipchat.com/#narrow/stream/123010-Hail-Query-0.2E2-support/topic/zip.3A.20length.20mismatch . We can get access to these files via Sam B. ```python3; context_mis_freq_ht = hl.read_table(""gs://epi25/misc-data/gnomAD_v4/grch38_context_vep_annotated.v105.prefiltered.missense_freq_ensp.ht""); ensp2uniprot_ht = hl.import_table(""gs://epi-mis-3d/misc/ensp2uniprot_mart_export.ensp2uniprot.txt""). context_mis_freq_ht = context_mis_freq_ht.key_by(""ensp""); ensp2uniprot_ht = ensp2uniprot_ht.key_by(""ensp""). context_mis_freq_ht = context_mis_freq_ht.annotate(; uniprot = ensp2uniprot_ht[context_mis_freq_ht.ensp].uniprot); ```. notice that the error is removed if you instead use:; ```python3; context_mis_freq_ht = hl.read_table(""gs://epi25/misc-data/gnomAD_v4/grch38_context_vep_annotated.v105.prefiltered.missense_freq_ensp.ht""); ensp2uniprot_ht = hl.import_table(""gs://epi-mis-3d/misc/ensp2uniprot_mart_export.ensp2uniprot.txt""). context_mis_freq_ht = context_mis_freq_ht.key_by(""ensp""); ensp2uniprot_ht = ensp2uniprot_ht.key_by(""ensp""). context_mis_freq_ht = context_mis_freq_ht.join(ensp2uniprot_ht,'left'). ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13486#issuecomment-1883607858:13,simpl,simple,13,https://hail.is,https://github.com/hail-is/hail/issues/13486#issuecomment-1883607858,1,['simpl'],['simple']
Usability,Apologies for the delay in addressing the feedback. Had some urgent projects to attend to. Here are the changes you've suggested. Let me know if there's anything else I can do to help with this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12065#issuecomment-1243163758:42,feedback,feedback,42,https://hail.is,https://github.com/hail-is/hail/pull/12065#issuecomment-1243163758,1,['feedback'],['feedback']
Usability,"Are you working with another branch at the same time in dev? If not, I feel like `hailctl dev deploy -b jigold:region-job-queue-fast-ci -s test_batch,test_hailtop_batch -e deploy_batch` would be a faster feedback loop and not take up a spot in the PR queue",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12263#issuecomment-1267535507:204,feedback,feedback,204,https://hail.is,https://github.com/hail-is/hail/pull/12263#issuecomment-1267535507,1,['feedback'],['feedback']
Usability,"As I mentioned, I think this, plus KinshipMatrix and LDMatrix are getting lost in the domain-specific details. I suggest the following structure:; - an abstract Python `Matrix` class for numeric matrices. This should have (at least) three implementations: local, indexed-row and block. It should have read/write methods. It should support at least basic operations: *, +, -. They might not all be supported on all combination of implementations. There should be operations for converting between them. @danking is working on freeing us from Spark matrices and building on Breeze. You might coordinate here.; - a `Vector` class; - a `KeyedMatrix` which has row and column keys with schemas, or possibly a SymmetricKeyedMatrix to start if that is all we need (e.g. for Kinship and LD). This should again have read/write.; - then Eigen is just a KeyedMatrix with a Vector; - I'd nuke Kinship and LD, or if it is necessary to keep n{Samples, Variants}Used, it should be a simple wrapper class with the integer value and the underlying keyed matrix. Get the structure in place to start, don't worry so much about documentation. The user-facing part should be pretty thin/lightweight.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2160#issuecomment-326643889:968,simpl,simple,968,https://hail.is,https://github.com/hail-is/hail/pull/2160#issuecomment-326643889,1,['simpl'],['simple']
Usability,As I started to get attempt_ids working in the DB it seemed simpler to go with your approach. I implemented that instead.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8398#issuecomment-607436509:60,simpl,simpler,60,https://hail.is,https://github.com/hail-is/hail/pull/8398#issuecomment-607436509,1,['simpl'],['simpler']
Usability,"At some point, we should think about how to improve the discoverability and machine-verifiability of our APIs. Currently the tightest type of job log is rather complex. If the performance is OK, I think we should move towards classes that define the request and response types of each call. ---. The main difference is `hail-pip-install` having `retry`. If pip exits with a non-zero exit code, we'll just rerun the command exactly, at most four more times. This mitigates missing retry logic in `pip` itself. For example, [this job](https://ci.hail.is/batches/167314/jobs/27) failed because pip encountered a connection reset while downloading a file. Ideally, pip would simply retry the download. Since we don't control the pip source code, I use a retry that treats all of pip as a black box. There's definitely a failure mode: if you specify a package that doesn't exist, pip will error five times in a row and take ~30 seconds before the retry logic gives up. I'm OK with this because pip should basically never fail for legitimate reasons.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278:671,simpl,simply,671,https://hail.is,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278,1,['simpl'],['simply']
Usability,"BTW, this is an extremely awesome change. I didn't think it would be so simple!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11771#issuecomment-1100420864:72,simpl,simple,72,https://hail.is,https://github.com/hail-is/hail/pull/11771#issuecomment-1100420864,1,['simpl'],['simple']
Usability,"Bah, fixed. There was some weird grouping going on in the svgs that was causing the PNG conversion to do something weird, so I simplified all the svgs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9382#issuecomment-684992756:127,simpl,simplified,127,https://hail.is,https://github.com/hail-is/hail/pull/9382#issuecomment-684992756,1,['simpl'],['simplified']
Usability,"Banning versions completely is a little tricky because the user can specify a JAR url directly instead of a version. JARs don't currently have a simple way to report pip version to the worker, though we could cook something up. We could also just delete the old JARs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1528389159:145,simpl,simple,145,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1528389159,1,['simpl'],['simple']
Usability,"Because node selectors are ""recommended"": https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ ""the recommended approaches all use label selectors to make the selection."" ""nodeSelector is the simplest recommended form of node selection constraint."". The taint/toleration documentation use no such language and their suggested use cases don't match ours: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/. I'm not sure what to read into this, if anything. I had a mark set in my mind against taints since I remember reading that some scheduler features (maybe eviction or downsizing?) were disabled with taints. I can't find this in the docs anymore, so it was probably fixed (or I'm not searching hard enough?), but the bad feeling remains. I see your argument, although missing the tag means either paying too much (running a preemptible pod on a non-preemptible node) which we should discovery by monitoring the non-preemptible node workload, or we get excessive downtime on preemptions which we should notice through uptime monitoring. I'm mostly just frustrated with the autoscheduler and trying to simplify things to get it to behave reasonably before I end up writing our own.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7636#issuecomment-560696683:206,simpl,simplest,206,https://hail.is,https://github.com/hail-is/hail/pull/7636#issuecomment-560696683,2,['simpl'],"['simplest', 'simplify']"
Usability,"Because that won't work at all, because the input file name expected by `gatk IndexFeatureFile` won't exist. But perhaps you meant to connect the unrelated filenames via something like. ```; …; bgzip -c {j.tsv_counts} > {j.counts['tsv.gz']}; …; ```. Reasons for not doing that would include:. 1. Filename extensions are significant to GATK, so I would not trust `SubCommand` to write the output file in the right format if the filename did not have the expected extension. (This could be ameliorated via `j.tsv_counts.set_extension`.). 2. Using bgzip with `-c … >` is not its natural mode of operation, so is more likely to encounter bugs than the more typical `bgzip filename` invocation. (For example, plain gzip burns the input filename into the compressed file's header, so the redirection version produces different results from the typical invocation for gzip; bgzip does not embed the filename but the change may have other effects. For example, bgzip's error checking (e.g. in disk full situations) may well be more complete in the typical invocation than when writing to standard output.). It is also less clear than the straightforward invocation, so using this would be a hack. 4. The resulting code is IMHO overall less clear than the original version in which the resource group models the relationship between all three filenames. If Hail Batch is a well-rounded orthogonal API, then that code ought to work too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13191#issuecomment-1599478181:1115,clear,clear,1115,https://hail.is,https://github.com/hail-is/hail/issues/13191#issuecomment-1599478181,2,['clear'],['clear']
Usability,"Better experiment below, you can see in the right hand side the computed values. Note: I don't see any visual difference between .25 and any value < 1 in safari (therefore I did not see clear evidence that safari affected line blending in a way that called for 1 / devicePixelRatio), so for the sake of not complicating this further, I want to keep .25 unless there is evidence this causes issues. Otherwise I think this issue is solved. All on low dpi device (1920*1080 tv):; ![Screenshot 2020-06-16 06 58 11](https://user-images.githubusercontent.com/5543229/84766569-095d6d00-af9f-11ea-8102-6d79eeed2aba.png); ![Screenshot 2020-06-16 06 58 28](https://user-images.githubusercontent.com/5543229/84766571-09f60380-af9f-11ea-9fe6-2fb9ae4bbe43.png); ![Screenshot 2020-06-16 06 58 45](https://user-images.githubusercontent.com/5543229/84766572-09f60380-af9f-11ea-9789-242bc3693598.png); ![Screenshot 2020-06-16 06 59 03](https://user-images.githubusercontent.com/5543229/84766573-09f60380-af9f-11ea-8a11-21c74cc0409d.png). All on high dpi display (pixel ratio 2):; <img width=""1920"" alt=""Screenshot 2020-06-16 07 04 28"" src=""https://user-images.githubusercontent.com/5543229/84766950-a5877400-af9f-11ea-8e4b-a691a1b5f5b7.png"">; <img width=""1920"" alt=""Screenshot 2020-06-16 07 01 51"" src=""https://user-images.githubusercontent.com/5543229/84766749-55101680-af9f-11ea-9a77-c7bacc79dd16.png"">; <img width=""1920"" alt=""Screenshot 2020-06-16 07 02 03"" src=""https://user-images.githubusercontent.com/5543229/84766751-55a8ad00-af9f-11ea-8e49-3c68f588fb0f.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-644692798:186,clear,clear,186,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-644692798,1,['clear'],['clear']
Usability,"Btw, I actually don't understand how one would use this function (not clear to me from the docs nor the test)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296:70,clear,clear,70,https://hail.is,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296,1,['clear'],['clear']
Usability,"Bundling working well now:. For instance, the addition of this file, which handles the auth0 callback/sets cookie, adds only *501B* despite importing Auth and react-easy-state :tada:. The entirety of Auth dependency, react-easy-state (just observable JS properties for easy event notification), js-cookie to simplify cookie management, all other imports that are used at least 2x, poly fills for IE11 compat (promises, object.assign) + React + React-Dom is 99KB, and served in parallel with the page, so initial render doesn't incur the cost. Not bad; we can get this down a bit by removing js-cookie (2KB). ```jsx; // TODO: Replace Loading component without Material UI; import { Component } from 'react';; import Router from 'next/router';; import { view } from 'react-easy-state';; import Auth from '../lib/Auth';. class Callback extends Component {; componentDidMount() {; Auth.handleAuthenticationAsync(err => {; // TODO: notify in modal if error; if (err) {; console.error('ERROR in callback!', err);; }. Router.push('/');; });; }. render() {; return !Auth.isAuthenticated() ? <div>Loading</div> : <div>Hello</div>;; }; }. export default view(Callback);; ```. <img width=""353"" alt=""screen shot 2018-12-19 at 5 06 59 pm"" src=""https://user-images.githubusercontent.com/5543229/50251076-ad695680-03b0-11e9-88f2-28d3ff7daa33.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448761682:308,simpl,simplify,308,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448761682,1,['simpl'],['simplify']
Usability,"Buy it, use it, break it, fix it; Trash it, change it, mail - upgrade it; Charge it, point it, zoom it, press it; Snap it, work it, quick - erase it; Write it, cut it, paste it, save it; Load it, check it, quick - rewrite it; Plug it, play it, burn it, rip it; Drag and drop it, zip - unzip it; Lock it, fill it, call it, find it; View it, code it, jam - unlock it; Surf it, scroll it, pause it, click it; Cross it, crack it, switch - update it; Name it, read it, tune it, print it; Scan it, send it, fax - rename it; Touch it, bring it, pay it, watch it; Turn it, leave it, start - format it",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2036#issuecomment-318518817:386,pause,pause,386,https://hail.is,https://github.com/hail-is/hail/pull/2036#issuecomment-318518817,1,['pause'],['pause']
Usability,"Can you take another look now?. I added two new fields to the jobs table to help with indexing and order bys. This should make the queries simpler and allow us to revert back to the old scheduler that Cotton wrote that was optimitzed. The regions_bits_rep is just a 0/1 for each region. So [us-east1, us-central1] could be ""1100000"". I also realized that I could aggregate the ready cores per user and then order them after unioning each user. I think this will perform better. From small tests, the autoscaler query seemed much better, but I'll want to do one last load test once you're okay with this approach.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733:139,simpl,simpler,139,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733,1,['simpl'],['simpler']
Usability,Closing for now while I incorporate the feedback and make a working prototype.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12697#issuecomment-1450841695:40,feedback,feedback,40,https://hail.is,https://github.com/hail-is/hail/pull/12697#issuecomment-1450841695,1,['feedback'],['feedback']
Usability,Closing this in light of what we've learned about keepalive,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11876#issuecomment-1170569730:36,learn,learned,36,https://hail.is,https://github.com/hail-is/hail/pull/11876#issuecomment-1170569730,1,['learn'],['learned']
Usability,Comments addressed. Still gotta work on the verbiage to clearly explain the present of P_0.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12637#issuecomment-1411233669:56,clear,clearly,56,https://hail.is,https://github.com/hail-is/hail/pull/12637#issuecomment-1411233669,1,['clear'],['clearly']
Usability,"Conceptually, if we're not just interested in missingness, then unboxedGT is useful only in route to nNonRefAlleles (and equal to it if we've split). E.g., the simplest way to extend regression to multi-allelic is to use nNonRefAlleles...though thinking about this further, it's upsettingly asymmetric in the case where the ref allele is the minor allele, so perhaps we should just force deliberate choice of splitting, esp if we're moving toward implementing that less painfully under the hood. Or do regression per alternate allele while maintaining multi-allelic form. (edited). We currently compute nNonRefAlleles from unboxedGT through GTPair, which allocates per genotype. For example, PCA currently requires splitting, but uses nNonRefAlleles. And IBD currently requires splitting but allocates per genotype via:; ```; def countRefs(gtIdx: Int): Int = {; val gt = Genotype.gtPair(gtIdx); indicator(gt.j == 0) + indicator(gt.k == 0); ```. So it may make sense to add `unboxedNNonRefAlleles` that avoids allocation, but doesn't require splitting for these.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1314#issuecomment-276082468:160,simpl,simplest,160,https://hail.is,https://github.com/hail-is/hail/issues/1314#issuecomment-276082468,1,['simpl'],['simplest']
Usability,Could we add a specific test for compatibilty on JDK 8 and move the default forward? We're on a crash course of incompatibility with the current python3.6 / ubuntu:18.04 / Java 8 restrictions. From Oracle's pages it feels like Java 8 will simply never die...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326:239,simpl,simply,239,https://hail.is,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326,1,['simpl'],['simply']
Usability,Could we just change the Python to generate `ArrayRef`? Not clear to me why we use `indexArray` instead.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10119#issuecomment-786807963:60,clear,clear,60,https://hail.is,https://github.com/hail-is/hail/pull/10119#issuecomment-786807963,1,['clear'],['clear']
Usability,"Currently pruning dependencies, forking NextJS to remove poly fills for older browsers, and focusing on bundle size. Investigated using Inferno.js as a lighter alternative to React. Saves ~20-30KB bundle size, and is somewhat faster. However, main Inferno dev moved to React core team, and React is focusing on the optimizations present in Inferno for 2019 (DOM: move to native events where possible), as well as introducing optimizations not found in Inferno (compile time targets: initially inlining, future maybe web assembly binaries; move rendering work to separate thread / concurrent rendering). Furthermore, React ecosystem is orders of magnitude larger, so we can save a huge amount of dev time by avoiding Inferno (N modules * time to develop bespoke module avg), and have greater likelihood of LTS. Notably, I realized that most of my bundle size was coming from inefficient bundling of Material UI and due to Apollo's insanely large graphQL bundle. Removing these now. Lastly, React is actually very efficient. jQuery is ~31.1KB minified. React is 3KB, while React DOM is 33.8KB. In 2019 React DOM will shrink. In any case, given that React is both faster than jQuery, dramatically simplifies development, and introduces development structure, 4KB cost is imo worth it. Related issues:; https://github.com/zeit/next.js/issues/5923. Bundle (with header, authentication logic including jks-rsa verification of token, styles). Index.js is 336 B, _app is 2.89, and that is all that is needed for first page render. _app amortized over all other pages. Scorecard template w/fetch logic is 1.67KB. <img width=""341"" alt=""screen shot 2018-12-19 at 3 43 23 pm"" src=""https://user-images.githubusercontent.com/5543229/50247084-f3202200-03a4-11e9-8232-f1cd2a35958c.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448652812:1194,simpl,simplifies,1194,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448652812,1,['simpl'],['simplifies']
Usability,"Currently this is optimized to:. ```; (TableMapRows (idx) 1; (TableRange 5 5); (MakeStruct; (idx; (GetField idx; (Ref Struct{idx:Int32} row))); (x; (I32 5)))); ```. But clearly it should be an InsertFields, not a MakeStruct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4001#issuecomment-408232868:169,clear,clearly,169,https://hail.is,https://github.com/hail-is/hail/issues/4001#issuecomment-408232868,1,['clear'],['clearly']
Usability,"Dan, should be resolved. Thanks for all of the feedback!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4994#issuecomment-449272584:47,feedback,feedback,47,https://hail.is,https://github.com/hail-is/hail/pull/4994#issuecomment-449272584,1,['feedback'],['feedback']
Usability,"Does not work (passes) with PL present in all rows, which surprised me since type should be virtual type should be taken as stated, I believe. Haven't investigated further (stats day) to see what the IR generated is. Also does not work if I edit the VCF file and insert a bogus PL of .,.,. for each sample. An upcast seems to be happening in the mt1 child, because PL is clearly missing in mt2:. <img width=""705"" alt=""Screenshot 2020-01-31 12 40 13"" src=""https://user-images.githubusercontent.com/5543229/73561429-f9e1eb00-4426-11ea-9bb8-0cec77398d92.png"">. code in updated, pushed test. edit, to show that mt1 does have expected entries (though this shouldn't matter unless array_elements_required doesn't loosen requiredeness over the imputed type):. MT1:; <img width=""170"" alt=""Screenshot 2020-01-31 12 47 00"" src=""https://user-images.githubusercontent.com/5543229/73561943-07e43b80-4428-11ea-847e-65f2f3771af8.png"">; MT2:; <img width=""208"" alt=""Screenshot 2020-01-31 12 47 05"" src=""https://user-images.githubusercontent.com/5543229/73561944-087cd200-4428-11ea-8968-6daf53291d83.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580834992:371,clear,clearly,371,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580834992,1,['clear'],['clearly']
Usability,"Done!. Thanks Tim!. On Wed, Feb 1, 2017 at 8:24 AM, Tim Poterba <notifications@github.com>; wrote:. > *@tpoterba* commented on this pull request.; >; > Need just one tiny change to the py/j connector. Looks great!; > ------------------------------; >; > In python/hail/dataset.py; > <https://github.com/hail-is/hail/pull/1324#pullrequestreview-19546823>:; >; > > @@ -2336,6 +2336,22 @@ def mendel_errors(self, output, fam):; > pargs = ['mendelerrors', '-o', output, '-f', fam]; > self.hc._run_command(self, pargs); >; > + def min_rep(self):; > + """"""; > + Gives minimal, left-aligned representation of alleles. Note that this can change the variant position.; > +; > + ** Examples **; > + 1) Simple trimming of a multi-allelic site, no change in variant position; > + `1:10000:TAA:TAA,AA` => `1:10000:TA:T,A`; > +; > + 2) Trimming of a bi-allelic site leading to a change in position; > + `1:10000:AATAA,AAGAA` => `1:10002:T:G`; > +; > + """"""; > + jvds = self._jvds.minrep(); >; > add in the try: / except: here, following the other methods in dataset.py.; >; > The default py4j errors look horrible, so calling our wrapper method helps; > a lot.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/1324#pullrequestreview-19546823>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ADVxgaQoXMxYMPE_V-RMRgYp5mvNSf-Pks5rYIePgaJpZM4LzbBv>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1324#issuecomment-276663883:691,Simpl,Simple,691,https://hail.is,https://github.com/hail-is/hail/pull/1324#issuecomment-276663883,1,['Simpl'],['Simple']
Usability,"Drat, it appears that pyspark doesn't work with Python 3.8. https://stackoverflow.com/a/58849063/342839. A simpler reproduction to demonstrate that this is a pyspark issues:. ```; snafu$ python -m pyspark.cloudpickle; Traceback (most recent call last):; File ""/usr/lib/python3.8/runpy.py"", line 185, in _run_module_as_main; mod_name, mod_spec, code = _get_module_details(mod_name, _Error); File ""/usr/lib/python3.8/runpy.py"", line 111, in _get_module_details; __import__(pkg_name); File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/__init__.py"", line 51, in <module>; from pyspark.context import SparkContext; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/context.py"", line 31, in <module>; from pyspark import accumulators; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/accumulators.py"", line 97, in <module>; from pyspark.serializers import read_int, PickleSerializer; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/serializers.py"", line 71, in <module>; from pyspark import cloudpickle; File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/cloudpickle.py"", line 145, in <module>; _cell_set_template_code = _make_cell_set_template_code(); File ""/home/reece/sandbox/hail/venv/3.8/lib/python3.8/site-packages/pyspark/cloudpickle.py"", line 126, in _make_cell_set_template_code; return types.CodeType(; TypeError: an integer is required (got type bytes); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10197#issuecomment-800647452:107,simpl,simpler,107,https://hail.is,https://github.com/hail-is/hail/issues/10197#issuecomment-800647452,1,['simpl'],['simpler']
Usability,"Eh, as you point out in the billing changes it's 0.02208 USD per core per hour, that's 2 USD per day. It's probably a bit more if we have a full SSD for a 4 core, but still, this is extremely far away from our biggest cost center. I vote for simplicity.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8850#issuecomment-635382758:242,simpl,simplicity,242,https://hail.is,https://github.com/hail-is/hail/pull/8850#issuecomment-635382758,1,['simpl'],['simplicity']
Usability,Example error:. ```; Caused by: is.hail.relocated.org.json4s.MappingException: No usable value for value_parameter_names; No usable value for str; Did not find value which can be converted into java.lang.String; 	at is.hail.relocated.org.json4s.reflect.package$.fail(package.scala:53); 	at is.hail.relocated.org.json4s.Extraction$ClassInstanceBuilder.org$json4s$Extraction$ClassInstanceBuilder$$buildCtorArg(Extraction.scala:638); 	at is.hail.relocated.org.json4s.Extraction$ClassInstanceBuilder$$anonfun$3.applyOrElse(Extraction.scala:689); 	at is.hail.relocated.org.json4s.Extraction$ClassInstanceBuilder$$anonfun$3.applyOrElse(Extraction.scala:688); 	at scala.PartialFunction.$anonfun$runWith$1$adapted(PartialFunction.scala:145); 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62); 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55); 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); 	at scala.collection.TraversableLike.collect(TraversableLike.scala:407); 	at scala.collection.TraversableLike.collect$(TraversableLike.scala:405); 	at scala.collection.AbstractTraversable.collect(Traversable.scala:108); 	at is.hail.relocated.org.json4s.Extraction$ClassInstanceBuilder.instantiate(Extraction.scala:688); 	at is.hail.relocated.org.json4s.Extraction$ClassInstanceBuilder.result(Extraction.scala:767); 	at is.hail.relocated.org.json4s.Extraction$.$anonfun$extract$10(Extraction.scala:462); 	at is.hail.relocated.org.json4s.Extraction$.$anonfun$customOrElse$1(Extraction.scala:780); 	at scala.PartialFunction.applyOrElse(PartialFunction.scala:127); 	at scala.PartialFunction.applyOrElse$(PartialFunction.scala:126); 	at scala.PartialFunction$$anon$1.applyOrElse(PartialFunction.scala:257); 	at is.hail.relocated.org.json4s.Extraction$.customOrElse(Extraction.scala:780); 	at is.hail.relocated.org.json4s.Extraction$.extract(Extraction.scala:454); 	at is.hail.relocated.org.json4s.Extraction$.org$json4s$Extraction$$extractDete,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2163457890:82,usab,usable,82,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2163457890,2,['usab'],['usable']
Usability,"Excellent feedback, I've improved the makefile substantially. It should now be a seamless experience for AUS et al.!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11645#issuecomment-1076594568:10,feedback,feedback,10,https://hail.is,https://github.com/hail-is/hail/pull/11645#issuecomment-1076594568,1,['feedback'],['feedback']
Usability,"Extremely nice @lfrancioli, very elegantly done. Rebase and address the minor comments, and it should be good to go. A simple test would be nice, too, but I'll put that on our todo list if you don't get to it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1147#issuecomment-265653872:119,simpl,simple,119,https://hail.is,https://github.com/hail-is/hail/pull/1147#issuecomment-265653872,1,['simpl'],['simple']
Usability,"FT JOIN aggregated_batch_resources; -> ON batches.id = aggregated_batch_resources.batch_id; -> LEFT JOIN resources; -> ON aggregated_batch_resources.resource = resources.resource; -> STRAIGHT_JOIN billing_project_users ON batches.billing_project = billing_project_users.billing_project; -> WHERE (billing_project_users.`user` = 'test' AND billing_project_users.billing_project = batches.billing_project) AND NOT deleted AND (batches.id < 1114186) AND ; -> (batches.`user` = 'test'); -> GROUP BY batches.id; -> ORDER BY batches.id DESC; -> LIMIT 51;; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | 1 | SIMPLE | batches | NULL | range | PRIMARY,batches_deleted,batches_token,batches_user_state,batches_time_completed,batches_billing_project_state | PRIMARY | 8 | NULL | 1348998 | 5.00 | Using where; Backward index scan |; | 1 | SIMPLE | batches_n_jobs_in_complete_states | NULL | eq_ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 1 | 100.00 | NULL |; | 1 | SIMPLE | batches_cancelled | NULL | eq_ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 1 | 100.00 | Using index |; | 1 | SIMPLE | aggregated_batch_resources | NULL | ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 61 | 100.00 | NULL |; | 1 | SIMPLE | resources | NULL | eq_ref | PRIMARY | PRIMARY | 302 | batch.aggregated_batch_resources.resource ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910:1823,SIMPL,SIMPLE,1823,https://hail.is,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910,1,['SIMPL'],['SIMPLE']
Usability,"FWIW, I finally found a simpler reproducer. It really takes some doing to convince the simplifier to apply this rule. This operation should use a constant ~1GiB of RAM (in reality, in a non-broken pipeline it uses closer to 8GiB, but, still, a constant amount of RAM), but in reality memory use grows with each row processed. ```python3; import hail as hl; ht = hl.utils.range_table(1); ht = ht.key_by(); ht = ht.select(rows = hl.range(10)); ht = ht.explode('rows'); ht = ht.annotate(garbage=hl.range(1024 ** 3)); ht.write('/tmp/foo.ht', overwrite=True); ```; The simplifier cannot simplify the pipeline if the key is still present so this pipeline is sufficient to restore normal memory usage:; ```python3; import hail as hl; ht = hl.utils.range_table(1); ht = ht.select(rows = hl.range(10)); ht = ht.explode('rows'); ht = ht.annotate(garbage=hl.range(1024 ** 3)); ht.write('/tmp/foo.ht', overwrite=True); ```. The ""bad"" `WritePartition` body IR looks like this:; ```; (StreamFlatMap __iruid_447; (StreamRange -1 True; (GetField start (Ref __iruid_446)); (GetField end (Ref __iruid_446)); (I32 1)); (StreamMap __iruid_448; (StreamRange 1 False (I32 0) (I32 10) (I32 1)); (InsertFields; (Literal Struct{} <literal value>); (""rows"" ""garbage""); (rows (Ref __iruid_448)); (garbage; (ToArray; (StreamRange 2 False; (I32 0); (I32 1073741824); (I32 1))))))); ```; The ""good"" IR looks like this:; ```; (StreamFlatMap __iruid_480; (StreamRange -1 True; (GetField start (Ref __iruid_479)); (GetField end (Ref __iruid_479)); (I32 1)); (Let __iruid_481; (MakeStruct; (idx (Ref __iruid_480)); (rows; (ToArray; (StreamRange 1 False (I32 0) (I32 10) (I32 1))))); (StreamMap __iruid_482; (ToStream True (GetField rows (Ref __iruid_481))); (InsertFields; (Ref __iruid_481); (""idx"" ""rows"" ""garbage""); (rows (Ref __iruid_482)); (garbage; (ToArray; (StreamRange 2 False; (I32 0); (I32 1073741824); (I32 1)))))))); ```. Notice, in particular, that the `StreamMap` inside the `StreamFlatMap` uses memory management because",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13619#issuecomment-1720022103:24,simpl,simpler,24,https://hail.is,https://github.com/hail-is/hail/pull/13619#issuecomment-1720022103,4,['simpl'],"['simpler', 'simplifier', 'simplify']"
Usability,"FYI @danking. If you don't like how this is structured, then please give me high level feedback on what you would do differently.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10898#issuecomment-928209199:87,feedback,feedback,87,https://hail.is,https://github.com/hail-is/hail/pull/10898#issuecomment-928209199,1,['feedback'],['feedback']
Usability,"FYI, I create a `yDummy` of all zeros in order to very simply reuse the regression utils we have. Effect on performance is negligible.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1655#issuecomment-292960736:55,simpl,simply,55,https://hail.is,https://github.com/hail-is/hail/pull/1655#issuecomment-292960736,1,['simpl'],['simply']
Usability,"Failing tests likely due to recent commit, should be simple fix and re-push.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1648#issuecomment-294171904:53,simpl,simple,53,https://hail.is,https://github.com/hail-is/hail/pull/1648#issuecomment-294171904,1,['simpl'],['simple']
Usability,"For @tpoterba's benefit (and to get things clear), here's the current proposal:; - Move extra gcloud arguments to `--extra-gcloud-<description>-args=""--arg1 ... --argN""` where there is one such argument for each invocation of gcloud inside a hailctl command. gcloud args no longer go at the end.; - Only `hailctl dataproc submit` supports `--` which is used to separate submit arguments from the script arguments,; - Remove all gcloud arguments that are pass through in all commands, but mention them in the command help so users don't need to look at the gcloud help for commonly used options.; - gcloud options that are needed by some hailctl command should be consistently available among all hailctl commands (where appropriate, and where in some cases they may simply be pass-through).; - The other consistency changes @nawatts highlighted. (I wouldn't be surprised if I other issues come up when I make the changes, but this is a start.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-758255396:43,clear,clear,43,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-758255396,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"For a very fast operation that is expected by the user to be immediately executed, the progress bar would suggest that operation completed very quickly, but wouldn't tell them that the operation that was actually completed was generating an IR with that operation's node present.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7828#issuecomment-572729552:87,progress bar,progress bar,87,https://hail.is,https://github.com/hail-is/hail/issues/7828#issuecomment-572729552,1,['progress bar'],['progress bar']
Usability,"For posterity, we decided to make the code / SQL queries simpler here trading off efficiency and speed with having easy to verify correctness and readability. Once the initial compaction is done, this should run pretty quickly and we can scale back how aggressively we run the compaction. We may have to change this approach in the future if there's lots of simultaneous users.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1621923414:57,simpl,simpler,57,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1621923414,1,['simpl'],['simpler']
Usability,"For the multiple JPICs, I was thinking that some day there could be a JPIC per cloud. I can try and convert it back so it's clear there is one instance of the class if that is clearer for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9972#issuecomment-773536457:124,clear,clear,124,https://hail.is,https://github.com/hail-is/hail/pull/9972#issuecomment-773536457,2,['clear'],"['clear', 'clearer']"
Usability,"For your consideration… We often have a `pathlib.Path` or `cloudpathlib.CloudPath` that we've built up by parts, which is then the path to be used as an input resource:. ```python; res = mybatch.read_input(str(mycloudpath)); ```. Periodically we accidentally omit the `str(…)`, which leads to a semi-obscure error message and an extra editing round-trip. There is a point of view that `read_input()` and `read_input_group()` could also accept `os.PathLike` objects directly, and have Hail convert them to `str` itself, e.g. in `_new_input_resource_file()` which underlies both methods, as per this PR. The difficulty is how to do that conversion: `str(…)` does the trick for [`pathlib.Path`](https://docs.python.org/3.12/library/pathlib.html#operators) and [`cloudpathlib.CloudPath`](https://cloudpathlib.drivendata.org/stable/api-reference/cloudpath/), returning the path and URL, respectively, as a string. But it looks like in theory there might be [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike) subclasses that don't define `__str__()` to produce a usable path/URL. The official conversion method appears to be [`os.fspath()`](https://docs.python.org/3/library/os.html#os.fspath), but that does not do the right thing for `cloudpath.CloudPath` — there it downloads the remote file and returns a local path — which is not at all what Hail needs. However probably this is a theoretical concern and `str(…)` will be fine…",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14544#issuecomment-2105616965:1077,usab,usable,1077,https://hail.is,https://github.com/hail-is/hail/pull/14544#issuecomment-2105616965,1,['usab'],['usable']
Usability,"Further pruned. Removed all GraphQL libraries, besides graphql-tag, which I like, because 1) simple hash-based cache: no need to walk complex graph to normalize cache, because in most cases I'm perfectly fine with not re-using cache across different queries (that may have some shared fields). Apollo does something ""smarter"", but much slower: walks a query, checks that the requested fields for a node are the same, and that the node's id is the same, as some other query. 2) no runtime validation of query shape via graphql-tag...uses simple template strings, which are free. We don't care about schema validation in the client...because the server will error when schema is invalid. This should be compile time validated instead, in this case via integration tests. Also removed react-icons... I was going to use this in place of material-design-icons, because I thought loading the full font, when I needed only a few icons, would be unnecessarily expensive. It turns out that I cannot find a library where a single icon import (react-icons or MaterialUI) is smaller than Google's entire material design font: a single font (there are several needed to cover all icons) is ~500B. A single react-icons icon is ~2KB on dev (production may be smaller due to tree shaking). Also, am opposed to CSS-in-JS: slower, worse tooling, larger. Benefits are dynamic selectors, which are really no advantage that I can see (without them can still dynamically apply classes, as in the yee ol days of pleb vanilla js). Home page down to <2kb when not logged in, and 3.1KB logged in. This includes header, simple body, and dark mode button.; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 49 59 pm"" src=""https://user-images.githubusercontent.com/5543229/50264482-ed4c3000-03e8-11e9-80d1-81d195a7b37a.png"">; <img width=""2636"" alt=""screen shot 2018-12-19 at 11 50 33 pm"" src=""https://user-images.githubusercontent.com/5543229/50264483-ed4c3000-03e8-11e9-8180-1409ca16573f.png"">. edit: Further .1KB shaved (gzipp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665:93,simpl,simple,93,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-448868665,2,['simpl'],['simple']
Usability,Going to change this to be stacked on #8783. That will let me write the `Simplify` rules the way they ought to be written,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8776#issuecomment-628108350:73,Simpl,Simplify,73,https://hail.is,https://github.com/hail-is/hail/pull/8776#issuecomment-628108350,1,['Simpl'],['Simplify']
Usability,"Good call, done. It would be nice to factor out the common parts of handling refs, whether they're normal children or the only node in a block, but it's not clear how to do that without a pretty big structural change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13627#issuecomment-1724263938:157,clear,clear,157,https://hail.is,https://github.com/hail-is/hail/pull/13627#issuecomment-1724263938,1,['clear'],['clear']
Usability,"Gotcha, thanks, the trouble with reading your reply on the go. I had assumed you contributed to both from your reply. Glad to hear you're taking aiohttp performance seriously. Regarding flow-control, yep, that pr was merged https://github.com/huge-success/sanic/pull/1179. I haven't seen any further conversations from you or Sanic devs on the issue.; * It's not just on master, it's in 0.8. Part of my concerns over Sanic came from reading your post @ https://www.reddit.com/r/Python/comments/876msl/sanic_python_web_server_thats_written_to_die_fast/ ; this now seems outdated, and it would be interesting to hear the reply of a Sanic contributor. Re: ""The last cherry: Sanic has super fast URL router because it caches matching results. The feature is extremely useful for getting awesome numbers with `wrk` tool but in real life URL paths for server usually not constant. URLs like `/users/{userid}` don't fit in cache well :)""; - Surely simple (typical-use, i.e /path or /path/<param>) pattern matching isn't a large performance constraint. I would be surprised if this were a bottleneck in either Sanic or aiohttp.; - If aiohttp is bottlenecked by this, and isn't caching matches, why not? The most common route is say /. Edit: To be clear, the bench mentioned above used 1 worker for Sanic and aiohttp, both using uvloop. Bench attached. [bench.zip](https://github.com/hail-is/hail/files/2841473/bench.zip)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461455096:941,simpl,simple,941,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461455096,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Great feedback, @tpoterba . I think I addressed all the comments. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1116#issuecomment-262160105:6,feedback,feedback,6,https://hail.is,https://github.com/hail-is/hail/pull/1116#issuecomment-262160105,1,['feedback'],['feedback']
Usability,"Great feedback, thanks @danking. I think I address or responded to all the comments. I also changed the behavior of batch not to run any node until all its ancestors have completed running, which could happen if something failed which caused something else to get cancelled that was always_run. It fixes: https://github.com/hail-is/hail/issues/5903.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5891#issuecomment-484330528:6,feedback,feedback,6,https://hail.is,https://github.com/hail-is/hail/pull/5891#issuecomment-484330528,1,['feedback'],['feedback']
Usability,"Great feedback, thanks! I think I addressed all the comments.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1110#issuecomment-265057616:6,feedback,feedback,6,https://hail.is,https://github.com/hail-is/hail/pull/1110#issuecomment-265057616,1,['feedback'],['feedback']
Usability,"Great feedback. Addressed comments, back to you. In the scope lists, I use the format: `variable (*Type*): description`, where the type is in italics but not a hyperlink, but I put a hyperlink in the description when it seemed appropriate. ```; *:ref:`foo`; ```. didn't format the hyperlink. Also, I don't think we can put hyperlinks in double-back-quote literal/code blocks. I didn't address the math stuff. I think we can merge this (and other doc migrations) when it is ready and fix that separately.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1225#issuecomment-271382041:6,feedback,feedback,6,https://hail.is,https://github.com/hail-is/hail/pull/1225#issuecomment-271382041,1,['feedback'],['feedback']
Usability,"Great, and thanks for the feedback. I'll close the issue now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/902#issuecomment-256958955:26,feedback,feedback,26,https://hail.is,https://github.com/hail-is/hail/issues/902#issuecomment-256958955,1,['feedback'],['feedback']
Usability,"Great, thanks Jackie! Do you remember about how long the import step took for 0.1?. Second, you're running many linear regressions, right? If those still fail (or run much slower than 0.1), can you also try just a single linear regression? That's a simpler baseline to start with.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3945#issuecomment-405978394:249,simpl,simpler,249,https://hail.is,https://github.com/hail-is/hail/pull/3945#issuecomment-405978394,1,['simpl'],['simpler']
Usability,"Great, this is much clearer now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1000#issuecomment-257306183:20,clear,clearer,20,https://hail.is,https://github.com/hail-is/hail/pull/1000#issuecomment-257306183,1,['clear'],['clearer']
Usability,"Great, this is way simpler. Is the key_by/drop necessary? What about just making nested a string?. Does this also fail?. ```; t = hl.utils.range_table(1); t = t.annotate(x = hl.bind(lambda s, nested: s.contains(nested), hl.set({'foo'}), hl.null(...))); t._force_count(); ```. I'm going to guess no and that it has something to do with writing the row (which is why isolating it in the IRSuite isn't working).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4522#issuecomment-430009988:19,simpl,simpler,19,https://hail.is,https://github.com/hail-is/hail/issues/4522#issuecomment-430009988,1,['simpl'],['simpler']
Usability,Greatly simplified the evaluation matching.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/574#issuecomment-240128679:8,simpl,simplified,8,https://hail.is,https://github.com/hail-is/hail/pull/574#issuecomment-240128679,1,['simpl'],['simplified']
Usability,"HDF5 ""files"" are usually literally a single file. While fine for traditional file systems, this is not a good fit for object stores like GCS and S3. Object stores tend to scale horizontally providing high aggregate bandwidth across many individual objects. There appear to be some efforts to permit HDF5 to read and write to object stores in an object-store-friendly manner. In particular, there is a [GCS connector](https://www.hdfgroup.org/solutions/cloud-amazon-s3-storage-hdf5-connector/). It's not an object store, but there's also support for [Hadoop HDFS](https://www.hdfgroup.org/solutions/hadoop-hdfs-hdf5-connector/). There's also [the Virtual Object Layer](https://docs.hdfgroup.org/hdf5/develop/_h5_v_l__u_g.html) which appears to be a file system abstraction that would permit storing HDF5 ""files"" in multiple objects which plays well with cloud object store scaling. We should prioritize an importer because no one has asked for HDF5 export nor is it clear that the HDF5 client libraries make it easy to write a single HDF5 ""file"" from a cluster of cores separated by a network. An importer would look something like `MatrixVCFReader`. It will need to use an HDF5 Java client library. An HDF5 client API is described [here](https://docs.hdfgroup.org/hdf5/develop/_h_d_f5_l_i_b.html) but they don't link to any JARs or maven repositories. This [support thread from 2022](https://forum.hdfgroup.org/t/how-to-get-started-wih-hdf5-java/10346/14) appears to ultimately conclude that [netcdf-java](https://forum.hdfgroup.org/t/how-to-get-started-wih-hdf5-java/10346/24) supports reading HDF5 files. Including netcdf-java in a gradle or maven project is described [here](https://docs.unidata.ucar.edu/netcdf-java/current/userguide/using_netcdf_java_artifacts.html). It is not entirely clear how to use netcdf-java to access objects in Google Cloud Storage or Azure Blob Storage. There's an [open issue to support S3](https://github.com/Unidata/netcdf-java/issues/111). ---. OK, so, this is roug",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14311#issuecomment-1955112694:965,clear,clear,965,https://hail.is,https://github.com/hail-is/hail/issues/14311#issuecomment-1955112694,1,['clear'],['clear']
Usability,"Hail doesn't have this built in. I think your best bet would be to generate a dot file and then run [DOT](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) on it. You could maybe use [pydot](https://github.com/pydot/pydot). It should be as simple as grabbing the samples from your MT and creating a bunch of nodes, then grabbing the edges from the pc relate table and generating edges.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12489#issuecomment-1335445679:254,simpl,simple,254,https://hail.is,https://github.com/hail-is/hail/issues/12489#issuecomment-1335445679,1,['simpl'],['simple']
Usability,"Haven't figured it out yet, but reproduced the error with a simpler pipeline that just uses one annotate instead of `sample_qc`:. ```; P = 1; S = 1000; V = 50000; for N in range(350, 400, 1):; try:; mt = hail.balding_nichols_model(P, S, V, N); mt = mt.annotate_cols(n_called = hl.agg.filter(hl.is_defined(mt.GT), hl.agg.count())); mt = mt.filter_cols(mt.n_called > 0); print(""\n[PASS] with"", N, ""partitions:"", mt.count()); except Exception as e:; print(""\n[FAIL] with "", N, ""partitions""); raise e; break; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944#issuecomment-652065734:60,simpl,simpler,60,https://hail.is,https://github.com/hail-is/hail/issues/8944#issuecomment-652065734,1,['simpl'],['simpler']
Usability,"Heh. At least in my version of Docker, those are implicitly relative to the root not the WORKDIR:; ```; (base) dking@wm28c-761 /tmp % cat Dockerfile ; FROM ubuntu:20.04; WORKDIR /foo/bar; VOLUME baz; (base) dking@wm28c-761 /tmp % docker build -t foo . ; [+] Building 0.1s (6/6) FINISHED ; => [internal] load build definition from Dockerfile 0.0s; => => transferring dockerfile: 34B 0.0s; => [internal] load .dockerignore 0.0s; => => transferring context: 2B 0.0s; => [internal] load metadata for docker.io/library/ubuntu:20.04 0.0s; => [1/2] FROM docker.io/library/ubuntu:20.04 0.0s; => CACHED [2/2] WORKDIR /foo/bar 0.0s; => exporting to image 0.0s; => => exporting layers 0.0s; => => writing image sha256:217748640e5c53f72b8de9917010e5742fb8bef99a37dcb13ec59a903cb5834c 0.0s; => => naming to docker.io/library/foo 0.0s. Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them; (base) dking@wm28c-761 /tmp % docker run foo /bin/sh -c 'pwd && ls -l . && ls -l / && ls -l /baz'; /foo/bar; total 0; total 56; drwxr-xr-x 2 root root 4096 May 9 15:06 baz; lrwxrwxrwx 1 root root 7 Oct 19 2022 bin -> usr/bin; drwxr-xr-x 2 root root 4096 Apr 15 2020 boot; drwxr-xr-x 5 root root 340 May 9 15:06 dev; drwxr-xr-x 1 root root 4096 May 9 15:06 etc; drwxr-xr-x 3 root root 4096 May 9 15:01 foo; drwxr-xr-x 2 root root 4096 Apr 15 2020 home; lrwxrwxrwx 1 root root 7 Oct 19 2022 lib -> usr/lib; drwxr-xr-x 2 root root 4096 Oct 19 2022 media; drwxr-xr-x 2 root root 4096 Oct 19 2022 mnt; drwxr-xr-x 2 root root 4096 Oct 19 2022 opt; dr-xr-xr-x 238 root root 0 May 9 15:06 proc; drwx------ 2 root root 4096 Oct 19 2022 root; drwxr-xr-x 5 root root 4096 Oct 19 2022 run; lrwxrwxrwx 1 root root 8 Oct 19 2022 sbin -> usr/sbin; drwxr-xr-x 2 root root 4096 Oct 19 2022 srv; dr-xr-xr-x 13 root root 0 May 9 15:06 sys; drwxrwxrwt 2 root root 4096 Oct 19 2022 tmp; drwxr-xr-x 10 root root 4096 Oct 19 2022 usr; drwxr-xr-x 11 root root 4096 Oct 19 2022 var; total 0; (base) dki",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12990#issuecomment-1540332989:901,learn,learn,901,https://hail.is,https://github.com/hail-is/hail/pull/12990#issuecomment-1540332989,1,['learn'],['learn']
Usability,"Here are some slightly scattered thoughts:. You're pointing out that sometimes, it is better to unroll a stream, meaning the consumer code is repeated once per stream element. There is a more general version of this, where you want to concatenate several streams, and you might want to repeat the consumer code once per source stream. My instinct in cases like that is that both options (unroll the stream or not) should be explicitly representable in the IR, and the choice should be made before code generation. I think the fundamental issue you're pointing out is that MakeStream is most naturally a push stream (it wants to be the one driving the outer loop), and that because we don't support push streams we're forced to generate suboptimal code. But zip doesn't work for push streams. I think the only general solution is to support both push streams and pull streams explicitly, but that would add a significant amount of complexity. That may be worth doing at some point, but I definitely think we should get the simpler version working first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8148#issuecomment-590972329:1022,simpl,simpler,1022,https://hail.is,https://github.com/hail-is/hail/pull/8148#issuecomment-590972329,1,['simpl'],['simpler']
Usability,Here's a clear instance of buffer corruption after a transient error (in this case an SSLException). https://batch.hail.is/batches/7996481/jobs/182741; ```; 2023-09-13 16:37:36.612 JVMEntryway: INFO: is.hail.JVMEntryway received arguments:; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 0: /hail-jars/gs:__hail-query-ger0g_jars_be9d88a80695b04a2a9eb5826361e0897d94c042.jar.jar; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 1: is.hail.backend.service.Main; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 2: /batch/1c00c7157d4d41bcbf508f12d75329b1; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 3: /batch/1c00c7157d4d41bcbf508f12d75329b1/log; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 4: gs://hail-query-ger0g/jars/be9d88a80695b04a2a9eb5826361e0897d94c042.jar; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 5: worker; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 6: gs://gnomad-tmp-4day/parallelizeAndComputeWithIndex/s_yyHm37RY7YTSWH29gP5SM0RwKxgs9EXbg9_YMf7ho=; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 7: 38854; 2023-09-13 16:37:36.613 JVMEntryway: INFO: 8: 47960; 2023-09-13 16:37:36.613 JVMEntryway: INFO: Yielding control to the QoB Job.; 2023-09-13 16:37:36.614 Worker$: INFO: is.hail.backend.service.Worker be9d88a80695b04a2a9eb5826361e0897d94c042; 2023-09-13 16:37:36.614 Worker$: INFO: running job 38854/47960 at root gs://gnomad-tmp-4day/parallelizeAndComputeWithIndex/s_yyHm37RY7YTSWH29gP5SM0RwKxgs9EXbg9_YMf7ho= with scratch directory '/batch/1c00c7157d4d41bcbf508f12d75329b1'; 2023-09-13 16:37:36.617 GoogleStorageFS$: INFO: Initializing google storage client from service account key; 2023-09-13 16:37:36.821 services: WARN: A limited retry error has occured. We will automatically retry 4 more times. Do not be alarmed. (next delay: 1938). The most recent error was javax.net.ssl.SSLException: Connection reset.; 2023-09-13 16:37:38.893 WorkerTimer$: INFO: readInputs took 2278.496020 ms.; 2023-09-13 16:37:38.893 : INFO: RegionPool: initialized for thread 9: pool-2-thread-1; 2023-09-13 16:37:38.903 ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553:9,clear,clear,9,https://hail.is,https://github.com/hail-is/hail/issues/13356#issuecomment-1719508553,1,['clear'],['clear']
Usability,"Here's a larger rewrite of Github readme, ready for feedback. The gitter links reflect hail and hail-dev as we want them to be, so before merging we should rename hail to hail-dev and create hail. I also think it'd be good to give a bit more context for users on what ""pre-alpha, very active dev"" does and does not mean. In particular, that Hail is usable and tested now, but liable to change in non backward-compatible ways. Thoughts on including / wording this?. We should also consider moving the Roadmap somewhere on the forum. I think the development forum is a good place for more detailed instructions on collaboration (forking, etc) and best practices.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/699#issuecomment-243136925:52,feedback,feedback,52,https://hail.is,https://github.com/hail-is/hail/pull/699#issuecomment-243136925,2,"['feedback', 'usab']","['feedback', 'usable']"
Usability,"Here's my current rough list of things to be done before hail2 is as usable as hail1. It's still pretty long!. ## Necessary code work:; - Add the rest of the core methods from VDS/KT to api2 (#2591 does most for KT, order_by is the only outstanding KT method that's not moved to table there. Same needs to be done for VDS, this isn't too hard); - Add the non-core methods to `hail.methods` / `hail.genetics.methods`; - some stuff here is much harder than the rest, like `filter_alleles`; - This is mostly just labor, but some require more thought than others, like moving TDT to use hail2 expr; - Support intervals in the `index_*` methods. It's possible now to join by locus, but not using the `annotateLociTable` fast path.; - Move to Python 3 so argument order is preserved; - Test the hail2 api much more rigorously than we do now (at the very least, call each parameter branch for each method!; - Typecheck the expression language. This isn't super trivial, and making a nice system to integrate our `typecheck` module and expressions will require some thoughtful design work.; - Some more organization around the package: monkey patching with `import hail.genetics` is an idea I like, but want to think about the edge cases first. ## Documentation; - Document the `index_*` methods / joins; - Translate the _Hail Overview_ tutorial; - Make new tutorials to replace the 2 expr ones we have; - Fill in docs on api2 methods (they're not all there yet); - Fill in docs on expression language (things like __mul__ on NumericExpression haven't been documented); - Write ""integrative docs"" that provide how-tos for common types of workflows. Show the power of annotate / select / group_by/aggregate, etc. ## Longer term QoL:; - Move over tests to Python as much as possible. I looked at the linear regression suite and it can be moved entirely into Python without many problems.; - Write a type parser in Python. The nested calls into the JVM for Type._from_java make the library feel extremely sluggis",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554:69,usab,usable,69,https://hail.is,https://github.com/hail-is/hail/pull/2588#issuecomment-352190554,1,['usab'],['usable']
Usability,"Here's the terraform configurations in GCP and Azure:. - GCP: Batch has admin storage permissions, as granted here https://github.com/hail-is/hail/blob/1f5e1540c04abfde58ead1084841fec5aa6e0ed3/infra/gcp/main.tf#L415-L424. We also grant it a Viewer role on the query bucket after that which seems redundant. We should really not grant it global storage admin and instead give it admin for just the query bucket and other associated batch buckets. I checked in hail-vdc and batch does not have the global storage admin role, and it has the Viewer role on the query bucket. I've changed that role now to admin on the query bucket. - Azure: Story is simpler. The `query` storage container is part of the `batch` storage account. The batch SP has ownership over the `batch` storage account and by extension all of the containers inside it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11870#issuecomment-1138806011:646,simpl,simpler,646,https://hail.is,https://github.com/hail-is/hail/pull/11870#issuecomment-1138806011,1,['simpl'],['simpler']
Usability,"Hey @JKosmicki,. Your branch has diverged from master a fair bit at this point. I can get this PR moving again if you do two simple things for me:; - rebase your commit on hail-is's master; - apply a patch I created, which fixes some compile errors. If you don't already have a remote (you can list remotes with `git remote -v`) for `hail-is/hail`, let's create one:. ``` bash; git remote add hi https://github.com/hail-is/hail.git; ```. I'll refer to this remote as `hi` from now on. If you already had a remote for `hail-is/hail` then substitute its name below for `hi`. First, we rebase to get the latest code from `hail-is/hail`'s `master` branch. ``` bash; git fetch hi; git rebase hi/master tdt; ```. And now we download [this `.patch` file](https://github.com/danking/hail/commit/6ea3d77684596abf171920e014c2aedd2a209f9c.patch) and apply it to the `tdt` branch:. ``` bash; git am the/path/to/that/file/you/downloaded.patch; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/753#issuecomment-248645143:125,simpl,simple,125,https://hail.is,https://github.com/hail-is/hail/pull/753#issuecomment-248645143,1,['simpl'],['simple']
Usability,"Hey @danking,; Thanks so much for the advice. Your team has been very helpful and responsive. - I made the adjustment to my `create_intervals` function; - Why is writing the hail table first more efficient than just directly exporting from the grouped matrixtable?. I tried your suggestion of writing the data to a table first, but my `cols` field doesn't contain the computed HWE values. These are contained within the `entries` field. Table description is below. I tried modifying the code to what is shown below but I'm still having the same issue. Also tried increasing the RAM to max available per CPU. One thing I noticed is the `mt_hwe_vals` variable in my code below is a MatrixTable and not a GroupedMatrixTable. Is this correct?. ```; ----------------------------------------; Global fields:; None; ----------------------------------------; Column fields:; 'ancestry': str; ----------------------------------------; Row fields:; 'locus': locus<GRCh38>; 'alleles': array<str>; 'filters': set<str>; 'variant_qc': struct {; gq_stats: struct {; mean: float64, ; stdev: float64, ; min: float64, ; max: float64; }, ; call_rate: float64, ; n_called: int64, ; n_not_called: int64, ; n_filtered: int64, ; n_het: int64, ; n_non_ref: int64, ; het_freq_hwe: float64, ; p_value_hwe: float64, ; p_value_excess_het: float64; }; 'info': struct {; AC: array<int32>, ; AF: array<float64>, ; AN: int32, ; homozygote_count: array<int32>; }; 'a_index': int32; 'was_split': bool; ----------------------------------------; Entry fields:; 'hwe': struct {; het_freq_hwe: float64, ; p_value: float64; }; ----------------------------------------; Column key: ['ancestry']; Row key: ['locus', 'alleles']; ----------------------------------------; ```. ```python; ancestry_table = hl.Table.from_pandas(ancestry.astype({""person_id"":str}), key='person_id'); mt = mt.annotate_cols(ancestry = ancestry_table[mt.s].ancestry); mt_hwe_vals = mt.group_cols_by(mt.ancestry).aggregate(hwe = hl.agg.hardy_weinberg_test(mt.GT)). # T",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287#issuecomment-1674895492:82,responsiv,responsive,82,https://hail.is,https://github.com/hail-is/hail/issues/13287#issuecomment-1674895492,1,['responsiv'],['responsive']
Usability,"Hey @natestockham,. I'm glad you resolved the breeze issue. I imagine you were encountering a situation where the native libraries were not extant / not where expected / not the correct architecture. Three of the newly failing tests are related to plink. The output included in `tests.zip` indicates that you're using a fairly old version of plink,; ```; PLINK v1.90b1b 64-bit (20 May 2014); ```; Our testing server uses versions of plink from 2016. It's possible these tests are over constrained and need to be relaxed. I will investigate the precision required to pass the two tests in `IBDSuite`. However, part of one failure in the `IBDSuite` and the failure in the `ImputeSexSuite` are both caused by plink failing to produce output on certain input files. I strongly suspect these are bugs in plink version `1.90b1b` because plink `1.90b3.38` (from 2016, the version used on our test server) does not err on such files. This leaves one final test: `LinearMixedRegressionSuite.genAndFitLMM`. This is the test I have been writing about above and I can confirm that this is a bug (or, perhaps, overly precise test) **on our end** that we are actively investigating. Hail is usable even though the tests do not pass (you can run `./gradlew shadowJar` to produce a working jar), but I will advise you against relying on the results of `lmmreg` until we can confirm why this test is failing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281861771:1177,usab,usable,1177,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281861771,1,['usab'],['usable']
Usability,"Hey @shengqh !. Yeah, this is a bug in Kryo, a serialization library used by Spark, which cannot handle the size of data you're producing. This is partly a deficiency in Hail: we assume that PLINK files are relatively small, in particular that the number of variants is small. This issue was supposedly resolved in Spark 2.4.0+ and 3.0.0+ by https://github.com/apache/spark/commit/3e033035a3c0b7d46c2ae18d0d322d4af3808711 . You appear to be running Apache Spark version 3.3.2, so I'm surprised you encountered this. Can you confirm which version of the Kryo JAR you have in your environment?. Can you also share a bit of information about this PLINK file? `import_plink` could obviously be modified to support 30M+ variant PLINK files, but I'd like to understand better why such large PLINK files exist. Do you expect these files to continue to grow in size? Do other consumers of these PLINK files want one PLINK file per chromosome? Would it be possible to generate many PLINK files per chromosome such that all the PLINK files have roughly the same size in bytes?. Thanks for your feedback and help improving Hail!. Related issue: https://github.com/hail-is/hail/issues/5564 .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1904412205:1084,feedback,feedback,1084,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1904412205,1,['feedback'],['feedback']
Usability,"Hey @williambrandler ! Thanks for your contribution to Hail. We endeavor to keep our docs always accurate and up-to-date. Our continuous deployment system verifies the correctness of our Google Dataproc and Azure HDInsight instructions before releasing a new version of Hail to PyPI. Does Databricks have an open source program that would provide us with free credits to incorporate the Databricks platform into our continuous deployment process? Alternatively, I'm comfortable accepting these new instructions with a disclaimer that clearly identifies these instructions as contributed by Databricks and not maintained by the Hail team. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11800#issuecomment-1112572464:534,clear,clearly,534,https://hail.is,https://github.com/hail-is/hail/pull/11800#issuecomment-1112572464,1,['clear'],['clearly']
Usability,"Hey, thanks for all the pictures, this is really clear. Looking at this, tho, I have question: what problem is it solving? Maybe asked another way, what does it look like without this that's an issue?. For a narrow window, you get a double scrollbar: one on the table and one on the window. That has always seemed like bad design to me.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7786#issuecomment-580065507:49,clear,clear,49,https://hail.is,https://github.com/hail-is/hail/pull/7786#issuecomment-580065507,1,['clear'],['clear']
Usability,"Hi @alanmejiamaza ,. Just to be clear, you did `pip install hail` and then you opened a notebook and ran something like:; ```; import hail as hl; hl.init(); from hail.plot import show; from pprint import pprint; hl.plot.output_notebook(); ht = hl.utils.range_table(1000); ht = mt.annotate(DP = hl.rand_unif(0, 100)); p = hl.plot.histogram(ht.DP, range=(0,30), bins=30, title='DP Histogram', legend='DP'); show(p); ```; And the plot didn't appear? Did you get a message saying ""BokehJS 1.4.0 successfully loaded.""? What version of Jupyter are you using? What web browser are you using?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12717#issuecomment-1452599951:32,clear,clear,32,https://hail.is,https://github.com/hail-is/hail/issues/12717#issuecomment-1452599951,1,['clear'],['clear']
Usability,"Hi @daniel-goldstein / @danking - thanks for the feedback, and sorry for the delay! I've pushed those changes now :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14328#issuecomment-1978272030:49,feedback,feedback,49,https://hail.is,https://github.com/hail-is/hail/pull/14328#issuecomment-1978272030,1,['feedback'],['feedback']
Usability,"Hi @danking, thanks for this. On the topic of asserts, there are really two interacting issues:. 1. Asserts are intended to ensure invariants, i.e. conditions that should always be true. In correct code, assertions should never raise so disabling them should have no consequences at runtime. In practice, however, they are often casually used to catch value errors, which can be expected to occur if a user-facing method receives bad/nonsensical inputs (e.g. here: https://github.com/hail-is/hail/blob/1940547d35ddddb084ad52684e36153c1e03a331/hail/python/hailtop/hailctl/dataproc/diagnose.py#L62); 2. Python's language design allows anyone calling your code to disable asserts for optimization purposes, because disabling asserts should never change the semantics of the program. Putting these two features together, you can arrive at a situation where a user thinks they're turning off asserts (which should never raise anyway) and instead stops catching value errors (whose absence can never be guaranteed). All that said, if the final answer is: ""if you invoke `-O` you deserve what's coming"", I'm happy to drop it :). Thanks for taking a look at the example. If I understand you correctly, it sounds like I passed the wrong inputs to the function, in which case it might be clearer to raise a ValueError instead of an AssertionError in the end. On a closer look, it seems like most of the instances of `assert(x, y)` are actually in scala code-- my mistake. Thanks again for looking into this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12952#issuecomment-1531675665:1278,clear,clearer,1278,https://hail.is,https://github.com/hail-is/hail/issues/12952#issuecomment-1531675665,1,['clear'],['clearer']
Usability,"Hi @jmarshall, you're very right about the memoization aspect. I ended up just scrapping the data structure entirely in #12918 and doing this in a breadth-first way that seemed more intuitive anyway.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12915#issuecomment-1518367237:182,intuit,intuitive,182,https://hail.is,https://github.com/hail-is/hail/issues/12915#issuecomment-1518367237,1,['intuit'],['intuitive']
Usability,"Hi Jerome, yup, the first three require plink 1.9 and the fourth requires qctool. I'm surprised FisherExactSuite didn't fail as well, perhaps you have R installed or pulled Hail before that went into master. Thanks for the feedback, super helpful!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594#issuecomment-240399174:223,feedback,feedback,223,https://hail.is,https://github.com/hail-is/hail/issues/594#issuecomment-240399174,1,['feedback'],['feedback']
Usability,"Hi TJ! @tpoterba tells me he told you to make an Issue, but he forgot that we're trying to limit Issues to bug reports. Would you mind reposting this feature request on the forum and we'll follow up there?. http://discuss.hail.is/c/features. Can you also spell out a bit more what information you'd like for each parent-proband trio and how this information can be useful? We think the forum will be an easier place to get community feedback to nail down the best spec for all. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1055#issuecomment-258299456:433,feedback,feedback,433,https://hail.is,https://github.com/hail-is/hail/issues/1055#issuecomment-258299456,1,['feedback'],['feedback']
Usability,"Hi Vlad, thanks for the PR! I'm afraid there are some internal migrations we're making that are probably not clear from just looking at the codebase. Are you up to date on our `main`? We've found working with `config.mk` cumbersome because it can be stale if you switch between different instances of Batch (e.g. one deployed in azure and the other in GCP). > DOCKER_ROOT_IMAGE used to build batch workers and benchmark. I've recently updated the scripts for building the batch worker VM image to query kubernetes directly and we should probably do the same for benchmark. > HAIL_TEST_GCS_BUCKET used to build query; KUBERNETES_SERVER_URL used to build amundsen. These services are both currently deleted in our `main`. > PROJECT, ZONE, REGION are probably not need, but might make sense to add for consistency. These will fail in an Azure deployment, and while we want to move away from `config.mk` entirely, we would at least want it to contain configurations that are valid across clouds.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11371#issuecomment-1041941055:109,clear,clear,109,https://hail.is,https://github.com/hail-is/hail/pull/11371#issuecomment-1041941055,1,['clear'],['clear']
Usability,"Hi all,. Here's the error message that I get when I go to install all of my python packages (scipy/uvloop/etc). ```; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; --; 872 | amazon-ebs: rm -rf build/deploy; 873 | amazon-ebs: mkdir -p build/deploy; 874 | amazon-ebs: mkdir -p build/deploy/src; 875 | amazon-ebs: cp ../README.md build/deploy/; 876 | amazon-ebs: rsync -r \; 877 | amazon-ebs: --exclude '.eggs/' \; 878 | amazon-ebs: --exclude '.pytest_cache/' \; 879 | amazon-ebs: --exclude '__pycache__/' \; 880 | amazon-ebs: --exclude 'benchmark_hail/' \; 881 | amazon-ebs: --exclude '.mypy_cache/' \; 882 | amazon-ebs: --exclude 'docs/' \; 883 | amazon-ebs: --exclude 'dist/' \; 884 | amazon-ebs: --exclude 'test/' \; 885 | amazon-ebs: --exclude '*.log' \; 886 | amazon-ebs: python/ build/deploy/; 887 | amazon-ebs: # Clear the bdist build cache before building the wheel; 888 | amazon-ebs: cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; 889 | ==> amazon-ebs: /usr/local/lib/python3.7/site-packages/setuptools/installer.py:30: SetuptoolsDeprecationWarning: setuptools.installer is deprecated. Requirements should be satisfied by a PEP 517 installer.; 890 | ==> amazon-ebs: SetuptoolsDeprecationWarning,; 891 | ==> amazon-ebs: /usr/local/lib/python3.7/site-packages/setuptools/command/install.py:37: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; 892 | ==> amazon-ebs: setuptools.SetuptoolsDeprecationWarning,; 893 | amazon-ebs: sed '/^pyspark/d' python/requirements.txt \| grep -v '^#' \| xargs python3 -m pip install -U; 894 | amazon-ebs: Collecting aiohttp==3.8.1; 895 | amazon-ebs: Downloading aiohttp-3.8.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB); 896 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 68.3 MB/s eta 0:00:00; 897 | amazon-ebs: Collecting aiohttp_session<2.8,>=2.7; 898 | amazon-eb",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691:847,Clear,Clear,847,https://hail.is,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691,1,['Clear'],['Clear']
Usability,"Hi there @BioDCH, I reformatted your comment using [markdown code blocks](https://guides.github.com/features/mastering-markdown/#syntax). It looks like the unix user running `hail` does not have permission to edit `hail.log` file, this likely caused the other two errors. Please add `--log-file PATH` where `PATH` is a file path to which you have write access. For example:. ```; spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar ; --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf; ```. Assuming you have write access to `/user/hail/hail.log`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-250746848:82,guid,guides,82,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-250746848,1,['guid'],['guides']
Usability,"Hi, sorry to leave this hanging - we aren't especially well-equipped to answer this kind of question, since it seems to be a problem with the ES config. We just convert the Hail Table to a Spark DataFrame and call `saveToEs`: ; ```scala; def export(df: spark.sql.DataFrame, host: String = ""localhost"", port: Int = 9200,; index: String, indexType: String, blockSize: Int = 1000,; config: Map[String, String], verbose: Boolean = true) {. // config docs: https://www.elastic.co/guide/en/elasticsearch/hadoop/master/configuration.html. val defaultConfig = Map(; ""es.nodes"" -> host,; ""es.port"" -> port.toString,; ""es.batch.size.entries"" -> blockSize.toString,; ""es.index.auto.create"" -> ""true""). val mergedConfig = if (config == null); defaultConfig; else; defaultConfig ++ config. if (verbose); println(s""Config ${ mergedConfig }""). df.saveToEs(s""${ index }/${ indexType }"", mergedConfig); }; ```. I'd try debugging entirely in Spark to see if you can isolate the issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5643#issuecomment-476544584:475,guid,guide,475,https://hail.is,https://github.com/hail-is/hail/issues/5643#issuecomment-476544584,1,['guid'],['guide']
Usability,"Hi, sorry we missed this -- clearly we're not monitoring issues well. We do support on the forum: https://discuss.hail.is. If this is still an open question, please make a post there!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9837#issuecomment-827850982:28,clear,clearly,28,https://hail.is,https://github.com/hail-is/hail/issues/9837#issuecomment-827850982,1,['clear'],['clearly']
Usability,"Hi,. I'm just curious if you tried black on a code that uses Hail query. As far as I see, PEP8 conflicts with the code style adopted in the Hail docs, e.g. black would remove spaces in named function arguments:. ```; - mt = mt.annotate_entries(GT = lgt_to_gt(mt.LGT, mt.LA)); + mt = mt.annotate_entries(GT=lgt_to_gt(mt.LGT, mt.LA)); ```. On the other hand, query can be seen as a DSL on top of Python, so the same guidelines probably don't need to be applied to it. Wondering if you had thoughts about lining the query code? We will be writing a lot of that in the nearest future in the Centre for Population Genomics, and would love to set up some style checks, or even automate that with a tool like black. And on black - are you considering automating code refactoring with black as part of the CI? Or you wanted to just do checks, alongside with pylint?. Vlad",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9931#issuecomment-768677633:414,guid,guidelines,414,https://hail.is,https://github.com/hail-is/hail/pull/9931#issuecomment-768677633,1,['guid'],['guidelines']
Usability,"Hmm. Am I correctly reading from this that there are 8 of the exact same genome in the dataset?. I am feeling more confident that this is a symptom of the model. Theoretically, if a group of replicates were perfectly separated from the rest of the dataset by a PC or group of PCs, then the estimator for kinship will get zero's because the μ perfectly predicts the genotype.; <img width=""825"" alt=""screen shot 2018-05-07 at 10 44 55 am"" src=""https://user-images.githubusercontent.com/106194/39707912-af6d2bac-51e3-11e8-928b-4dc8d08474b2.png"">. It seems a little odd that 8 samples out of 5000 would manage to get at least one PC to differentiate them from the rest of the dataset. However, if that _is_ happening, then it follows that PC-Relate would dramatically decrease the estimated kinship because all the shared alleles are being marked as markers of ancestral relatedness rather than familial relatedness. Basically, it would be interesting to see the _ancestral_ relatedness as well. If you plot the top 10 PCs and color the replicates a different color, are they clearly separated by any of the PCs?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-387091122:1072,clear,clearly,1072,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-387091122,1,['clear'],['clearly']
Usability,"Hmm. What's special about `hl.concordance`... The other issue seems like it might be simpler, we're just setting a bad type on a field:; ```; E java.lang.ClassFormatError: Invalid signature for field in class __C8802Compiled referenced from constant pool index 1605 in method __C8802Compiled.addAndDecodeLiterals_region0_0(L__C9346addAndDecodeLiteralsSpills;)V; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13814#issuecomment-1778262286:85,simpl,simpler,85,https://hail.is,https://github.com/hail-is/hail/pull/13814#issuecomment-1778262286,1,['simpl'],['simpler']
Usability,How long did these jobs run for? I was able to reproduce the OOM with this simple example and the resource usage file was present in GCS albeit with only 8 bytes written (the header). We don't show plots in the UI with just the header and no data. Do you have example Hail Query code that would generate an OOM more slowly?. ```python3; hl.eval(hl.range(1024 * 1024).map(lambda _: hl.range(1024 * 1024))); ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13577#issuecomment-1737522562:75,simpl,simple,75,https://hail.is,https://github.com/hail-is/hail/issues/13577#issuecomment-1737522562,1,['simpl'],['simple']
Usability,"Hrm. One issue: I do not fully understand the minimum number of nodes allowed in GKE. Clearly, we need at least three master nodes to reach consensus. I'm not sure if any similar requirements exist for worker pools.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6774#issuecomment-519250516:86,Clear,Clearly,86,https://hail.is,https://github.com/hail-is/hail/pull/6774#issuecomment-519250516,1,['Clear'],['Clearly']
Usability,"Huh, checkpointing `sample.vcf` after the filter clears up the issue. This may be something to do with the result of import_vcf being used directly with `_same`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450#issuecomment-1061867500:49,clear,clears,49,https://hail.is,https://github.com/hail-is/hail/pull/11450#issuecomment-1061867500,1,['clear'],['clears']
Usability,"I agree cancel_after_n_failures should be on the group. That lets us match Spark semantics for QoB. 1. I agree, callback per group seems valuable.; 2. I agree attributes seem useful on groups.; 3. I agree, not much value in updates being at the job-group level. . Depends what you mean by prefix search, if that means `LIKE ""X%""`, I think that'll be quite fast on a normal index because you can jump directly to the first record whose prefix is X. I don't see how a fulltext index could do any better in that case. On the other hand, if you mean `LIKE ""%X""` then I agree, a normal index is useless and MySQL will do a table scan. In that case, I expect a fulltext index to be a substantial improvement. > I believe my plan is basically already doing this. It might not be clear because I didn't put the migrations in. But basically all of the current batches tables are now indexed by batch_id, job_group_id where the current ""batch"" has job_group_id = 1. Ah, that sounds good. So the plan would be to drop, for example, `aggregated_batch_resources_v2` and the other tables which are now replaced with the job group ones? That's exactly what I had in mind.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12697#issuecomment-1450945048:772,clear,clear,772,https://hail.is,https://github.com/hail-is/hail/pull/12697#issuecomment-1450945048,1,['clear'],['clear']
Usability,"I agree completely. I certainly don't think we can hide or replace Bokeh (I hope the explicit emphasis on Bokeh in the documentation makes this clear), but I think we should continue to add common-case utilities to `hl.plot` life easier for users (and ourselves).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5251#issuecomment-461245241:144,clear,clear,144,https://hail.is,https://github.com/hail-is/hail/pull/5251#issuecomment-461245241,1,['clear'],['clear']
Usability,"I agree with your criticism, although my feeling is that rows and r in your proposal are noisy and unnecessary. Two thoughts:. I think this is best resolved in the context of embedding the expression language in Python. I think understanding pandas and what's involved in building a pandas-like interface for VariantDatasets is a good way to start. If we do address it in the current setup, what do we want to write? How about `kt.aggregate('filter(col1 < col2).count()` or, assuming we're doing a summing col1, `filter(col1 < col2).sum(col1)`. Then all the lambdas go away. We clearly need the scope in aggregators. Why not make that explicit, and throw out the single implicit value? Then `filter(col1 < col2).with(col3 = col1 * col2).mean(col3)`. I'm not sure about flatMap. `flatWith(col3 = <array expr>)`? I guess that's the same as `with(col3 = <array expr>).explode(col3)`. Then Aggregables look like Structs:. ```; Aggregable {; col1: Int,; col2: Int, ...; }; ```. Then there's nothing funny going on.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1410#issuecomment-282784540:578,clear,clearly,578,https://hail.is,https://github.com/hail-is/hail/issues/1410#issuecomment-282784540,1,['clear'],['clearly']
Usability,"I also feel like we should have some tests that assert correctness of very simple comparisons. Like 0 < 1, NA != 1, NA == NA. Do these exist in python?. In the pain of my recent work on contextrdd and off heap regions I've spent a lot of time reducing our test cases to actual minimal examples. It would save engineering time in the long run to add simple, tiny examples every time we make changes or add functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3582#issuecomment-389883212:75,simpl,simple,75,https://hail.is,https://github.com/hail-is/hail/pull/3582#issuecomment-389883212,2,['simpl'],['simple']
Usability,"I also now suspect that the strange behavior I was seeing was due to caching on Chrome's side. This would explain why I was seeing nothing in server logs, and why behavior was inconsistent between browsers. I even watched logs of all 6 gateways (3 gateway, 3 internal), and the monitoring router, nothing. I also saw differences in redirect behavior between Safari and Chrome. Cleared browser cache (hard refreshes weren't doing anything), and started also testing in Firefox. Lastly, the proxy_set_header Host does not appear to be needed for Grafana or Prometheus to operate, so I have excluded it (tested with the Cluster dashboard). This also reduces the number of places we need to specify which external domain Grafana/Prometheus sit behind. edit: To be clear I also tried to find documentation on the use of GF_SERVER_DOMAIN and could not. GF_SERVER_DOMAIN doesn't even appear in Grafan's repository (at least, GitHub search doesn't find it, although it does find GF_SERVER_ROOT_URL)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-541336418:377,Clear,Cleared,377,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-541336418,2,"['Clear', 'clear']","['Cleared', 'clear']"
Usability,"I assigned @catoverdrive, but @cseed @tpoterba @chrisvittal may also be interested and/or have useful feedback.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5331#issuecomment-462992065:102,feedback,feedback,102,https://hail.is,https://github.com/hail-is/hail/pull/5331#issuecomment-462992065,1,['feedback'],['feedback']
Usability,"I backed off the support for treating deep NAs as nonequal. That makes the change simpler, and also easier to test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8859#issuecomment-634159069:82,simpl,simpler,82,https://hail.is,https://github.com/hail-is/hail/pull/8859#issuecomment-634159069,1,['simpl'],['simpler']
Usability,I can where this change makes many things simpler. I like the way you're going with it. Thank you.; There seem to be a few changes related to scopes - perhaps promoting bindings to various scopes eagerly. I think these have made the review slightly harder.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14402#issuecomment-1989477810:42,simpl,simpler,42,https://hail.is,https://github.com/hail-is/hail/pull/14402#issuecomment-1989477810,1,['simpl'],['simpler']
Usability,"I can't remember why I did it the other way, but your way seems simpler.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9523#issuecomment-701544404:64,simpl,simpler,64,https://hail.is,https://github.com/hail-is/hail/pull/9523#issuecomment-701544404,1,['simpl'],['simpler']
Usability,I commented on Zulip about how to make this error the same for every backend. I think it should be a simple change to use `parallelizeAndComputeWithIndex`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10819#issuecomment-906833242:101,simpl,simple,101,https://hail.is,https://github.com/hail-is/hail/pull/10819#issuecomment-906833242,1,['simpl'],['simple']
Usability,"I did not fix the variant chunks or phenotypes classes to not be actual classes. But I would like your feedback on the rewritten `io.py`. It still might be overkill, but getting closer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13804#issuecomment-1781180710:103,feedback,feedback,103,https://hail.is,https://github.com/hail-is/hail/pull/13804#issuecomment-1781180710,1,['feedback'],['feedback']
Usability,"I didn't quite everything done in worker.py or managing the different secrets. However, I'd still appreciate feedback on the structure before I work on this more.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-934758488:109,feedback,feedback,109,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-934758488,1,['feedback'],['feedback']
Usability,"I didn't set that to a value,and kept it by default.; I have no idea about which variables should be set to some value, is there a guide to show all the variables I should set ? I didn't see something like this in the hail website?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-338462427:131,guid,guide,131,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-338462427,1,['guid'],['guide']
Usability,"I don't have any specific ideas, no. Just noticing that this seems to implement a stronger abstraction: a type for default values. I don't know of any cases where we use default values, other than unreachable values, but if there were, it looks like this could be used. Mostly, that seems simpler conceptually than ""unreachable values"", since it doesn't involve control flow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10539#issuecomment-870779483:289,simpl,simpler,289,https://hail.is,https://github.com/hail-is/hail/pull/10539#issuecomment-870779483,1,['simpl'],['simpler']
Usability,"I don't like the proliferation of `.copy` methods -- I find it extremely hard to reason about what they're actually doing and where they should be used. I think it would be reasonable for each PType to implement a `setRequired` method, which seems to require the same amount of total code, but makes things a bit simpler.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8127#issuecomment-589025030:313,simpl,simpler,313,https://hail.is,https://github.com/hail-is/hail/pull/8127#issuecomment-589025030,1,['simpl'],['simpler']
Usability,"I don't see the utility in creating an unnecessary stack trace to see 'method ""variant QC"" requires a split dataset'. I think there is value in having clear, short, stack-trace-free error messages when it's clear what the problem is and what the user needs to do. I think that printing unnecessary stack traces will cause users to view hail even more as a tool in development, and they will be more inclined to ask us about errors rather than try to figure out how whether they made a simple mistake using the interface.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1552#issuecomment-287149290:151,clear,clear,151,https://hail.is,https://github.com/hail-is/hail/pull/1552#issuecomment-287149290,3,"['clear', 'simpl']","['clear', 'simple']"
Usability,"I don't think so. The change is clearly fixes an issue and is an improvement. That said, write failures are rare and I just want to flush out any other rare errors so the tests are reliable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10023#issuecomment-776868666:32,clear,clearly,32,https://hail.is,https://github.com/hail-is/hail/pull/10023#issuecomment-776868666,1,['clear'],['clearly']
Usability,"I don't think the whitespace stuff belongs in a method, since that's expr language doc. I think if anything, the nMales/nFemales/nSamples stuff should go in query_samples, but I think the docs are pretty clear now",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1349#issuecomment-284852670:204,clear,clear,204,https://hail.is,https://github.com/hail-is/hail/issues/1349#issuecomment-284852670,1,['clear'],['clear']
Usability,"I don't think this keeps too much garbage in memory. Your next method extracts exactly the data it needs from its producer. No garbage there, you asked for only data you absolutely need. You stated (via `addReferenceTo`) that your region references these child regions, so that memory must be accessible at least as long as your region is accessible. Whoever is consuming your data can release all this memory by clearing the region you're using. The only nodes which should be clearing are folks who call `next` multiple times *and don't need that data to have the same lifetime*. This is true for filter, only surviving values must live, other values' lifetimes may end when we discover they fail the filter condition. It's also true for `write` because after one value is dumped into a file, it is no longer needed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7952#issuecomment-578798366:413,clear,clearing,413,https://hail.is,https://github.com/hail-is/hail/pull/7952#issuecomment-578798366,2,['clear'],['clearing']
Usability,"I don't think we have a clear policy on this. When I'm making stacked changes, I use one-commit per PR so that they can be reviewed independently. You're welcome to take either approach.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8920#issuecomment-638969261:24,clear,clear,24,https://hail.is,https://github.com/hail-is/hail/pull/8920#issuecomment-638969261,1,['clear'],['clear']
Usability,I feel that I've learned more about RVDs and partitioners. The front end of this change looks correct. :+1: from me.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5424#issuecomment-467119054:17,learn,learned,17,https://hail.is,https://github.com/hail-is/hail/pull/5424#issuecomment-467119054,1,['learn'],['learned']
Usability,"I figured, noticed the double post :). ```; The exception in your above message is coming from the Apply node being inferred as a PVoid by your case _ => PVoid code. Writing the rule for the apply node should fix that.; ```. Right. It's just that I tried to write the rule, and quickly ran across the fact that Seq[IR] would be inferred such that the first IR had a different type from the 2nd or Nth. This is what I had written:. ```scala; case ApplySpecial(name, irs) => {; val it = irs.iterator; val head = it.next(); head.inferSetPType(env). while(it.hasNext) {; val value = it.next(). value.inferSetPType(env); assert(value.pType2 == head.pType2); }. head.pType2; }; ```. With the result in one case that `head.pType2` was bool, `value.pType2` was something else. Without a type union, it wasn't clear to me what to return. One possibility was that I shouldn't handle this node, so I started with that possibility, which I know understand isn't right. The other was that the implementation was wrong, and my first guess there is that one of the IRs dictates the type (say the first), the 2nd is that there is a simple precedence rule, the 3rd is that the type inference procedure has some branching logic over the collection.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6594#issuecomment-513007861:801,clear,clear,801,https://hail.is,https://github.com/hail-is/hail/pull/6594#issuecomment-513007861,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"I fixed scorecard deploy stuff and now it is working with `dev deploy`. I also pushed some CSS changes:; - body { margin: 0; } that removes the extra header spacing; - but added an 0 8px 8px 8px margin to #content; - simplified the header layout CSS; - fixed the header item clickable area, should be bigger and uniform across header items; - fixed the misalignment on Safari. I'm pretty happy with this for this iteration.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-531991835:217,simpl,simplified,217,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-531991835,1,['simpl'],['simplified']
Usability,"I give up, every change I make seems to break something, and it's not clear that any of these changes actually are helping.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13371#issuecomment-1664756542:70,clear,clear,70,https://hail.is,https://github.com/hail-is/hail/pull/13371#issuecomment-1664756542,1,['clear'],['clear']
Usability,"I guess in simple terms I'm more of a member of the ""getting things done"" community than the; ""modern C++"" community. I have seen std::unique_ptr used in practice, and it was a bad experience.; And I stand by my contention that it doesn't solve any of the hard problems (whereas shared_ptr; very much does). Now I realize that people writing books about C++ write a good deal about move semantics and; unique_ptr. My interpretation is that there's a lot of writing about it because it involves concepts; which simply don't occur in any other commonly-used languages, and as such it requires a; good deal of explanation and justification because it's peculiar and unfamiliar. I suggest that; other languages haven't invented this concept because it's a) confusing and b) not particularly; useful. There's one really good thing you get from move semantics: the ability to resize a std::vector<T>; or std::unordered_map<T> without constructing deep copies of each T object. In the cases; where that's useful, it's very useful for optimizing performance without totally bypassing all your; abstraction mechanisms. The other ways people attempt to exploit move semantics are IMO; just a bad idea: if you want to pass around a large expensive-to-create object, then do it the; Java way by putting it on the heap and passing around some kind of reference, and *everyone* can understand it, not just experts in modern C++. Another angle on this debate would be to look at some open-source C++ projects and see how; often they actually use unique_ptr and/or std::move. My guess is that it's much less common; in practice than you might think from reading books about C++, because the overlap between; ""object ownership is passed around"" and ""... but we always know precisely who has ownership""; is not a very big part of the design space - compared to a whole lot of ""always owned by the object which created it"" and ""used in several places at once and we don't know who will be the last to drop it"". [Update: ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396683489:11,simpl,simple,11,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396683489,2,['simpl'],"['simple', 'simply']"
Usability,"I have a fairly bad case of PTSD around over-use of std::unique_ptr and std::move at; Oracle/Endeca. I think std::unique_ptr<T> is deeply confusing and evil because, in the; simplest terms, it doesn't have the normal semantics of a ""pointer"", i.e. two or more pointers; can refer to a single object. And that problem becomes massively aggravated in the; almost-universal situation of ""borrowing"" a pointer for the duration of a procedure call. Once you let std::unique_ptr<T> into your code, it can creep out into a whole lot of places; where it adds complexity and confusion without solving any real problem. In this particular case, the complexity of managing the memory chunks isn't that hard,; they all get cleaned up by the Region destructor, and adding another layer of software; with the Chunk class seems to obscure rather than clarify what is happening. C++11 added some wonderful features, and some lousy ones. std::unique_ptr is best avoided.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396297556:174,simpl,simplest,174,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396297556,1,['simpl'],['simplest']
Usability,I have a second PR coming that will simplify the makefiles but is not a functional change.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8149#issuecomment-590890096:36,simpl,simplify,36,https://hail.is,https://github.com/hail-is/hail/pull/8149#issuecomment-590890096,1,['simpl'],['simplify']
Usability,"I have an RFC proposal to just handle the ambiguity: https://github.com/hail-is/hail-rfcs/blob/main/rfc/0008-handle-vcf-array-field-ambiguity. I proposed a PR to fix this: https://github.com/hail-is/hail/pull/13465 However, I missed a key issue: many VCF's *elide* fields to indicate missingness. That is not ambiguous: a field that is entirely elided is clearly missing, not an array of one missing value. You can't do this in a FORMAT (aka entry aka genotype) field, but you can do this in an INFO field a la:; ```; ##fileformat=VCFv4.2; ##INFO=<ID=AC,Number=A,Type=Integer,Description=""Allele count in genotypes, for each ALT allele, in the same order as listed"">; ##INFO=<ID=NUMS,Number=*,Type=Float,Description=""some numbers"">; ##INFO=<ID=AN,Number=1,Type=Integer,Description=""Total number of alleles in called genotypes"">; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT ...; ... AC=1,1;AN=1 ...; ```; the `NUMS` field should be read as missing. My PR considered it unacceptably ambiguous because it thought it had been `NUMS=.`. I don't think we can fix this problem entirely from Python. We need to use Scala-side logic because after we parse in Scala, we lose the knowledge that a field was entirely elided versus a single missing dot.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13346#issuecomment-1773555545:355,clear,clearly,355,https://hail.is,https://github.com/hail-is/hail/issues/13346#issuecomment-1773555545,1,['clear'],['clearly']
Usability,"I have no explanation for the behavior of `pip`, it simply refuses to upgrade to the latest cloud tools. ```; + pip search cloudtools; cloudtools (1.1.16) - Collection of utilities for working on the Google Cloud Platform.; datawire-cloudtools (0.2.6) - Datawire Cloud Tools; cloudseed (0.0.1) - Cloudtools. real	0m0.867s; user	0m0.649s; sys	0m0.084s; + pip install -U cloudtools; Collecting cloudtools; Downloading https://files.pythonhosted.org/packages/46/78/966c9af5b88a01af73bb56486e853c00ff4865de0bf380282aa54fdec43a/cloudtools-1.1.15-py3-none-any.whl; Installing collected packages: cloudtools; Successfully installed cloudtools-1.1.15. real	0m1.718s; user	0m1.378s; sys	0m0.158s; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-418776700:52,simpl,simply,52,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-418776700,1,['simpl'],['simply']
Usability,"I haven't read over this, but I don't like the behavior. Assert and friends are for unexpected errors, and fatal is for expected errors. How is abort different from assert?. All errors should give full JVM + Python stack traces. I see this necessary for two reasons: It makes it much easier for users to report bugs to us, which means they get faster turnaround and we spend less time going back and forth about log files (which usually were ephemeral or they've overwritten) and often ""expected"" bugs are actually correct behavior on the user's end and a bug on our side, but no context is given for us to diagnose the real problem. For usability, it is obviously best if the user-visible error appears at the bottom.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1552#issuecomment-287147990:638,usab,usability,638,https://hail.is,https://github.com/hail-is/hail/pull/1552#issuecomment-287147990,1,['usab'],['usability']
Usability,"I imagine this is a low priority issue, but is there a workaround for learning what the structure of a grouped MT is in the meantime? Or has there been any progress on this?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7410#issuecomment-585212012:70,learn,learning,70,https://hail.is,https://github.com/hail-is/hail/issues/7410#issuecomment-585212012,1,['learn'],['learning']
Usability,"I intend the Tour of Hail Query to assume no genetics knowledge. Indeed, it probably won't ever mention genetics. I removed the sentence-as-bulleted list. I like them, but I'm not the reader here 😉. I intend for each of these documents to be separate files, and people with git experience can skip the git doc. I agree that we use git in one of the typical ways. However, I've learned that Atom's GitHub support doesn't consider the possibility of PRs from one remote to another. We also have some conventions around git messages and stacked PRs that I think are worth getting in writing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10020#issuecomment-776868568:377,learn,learned,377,https://hail.is,https://github.com/hail-is/hail/pull/10020#issuecomment-776868568,1,['learn'],['learned']
Usability,"I just noticed that the spacing doesn't follow the style guide. Not critical, but try to autoformat before PRing",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1494#issuecomment-284814488:57,guid,guide,57,https://hail.is,https://github.com/hail-is/hail/pull/1494#issuecomment-284814488,1,['guid'],['guide']
Usability,"I just realized, `refreshBuffer` is generally always accompanied by a (possibly implicit), `bufferCursor = start`, so that's a simplification that I'm going to try.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676511001:127,simpl,simplification,127,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676511001,1,['simpl'],['simplification']
Usability,"I looked closer at the logic in the old combiner and realized it was permitting things within 1 window-size of the window to be binned. I wasn't doing this at all, so implemented it. This has nice performance properties, but uses more memory than the user requests, so I'm using just a 25% ""grace window"" plus the buffer to have both good performance and low memory usage. ```; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_downsample_worst_case 39.5% 57.617 22.773; table_aggregate_downsample_dense 26.6% 127.079 33.843; ----------------------; Geometric mean: 32.4%; Simple mean: 33.1%; Median: 33.1%; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7197#issuecomment-538549413:591,Simpl,Simple,591,https://hail.is,https://github.com/hail-is/hail/pull/7197#issuecomment-538549413,1,['Simpl'],['Simple']
Usability,"I looked into this a bit and its not simple. There's a [BOMInputStream](https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/input/BOMInputStream.html) and [definitions of the BOMs](https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/ByteOrderMark.html) in commons. After handling compression and if we are looking at the first byte in the file, we need to check if the first 2-4 bytes are one of the magic BOM constants, if yes we should drop that. Unfortunately, the BOMInputStream doesn't propagate position information along. We probably need a PositionedBOMInputStream and I'm not exactly sure what getPosition should return.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6342#issuecomment-1265654206:37,simpl,simple,37,https://hail.is,https://github.com/hail-is/hail/issues/6342#issuecomment-1265654206,1,['simpl'],['simple']
Usability,"I made some edits that I think helped to reduce the number of places that are aware of the notion of a default_region. It's really now just isolated to the `InstanceCollectionManager`, since that's the piece of code that's making the decision ""use the default region when the cluster is small"". I didn't quite like the pattern of retrieving a default from a `LocationMonitor` just to give it right back to the location monitor in the next line. I think this way the `LocationMonitor` API is much simpler, and we can actually remove its `default_location` method entirely as I believe it is no longer used. I can do that in a follow-up PR if you like this approach. One other thing is I wanted to articulate the distinction between the ""region CI needs its jobs in"" and the ""default region that batch will spin up workers in for small clusters"". While they are in practice the same, I found that treating them both as the ""default_region"" tied the logic around jobs for CI closely with internal Batch decisions and made it more confusing for me to reason about. I tried to separate out these two concepts so that in the future when jobs support region-specific scheduling it will be easier to excise the CI-specific code from the Batch scheduler. Another thing that I realized during this process is that Azure has regions and zones just like GCP, though they may differ slightly since we don't need to specify a zone for a VM and such. I am fine with using the term ""location"" to mean ""where we scheduled the VM, either zone or region depending on the cloud provider"", but I would also like to follow up with a sweep that makes this language more precise where possible. For example, the `possible_cloud_locations` function is really just `possible_cloud_regions`, and we could even go so far as mandating a `region` field in the global config instead of having `azure_location` and `gcp_region`, which are synonymous even though named differently. It also leads me to wonder why we only schedule in a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12078#issuecomment-1207095240:496,simpl,simpler,496,https://hail.is,https://github.com/hail-is/hail/pull/12078#issuecomment-1207095240,1,['simpl'],['simpler']
Usability,I moved to TBoolean and simplified the error messages. Back to you.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/511#issuecomment-236389770:24,simpl,simplified,24,https://hail.is,https://github.com/hail-is/hail/pull/511#issuecomment-236389770,1,['simpl'],['simplified']
Usability,"I need help with the emit rule. I have what I believe to be an [XY problem](https://en.wikipedia.org/wiki/XY_problem). . The X: Implement maximal independent set in generated code.; The Y: Compile an IR as a function such that it can be passed _in generated code_ to a helper method akin to [this current implementation](https://github.com/chrisvittal/hail/blob/b286ba4a1463a81ec157e6add6d6d56c00de1138/hail/src/main/scala/is/hail/utils/Graph.scala#L50) of maximal independent set. At this point it becomes a simple method call that takes an `UnsafeIndexedSeq`, unpacks it to an array of tuples, and calls one of the other versions of maximal independent set (returning an array) that is then converted so it can be the return type of this `emitI` match arm. Thoughts, advice?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12295#issuecomment-1272085468:509,simpl,simple,509,https://hail.is,https://github.com/hail-is/hail/pull/12295#issuecomment-1272085468,1,['simpl'],['simple']
Usability,"I now pass the scores_table through as a Table rather than localizing and passing through colKeys, colKeyType, and scores annotations. The column key can now be any type. Both string and integer keys are tested from Python. However, `requireUniqueSamples` still requires a single string ID (this was the remaining problem of going generic), so I've removed this check and would appreciate feedback on the best approach to checking uniqueness, preferably on the localized `keys` in PCRelate so as not to trigger additional actions. I could use keyType.valuesSimilar to compare any two elements...it's a bit weird to have a tolerance on floats here. As noted, I'm also a bit wary that I'm relying on `scores` from `pca` to be in the same order as the columns on the matrix table. This is currently true, but could change. @danking I think the joins in `fuse` should also be zipPartitions, I've noted it in a FIXME. I'm also concerned that the number of diagonal blocks is an upper bound on parallelism for the matrix multiply. We should be able to fix that by immediately writing and then reading phi.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3211#issuecomment-376385065:389,feedback,feedback,389,https://hail.is,https://github.com/hail-is/hail/pull/3211#issuecomment-376385065,1,['feedback'],['feedback']
Usability,"I prefer reworking count, killing the genotypes parameter, so that it's always just a simple/efficient way to get (nSamples, nVariants, nGenotypes, nCalled, callRate). I don't see why a tuple is better than a dict.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1505#issuecomment-284860282:86,simpl,simple,86,https://hail.is,https://github.com/hail-is/hail/issues/1505#issuecomment-284860282,1,['simpl'],['simple']
Usability,"I put point_type back. Should be ready to go now. Also, fixed the close definition, good catch. I also removed an additional use of _convert_to_j in import_bgen to get the tests to pass from this PR (sorry my stacking got a bit mixed up): https://github.com/hail-is/hail/pull/5150/files#diff-36d21c1427efe06a781cd36ef5aa8678R961. You can also wait for that to go in and I'll rebase if you're worried about the change. Finally, the imports are a bit of a mess since I wanted to use hail_type in interval.py which is also imported by the types and expr files. @tpoterba I think we should remove types from expr and remove java from utils (we're confusing user utils like hadoop_* and Interval from internal utils like Env and java stuff which don't seem related) and have a clear ""import"" graph: javautils > types > utils > expr.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5152#issuecomment-456684801:772,clear,clear,772,https://hail.is,https://github.com/hail-is/hail/pull/5152#issuecomment-456684801,1,['clear'],['clear']
Usability,"I ran the stress test. It finished in 8 minutes which makes for a paltry 2 jobs per second. That was largely driven by three jobs that took 5 minutes (!!!) to upload their logs to GCS. No idea what's going on there, but clearly unrelated to these DB changes. If you ignore those jobs and the private jobs, which required VM spin up, it only took 3 minutes, which is still an unfortunate 6 jobs per second, but I have more speed coming.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10985#issuecomment-954864994:220,clear,clearly,220,https://hail.is,https://github.com/hail-is/hail/pull/10985#issuecomment-954864994,1,['clear'],['clearly']
Usability,"I saw this again today in a fairly simple and isolated test. I'm beginning to wonder if this is just a new form of transient error. We pick 22 random characters from a 62 character alphabet. Odds of collision are minuscule:; ```; In [2]: (1/62)**22; Out[2]: 3.693029961058969e-40; ```; I verified `SecureRandom` with no constructor uses a randomly chosen seed. There's three exceptions there (all the same one). The deepest one came during a write. The next two came during closes. The outermost exception is from the `using` cleaning up. I'm not sure where the middle exception comes from, I can't imagine who would try to `close` the stream other than `using`. Regardless, it appears that the upload fails in some unrecoverable way. We're writing 2GiB in 256 8MiB chunks in this test, so we have more chances for something to go wrong. Maybe we just have to retry the entire partition when this happens?. https://ci.hail.is/batches/7404773/jobs/145; ```; starting test is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt...; Exception:; is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 8388608; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:35,simpl,simple,35,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['simpl'],['simple']
Usability,"I still dislike job_group_tree because trees are usually represented in terms of their ancestor or parent-child relationships, neither of which are what this is. That said, I don't think we should block this PR on a naming quibble. We can do renames separately. We should update the RFC to be clear about the unique identifiers of the three things groups, jobs, and batches. (In particular, jobs are uniquely identifier by batch id and job id, group id is not part of it).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475#issuecomment-1760376350:293,clear,clear,293,https://hail.is,https://github.com/hail-is/hail/pull/13475#issuecomment-1760376350,1,['clear'],['clear']
Usability,I talked to Cotton about it and he said not to. But it's not clear how much of a difference that makes yet anyway. I think this version is pretty good and an improvement. Plus it'll add a benchmark which we can work on optimizing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9209#issuecomment-668622849:61,clear,clear,61,https://hail.is,https://github.com/hail-is/hail/pull/9209#issuecomment-668622849,1,['clear'],['clear']
Usability,"I think I can simplify the computation of the principal components. First let me summarize how the paper presents PC-AiR. ### Original Presentation. Suppose that there are $n_u$ individuals in the unrelated set and $p$ SNPs. Let $X$ be the $n_u \times p$ standardized genotype matrix for the unrelated individuals. The paper starts by computing. $$\Psi \coloneqq \frac{1}{p}XX^T.$$. Next the paper eigendecomposes $\Psi$:. $$\Psi = U \Sigma^2 U^T,$$. where $U$ are the eigenvectors and $\Sigma^2$ is the diagonal matrix with the eigenvalues along the diagonal. Then the paper computes a $p \times n$ matrix $W$ called the **SNP weight matrix**:. $$W \coloneqq X^T U.$$. Suppose that there are $n_r$ individuals in the related set and let $Y$ be the $n_r \times p$ standardized genotype matrix for the related individuals. The paper computes the principal components associated with the related samples with. $$ \frac{1}{p} Y W (\Sigma^2)^{-1}.$$. ### Simplifications. The first simplification that I noticed is that we can do away with the $\frac{1}{p}$ terms. Because $\Psi$ is scaled by $p^{-1}$, the inverse of the eigenvalues, $(\Sigma^2)^{-1}$ is scaled by $p$, which cancels out the $1/p$ term in the calculation of the principal components for the related individuals. From here on, let us redefine $\Sigma^2$ as the diagonal matrix containing the eigenvalues of $XX^T$ (not $\frac{1}{p} XX^T$). Next, by examining the relationship between singular value decomposition (SVD) and eigendecomposition ([Wikipedia link](https://en.m.wikipedia.org/wiki/Singular_value_decomposition#Relation_to_eigenvalue_decomposition)), I realized that it is not necessary to compute $\Psi$. Instead, we can get $U$ and $\Sigma$ from the SVD of $X$:. $$X = U\Sigma V^T,$$. where $V$ is a $p \times p$ basis of the new PCA coordinate space. Then while investigating the meaning of $W$, I realized that $W = X^T U = V \Sigma^T U^T U = V \Sigma^T$. Taking these simplifications into account, I realized that the paper",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184:14,simpl,simplify,14,https://hail.is,https://github.com/hail-is/hail/pull/14326#issuecomment-1962279184,2,"['Simpl', 'simpl']","['Simplifications', 'simplify']"
Usability,"I think I'd flip the logic. I'm not sure if this one is wrong:. ```; In [9]: hl.eval((p, hl.range(2).map(lambda x: p))); Out[9]: (0.46124206583236194, [0.46124206583236194, 0.46124206583236194]); ```. But if it's right, clearly this one is wrong:. ```; In [7]: p = 1 - r. In [8]: hl.eval(hl.range(2).map(lambda x: p)); Out[8]: [0.46124206583236194, 0.06052003544873086]; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7572#issuecomment-557020739:220,clear,clearly,220,https://hail.is,https://github.com/hail-is/hail/issues/7572#issuecomment-557020739,1,['clear'],['clearly']
Usability,"I think I'm seeing more where this approach is coming from, specifically we put batches as they exist today in a special category of having no updates and avoid the new code path in that case. An alternative which pairs with my above suggestion of not adding new staging tables is that all batches have at least 1 update. I feel like if we can force all batches down the new code path we'll be incentivized to make it really low overhead for batches that only submit jobs once, and that will benefit all batches, as well as simplifying the mental model. I may be wrong that we can do this with minimal performance tradeoff, but I'd like to try it first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1219807488:524,simpl,simplifying,524,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1219807488,1,['simpl'],['simplifying']
Usability,"I think Tim is right and that seems better than an undocumented hidden option, though I admit it's about as undocumented and hidden.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7964#issuecomment-578799305:51,undo,undocumented,51,https://hail.is,https://github.com/hail-is/hail/pull/7964#issuecomment-578799305,2,['undo'],['undocumented']
Usability,"I think if it's not too hard of a change, we should add the files with encoded secrets to something like `infra/gcp/data/...`. This makes it clear that these files have a different purpose and gives some indication that they're specific to your repo. If you want to also add prefixing the file name with the repo, then that would make it even clearer. But if it's too much work, don't bother. Maybe something like `infra/gcp/data/hail-is/` etc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11724#issuecomment-1171321194:141,clear,clear,141,https://hail.is,https://github.com/hail-is/hail/pull/11724#issuecomment-1171321194,2,['clear'],"['clear', 'clearer']"
Usability,I think it's clearer with one instance of the JPIC,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9972#issuecomment-773722261:13,clear,clearer,13,https://hail.is,https://github.com/hail-is/hail/pull/9972#issuecomment-773722261,1,['clear'],['clearer']
Usability,"I think maybe I'm overcomplicating the regions thing. Just not specifying regions clearly means you can schedule anywhere. `regions(None)` is confusing, but users should never do that directly. It will only happen when folks are programmatically generating jobs. People doing that are experts who will understand that `None` is just a stand in for ""any region"".",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1270359051:82,clear,clearly,82,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1270359051,1,['clear'],['clearly']
Usability,"I think that's right, though we serialize other potentially private information. I think we ought to have a per-organization (Hail billing project?) cache, but also not very high priority. I'd be pretty chuffed to learn we're running important enough stuff that people are attempting timing attacks on our cache to learn what queries other people are executing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10309#issuecomment-821250865:214,learn,learn,214,https://hail.is,https://github.com/hail-is/hail/pull/10309#issuecomment-821250865,2,['learn'],['learn']
Usability,I think the best way to provide feedback is with things like progress bars.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7828#issuecomment-572727108:32,feedback,feedback,32,https://hail.is,https://github.com/hail-is/hail/issues/7828#issuecomment-572727108,2,"['feedback', 'progress bar']","['feedback', 'progress bars']"
Usability,"I think the clear default answer is referential transparency. Whether you bind something in a python variable, or you inline that definition, should be semantically equivalent. Unless we come up with a compelling reason to break that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7418#issuecomment-548485790:12,clear,clear,12,https://hail.is,https://github.com/hail-is/hail/issues/7418#issuecomment-548485790,1,['clear'],['clear']
Usability,"I think the proposed new default and the option to change it is much more intuitive than the current behavior and worth a change. Though, I think it would be most polite to announce it on zulip/email list a week or two in advance of the release (which you may already planned to do).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11884#issuecomment-1145290949:74,intuit,intuitive,74,https://hail.is,https://github.com/hail-is/hail/pull/11884#issuecomment-1145290949,1,['intuit'],['intuitive']
Usability,I think this is due to HDFS filling up. Possibly related to the fact Tim was creating a copy of ExAC. I will retry the job once we clear up some space.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/301#issuecomment-210901646:131,clear,clear,131,https://hail.is,https://github.com/hail-is/hail/issues/301#issuecomment-210901646,1,['clear'],['clear']
Usability,"I think tying the reset to the iterator is a mistake. First, iterator is the wrong abstraction here. Whole-stage code generation should use the aggregator/array strategy we're using in Emit to generate nothing, conditionals and loops for map, filter and flatMap, respectively. Ideally read ... do stuff ... write will generate an RDD with no per-element iterators at all. I want to make sure this picture is clear. Second, we want to vectorize in the database sense: we want to process multiple rows together in batches. Then overall structure of a stage is a loop over the batches, and and a loop within batches. Thus, the common case should not be we reset after every element, so I think it's the wrong direction to bake it in. The place where we do this should be interface points with the Spark stack which should be looked at with scorn and derision and as the organizing model. Finally, this points to an ongoing difference in our views about the meaning of context. I see context as serving two purposes (neither of which involve reset):. - First, context is a set of resources needed to process a partition that should be released when the partition is complete. For example, I'm working on GenomicsDB which needs to localize a GenomicsDB shard to a local file that needs to be cleaned up when the partition is complete. - Second, it is a way to tell an iterator where to return its value. (This is the ""current"" region business.). I'd be happy to separate these, but I don't see clean way. In no case do I see generic logic to manage the lifetime of regions (e.g. knowing when to call reset) inside the Context.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3365#issuecomment-381180739:408,clear,clear,408,https://hail.is,https://github.com/hail-is/hail/pull/3365#issuecomment-381180739,1,['clear'],['clear']
Usability,"I think we also need to be clear when installing something that will break everyone's local tests (email, dev post, something).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3273#issuecomment-377700023:27,clear,clear,27,https://hail.is,https://github.com/hail-is/hail/issues/3273#issuecomment-377700023,1,['clear'],['clear']
Usability,"I think we should find a time to discuss this in person if the following explanation doesn't make sense. . Right now, for small batches, we send one REST request to the server to both create the batch and create the jobs. However, if we want one REST request for an update (ideal for the query service and low latency jobs?), we have to use relative job ids because (1) we don't know the absolute start index of the jobs until we've gotten the start id of the update back from the server and (2) the job dependencies can be a mix of known job ids that have already been previously submitted in a previous creation/update. The negative job IDs are a way to deal with a mix of relative ids within an update and known, submitted job ids. We can simplify things if we require all updates make two requests to the server to (1) get the start id and establish the update and then (2) submit new jobs with all absolute job IDs. I'd have to make sure this will actually simplify things because I also ran into a bifurcation in how the job IDs are handled in `BatchBuilder.create_job()`. We currently populate the spec with a job id before we've made any requests to the server. We need to know how many total jobs there are before we can figure out the job ids because the API for creating a new update requires reserving a block of job IDs which then returns the start id. This complexity is because we allow multiple updates to occur simultaneously to a batch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1215919856:742,simpl,simplify,742,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1215919856,2,['simpl'],['simplify']
Usability,"I think we should have the following design that runs the benchmarks in k8s because then we are using google's internal network to transmit data (compared to running on my local computer via a cloud proxy):. - Have a `db-benchmark` namespace in k8s specifically for this. 1. create_db.py; a. This will take the parameters needed for `gcloud sql instances create` including database flags, disk space, cores, etc. and create an instance; b. Get the IP address of the instance (hopefully the REST API works for this); c. Create a database; d. Create user and password for the database; e. Create config file; f. Create secret in the db-benchmark namespace from the config file; ; 2. run.py; a. Build the docker image with the benchmark.py code and installs aiomysql, etc.; b. Create pod which mounts the correct secret with the sql config for the instance to use. Environment variables specify the n_replicates, etc. Print out the pod name.; c. Wait for the pod to complete (you have code in CI that does this); d. Download logs; e. Delete the pod. 3. cleanup.py; a. Delete mysql instance; b. Delete kubernetes secret in db-benchmark namespace. Thoughts? . I tried to think about how to use the current build system and what I would do is add a new CreateSQLInstance step, CreateDatabase takes the instance name and IP address as a parameter, and have CI take a path to the build.yaml file to build from. But this wasn't straightforward with how to do this, so I thought the above was simpler to reason about.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7181#issuecomment-538453887:1483,simpl,simpler,1483,https://hail.is,https://github.com/hail-is/hail/pull/7181#issuecomment-538453887,1,['simpl'],['simpler']
Usability,"I think we should provide more information than the progress bar, but I concede that all three panels shown above is probably too much information by default when you're in ipython or python. In contrast, `hailctl batch submit` should probably display lots of information by default with a `--silent` flag to shut it off.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13063#issuecomment-1572344856:52,progress bar,progress bar,52,https://hail.is,https://github.com/hail-is/hail/issues/13063#issuecomment-1572344856,1,['progress bar'],['progress bar']
Usability,"I think we shouldn't be doing this type of feature without proper planning and a vision for the overall user experience. Perhaps this sort of item should go on a formal road map and not as an ""issue""?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13063#issuecomment-1572357250:104,user experience,user experience,104,https://hail.is,https://github.com/hail-is/hail/issues/13063#issuecomment-1572357250,1,['user experience'],['user experience']
Usability,"I think you're right. I tried a number of things, but I need something to key the column by, and a global has no concept a key (which is why it is a global). I found this very confusing. . Let's say mt.C contains phenotypes for samples 1..n. This is, in my mind, a distributed array, with someone fancy (non-integer) indexing support. Great, but I don't care about that, I just want a distributed array. I want to localize_entries, but this creates a hail Table, which drops my phenotypes, because that's now a table and not a matrix table (why! all I wanted was to create a new field in my MT with the result of a column aggregation per row). So the natural thing I reach to is storing my phenotypes elsewhere. I think: ""I want to continue benefitting from Hail query planner), so I try not to materialize the phenotypes in memory. If I say mt.annotate_globals(Y = mt.C) I expect that to just work, because in my mind, I took something that was a a distributed array, but with more powerful indexing support, and converted it to something that is even more array like, that I'm going to need to understand how to index myself (which I'm fine with since I'm moving the thing to globals). Alternatively, I could also expect that globals now contains a reference to a new table, that contains only the column index, and value (phenotype), which seems fine. Neither of these options happens. Instead, I need to realize the array in memory on my master, which seems like a potentially bad idea. The bigger problem though is that I want 1 change (simplify indexing or make a reference to the array), and I seem to need 3 (that + memory + loss of distribution). . In short: I want to be able to choose whether I realize the values in memory, not be forced into it. Let me know if there's something I missed!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9121#issuecomment-662693797:1542,simpl,simplify,1542,https://hail.is,https://github.com/hail-is/hail/issues/9121#issuecomment-662693797,1,['simpl'],['simplify']
Usability,"I thought about it a bit, and I think it is clear what to do (ultimately) for registered functions: we need a variant that takes PCode instead of Code[_], and then we can begin to migrate the functions incrementally. A separate thread of work, obviously.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8351#issuecomment-603808832:44,clear,clear,44,https://hail.is,https://github.com/hail-is/hail/pull/8351#issuecomment-603808832,1,['clear'],['clear']
Usability,I took a look at what we are currently outputting. I think this is relatively straightforward except for the HWE test. I don't know of a multiallelic version of HWE. A simple approach would be to compute HWE for each alternate allele compared to the reference allele. Where this gets tricky is how to handle heterozygotes where the second allele is not the reference allele. Example: 1/2 genotype.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2206#issuecomment-328648857:168,simpl,simple,168,https://hail.is,https://github.com/hail-is/hail/issues/2206#issuecomment-328648857,1,['simpl'],['simple']
Usability,"I tried adding clearer names, but I thought that talking about ""new"" vs ""old"" was relatively clear. I may be too deep in it to judge these days.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8867#issuecomment-634763312:15,clear,clearer,15,https://hail.is,https://github.com/hail-is/hail/pull/8867#issuecomment-634763312,2,['clear'],"['clear', 'clearer']"
Usability,"I understand what is going on now. The issue is that the temp directory is getting removed after the first batch.run(), but we're assuming those input files are still there. I think we should just clear the files and definitions cache after submission.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12530#issuecomment-1426386771:197,clear,clear,197,https://hail.is,https://github.com/hail-is/hail/pull/12530#issuecomment-1426386771,1,['clear'],['clear']
Usability,"I used `RegionValueVariant` to clean up some of the code, and fixed a couple of bugs from #2451 in the process. I also replaced the `aggregatePartitions` method I wrote in e5f87c3 following @danking's comment, which was defined on `OrderedRDD2`, with `aggregateWithContext`, which is defined on a rich wrapper around `RDD`. I put it in the spark package to get access to private methods, making the implementation cleaner. It is now a simple modification of the implementation of `RDD.aggregate`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2423#issuecomment-347624179:435,simpl,simple,435,https://hail.is,https://github.com/hail-is/hail/pull/2423#issuecomment-347624179,1,['simpl'],['simple']
Usability,"I want cancel_after_n_failures to be on a job group. The things a job group doesn't have which maybe it should is:; - callback; - attributes; - updates. I think updates should be on a batch and not part of a job group. An update can add jobs to multiple job groups. Otherwise, the batches table should only have static fields that apply to the entire batch. I think we can do callbacks and attributes on a job group. I added a PATCH endpoint to be able to update a job group's cancel_after_n_attributes as the hailtop.batch interface was going to automatically generate job groups without any configuration settings. As for the full text search, I think prefix searches are faster with full text search than with a regular index, but I could be wrong. We'd have to benchmark it. > If we made batches simpler, does that ease complexity and decrease code duplication? In particular, what if batches didn't contain jobs at all? Instead, a batch contains exactly one job group. That job group contains zero or more job groups. Job groups manage: resource aggregation, cancellation, etc. I believe my plan is basically already doing this. It might not be clear because I didn't put the migrations in. But basically all of the current batches tables are now indexed by batch_id, job_group_id where the current ""batch"" has job_group_id = 1.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12697#issuecomment-1450603163:800,simpl,simpler,800,https://hail.is,https://github.com/hail-is/hail/pull/12697#issuecomment-1450603163,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"I want to explore having a KeyedSeqOp IR class instead of the key as an argument to the SeqOp IR. I think that would simplify the code, especially if we have a second kind of SeqOp such as windowed. I can't remember why this didn't work before when I tried it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3824#issuecomment-399712664:117,simpl,simplify,117,https://hail.is,https://github.com/hail-is/hail/pull/3824#issuecomment-399712664,1,['simpl'],['simplify']
Usability,"I want to respond to some of your objections to unique_ptr. > If you buy into using std::unique_ptr, then everyone who writes or reads the code has to get; their head around the massively confusing and counter-intuitive concept of move semantics (a; form of assignment which modifies the source) and the somewhat bizarre terminology and syntax; used to express that in C++. I agree that move semantics takes getting used to, but I think it is much too integrated into modern C++ to ignore, going far beyond unique_ptr. Writing interfaces that take advantage of move semantics requires understanding rvalue-references in more detail, but for users of those move-enabled interfaces I think the guidelines are easy to teach: a variable will only be modified by moving if it is explicitly tagged with a `std::move`, so all you have to remember is ""after a `std::move(foo)`, the variable `foo` may only be assigned to or deleted."". > And then you get into a whole host of associated design decisions (I'm holding this as a unique_ptr,; but I want to pass it to a function - should I pass it as a raw pointer ? a raw reference ? a reference; to the unique_ptr ?). Keeping in mind the model that letting a function/class `foo` hold a `unique_ptr<Widget>` means explicitly ""`foo` owns this Widget, and is responsible for deleting it or passing ownership somewhere else"", these questions have pretty clear answers. * If a function `bar` takes a `Widget` but isn't concerned with its lifetime management, it should take its argument as a `Widget*` or `Widget&`, with the usual reasoning to choose between them. The caller owns the widget, and the lifetime of `bar` is nested inside that of its caller, so lifetime management isn't an issue.; * If `bar` takes a `Widget` and needs to take ownership, it should take its argument as a `unique_ptr<Widget>`. This serves as documentation that the function is taking over responsibility for deleting the Widget, in a way enforced by the compiler.; * A `unique_ptr<Wid",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638:210,intuit,intuitive,210,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638,2,"['guid', 'intuit']","['guidelines', 'intuitive']"
Usability,"I wanted to chime in on this briefly because I think it a good example use case and its design will influence many future methods, so it is important to get the design right. Thoughts:. - the underscore stuff is a non-starter in my opinion, and too clever by half. A lot of my feedback on your stuff is guided by the general heuristic that you should start by writing down the code you want, and then decide how to implement. You'd never want to write this _ stuff if you didn't have to. - I'm still not quite sure what tablify does (in part because the name is too clever by half and in part because it doesn't appear to always return tables). - But I think the idea of tablify is something we want, which is to convert (possibly indexed expressions) back into relational objects (Table, MatrixTable) because the latter support a wider set of operations and don't have the ""source mismatch problem"". Tim and I discussed this yesterday and we suggest the following interface:. ```; t = build_table(); .set_globals(x = 5, batch = batch); .set_rows(locus = locus, aaf = aaf); .build(); ```. and. ```; mt = build_table_matix(); .set_globals(dataset = dataset); .set_rows(locus = locus, aaf = aaf); .set_entries(GT = GT); .build(); ```. where the input expressions for each part must all come from the same source (or be compatible, e.g., constants) and the resulting (matrix) table inherits the keys from the original table. I think there is an unresolved question about how to handle potential name conflicts (e.g. a column key named locus).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2852#issuecomment-363841964:277,feedback,feedback,277,https://hail.is,https://github.com/hail-is/hail/pull/2852#issuecomment-363841964,2,"['feedback', 'guid']","['feedback', 'guided']"
Usability,I wanted to remove /batch in a different PR so it was clear what additional changes there were besides `rm /batch`. I can make it a separate commit though and that should fulfill the same purpose.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7474#issuecomment-551147727:54,clear,clear,54,https://hail.is,https://github.com/hail-is/hail/pull/7474#issuecomment-551147727,1,['clear'],['clear']
Usability,"I was never clear on what `sign == 0` meant, but it appears not to be used: the tightened assertion passes everything.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8655#issuecomment-620651570:12,clear,clear,12,https://hail.is,https://github.com/hail-is/hail/pull/8655#issuecomment-620651570,1,['clear'],['clear']
Usability,"I wasn't very clear initially, I think if `apt` hasn't shown reason to be retried then we can leave it without a retry. If it ever seriously acts up there's one less thing in the way.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9906#issuecomment-767083626:14,clear,clear,14,https://hail.is,https://github.com/hail-is/hail/pull/9906#issuecomment-767083626,1,['clear'],['clear']
Usability,"I'd appreciate feedback, but I realize there's more ways to abstract the code and make it more reusable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10986#issuecomment-947023708:15,feedback,feedback,15,https://hail.is,https://github.com/hail-is/hail/pull/10986#issuecomment-947023708,1,['feedback'],['feedback']
Usability,"I'd argue this is a nicer UX - Having an ""invalid"" or ""unknown"" type lets people with weird alleles (and people do have weird alleles) actually run their pipelines instead of erroring out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3491#issuecomment-386425195:26,UX,UX,26,https://hail.is,https://github.com/hail-is/hail/pull/3491#issuecomment-386425195,1,['UX'],['UX']
Usability,"I'll have to think about the circular thing, but I learned that; ```; from __future__ import annotations; ```; let's you use names directly rather than as strings.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8968#issuecomment-644774393:51,learn,learned,51,https://hail.is,https://github.com/hail-is/hail/pull/8968#issuecomment-644774393,1,['learn'],['learned']
Usability,"I'll think about this more, but making the CI version explicit rather than implicit would at least provide a clear progression of necessary deploys. We'd want to tag the CI versions in git so that folks know which commits are necessary to achieve the step-wise transition. Let's find some time to chat next next week.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11122#issuecomment-985759470:109,clear,clear,109,https://hail.is,https://github.com/hail-is/hail/pull/11122#issuecomment-985759470,1,['clear'],['clear']
Usability,I'm a bit worried about confusing people with two (almost) identical methods named differently. . What do you think about something like `rbind` for right-bind? Then it's clear they're in the same family,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5154#issuecomment-454854904:171,clear,clear,171,https://hail.is,https://github.com/hail-is/hail/pull/5154#issuecomment-454854904,1,['clear'],['clear']
Usability,"I'm fairly certain I know understand this and the AoU VDS creation issue. In Dataproc versions 1.5.74, 2.0.48, and 2.1.0, Dataproc introduced ""memory protection"" which is a euphemism for a newly aggressive OOMKiller. When the OOMKiller kills the JVM driver process, there is no hs_err_pid...log file, no exceptional log statements, and no clean shutdown of any sockets. The process is simply SIGTERM'ed and then SIGKILL'ed. From Hail 0.2.83 through Hail 0.2.109 (released February 2023), Hail was pinned to Dataproc 2.0.44. From Hail 0.2.15 onwards, `hailctl dataproc`, by default, reserves 80% of the advertised memory of the driver node for the use of the Hail Query Driver JVM process. For example, Google advertises that an n1-highmem-8 has 52 GiB of RAM, so Hail sets the `spark:spark.driver.memory` property to `41g` (we always round down). Before aggressive memory protection, this setting was sufficient to protect the driver from starving itself of memory. Unfortunately, Hail 0.2.110 upgraded to Dataproc 2.1.2 which enabled ""memory protection"". Moreover, in the years since Hail 0.2.15, the memory in use by system processes on Dataproc driver nodes appears to have increased. Due to these two circumstances, the driver VM's memory usage can grow high enough to trigger the OOMKiller before the JVM triggers a GC. Consider, for example, these slices of the syslog of the n1-highmem-8 driver VM of a Dataproc cluster:. ```; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: earlyoom v1.6.2; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem total: 52223 MiB, swap total: 0 MiB; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: sending SIGTERM when mem <= 0.12% and swap <= 1.00%,; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: SIGKILL when mem <= 0.06% and swap <= 0.50%; ...; Nov 22 14:30:05 vds-cluster-91f3f4c1-b737-m post-hdfs-startup-script[7747]: + echo 'All done'; Nov 22 14:30:05 vds-cluster-91f3f4c1-b737-m post-hdfs-startup-script[7",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1836844790:385,simpl,simply,385,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1836844790,1,['simpl'],['simply']
Usability,"I'm going to close this if no one objects, I think the service obviates this issue and there is no clear win to be had with images.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4038#issuecomment-433529930:99,clear,clear,99,https://hail.is,https://github.com/hail-is/hail/issues/4038#issuecomment-433529930,1,['clear'],['clear']
Usability,"I'm going to start testing, but I think the only thing that wasn't clear to me was how to resolve these sorts of comments. Do I try and fix them now or in a separate PR with an issue to make sure it gets noted? https://github.com/hail-is/hail/pull/14170#discussion_r1473442106",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1929629871:67,clear,clear,67,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1929629871,1,['clear'],['clear']
Usability,I'm happy with how much simpler this is.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586726532:24,simpl,simpler,24,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586726532,1,['simpl'],['simpler']
Usability,"I'm not either. It's clearly the right thing. We can write them in terms of `hl.eval`, but I don't think they will work quite the same since we don't have the point type and type inference could fail (e.g. the endpoints are None).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5152#issuecomment-455711797:21,clear,clearly,21,https://hail.is,https://github.com/hail-is/hail/pull/5152#issuecomment-455711797,1,['clear'],['clearly']
Usability,"I'm not seeing the leak. `MemoryBuffer.clear` only zeroes the `pos` and `end` variables, and all the allocated memory is in the java heap. If anything, maybe you want to do `cb.assign(lazyBuffer, Code._null)`?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12040#issuecomment-1191668397:39,clear,clear,39,https://hail.is,https://github.com/hail-is/hail/pull/12040#issuecomment-1191668397,1,['clear'],['clear']
Usability,"I'm not sure whether we should add this proactively or not, and to be clear I don't intend users to generally use this, but this is the best solution I can think of so far for @illusional's question about what to do when we have removed support for the old hail access tokens but users still are forced to run a pipeline on an old hail version. Old hail access tokens are stored in JSON in `~/.hail/tokens.json`, so I believe (though have not yet tested, that the following should allow a user to use an old version of hail against a version of batch that only supports cloud access tokens:. On the *new* version of hail, run. ```; hailctl auth login; hailctl auth print-access-token | jq -R -c '{ default: . }' > ~/.hail/tokens.json; ```. Then switch to an old version and proceed as usual (but don't run `hailctl auth login`!).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13934#issuecomment-1783136528:70,clear,clear,70,https://hail.is,https://github.com/hail-is/hail/pull/13934#issuecomment-1783136528,1,['clear'],['clear']
Usability,"I'm still working out the best workaround for the library version. I tried a mix of gradle sub-project-ing and shading with John and they all didn't work out for various different reasons. Azure library was doing some weird classLoader stuff that didn't like being bulk-relocated, and force-upgrading jackson didn't work because pyspark bundles in the buggy version of jackson without shading it. We can try to work out the former but I decided to pause on that front and try instead to just not use the buggy Azure method from the compatible library version and hit the REST endpoint directly, which involves some XML parsing. Currently in the middle of that. Happy to discuss the various approaches at our 1:1 tomorrow or earlier. In terms of hail-side implementation, it's all here under the assumption that the underlying library doesn't cause classpath conflicts (which it currently does).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11617#issuecomment-1095033418:448,pause,pause,448,https://hail.is,https://github.com/hail-is/hail/pull/11617#issuecomment-1095033418,1,['pause'],['pause']
Usability,I'm worried that we're back into a bad state where we'll keep seeing the same job over and over again and not realize we've already learned from it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5655#issuecomment-475664792:132,learn,learned,132,https://hail.is,https://github.com/hail-is/hail/pull/5655#issuecomment-475664792,1,['learn'],['learned']
Usability,"I've been thinking about this for a while now, and I think that what's _extremely_ helpful for learning is seeing a lot of short code examples for a lot of different applications. I think what we want is a bunch of examples formatted something like this:. ```; TITLE: what the code does; --------------; TAGS: comma-delimited set of search terms. DESC [optional] one- or two-sentence (max) clarification of what is being done. >>> CODE. --OR--. if there are multiple ways to do something, patterns like:. Method 1, if (condition 1):; >>> CODE 1. Method 2 (if condition 1 is not true):; >>> CODE 2. USES: clickable links to functions used in the code above. Probably not required for basic things like annotate / select. but definitely good to have for ld_prune or trio_matrix or their ilk. UNDERSTANDING [optional] An understanding section with click-to-expand styling. This shouldn't be required for a contribution to the cookbook, but could really help in some cases.; ```. This format has the advantage of keeping everything very visually tight, which will help people who learn through examples just scan through and look for patterns (this is a lot of people, I think). It also lets us embed understanding sections, which I do see the value of.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4089#issuecomment-411863621:95,learn,learning,95,https://hail.is,https://github.com/hail-is/hail/pull/4089#issuecomment-411863621,2,['learn'],"['learn', 'learning']"
Usability,"I've made the changes you suggested patrick, but now we have a failing test. I'm getting a situation where Vt is clearly orthonormal, and U@S@Vt multiplies back to the input matrix, but U@U.t is not particularly close to the identity matrix. It's not clear why this is. The test is:. ```; np_rank_2_wide_rectangle = np.arange(12).reshape((4, 3)); rank_2_wide_rectangle = hl.nd.array(np_rank_2_wide_rectangle). ......... assert_evals_to_same_svd(rank_2_wide_rectangle, np_rank_2_wide_rectangle, full_matrices=False); ```. (The 4th test in the `test_svd` method)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727#issuecomment-733190588:113,clear,clearly,113,https://hail.is,https://github.com/hail-is/hail/pull/9727#issuecomment-733190588,2,['clear'],"['clear', 'clearly']"
Usability,"I've removed the Python `tempfile` approach in favor of adding `new_local_temp_file` to utils and a corresponding function to HailContext in Scala, which currently hardcodes `file:///temp` as the local temp directory. It may be more natural to have a localTmpDir on HailContext like we have tmpDir. ; I see there is a notion of local temp files on TempDir on the Scala side, but it doesn't seem to be used on the Python side. I also don't see if/where we wipe temp files on exit. In any case, I've tested that now it all works nicely on GCP, so ready for feedback/review. I think factoring through `tofile` and `fromfile` is useful for wider interoperability for the same reason that NumPy exposes them, but it's also good if you don’t want to actually load the NumPy array into driver memory but just save it to read/copy later, or to load it multiple time without recomputing the BlockMatrix. And I've provided the simpler interface of `to_numpy` and `from_numpy` for the common case. I suspect that (de)serializing over the network and building the local matrix dominates local read/write, so that using a socket isn't going to do much better. I can profile more closely if/when we feel it's high priority to make this faster still.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3114#issuecomment-372165433:555,feedback,feedback,555,https://hail.is,https://github.com/hail-is/hail/pull/3114#issuecomment-372165433,2,"['feedback', 'simpl']","['feedback', 'simpler']"
Usability,I've removed the `make test-deploy` stuff to simplify this PR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-481837110:45,simpl,simplify,45,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-481837110,1,['simpl'],['simplify']
Usability,I've simplified / improved the test to show both modes of failure that indeed occur on master.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3749#issuecomment-396754583:5,simpl,simplified,5,https://hail.is,https://github.com/hail-is/hail/pull/3749#issuecomment-396754583,1,['simpl'],['simplified']
Usability,I've validated our setup has those requirements and we're just hitting a FatalError from a commit a few weeks ago. https://github.com/hail-is/hail/blob/a0e8eb81e0f4d7ad446723e7cc04d4c6ac4ad066/hail/python/hail/context.py#L59-L67. If I revert this file we're able to pass in the existing SparkContext with the expected `hl.init(sc=sc)`. As general feedback it may be better to warn here than force exit. I may be wrong but I don't see a way around this for people using remote notebooks to talk to Spark via Livy.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7080#issuecomment-537048154:347,feedback,feedback,347,https://hail.is,https://github.com/hail-is/hail/issues/7080#issuecomment-537048154,1,['feedback'],['feedback']
Usability,"If this is still an issue, please make a post on the forum, OK? We're more responsive there.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5657#issuecomment-476543562:75,responsiv,responsive,75,https://hail.is,https://github.com/hail-is/hail/issues/5657#issuecomment-476543562,1,['responsiv'],['responsive']
Usability,"If we go through route (2), this project can serve as a prototype C or C++ interface to Hail. This interface could take multiple forms. For example, we could actually re-build our memory representation implementations in C++ and compile SAIGE, at Hail-Query-compile-time (i.e. when we are compiling a *user's* query), to use whatever SType/PType that Hail has decided is the ideal. A simpler approach is to implement one canonical implementation of the Hail types in C++, fork & slightly modify SAIGE to accept these memory representations, compile SAIGE at Java compile time (i.e. in CI or when you run `make` on your laptop) against these mem reps, ship the compiled library with the Hail JAR, and expose it, via JNI, into the Hail Query language. This requires that the Query compiler can call a function which only supports arguments using one particular SType/PType.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13442#issuecomment-1679739816:384,simpl,simpler,384,https://hail.is,https://github.com/hail-is/hail/issues/13442#issuecomment-1679739816,1,['simpl'],['simpler']
Usability,If you can make this IR rewrite pass determinism with/without optimization I will be totally confident in this change; https://github.com/hail-is/hail/blob/master/src/main/scala/is/hail/expr/ir/Simplify.scala#L294,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411794524:194,Simpl,Simplify,194,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411794524,1,['Simpl'],['Simplify']
Usability,"If you're actually seeing some inconsistent results in some browser, I agree the solution isn't sufficient. Else, why not get the easy solution in, and do more work when it's needed. I see a potential problem statement, no clear reason why the present solution is problematic, and a desire to move to a different solution. . I looked into the relationship between fractional line widths and alpha a few days ago, when I wrote the comment suggesting that alpha blending could be an alternative solution. Antialiased fractional line width (which is also what you would get if the effective resolution is larger than the viewport resolution and then objects scaled), will act like an alpha-blended 1px line width. reference: https://community.khronos.org/t/how-to-draw-a-line-with-width-less-than-1-0/42022",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-645574948:223,clear,clear,223,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-645574948,1,['clear'],['clear']
Usability,"If/when the need is pressing, we can extend parsing to deal with both unnamed and named and optional args in full generality. With sort and sortBy, I handled the possibilities more directly and think the documentation is clear as is. I also assume the Boolean parameter is a constant rather than an expression handling null etc, but I think that covers the use cases of these functions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/511#issuecomment-236266169:221,clear,clear,221,https://hail.is,https://github.com/hail-is/hail/pull/511#issuecomment-236266169,1,['clear'],['clear']
Usability,"In the short term, a fix which makes the UI usable again for these kinds of jobs is to check blob size, if it's over some threshold, show no log and instruct the user to download it. Then fix the download to use aiohttp's StreamResponse. We should maybe split this issue into a frontend-side and worker-side.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12852#issuecomment-1653991936:44,usab,usable,44,https://hail.is,https://github.com/hail-is/hail/issues/12852#issuecomment-1653991936,1,['usab'],['usable']
Usability,"In-cluster I have the ability to create a pod, including the secret, which is slightly surprising to me. Does the ability create a pod give ability to mount any secret? Surely not. At the same time, my rbac for notebook clearly defines the only secret it can access:. ```; (base) alex:~/projects/hail/notebook2:$ k get role read-get-user-secret -o json; {; ""apiVersion"": ""rbac.authorization.k8s.io/v1"",; ""kind"": ""Role"",; ""rules"": [; {; ""apiGroups"": [; """"; ],; ""resourceNames"": [; ""get-users""; ],; ""resources"": [; ""secrets""; ],; ""verbs"": [; ""get""; ]; }; ]; }; ```. The other permissions are for service and pod resources. These pods are bound to the user's service account. I also don't appear to need to give that service account that is bound (SA ""B"") permission to read the mounted secret. This makes sense to me: the container should be able to access anything on its file system. The notebook leader defines what that is. cc @cseed, thought you may want to know. The following was from a manual in-cluster test:; <img width=""940"" alt=""Screenshot 2019-04-02 15 55 39"" src=""https://user-images.githubusercontent.com/5543229/55432272-78989e00-5560-11e9-960e-1362d277d759.png"">. Partial description of a recently created pod (sans status); ```sh; (base) alex:~/projects/hail/notebook2:$ k get pod notebook2-worker-d4snh -o yaml; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-04-02T19:50:21Z""; generateName: notebook2-worker-; labels:; app: notebook2-worker; hail.is/notebook2-instance: f4dc8213468f4799a3c7f94cb6969309; jupyter_token: 484b71e2c12d42c79b169b1991602d45; name: a_notebook; user_id: e7e7b9c420f0b0ff503ab6711355f27748522a8a37d9d22b2c8e0af4; uuid: 84873cf540014e128cce18f5481fb682; name: notebook2-worker-d4snh; namespace: default; resourceVersion: ""41241284""; selfLink: /api/v1/namespaces/default/pods/notebook2-worker-d4snh; uid: 8cb3c1c2-5580-11e9-bcd4-42010a8000c9; spec:; containers:; - command:; - jupyter; - notebook; - --NotebookApp.token=484b71e2c12d42c79b169b199",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611:220,clear,clearly,220,https://hail.is,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611,1,['clear'],['clearly']
Usability,"Indeed in my streamify, forcing MakeArray to remain a MakeArray fixes the problem. Now to investigate why MakeStream is the wrong solution, and why the new streamify isn't handling this correctly. to be clear, this branch finds the MakeArray inside of the MakeTuple and generates a ToArray(MakeStream), which both seems not super wrong and redundant. But the fact that's it's a value issue, with an array reading garbage, also make it look like a requiredeness/ copy function issue (though this was previously tested)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583813511:203,clear,clear,203,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583813511,1,['clear'],['clear']
Usability,"Interesting to see the benchmarks, thanks. I didn't realize there were any per-variant usages, I figured these were per-RDD. That makes me more okay with the original, but it's completely up to you. On a side note, I can't wait until we can work in C++, where using library facilities to simplify code isn't such a performance hit!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3094#issuecomment-372723395:288,simpl,simplify,288,https://hail.is,https://github.com/hail-is/hail/pull/3094#issuecomment-372723395,1,['simpl'],['simplify']
Usability,"Interesting: I tried in a new session (after checking out master, installing-editable), and this time I could break things with out-of-bounds slices, but `hl.eval(a[0:a.shape[0],0:1]) ` and `hl.eval(a[0:a.shape[0],0:2])` worked ok. So what's going on?. ```python; In [22]: hl.eval(a[0:a.shape[0],0:1]) ; Out[22]: ; array([[1],; [2],; [3],; [4],; [5]], dtype=int32). In [23]: hl.eval(a[0:a.shape[0],0:1]) ; Out[23]: ; array([[1],; [2],; [3],; [4],; [5]], dtype=int32). In [24]: a = a.T . In [25]: hl.eval(a) ; Out[25]: ; array([[ 1, 2, 3, 4, 5],; [ 7, 6, 8, 9, 10]], dtype=int32). In [26]: a = a.T . In [27]: hl.eval(a) ; Out[27]: ; array([[ 1, 7],; [ 2, 6],; [ 3, 8],; [ 4, 9],; [ 5, 10]], dtype=int32). In [28]: hl.eval(a[0:a.shape[0],0:1]) ; Out[28]: ; array([[1],; [7],; [0],; [2],; [0]], dtype=int32). In [32]: hl.eval(a[0:a.shape[0],0:1]) ; Out[32]: ; array([[ 1],; [ 7],; [ 0],; [ 4],; [32749]], dtype=int32); ``` . totally broken. Seems like 2 problems: 1) out of bounds checks not being done on inner dimension. 2) strides get scrambled between transposes, or something isn't being cleared after transposition.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9144#issuecomment-663267587:1090,clear,cleared,1090,https://hail.is,https://github.com/hail-is/hail/issues/9144#issuecomment-663267587,1,['clear'],['cleared']
Usability,Is there something in particular you had in mind? The example that exists now seems clear to me.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4259#issuecomment-424833285:84,clear,clear,84,https://hail.is,https://github.com/hail-is/hail/issues/4259#issuecomment-424833285,1,['clear'],['clear']
Usability,"It also fails on this simpler example:; ```; In [1]: import hail as hl ; ...: ; ...: temp = hl.utils.range_table(100) ; ...: temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True) ; Initializing Hail with default parameters...; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.61-c548354b6e81; LOGGING: writing to /Users/dking/projects/hail/hail-20210107-1038-0.2.61-c548354b6e81.log; Traceback (most recent call last):; File ""<ipython-input-1-a2e56feaf799>"", line 4, in <module>; temp.write('gs://danking/workshop-test/1kg.mt', overwrite=True); File ""</Users/dking/miniconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-1092>"", line 2, in write; File ""/Users/dking/projects/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/dking/projects/hail/hail/python/hail/table.py"", line 1271, in write; Env.backend().execute(ir.TableWrite(self._tir, ir.TableNativeWriter(output, overwrite, stage_locally, _codec_spec))); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 103, in execute; bucket=self._bucket); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 48, in request; return async_to_blocking(retry_transient_errors(self.async_request, endpoint, **data)); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 114, in async_to_blocking; return asyncio.get_event_loop().run_until_complete(coro); File ""/Users/dking/miniconda3/lib/python3.7/asyncio/base_events.py"", line 587, in run_until_complete; return future.result(); File ""/Users/dking/projects/hail/hail/python/hailtop/utils/utils.py"", line 379, in retry_transient_errors; return await f(*args, **kwargs); File ""/Users/dking/projects/hail/hail/python/hail/backend/service_backend.py"", line 44, in async_request; raise FatalError(f'Error from server: {result[""value""]}'); FatalError: Error from server: java.util.NoSuchElementExce",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:22,simpl,simpler,22,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['simpl'],['simpler']
Usability,"It doesn't seem like headless mode is in effect, at least in the most recent published image. Will grab this and play around with it. Tested Dan's image in app.hail.is, seems to work, except for all of the .js/.css resources; first guess is SSL, but it's clearly a diff issue. I can't connect to your workers, can to his. Will update in a bit. Yours:; (notebook) alexkotlar:~/projects/hail-clone/notebook-api:$ k logs notebook-worker-5xq2w -f; [I 21:29:01.483 NotebookApp] Writing notebook server cookie secret to /home/jovian/.local/share/jupyter/runtime/notebook_cookie_secret; [I 21:29:03.742 NotebookApp] Serving notebooks from local directory: /home/jovian; [I 21:29:03.743 NotebookApp] The Jupyter Notebook is running at:; [I 21:29:03.743 NotebookApp] http://localhost:8888/instance/notebook-worker-service-qzppk/?token=...; [I 21:29:03.743 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).; [W 21:29:03.750 NotebookApp] No web browser found: could not locate runnable browser. Dan’s; [I 21:44:38.439 NotebookApp] Writing notebook server cookie secret to /home/jovyan/.local/share/jupyter/runtime/notebook_cookie_secret; [I 21:44:38.808 NotebookApp] [jupyter_nbextensions_configurator] enabled 0.4.1; [I 21:44:38.898 NotebookApp] Jupyter-Spark enabled!; [I 21:44:38.942 NotebookApp] JupyterLab extension loaded from /opt/conda/lib/python3.6/site-packages/jupyterlab; [I 21:44:38.942 NotebookApp] JupyterLab application directory is /opt/conda/share/jupyter/lab; [I 21:44:38.945 NotebookApp] Serving notebooks from local directory: /home/jovyan; [I 21:44:38.945 NotebookApp] The Jupyter Notebook is running at:; [I 21:44:38.946 NotebookApp] http://(notebook-worker-v7fr4 or 127.0.0.1):8888/instance/notebook-worker-service-sv5jl/?token=...; [I 21:44:38.946 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).; [I 21:44:55.324 NotebookApp] 302 GET /instance/notebook-worker-service-sv5jl/?acce",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5243#issuecomment-460092942:255,clear,clearly,255,https://hail.is,https://github.com/hail-is/hail/pull/5243#issuecomment-460092942,1,['clear'],['clearly']
Usability,"It is mighty fishy that both azure and google failed the callback test. What are we missing? If MJC returns, then the database was clearly updated. Subsequent DB queries should see those changes. total_jobs_in_batch won't change during the lifetime of the batch, so that should be correct (though we should probably LOCK IN SHARE MODE anyway). Assuming I'm reading the [reference manual](https://dev.mysql.com/doc/refman/5.7/en/innodb-consistent-read.html) correctly, that select should see the result of the UPDATE *or a later state*. The updates to a single row are serial. So there must exist a transaction that takes it from n_jobs-1 to n_jobs. That transaction thus must see n_jobs for new_n_completed. That transaction thus ought to update batches. Once that transaction is committed the subsequent query for notification should see the changes...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1040809121:131,clear,clearly,131,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1040809121,1,['clear'],['clearly']
Usability,It was just a way to try and reduce the duplication in the code. The correct thing to do is to use requests and not have the overhead of an asynchronous library for a simple client. We can have this discussion in #6244.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6243#issuecomment-498329233:167,simpl,simple,167,https://hail.is,https://github.com/hail-is/hail/pull/6243#issuecomment-498329233,1,['simpl'],['simple']
Usability,"It wasn't scanning the full dataset anymore, but:. table.head().flatten() was generating a TableOrderBy(TableKeyBy(TableHead)). There was no way to remove this node, even if the table was already keyed by the sort fields, so we ended up doing an extra scan and possibly shuffle. This change simplifies the whole thing, and emits the correct IR from the beginning",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5172#issuecomment-455698384:291,simpl,simplifies,291,https://hail.is,https://github.com/hail-is/hail/pull/5172#issuecomment-455698384,1,['simpl'],['simplifies']
Usability,"It's good that you documented it in #3706. When fixed I can simplify `tie_breaker` to `hl.signum(r.twice_maf - l.twice_maf)`, but I don't expect that to make a noticeable performance difference in the scheme of the full computation so it's not my highest priority.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3704#issuecomment-395117104:60,simpl,simplify,60,https://hail.is,https://github.com/hail-is/hail/pull/3704#issuecomment-395117104,1,['simpl'],['simplify']
Usability,"It's much clearer, awesome",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4494#issuecomment-427159094:10,clear,clearer,10,https://hail.is,https://github.com/hail-is/hail/pull/4494#issuecomment-427159094,1,['clear'],['clearer']
Usability,It's not clear we should do this instead of just making the service work.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5236#issuecomment-459844874:9,clear,clear,9,https://hail.is,https://github.com/hail-is/hail/issues/5236#issuecomment-459844874,1,['clear'],['clear']
Usability,"It's not clear what happens to empty strings at the beginning. I think if you replace with this, we'll be all set:. Setting `limit` to negative disables limiting the number of splits. Trailing empty strings are preserved, so "",a,b,,"".split("","", -1) gives ["""", ""a"", ""b"", """", """"] whereas "",a,b,,"".split("","") gives ["""", ""a"", ""b""].",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1423#issuecomment-281819089:9,clear,clear,9,https://hail.is,https://github.com/hail-is/hail/pull/1423#issuecomment-281819089,1,['clear'],['clear']
Usability,It's probably not going to pass CI on the first try after the rebase. I'm mainly looking for feedback on the API first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1215231720:93,feedback,feedback,93,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1215231720,1,['feedback'],['feedback']
Usability,"It's working on a simple example on the Cray:. ```; >>> (hc; ... .import_vcf('file:///mnt/lustre/cseed/sample.vcf'); ... .vep('/mnt/lustre/cseed/vep.properties'); ... .write('file:///mnt/lustre/cseed/sample.vds', overwrite=True)); hail: info: Coerced sorted dataset; hail: info: vep: annotated 346 variants; >>> vds = hc.read('file:///mnt/lustre/cseed/sample.vds'); >>> vds.count(); {u'nVariants': 346L, u'nSamples': 100, u'nGenotypes': 34600L}; >>> vds.filter_variants_expr('isDefined(va.vep)').count(); {u'nVariants': 346L, u'nSamples': 100, u'nGenotypes': 34600L}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1558#issuecomment-287177936:18,simpl,simple,18,https://hail.is,https://github.com/hail-is/hail/pull/1558#issuecomment-287177936,1,['simpl'],['simple']
Usability,"Just to be clear, I'm proposing:. Pending -> Ready; Ready -> Error, Running; Running -> Ready, Error, Failed, Success",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6268#issuecomment-499339906:11,clear,clear,11,https://hail.is,https://github.com/hail-is/hail/pull/6268#issuecomment-499339906,1,['clear'],['clear']
Usability,"Just to be clear, as much as possible we aim to keep the main source code free of historical inconsistencies. That applies doubly to pull requests, which should be single, semantically coherent units.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-415089165:11,clear,clear,11,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-415089165,1,['clear'],['clear']
Usability,"Just to be clear, this pipeline was what I wrote when trying to replicate the bug Duncan was seeing, but it hit a different assertion error than the one he was hitting. He was hitting ""local in the wrong method builder"" problems.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8325#issuecomment-603567150:11,clear,clear,11,https://hail.is,https://github.com/hail-is/hail/issues/8325#issuecomment-603567150,1,['clear'],['clear']
Usability,Just to make sure I understand -- the variable rename is to make sure it is clear that `HAIL_PRODUCTION_DOMAIN` means something different than `HAIL_DOMAIN` and is only applicable for CI? This is because the other services will have the correct deploy config?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14164#issuecomment-1898843580:76,clear,clear,76,https://hail.is,https://github.com/hail-is/hail/pull/14164#issuecomment-1898843580,1,['clear'],['clear']
Usability,"Keeping in mind Cotton's queries last week, researched and found much lighter alternative to ExprsesJS for the server api. A few years ago, Express had low impact on node performance; it has become bloated. Found a light (~200 LOC) ""framework"" called Polka, that is small enough to maintain ourselves. It mainly adds light route-matching capabilities, to avoid repeating boilerplate when writing the Node server. Easy to follow. It's also the fastest ""framework"" available, outside of C/Go/Rust. Matches Falcon, and allows 1 language for server/web. (Also Node has a far larger ecosystem).; * https://github.com/the-benchmarker/web-frameworks ; * Polka also nearly compatible with Express's middleware api, so many existing packages are either directly usable, or with minor modifications. This was a desire of mine, since nearly everything server-y for node is really written for Express. Last commit removes all Express, adds a rewritten express-jwt for access token verification, and shows client credential exchange, backed by Redis cache, for <=4ms fetching of",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-447583569:753,usab,usable,753,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-447583569,1,['usab'],['usable']
Usability,Let me look over the docs again. There were a number of methods with no documentation when this was created. I don’t don’t quite understand what you mean by too broad (could you clarify?) I just mean that anything that doesn’t have an explanation should not be in the online doc. If you’re saying that there are no longer any undocumented methods then yes let’s close.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7292#issuecomment-558279772:326,undo,undocumented,326,https://hail.is,https://github.com/hail-is/hail/issues/7292#issuecomment-558279772,1,['undo'],['undocumented']
Usability,"Let's rewrite to use this style. I think that will be both simple and performant, to make us all happy!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561448218:59,simpl,simple,59,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561448218,1,['simpl'],['simple']
Usability,Let's take what I learned about worker_processes into account when making a decision here. You might just be seeing clashing between 8 processes with 1 core limits.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11876#issuecomment-1168824908:18,learn,learned,18,https://hail.is,https://github.com/hail-is/hail/pull/11876#issuecomment-1168824908,1,['learn'],['learned']
Usability,"Looking at our documentation, we document `n` as `maximum number of splits`. That makes this seem like a bug to me, especially in the 0 case. But clearly people use this function and this change is breaking to anyone who uses it. My vote would be to do the deprecation thing I suggested above.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9383#issuecomment-684034614:146,clear,clearly,146,https://hail.is,https://github.com/hail-is/hail/issues/9383#issuecomment-684034614,1,['clear'],['clearly']
Usability,"Looking over the tutorial, it looks like the primitive functionality we would need to add are versions of intersect and merge. Once we have ordered point-interval joins (annotateRowsIntervalTable), I think both of these should be simple additions. It looks like most of the other bedtools functionality could be implemented in Python on top of those primitives.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3302#issuecomment-379259962:230,simpl,simple,230,https://hail.is,https://github.com/hail-is/hail/issues/3302#issuecomment-379259962,1,['simpl'],['simple']
Usability,"Looks good to me. PNDArray is a little unstable at the moment and probably going to get shaken up in January, so I don't have a clear sense of any must have default methods.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7734#issuecomment-567100923:128,clear,clear,128,https://hail.is,https://github.com/hail-is/hail/pull/7734#issuecomment-567100923,1,['clear'],['clear']
Usability,Looks good! Next steps:. - Use it!; - Test it! I'm not sure how much will break.; - Time it! Do something simple filter genotypes gq >= 20 and a sampleqc or something. Does it help? How much?; - Figure out how you're going to deal with annotations like `va.rare_genos = gs.filter(g => ... some rare condition ...).collect()`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1322#issuecomment-276272639:106,simpl,simple,106,https://hail.is,https://github.com/hail-is/hail/pull/1322#issuecomment-276272639,1,['simpl'],['simple']
Usability,"Looks like this has failures and needs a rebase. Your PR stack is getting pretty high so let's keep the bottom moving. Also, I rebased my lir branch on Value[T] and now I'm passing the asm4s tests and most other tests are failing on joinpoint which I didn't port. So this stack is now a blocker for me to resume that thread.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8156#issuecomment-594495172:305,resume,resume,305,https://hail.is,https://github.com/hail-is/hail/pull/8156#issuecomment-594495172,1,['resume'],['resume']
Usability,"Looks my comment got lost! Sorry. I said, I'd prefer we didn't copy the HailContext whole hog, but just write a simple wrapper that calls from hail2.HailContext to hail.HailContext, so something like:. ```; class HailContext:; def __init__(args...):; self.hc1 = hail.HailContext(args...). def import_bgen(args...):; return self.hc1.import_bgen(args...).to_hail2(); ```. etc. I don't think you even need docs unless there is something specifically different between the two. That way, we won't need to maintain two versions for things like doc changes and we won't get confused about which one is the ""real"" HailContext. Then, when we're ready to switch over, we can pull the docs across and throw away the stub.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2244#issuecomment-337717963:112,simpl,simple,112,https://hail.is,https://github.com/hail-is/hail/pull/2244#issuecomment-337717963,1,['simpl'],['simple']
Usability,"Made a more robust authentication library. One outstanding issue due to auth0js library, that we can solve by checking for and clearing wildcard auth0-prefixed cookies and startup, but this may have side-effects. Created an issue to track:; https://github.com/auth0/auth0.js/issues/897",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-455907662:127,clear,clearing,127,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-455907662,1,['clear'],['clearing']
Usability,"Made this change backwards compatible. Note that I have not made any changes to worker.py in this PR anymore, so there's no danger of incompatibility. I tested the JAR from this PR against default and ran a simple hail query to see that it behaved as usual. Separately, I made #12246, dev deployed it, then ran this same JAR against my dev namespace to see that it added all worker jobs to the same batch as the driver job.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12222#issuecomment-1262670715:207,simpl,simple,207,https://hail.is,https://github.com/hail-is/hail/pull/12222#issuecomment-1262670715,1,['simpl'],['simple']
Usability,Maybe we can use GraalVM Native Image? https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/native-image/Limitations/#native-image-compatibility-and-optimization-guide,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13675#issuecomment-1728007156:180,guid,guide,180,https://hail.is,https://github.com/hail-is/hail/issues/13675#issuecomment-1728007156,1,['guid'],['guide']
Usability,Maybe we should update the WARNING message to be clear that this is a transient error and we've automatically retried it and there's nothing to be worried about?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11817#issuecomment-1117649877:49,clear,clear,49,https://hail.is,https://github.com/hail-is/hail/pull/11817#issuecomment-1117649877,1,['clear'],['clear']
Usability,"Meant to assign this, just forgot to. Curious if you see any other ways to make this code simpler/faster.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10075#issuecomment-784322347:90,simpl,simpler,90,https://hail.is,https://github.com/hail-is/hail/pull/10075#issuecomment-784322347,1,['simpl'],['simpler']
Usability,"More directly, this is known as the maximal independent set (MIS) problem, for which there are simple parallel algorithms: https://cstar.iiit.ac.in/~kkishore/MISStudy.pdf. MIS should be implemented in Spark GraphX, but I can't find it!; http://ilpubs.stanford.edu:8090/1085/2/primitives_tr_sig_alternate.pdf",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/863#issuecomment-250805502:95,simpl,simple,95,https://hail.is,https://github.com/hail-is/hail/issues/863#issuecomment-250805502,1,['simpl'],['simple']
Usability,My hacky attempt to allow setting a path to an alternate lapack library clearly doesn't work on the cluster: it's trying to look up a flag on the HailContext on workers. Open to suggestions on the right design here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10770#issuecomment-897005443:72,clear,clearly,72,https://hail.is,https://github.com/hail-is/hail/pull/10770#issuecomment-897005443,1,['clear'],['clearly']
Usability,My intuition is that the reference should be directed the other way. PCA should refer to the GRM docs when discussing the GRM. The GRM docs should actually contain the text explaining the GRM.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1439#issuecomment-283120768:3,intuit,intuition,3,https://hail.is,https://github.com/hail-is/hail/pull/1439#issuecomment-283120768,1,['intuit'],['intuition']
Usability,"My issue with both of those names is the same as with `_tree`. It's not clear if you're storing the non-transitive or the transitive relation & its not clear if self-edges are included. I want a name that unambiguously says ""the self-edge and all the ancestor edges are in here"" or a name that is more domain-specific like ""job groups that need to be updated when a job in this job group is changed"". . `job_group_self_and_ancestor` feels like the shortest name so far that satisfies my concerns, but I'm open to other ones that are clear about self-edge-ness and transitive-ness.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475#issuecomment-1761867398:72,clear,clear,72,https://hail.is,https://github.com/hail-is/hail/pull/13475#issuecomment-1761867398,3,['clear'],['clear']
Usability,"MySQL supports looping. It looks like we could [use a cursor with loop](https://stackoverflow.com/a/16350693/6823256) to iterate through the ancestors of the job group. That seems to me like the simplest possible solution here. We should leave any possible speed improvements to future work and not entangle that with job groups. Jackie, my comment during our chat about deadlocks was incorrect. The if statement does prevent deadlocks because it ensures that only one MJC tries to grab an exclusive lock rather than more than one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13513#issuecomment-1701854650:195,simpl,simplest,195,https://hail.is,https://github.com/hail-is/hail/pull/13513#issuecomment-1701854650,1,['simpl'],['simplest']
Usability,"NOTE:. There are a few places yet that I have not plumbed through the `HailStateManager`:. hail/src/main/scala/is/hail/rvd/RVDContext.scala; 42: private[this] val theRvb = new RegionValueBuilder(HailStateManager(Map.empty), r). hail/src/main/scala/is/hail/linalg/BlockMatrix.scala; 2136: val rvb = new RegionValueBuilder(HailStateManager(Map.empty), region). hail/src/main/scala/is/hail/expr/ir/MatrixValue.scala; 34: val rvb = new RegionValueBuilder(HailStateManager(Map.empty), prevGlobals.value.region). hail/src/main/scala/is/hail/expr/ir/agg/ApproxCDFStateManager.scala; 649: val rvb = new RegionValueBuilder(HailStateManager(Map.empty), r). hail/src/main/scala/is/hail/expr/ir/agg/LinearRegressionAggregator.scala; 34: val rvb = new RegionValueBuilder(HailStateManager(Map.empty), region). These places looked like either worthless effort to plumb through or difficult (the RVB in MatrixValue) so would appreciate some guidance on how to handle these use cases. ""Just do the additional plumbing"" is valid advice or a workaround if it's not desirable to add that plumbing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12699#issuecomment-1442055878:925,guid,guidance,925,https://hail.is,https://github.com/hail-is/hail/pull/12699#issuecomment-1442055878,1,['guid'],['guidance']
Usability,Neat! Where'd you learn about lateral joins? I had not heard about them until now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13175#issuecomment-1603239327:18,learn,learn,18,https://hail.is,https://github.com/hail-is/hail/pull/13175#issuecomment-1603239327,1,['learn'],['learn']
Usability,"Needs a bit more documentation, but looking to get feedback on the structure of the scala code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4058#issuecomment-409578166:51,feedback,feedback,51,https://hail.is,https://github.com/hail-is/hail/pull/4058#issuecomment-409578166,1,['feedback'],['feedback']
Usability,"Next steps:; 1. upload the profile, the `mt.describe()`, metadata.json.gz from the MT/HT to the team chat and get feedback (Chris, Patrick take a look). Decode appears quite slow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1839225404:114,feedback,feedback,114,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1839225404,1,['feedback'],['feedback']
Usability,"Nice work. Let's block release on this, clearly it was bugged before.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8436#issuecomment-609932494:40,clear,clearly,40,https://hail.is,https://github.com/hail-is/hail/pull/8436#issuecomment-609932494,1,['clear'],['clearly']
Usability,"Nice, and then steps 4 - 8 will be simplified / accelerated by #3185. I think once you've revised the latter, you'll find it cleaner to work in terms of indices the whole way through (no 7), indexing the MatrixTable rows to apply the final filter in 10.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-379866339:35,simpl,simplified,35,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-379866339,1,['simpl'],['simplified']
Usability,"No state. I printed the session in the logs (I was deploying into prod to test while I had a broken cookie). My session had nothing set except that it was marked as created on January 7th. This despite that I saw a log statement from when I hit /login,m that clearly showed me session with all the right values. My guess is that there was some old signing key or somehow the session got corrupted so you can decode it to get an empty session and add new fields but they fail to be written back.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8052#issuecomment-583226388:259,clear,clearly,259,https://hail.is,https://github.com/hail-is/hail/pull/8052#issuecomment-583226388,1,['clear'],['clearly']
Usability,"Not needed, simpler js-based solution in https://github.com/hail-is/hail/pull/7334",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7290#issuecomment-545056325:12,simpl,simpler,12,https://hail.is,https://github.com/hail-is/hail/issues/7290#issuecomment-545056325,1,['simpl'],['simpler']
Usability,"Note, @jigold gets the credit for this, ExportBGEN.scala was basically taken from an old PR of hers that never made it in. I just simplified it to only support the 8-bit case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6462#issuecomment-506362677:130,simpl,simplified,130,https://hail.is,https://github.com/hail-is/hail/pull/6462#issuecomment-506362677,1,['simpl'],['simplified']
Usability,"Now that we have the SQL query monitoring, I would love to also see just the simple comparison of the total number of queries we perform over a 1-minute period under high load. We have the tools now to see just what chunk of overall database communication we are cutting down on, which is an achievement in itself. Just need to run the test!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11346#issuecomment-1036284520:77,simpl,simple,77,https://hail.is,https://github.com/hail-is/hail/pull/11346#issuecomment-1036284520,1,['simpl'],['simple']
Usability,"OK, I added a pair of simple tests and got everything working. There's one wrinkle: I don't want to ship jars around so I need the executors to have the same jar as the client. That means the need the test jar for the tests. I'm not quite sure how to properly parameterize that in the build system yet, so I'm just leaving it with the test jar for the moment.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6221#issuecomment-499365037:22,simpl,simple,22,https://hail.is,https://github.com/hail-is/hail/pull/6221#issuecomment-499365037,1,['simpl'],['simple']
Usability,"OK, I pushed some docs and clarifying comments based on your feedback, but not functional code changes. Ready for another look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10023#issuecomment-776843634:61,feedback,feedback,61,https://hail.is,https://github.com/hail-is/hail/pull/10023#issuecomment-776843634,1,['feedback'],['feedback']
Usability,"OK, I think this is ready for review again. I rebased, was able to simplify the online bounded gather a bit, and parallelized the GCS rmtree more, so that cleanup can happen in parallel with the merge operations as much as possible.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9934#issuecomment-785209202:67,simpl,simplify,67,https://hail.is,https://github.com/hail-is/hail/pull/9934#issuecomment-785209202,1,['simpl'],['simplify']
Usability,"OK, I've made most of the changes and I'd appreciate some feedback before I finalize the PR. Notable changes:; - The `hailctl dataproc` subcommand now has `--beta`, `--configuration=`, `--dry-run`, `--project=` and `--zone=`. These apply to all commands. There is a `GcloudRunner` object that takes these options, is set to the click context user `obj` field, and is used by all hailctl dataproc commands to invoke gcloud. Note, not all dataproc subcommands invoke gcloud, but the current design doesn't differentiate. Note, with `click`, the subcommand options must go on the subcommand, so `hailctl dataproc stop --dry-run` is an error.; - hailctl no longer takes `--region` (for gcloud dataproc commands). I compute region in `GcloudRunner` by checking dataproc/region or falling back to determining the region from the zone. I error if the region and zone are incompatible (gcloud would also do this).; - I stripped all gcloud pass through args from `hailctl dataproc modify`. There aren't any left. Invoking `modify` now looks like:. ```; hailctl dataproc modify my-cluster \; --extra-glcoud-update-args='---num-workers=2 --num-secondary-workers=100'; ```. The `extra` in the option name sounds a little weird since they are the only options (and the command isn't run if they aren't specified), but I'm leaving it for consistency for now. I moved the help text from the removed options into the help for the modify command itself. The output of `modify --help` is included below.; - I plan to leave the `--async` option to stop, although it is pass through.; - Then there is `--files` for submit. This is passed through, but `--py-files` is needed (it is not passed through, but modified). Do I leave `--files`? I'm currently inclined to.; - Finally, I need to strip out the pass through arguments for start like I did with update. ```; $ hailctl dataproc modify --help; Usage: hailctl dataproc modify [OPTIONS] CLUSTER_NAME. Modify an existing Dataproc cluster. 'hailctl dataproc modify' works ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-767112772:58,feedback,feedback,58,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-767112772,1,['feedback'],['feedback']
Usability,"OK, I've moved it and made the interface as close as I could to the previous `scatter`. One thing is the default value for `n_divisions`. It was 500 before, now I've set it to `None` (i.e. no downsampling). I'm fine either way, but it seems somewhat more intuitive to me for the default to be no downsampling.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5601#issuecomment-473338696:255,intuit,intuitive,255,https://hail.is,https://github.com/hail-is/hail/pull/5601#issuecomment-473338696,1,['intuit'],['intuitive']
Usability,"OK, another idea to make this easier (maintaining this image separate from the build process is going to be painful): buildImage should have an optional script that runs before the docker build call. If you do this, you can just cat > Dockerfile with a very simple docker file to create the bootstrap image.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7534#issuecomment-557184077:258,simpl,simple,258,https://hail.is,https://github.com/hail-is/hail/pull/7534#issuecomment-557184077,1,['simpl'],['simple']
Usability,"OK, here's my understanding of prometheus and our use of it after chatting with @daniel-goldstein :; 1. The Python client treats Summary as just a pair of a Gauge and Counter. It's only useful if you need to track the number of times you set/increments/decrement a value and the value itself. For example, the total number of visits to a web page. Some clients for other languages treat Summaries as histogram-like things, but the Python client does not.; 2. A Histogram, with a domain-relevant array of buckets, is the right tool for visualizing a distribution of values. In this PR, we treat percent-of-cores-in-use-on-instance as a Histogram. This should let us see the distribution of instances according to what percent of the cores are revenue-generating versus not.; 3. A Gauge is the right tool for visualizing any other value. In this PR, we use a gauge to measure the total jobs, the used cores, the total free cores, the total cores, the total cost per hour (ignoring disk), and the total revenue per hour (ignoring disk). ; 4. It is important to use `remove` for metrics whose label set changes over time. For example, if all the jobs owned by a particular user finish, then the metrics labelled with that user ought to become `0`. The database query will elide such records; therefore, it is important to `remove` such labels from the `USER_CORES` and `USER_JOBS`. We prefer `remove` to `clear` so as to avoid the case where prometheus collects metrics in between a call to `clear` and a call to `set` which restores the value for a still valid label.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12253#issuecomment-1273927865:1401,clear,clear,1401,https://hail.is,https://github.com/hail-is/hail/pull/12253#issuecomment-1273927865,2,['clear'],['clear']
Usability,"OK, here's the most recent failure https://batch.hail.is/batches/8090848/jobs/21993. Don't be duped by my bad log message! There were zero transient errors. I added a log statement that increments the number of errors and prints that message after *every* error, even if it's not transient. . This time it was partition 20053 (we keep moving earlier?). I forgot to catch and rethrow the error with the toString of the input buffer, but I'm not sure there is much to learn from that anyway. FWIW, 20053 was successful in the two previous executions:; 1. https://batch.hail.is/batches/8069235/jobs/21993; 2. https://batch.hail.is/batches/8083195/jobs/21993. Interestingly the peak bytes are not consistent:; ```; 2023-10-24 19:59:47.756 : INFO: TaskReport: stage=0, partition=20053, attempt=0, peakBytes=58394624, peakBytesReadable=55.69 MiB, chunks requested=5513, cache hits=5501; 2023-10-24 19:59:47.759 : INFO: RegionPool: FREE: 55.7M allocated (7.7M blocks / 48.0M chunks), regions.size = 21, 0 current java objects, thread 9: pool-2-thread-1; ```; ```; 2023-11-08 19:42:40.000 : INFO: TaskReport: stage=0, partition=20053, attempt=0, peakBytes=61343744, peakBytesReadable=58.50 MiB, chunks requested=5513, cache hits=5501; 2023-11-08 19:42:40.000 : INFO: RegionPool: FREE: 58.5M allocated (10.5M blocks / 48.0M chunks), regions.size = 21, 0 current java objects, thread 10: pool-2-thread-2; ```. Whatever is causing this bug is rare. Approximately once every 31,000 partitions. The CDA IR is the same except for a couple iruid names and the order of the aggregators in the aggregator array is swapped (collect & take vs take & collect). AFAICT, the GCS Java library doesn't do any streaming verification of the hash. We could compute the CRC32c in a streaming manner and fail if/when we get to the end of the object, but this wouldn't work when we read intervals. I'm really mystified.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13979#issuecomment-1834606385:466,learn,learn,466,https://hail.is,https://github.com/hail-is/hail/issues/13979#issuecomment-1834606385,1,['learn'],['learn']
Usability,"OK, so, I took the GRCh38 file that we test against and named it `bar`. I downloaded the gist and named it `foo`. | header | footer | success? |; |---|---|---|; |foo|bar|success|; |bar|bar|success|; |bar|foo|failure|; |foo|foo|failure|. So clearly the issue is the variants. Here's an example of running on just the first handful of variants: https://batch.hail.is/batches/8089052. ```; chr1	1339585	.	G	A	.	.	.; chr1	24907372	.	C	T	.	.	.; chr1	36859143	.	G	T	.	.	.; chr1	37969436	.	T	C	.	.	.; chr1	40416828	.	G	A	.	.	.; chr1	41581842	.	G	A	.	.	.; chr1	43920822	.	T	C	.	.	.; chr1	45327881	.	G	A	.	.	.; chr1	46817055	.	CT	C	.	.	.; chr1	54999203	.	C	T	.	.	.; chr1	65218884	.	C	T	.	.	.; chr1	102962250	.	G	T	.	.	.; chr1	111756087	.	G	C	.	.	.; chr1	113881802	.	G	A	.	.	.; chr1	117920205	.	G	A	.	.	.; chr1	151408784	.	G	C	.	.	.; chr1	151428261	.	C	T	.	.	.; chr1	152305539	.	G	C	.	.	.; chr1	152884596	.	C	A	.	.	.; chr1	153933240	.	C	T	.	.	.; chr1	156624012	.	G	A	.	.	.; chr1	159205821	.	CT	C	.	.	.; chr1	173803162	.	G	T	.	.	.; chr1	179813831	.	G	A	.	.	.; chr1	179917551	.	T	C	.	.	.; chr1	180935962	.	G	C	.	.	.; chr1	180941229	.	G	A	.	.	.; chr1	186893053	.	C	A	.	.	.; chr1	201363319	.	G	A	.	.	.; chr1	223749094	.	A	G	.	.	.; chr1	224294328	.	G	A	.	.	.; chr1	235809337	.	G	A	.	.	.; chr1	241592073	.	G	T	.	.	.; chr2	9376947	.	G	A	.	.	.; chr2	11618532	.	C	T	.	.	.; ```. We can see the characteristic super high memory use.; <img width=""570"" alt=""Screenshot 2023-11-28 at 16 35 26"" src=""https://github.com/hail-is/hail/assets/106194/e5dfa586-5c77-479b-8050-9b0b7d2fe319"">. ---. If we use the same header, but just one variant, it succeeds, but notice that the RAM use grows rapidly. https://batch.hail.is/batches/8089064/jobs/3; ```; chr1	241592073	.	G	T	.	.	.; ```; <img width=""577"" alt=""Screenshot 2023-11-28 at 16 37 39"" src=""https://github.com/hail-is/hail/assets/106194/90c5ab45-9ca4-43e0-9a97-bf6032863f32"">. ---. If we use the same header with this variant from our (successful) test VCF, the RAM use grows",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830846344:240,clear,clearly,240,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830846344,1,['clear'],['clearly']
Usability,"OK, so. - 401 unauthorized when you don't have a valid oauth2 token; - set env var in notebook indicating hail token location (we can't mount to user's home dir because we do not know which user name the image will run as); - rebased. @akotlar we seem to be down to one key difference of opinion:. > The less information reveled the better: as you mentioned, do you want foreign agents who don't already know of your endpoint to learn that you serve it? I'd argue that your API is made public through documentation and web links, not through your error code. The people who don't read those shouldn't have an easier time learning of them. agree: api is in GH, ergo public, so only point of contention is:. > The less information reveled the better: as you mentioned, do you want foreign agents who don't already know of your endpoint to learn that you serve it? ... The people who don't read those shouldn't have an easier time learning of them. Point: its not just foreign agents but anyone who hits the API, including us making mistakes, ergo, I reformulate:. > ... do you want [someone] who [forgot about or is unaware] of your endpoint to learn that you serve it? ... The people who don't read those shouldn't have an easier time learning of them. Yes, because I know I will make mistakes (and users will make config mistakes) and I want an easily debuggable system. The risk is that an attacker may learn `/jobs` exists. If that knowledge substantially improves an attacker's ability to infiltrate batch, then we've made a severe error in securing batch.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-483791146:429,learn,learn,429,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-483791146,7,['learn'],"['learn', 'learning']"
Usability,"Obviously, look forward to feedback on the UI and let me know if you run into any UI bugs. Another todo that I've started:; - write a UI testing playbook to enumerate all the UI interactions we want to test (by hand) to validate this code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112#issuecomment-534267706:27,feedback,feedback,27,https://hail.is,https://github.com/hail-is/hail/pull/7112#issuecomment-534267706,1,['feedback'],['feedback']
Usability,"Oh I see. Thanks for clarifying - I wasn't sure what that bit did! That should be a simple fix, though perhaps at this point not worth it as this is not a fruitful optimisation for this query",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1830665552:84,simpl,simple,84,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1830665552,1,['simpl'],['simple']
Usability,"Oh grrr, the current build is extra borked because a minor version bump in the azure blob storage library broke. I'll back out that change. Oh I think I totally misunderstood the ""pip-installed images"". [here](https://ci.hail.is/batches/774665/jobs/63) is the job I was initially confused about. Not clear why in that batch only the pip-installed hail failed the lint and not the `check_hail` step",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1062078939:300,clear,clear,300,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1062078939,1,['clear'],['clear']
Usability,"Oh, shit, I approved. Do we have a working protocol for multi-user reviews? This was clearly not it. I guess the rule should be to dismiss your review if someone else has reviewed?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4921#issuecomment-445296624:85,clear,clearly,85,https://hail.is,https://github.com/hail-is/hail/pull/4921#issuecomment-445296624,1,['clear'],['clearly']
Usability,Ok I think this works and is simple. @chrisvittal let me know what you think,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464203094:29,simpl,simple,29,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464203094,1,['simpl'],['simple']
Usability,Ok clearly I need to install g++.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464188941:3,clear,clearly,3,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464188941,1,['clear'],['clearly']
Usability,Ok squashed the LDPrune one. I forgot clear in persist. (Still on the stack is to figure out why not clearing causes all these weird issues.),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3414#issuecomment-383200056:38,clear,clear,38,https://hail.is,https://github.com/hail-is/hail/pull/3414#issuecomment-383200056,2,['clear'],"['clear', 'clearing']"
Usability,"Ok, I added a caution and cleared up the note. I chose 50 MB as the biggest recommended file size since that will take ~5 seconds to write.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4644#issuecomment-433548391:26,clear,cleared,26,https://hail.is,https://github.com/hail-is/hail/pull/4644#issuecomment-433548391,1,['clear'],['cleared']
Usability,"Ok, I like all but `view_join_X` - I hate it less than what it was before (i.e. `index_X`) but it's not super intuitive",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2701#issuecomment-357081571:110,intuit,intuitive,110,https://hail.is,https://github.com/hail-is/hail/pull/2701#issuecomment-357081571,1,['intuit'],['intuitive']
Usability,"Ok, I think I get it now. The hacky solution (import `hail` in `typecheck`) doesn't seem too bad, especially if we document it so we remember to undo it if we find a better solution.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3138#issuecomment-373051517:145,undo,undo,145,https://hail.is,https://github.com/hail-is/hail/pull/3138#issuecomment-373051517,1,['undo'],['undo']
Usability,"Ok. I thought about this some more. What you've implemented is essentially a ""taint"" in Kubernetes. I ultimately want both taints and something more complicated that will have to be integrated into the scheduler. I think for now your change is self contained and it will be easy to transform later on without too much complexity or breaking changes for users. I think if you want to rename ""label"" to ""taint"" then that might make it clearer what's going on. cc: @daniel-goldstein",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11879#issuecomment-1145343746:433,clear,clearer,433,https://hail.is,https://github.com/hail-is/hail/pull/11879#issuecomment-1145343746,1,['clear'],['clearer']
Usability,"Ok. In ""Setting limit to negative disables limiting the number of split and trailing empty strings are preserved"", you're missing ""s"" on split, and it's not clear if negative is necessary for trailing empty strings to be preserved. How about:. Setting limit to negative disables limiting the number of splits. Trailing empty strings are preserved, so ""a,b,,"".split("","", -1) gives [""a"", ""b"", """"]",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1423#issuecomment-281771114:157,clear,clear,157,https://hail.is,https://github.com/hail-is/hail/pull/1423#issuecomment-281771114,1,['clear'],['clear']
Usability,"On my rowstore1 branch I now have it working with careful use of flock() (to steer clear of the cases; where NFS behavior diverges from local filesystems, using perl's rename command (which should; be safe assuming it uses the POSIX rename() syscall) to avoid having to lock/unlock from a Makefile. Also a bunch of Makefile changes to use commands from /bin or /usr/bin when they exist, but; otherwise to give a warning and pick up whatever might be found on $PATH. That seems a suitable; compromise between avoid-mysterious-behavior and give-best-effort-on-nonstandard-platform.; [In doing so, I noticed that I actually was picking up /Users/rcownie/anaconda2/envs/py36/bin/curl; rather than /usr/bin/curl - and I don't know whether there's any difference]. But current consensus is that we should figure out how to ship with a known-good compiler; and libraries, so I'm looking into that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-413647683:83,clear,clear,83,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-413647683,1,['clear'],['clear']
Usability,"On std::unique_ptr, I may be a contrarian, but I don't care what the ""C++ community"" thinks about it.; If you buy into using std::unique_ptr<T>, then everyone who writes or reads the code has to get ; their head around the massively confusing and counter-intuitive concept of move semantics (a ; form of assignment which modifies the source) *and* the somewhat bizarre terminology and syntax; used to express that in C++. And then you get into a whole host of associated design decisions (I'm holding this as a unique_ptr,; but I want to pass it to a function - should I pass it as a raw pointer ? a raw reference ? a reference; to the unique_ptr ?). . I would be fine with that extra learning curve and complexity if unique_ptr<T> solved a difficult; problem. But - by definition! - it doesn't. It only works for the easy case where you have one; pointer to each object. And anywhere that you *might* want to use unique_ptr<T>, shared_ptr<T> provides a superset; of the functionality at only a small extra cost in memory and runtime. So my rule is, if you need; a smart pointer, use shared_ptr<T>. And if there's some place where the memory or performance; cost of shared_ptr<T> is truly proved to be painful, then use a few raw pointers where absolutely; necessary.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396320515:255,intuit,intuitive,255,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396320515,2,"['intuit', 'learn']","['intuitive', 'learning']"
Usability,"One more thing: I feel like you can simplify some additional stuff by getting rid of the T parameter on CodeAggregator and call the invoke instance that takes arrays of `Class`es and `Code`s. That way, you don't have to track T. Again, I think you can get the necessary types from the ApplyAggOp instance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2623#issuecomment-359279810:36,simpl,simplify,36,https://hail.is,https://github.com/hail-is/hail/pull/2623#issuecomment-359279810,1,['simpl'],['simplify']
Usability,"One obvious point of optimization that Dan already identified is the way we were keying our data is causing full shuffles, as we were keying the data by a string variant ID in the form `1-32683987-ACTCTT-A` instead of locus-allele. Changing back to keying on locus-allele fixes this issue for our more straightforward searches, but we have a search that looks for pairs of possible compound heterozygous variants in the same gene, and that still is resulting in 2 full shuffles. I'm a little at a loss for how to fix this, because we are grouping by an unsorted field so I'm not sure how to prevent us from working with an unsorted dataset. The offending code right now is as follows (somewhat simplified for readability):. ```; primary_variants = hl.agg.filter(ch_ht[HAS_ALLOWED_ANNOTATION], hl.agg.collect(ch_ht.row)); secondary_variants = hl.agg.filter(ch_ht[HAS_ALLOWED_SECONDARY_ANNOTATION], hl.agg.collect(ch_ht.row)); ch_ht = ch_ht.group_by('gene_ids').aggregate(v1=primary_variants, v2=secondary_variants); ch_ht = ch_ht.explode(ch_ht.v1); ch_ht = ch_ht.explode(ch_ht.v2); ch_ht = ch_ht.annotate(grouped_variants=hl.sorted([ch_ht.v1, ch_ht.v2], key=lambda v: (v.locus, v.alleles))); ch_ht = ch_ht.key_by(; locus=ch_ht.grouped_variants[0].locus, ; alleles=ch_ht.grouped_variants[0].alleles,; locus2=ch_ht.grouped_variants[1].locus, ; alleles2=ch_ht.grouped_variants[1].alleles,; ); ch_ht = ch_ht.distinct(); ...; # more filtering and annotating; ...; return ch_ht._key_by_assert_sorted('locus', 'alleles'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1776044401:694,simpl,simplified,694,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1776044401,1,['simpl'],['simplified']
Usability,"Oof, good catch! The thing we're trying to avoid is `e^x` overflowing for large positive `x`. In double precision, the smallest `x` that overflows is 710. So to test that we handle overflow correctly, you can check `sigmoid(710) == 1.0` and `sigmoid(-710) == 0.0` (using approximate equality). Actually, after playing with this, if you just use the simple definition `sigmoid(x) = 1 / (1 + np.exp(-x))`, then `sigmoid(-710)` does overflow, but it returns the right answer since `np.exp(710)` returns `inf`, and `1 / inf == 0.0`. But `math.exp(710)` throws an exception. `hl.exp` seems to have the numpy behavior, so I think the simple version actually works. But we should add the above test. I think wrapping this in an exposed function is a good idea. I agree it should be called `expit`, both for consistency with scipy, and because as you say, `sigmoid` really just means an S shaped function. And if we do expose `expit`, we should probably expose its inverse `logit` too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10606#issuecomment-866034244:349,simpl,simple,349,https://hail.is,https://github.com/hail-is/hail/pull/10606#issuecomment-866034244,2,['simpl'],['simple']
Usability,Our error message on functions that read TSV are much clearer than they used to be. I don't think this needs to be a separate command.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/216#issuecomment-279518768:54,clear,clearer,54,https://hail.is,https://github.com/hail-is/hail/issues/216#issuecomment-279518768,1,['clear'],['clearer']
Usability,"Overall this is good, but I think we should simplify the interface. 1. Require `entry_to_double`. Don't support genotypes or do normalization. 2. Only have the one version that returns the triple. The user can reannotate the original dataset if that's what they want. 3. Write a `VariantDataset.genotype_matrix_pca` in Python that looks at the `.GT` field and does the necessary normalization before calling `pca`. This should be written completely in Python.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2454#issuecomment-348531819:44,simpl,simplify,44,https://hail.is,https://github.com/hail-is/hail/pull/2454#issuecomment-348531819,1,['simpl'],['simplify']
Usability,"Personally, I'm not a fan of the `n` prefix that Spark and friends use everywhere they what ""number of"". I think `rows` (the Breeze naming style) is always clear in context.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2542#issuecomment-350358236:156,clear,clear,156,https://hail.is,https://github.com/hail-is/hail/pull/2542#issuecomment-350358236,1,['clear'],['clear']
Usability,Please update to be consistent with python/pyhail/docs/style-guide.txt and resubmit.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1114#issuecomment-266934270:61,guid,guide,61,https://hail.is,https://github.com/hail-is/hail/pull/1114#issuecomment-266934270,3,['guid'],['guide']
Usability,"Potentially relevant: https://community.plotly.com/t/graphing-storage-in-units-of-1024-kilobytes-megabytes-etc/14305/2. I think it's a little bit of work to get to a place where units show up nicely for memory. Going to want to find the max value in the column in bytes, figure out what scale we are at (bytes, kilobytes, megabytes, gigabytes, etc.) then set custom tick range and tickvals accordingly. Also should probably make it clear whether we are in ""megabytes"" or ""mebibytes"" or whatever they're called.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11690#issuecomment-1080637072:432,clear,clear,432,https://hail.is,https://github.com/hail-is/hail/pull/11690#issuecomment-1080637072,1,['clear'],['clear']
Usability,"Proposed interface changes:. class TextTableConfiguration. class TextTableReader. TextTableReader(conf); TextTableReader(delimiter = ""#"", ...). // only read fields ; TextTableReader.read(columnTypes: Map[String, Type], path: String, [select]): (TStruct, RDD[Annotation]). (and JSON). for JSON:. JSONReader.read(t: Type, path: String): RDD[Annotation]. in expr language:. support. Variant(""chr:pos:ref:alt1,...,altN"") . (so Variant(v.toString) == v) and. Variant(chr: String, pos: Int, ref: String, alts: Array[String]). Then we can do:. annotatevariants table -v 'Variant(Chrom, Pos, Ref, Alts.split("",""))'. annotatevariants table -v 'Variant(Variant)'. To get this behavior, you'll have to build the EvalContext from the table type. Add. TStruct.filter(predicate: (Field) => Boolean): (TStruct, Filterer). where. type Filterer = (Annotation) => Annotation. This should make implementating importvariants table simple and elegant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/462#issuecomment-232740494:911,simpl,simple,911,https://hail.is,https://github.com/hail-is/hail/pull/462#issuecomment-232740494,1,['simpl'],['simple']
Usability,Putting WIP because I'm also going to get some feedback from Wenhan start of next week,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14562#issuecomment-2129755103:47,feedback,feedback,47,https://hail.is,https://github.com/hail-is/hail/pull/14562#issuecomment-2129755103,1,['feedback'],['feedback']
Usability,"Re: testing, I wanted to wait on the spawned batch and ensure that it passed, but I had trouble doing that because it looks like the new rich progress bars are printed to stdout so I can't make use of json output and `jq`. Can we print the progress bars to stderr instead?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324141580:142,progress bar,progress bars,142,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324141580,2,['progress bar'],['progress bars']
Usability,"Ready for another look. I had to modify the classes some to make it work, particularly for getting the `type` out of the test. Now the type is with the Test rather than the TestResult, perhaps you see a better way?. Related notes, mostly relevant to future PRs once we have some feedback and a sense of performance:. I think LogisticRegressionNullFit should be a separate class, as it plays a conceptually and practically different role. I don't want to attach vectors of length nSamples (like mu) to each LogisticRegressionFit output, even though they would speed up the score test and first iteration of fitting per variant to not recompute them for every variant. I did put some of this efficiency in the score test (only computing the extra coordinate of score and row / column of fisher per variant). df would also then go away for LogisticRegressionFit, but I'd add the diagonal of its inverse for use in Wald (see below). The model fit function would then take a LogisticRegressionNullFit to use in the first iteration. The bigger future gains will come from not computing or inverting the Fisher matrix at all in the iteration, but rather using QR magic. val sqrtW = sqrt(mu :\* (1d - mu)); val QR = qr.reduced(X(::, _) :_ sqrtW); solve QR.R \* deltaB = QR.Q.t \* (y - mu) with R upper triangular (need to wrap lapack function). for Wald: return diagonal of inverse as well, namely diagonal of inv(R)^T \* inv(R), rather than inverting fisher again. for Score, this version of this may be faster:; val sqrtW = sqrt(mu :\* (1d - mu)); val Qty0 = qr.reduced.justQ(X(::, _) :_ sqrtW).t \* ((y - mu) :/ sqrtW); val chi2 = Qty0 dot Qty0. for Firth, modify score using:; val QQ = QR.Q :\* QR.Q; val h = sum(QQ(*, ::))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/585#issuecomment-241153168:279,feedback,feedback,279,https://hail.is,https://github.com/hail-is/hail/pull/585#issuecomment-241153168,1,['feedback'],['feedback']
Usability,"Regarding SSR-only mode. This is the default behavior. SSR is mostly a function of routing. If we allow the client to handle routes, we save the roundtrip in reconciling current app state (current DOM) with the next state (next page's DOM). To ""enable"" this functionality, instead of using `<Link>` use `<a>`. Nextjs has excellent documentation and a responsive maintainer base: https://github.com/zeit/next.js/issues/575",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454796376:351,responsiv,responsive,351,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454796376,1,['responsiv'],['responsive']
Usability,"Regarding the `pyspark` issue, it looks like you have to use `--properties-file` and then put that comma-sepearted list as a newline-separated list in a file. That error message is pyspark's rather terrible way of telling you that it doesn't support a `--properties` option. Regarding the old version of VDS, the `master` branch of hail is now an unstable development branch. If you want a consistent user experience with backwards compatible interfaces, please check out and exclusively use the `0.1` branch. Tim discusses the wider change [here](http://discuss.hail.is/t/deployment-changes-branching-off-for-faster-development/261/1). The VDS format will likely change on the scale of days on the `master` branch. Regarding the `hail/scripts` folder, that is a repository of scripts that our build system uses as templates to create a pre-compiled, ready-to-go distribution that only requires a Spark installation. These distributions are available from the Google Storage API at gs://hail-common/distributions. If you're building from source, I recommend following exactly the steps listed [here](https://hail.is/docs/stable/getting_started.html#building-hail-from-source) so as to avoid any future hiccups. NB: the steps for [Running Hail Locally](https://hail.is/docs/stable/getting_started.html#running-hail-locally) are for using the pre-compiled distribution, not for the result of building hail directly from source.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-320242551:401,user experience,user experience,401,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-320242551,1,['user experience'],['user experience']
Usability,"RegionPool does have a finalize method, so presumably that will be called on the driver if needed (I don't really know if or when java calls finalizers). I implemented a `clear()` method that reclaims all RegionMemory owned by the pool, but leaves the pool ready to be used by the next task.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8287#issuecomment-597830451:171,clear,clear,171,https://hail.is,https://github.com/hail-is/hail/pull/8287#issuecomment-597830451,1,['clear'],['clear']
Usability,"Replying to cseed on code-reuse and cacheing/locking. a) Even with whole-stage codegen, there's a possibility that during development a user; will be tweaking a query in ways which don't change all the stages. And in that case the re-use; would give hits on some stages. The plan is not really to aim at structuring things to get a; high level of re-use, but just to opportunistically exploit re-use which happens to occur -; e.g. if the early stages of an analysis involve reading an existing file and filtering in various; ways, then that may not be changed at all by changes to what happen in the real analysis; after the filtering. And this is also influenced by the medium-term goal of having a Hail service; which (amongst other things) can do simple analyses on small data in under ten seconds - in; that realm compilation time could become a critical factor as a serial bottleneck. [The place where persistent cacheing of compiled files helps most of all is in testing,; where you really are running the exact same queries over and over again on the same; small datasets, and in many cases after making small changes which only affect a few; of the queries]. b) We may actually have some version of the locking problem even if we don't try to reuse the files -; since we have several workers on a node, and possibly a master as well, all needing to put code; into a file (or wait for someone else to populate the file) so that they can load it. Depending on ; precisely how Spark manages things (which I wouldn't want to depend on too much anyway). In fact it's essential that all the workers share the same DLL file, because otherwise they'd be; trying to load multiple DLL's defining the same symbols. That aspect of it could be handled by; putting the files into a per-process directory and using in-memory (std::mutex) synchronization.; But y'know, given that we have to write the DLL's out, it just seemed natural to let them persist; (and until debugging it on MacOS, I thought I could m",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385:750,simpl,simple,750,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385,1,['simpl'],['simple']
Usability,"Research on UX/UI, and impact on customer acceptance. Is there a reason to invest in surface credibility (beyond functionality)?. 1) http://credibility.stanford.edu/pdf/p80-fogg.pdf",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-450537877:12,UX,UX,12,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-450537877,1,['UX'],['UX']
Usability,"Root cause found. Each time a batch test runs it generates a bunch of garbage because batch unsafely handles `cancel`. Here's the bad sequence:. - batch adds a job to `job_id_job`; - batch makes an HTTP request to k8s to create the pod, THREAD IS NOW PAUSED WAITING FOR RESULT; - flask handles a new request to cancel said job, tries to delete the pod; - [_delete_pod says: if `_pod_name` is `None`, don't do anything](https://github.com/hail-is/hail/blob/master/batch/batch/server/server.py#L83), so it does nothing but tells the client 200 OK!; - THREAD WAITING ON k8s WAKES UP: oh good, pod created. I think the fix is to check after pod creation if our state was set to canceled. If yes, delete said pod.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5168#issuecomment-456618542:251,PAUSE,PAUSED,251,https://hail.is,https://github.com/hail-is/hail/issues/5168#issuecomment-456618542,1,['PAUSE'],['PAUSED']
Usability,"SEC; ----. - Web Application Security, A Beginner's Guide https://www.amazon.com/Web-Application-Security-Beginners-Guide/dp/0071776168; - The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470; - http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/; - http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6720#issuecomment-514358731:52,Guid,Guide,52,https://hail.is,https://github.com/hail-is/hail/issues/6720#issuecomment-514358731,2,['Guid'],['Guide']
Usability,"Seems to average 60MB/s. No clear culprits. Zstd decoding is the top hit right now. The hottest generated code is inplace decoding of an optional array of optional int32. Really sucks because things like `LA` are somehow getting written as element optional, even though, by construction their elements are not optional. ```; +EBaseStruct{; `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:; +EArray[EBaseStruct{; LA:EArray[EInt32]; ,LGT:EInt32; ,LAD:EArray[EInt32]; ,LPGT:EInt32; ,LPL:EArray[EInt32]; ,RGQ:EInt32,; gvcf_info: EBaseStruct{; AC:EArray[EInt32]; ,AF:EArray[EFloat64]; ,AN:EInt32,AS_BaseQRankSum:EArray[EFloat64]; ,AS_FS:EArray[EFloat64]; ,AS_InbreedingCoeff:EArray[EFloat64]; ,AS_MQ:EArray[EFloat64]; ,AS_MQRankSum:EArray[EFloat64]; ,AS_QD:EArray[EFloat64]; ,AS_QUALapprox:EArray[EInt32]; ,AS_RAW_BaseQRankSum:EBinary,AS_RAW_MQ:EArray[EFloat64]; ,AS_RAW_MQRankSum:EArray[EBaseStruct{`0`:EFloat64,`1`:EInt32}]; ,AS_RAW_ReadPosRankSum:EArray[EBaseStruct{`0`:EFloat64,`1`:EInt32}]; ,AS_ReadPosRankSum:EArray[EFloat64]; ,AS_SB_TABLE:EArray[EArray[EInt32]]; ,AS_SOR:EArray[EFloat64]; ,AS_VarDP:EArray[EInt32]; ,BaseQRankSum:EFloat64,ExcessHet:EFloat64,FS:EFloat64,InbreedingCoeff:EFloat64,MQ:EFloat64,MQRankSum:EFloat64,MQ_DP:EInt32,QD:EFloat64,QUALapprox:EInt32,RAW_GT_COUNT:EArray[EInt32]; ,RAW_MQandDP:EArray[EInt32]; ,ReadPosRankSum:EFloat64,SOR:EFloat64,VarDP:EInt32}; ,DP:EInt32; ,GQ:EInt32; ,MIN_DP:EInt32; ,PID:EBinary; ,PS:EInt32; ,SB:EArray[EInt32]; }; ]; }; ```. Async profiler periodic sampling:; <img width=""2032"" alt=""Screenshot 2023-10-10 at 18 06 38"" src=""https://github.com/hail-is/hail/assets/106194/ee5df1c7-9c4a-4a4c-9ff4-caf599f1883b"">; <img width=""517"" alt=""Screenshot 2023-10-10 at 18 07 10"" src=""https://github.com/hail-is/hail/assets/106194/2bb5ba37-dab4-4b29-bb03-6cc2b08dafb9"">; Sync profiler (note safe point bias); <img width=""2032"" alt=""Screenshot 2023-10-10 at 18 32 14"" src=""https://github.com/hail-is/hail/assets/106194/85f1c1b6-3ac1-4b87-9e32-e6abdd02bb49"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13787#issuecomment-1756358633:28,clear,clear,28,https://hail.is,https://github.com/hail-is/hail/pull/13787#issuecomment-1756358633,1,['clear'],['clear']
Usability,"Should be good to go. There were two problems:. I needed to make the encoder/decoder `@transient lazy`. The encoder/decoder call generated code but can't be serialized. The make functions handle serialization and loading of the generated code. Also, RegionValueAggregators used in scans can have result called multiple times, so I needed to add a MemoryBuffer.clearPos.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5414#issuecomment-466625216:360,clear,clearPos,360,https://hail.is,https://github.com/hail-is/hail/pull/5414#issuecomment-466625216,1,['clear'],['clearPos']
Usability,"Should be pretty clear what I'm doing, but let me know if you want me to walk through the design process here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10628#issuecomment-880902195:17,clear,clear,17,https://hail.is,https://github.com/hail-is/hail/pull/10628#issuecomment-880902195,1,['clear'],['clear']
Usability,Should have been clear about that though!!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3004#issuecomment-369286513:17,clear,clear,17,https://hail.is,https://github.com/hail-is/hail/pull/3004#issuecomment-369286513,1,['clear'],['clear']
Usability,"Simple replication:; ```. In [6]: import hailtop.batch as hb; ...: b = hb.Batch(backend=hb.ServiceBackend()); ...: for _ in range(300):; ...: j = b.new_job(); ...: j.command(f'echo {""a"" * 11 * 1024}'); ...: b.run(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14051#issuecomment-1834356993:0,Simpl,Simple,0,https://hail.is,https://github.com/hail-is/hail/issues/14051#issuecomment-1834356993,1,['Simpl'],['Simple']
Usability,"Simple reproduction:. ```python; In [1]: import hail as hl . In [2]: t = hl.nd.array([[1,2,3,4], [1,2,3,4]]) . In [3]: hl.eval(t[0:1000,1000]) ; Out[3]: array([32756, 32756], dtype=int32); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9144#issuecomment-669592521:0,Simpl,Simple,0,https://hail.is,https://github.com/hail-is/hail/issues/9144#issuecomment-669592521,1,['Simpl'],['Simple']
Usability,"So I did some simple formatting on the ""Filter loci by a list of locus intervals"" example. . The cloud sphinx theme you mentioned on zulip has toggleable sections that look a bit nicer. I could emulate that formatting by writing a sphinx extension if we wanted to get fancier, but what do you think of this layout?. IMAGE 1. <img width=""720"" alt=""screen shot 2018-08-22 at 11 23 34 am"" src=""https://user-images.githubusercontent.com/35241112/44473344-1eb11c80-a5fe-11e8-954d-41440a031d24.png"">. IMAGE 2; clicking on `show` would expose more content:. <img width=""699"" alt=""screen shot 2018-08-22 at 11 23 46 am"" src=""https://user-images.githubusercontent.com/35241112/44473350-2375d080-a5fe-11e8-98e9-31f1c3bb825c.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4089#issuecomment-415074240:14,simpl,simple,14,https://hail.is,https://github.com/hail-is/hail/pull/4089#issuecomment-415074240,1,['simpl'],['simple']
Usability,"So I think I'd appreciate a review on this. Would especially appreciate feedback about the question I wrote in the PR body as well as what to do about documentation and testing:. - We have pretty expansive FS testing, but not for these new shim functions. Should we convert some of our tests to use these functions instead of the FS objects themselves?; - We don't have `hailtop` docs, and afaik this is the first module outside of `hailtop.batch` that would be public. Where should its docs go?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1499652542:72,feedback,feedback,72,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1499652542,1,['feedback'],['feedback']
Usability,"So I think the root issue here is the unnecessary duplication between `pyRegisterIR` and `pyRegisterIRForServiceBackend`. The only real difference is that one takes and already parsed IR, and the other takes a string and calls the parser. The callers of `pyRegisterIR` in python all call into the parser first, but I don't see any reason it has to make two calls across the python/scala bridge; I think `pyRegisterIR` should just take the IR as a string and call the parser like `pyRegisterIRForServiceBackend` does. With that change, it should be possible to make one a simple wrapper around the other (or maybe even get rid of `pyRegisterIRForServiceBackend` completely). That way the core logic is shared between backends and is getting tested. Let me know if you want help with this, or if you'd like me to make a separate PR for this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174358685:571,simpl,simple,571,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174358685,1,['simpl'],['simple']
Usability,"So my reading now of `seed` is that it uniquely identifies a sequence of numbers. I read the docs now, and I'm not sure I agree with these sentences:; > The values are seeded when the function is called, so calling a random Hail function and then using it several times in the same expression will yield the same result each time.; > ; > Evaluating the same expression will yield the same value every time, but multiple calls of the same function will have different results. I think the trouble is with the meaning of ""called"", ""using"", and ""evaluating"". I see now that you mean calling the python function by ""called"", but that wasn't clear to me on first reading. ""Using"" I think just means appearing in the source code, which feels right. The last sentence, I think, is not true, given the below:. ```python; In [31]: z = hl.rand_unif(0, 1, seed=0); ...: ; ...: t = hl.utils.range_table(2); ...: t = t.annotate(; ...: x = hl.literal([1,2,3]).map(lambda i: hl.rand_unif(0,1,seed=0)),; ...: y = hl.literal([1,2,3]).map(lambda i: hl.rand_unif(0,1,seed=0)),; ...: z = hl.literal([1,2,3]).map(lambda i: z)); ...: ; ...: t.show(); ```. I think I really prefer the `[z,z]` means two draws. If you want one draw, you gotta use a let or `annotate_globals` or something.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4166#issuecomment-415835792:637,clear,clear,637,https://hail.is,https://github.com/hail-is/hail/pull/4166#issuecomment-415835792,1,['clear'],['clear']
Usability,"So what I did to address the comments:; 1. I encoded the task names and the offsets of the data into the response from the worker to the front end and got rid of the MultiPart Reader/Writer.; 2. I reorganized the front end code so it's hopefully clearer what's going on.; 3. I got rid of the periodically_call changes and just did what I wanted directly in the `measure` function in the Resource Manager. Now it should be guaranteed that we do not call the measure function with the write more than once every 5 seconds. I do not want to retry calling this function at all on any error including transient errors. Otherwise, I can't figure out how the set of changes in this PR would use up all the disk space.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11750#issuecomment-1137707785:246,clear,clearer,246,https://hail.is,https://github.com/hail-is/hail/pull/11750#issuecomment-1137707785,1,['clear'],['clearer']
Usability,"So ya this is what was giving me pause so would appreciate your take. I threw WIP on so I can make sure it's properly tested before it merges. Here are my thoughts:; - I can manually exercise all the commands easily enough. Flexing all the options is harder, but I can compare the help for each command. The fact that these files are all lint-free and typecheck gives me confidence I did have before.; - I'm not worried about breaking dev stuff. Basically the only thing I am worried about breaking is the dataproc group.; - I was planning on running the test dataproc scripts prior to removing the WIP, which is something, but obviously does not test all the options. I think it would be nice to get a close review for dataproc start/submit (the biggest ones that people rely on the most) and everything else can be at whatever granularity you feel comfortable with.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13109#issuecomment-1570824362:33,pause,pause,33,https://hail.is,https://github.com/hail-is/hail/pull/13109#issuecomment-1570824362,1,['pause'],['pause']
Usability,"So, here's a profile of the no-leb dataset. I applied all the simple tricks I could think of. We memcpy runs of present ints or floats in arrays. Patrick's improvements. A few other little cleanups. Read bandwidth with one core is ~60MB/s (of uncompressed bytes). Zstd is getting ~28% of our core. A comment from 2019 claimed [200 MB/s](https://github.com/luben/zstd-jni/issues/94#issuecomment-471114842) from the Zstd JNI library we're using. That roughly tracks (0.28 * 200 = 56). The native C library, on a 400MB/s link (roughly my SSD's link) claims closer to 1000 MB/s (of uncompressed bytes) (see [my sheet](https://docs.google.com/spreadsheets/d/1uDYfXWDIwt_-XiclFWdLDiXamVbxhswt_D-v8fVrlRU/edit#gid=0)). I suspect we need either different on-disk formats, different in-memory formats, or vectorized storage to substantially improve the speed. Reading all these tiny arrays is unfortunately really branchy. If we had a PType and EType for arrays that was memcpy-able, that might give us a big win? In particular, suppose we could determine the bytesize of a nested structure including arrays. We write that size into the stream, then write all the bytes. Decoding is: read size, read that many bytes, done. <img width=""1545"" alt=""Screenshot 2023-10-11 at 16 36 27"" src=""https://github.com/hail-is/hail/assets/106194/afaeeacc-ab07-4e2c-9638-8d007276333d"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13792#issuecomment-1758518398:62,simpl,simple,62,https://hail.is,https://github.com/hail-is/hail/issues/13792#issuecomment-1758518398,1,['simpl'],['simple']
Usability,"So, something weird is going on that I don't understand, and we should probably hold off on merging this for now. When I emit the stream code directly, bypassing the compiler, the new reducible version is clearly faster: running; ```scala; val f = compile1[Int, Unit] { (mb, n) =>; val outer = Stream.range(mb, 0, 1, n); val flatMap = outer.flatMap(i => Stream.range(mb, 0, 1, i)); flatMap.forEach(mb, i => Code._empty); }; val n = 50000; var t = System.nanoTime(); f(n); println(s""first run: ${(System.nanoTime() - t) / 1000000} ms""); for (i <- 1 to 10) { f(n) }; t = System.nanoTime(); for (i <- 1 to 50) { f(n) }; println(s""warmed up mean: ${(System.nanoTime() - t) / (1000000 * 50)} ms""); ```; on main prints; ```; first run: 2088 ms; warmed up mean: 1972 ms; ```; and on this PR; ```; first run: 867 ms; warmed up mean: 937 ms; ```; (As an aside, the lack of burn in is interesting. I think it means either the function is never getting jit compiled, or OSR kicks in on the first run and is as effective as full compilation.). On the other hand, running the benchmark; ```scala; ht = hl.utils.range_table(30); ht = ht.annotate(sum=hl.sum(hl.range(5_000).flatmap(lambda x: hl.range(x)))); ht._force_count(); ```; I get; ```; > hail-bench compare main-bench.json branch-bench.json; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; table_annotate_flatMap 371.8% 0.795 2.958; ```. I'm currently at a loss for theories to explain this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9429#issuecomment-690420227:205,clear,clearly,205,https://hail.is,https://github.com/hail-is/hail/pull/9429#issuecomment-690420227,1,['clear'],['clearly']
Usability,"So.... this is technically working, but I'm not very happy with how difficult the logic is to parse through. I'm going to work at tidying it up into a more readable format but would love feedback on how to do that. cc @tpoterba @cseed @patrick-schultz",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6727#issuecomment-516096236:187,feedback,feedback,187,https://hail.is,https://github.com/hail-is/hail/pull/6727#issuecomment-516096236,1,['feedback'],['feedback']
Usability,"Some initial thoughts:; * I'm not sure we should have implicitly broadcasting operations in the IR. It seems simpler to make broadcast an explicit operation, which we make sure to deforest. In fact, broadcast is a special case of the generic tensor index operation I'll describe below. Implicitly broadcasting operations could be provided in the Python interface, making broadcasts explicit when constructing the IR.; * I'm also not sure how much special treatment we should give to block matrices in the IR. I now like to think of block matrices as just 4-tensors, with matrix operations like matrix multiplication lowering to operations on 4-tensors. If we allow tensors to have some distributed dimensions and some ""small"" dimensions, then at least in the backend we might not need special handling of block structures. It may still be helpful to have a special block matrix/tensor representation at the top level IR, or maybe that should only live in Python—I'm not sure. Here's a proposal for a set of primitive tensor operations. * Outer product: Takes two tensors, T1 and T2, with shapes [n1, ..., ni] and [m1, ..., mj], and entry types t1 and t2, and makes a tensor Out with shape [n1, ..., ni, m1, ..., mj] and entry type (t1, t2). If we want to support sparse tensors, this should take a flag specifying how the sparse structure of the output is determined from those of the inputs. I'll call the possible flags ""and"", ""or"", and ""true"". The ""and"" flag says that Out(n, m) is defined iff T1(n) AND T2(m) are both defined. If we will be multiplying the pairs, or applying any other operation with our default missingness semantics, this is the appropriate setting.; The ""or"" flag says Out(n, m) is defined iff T1(n) OR T2(m) is defined, as is appropriate if we are adding the pairs.; ""true"" just means make Out dense, regardless of the sparsity of the inputs. * Map. I don't think there's much to say here. * Generic index operations (not sure what to call these). I'll first give some example",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5190#issuecomment-457598772:109,simpl,simpler,109,https://hail.is,https://github.com/hail-is/hail/pull/5190#issuecomment-457598772,1,['simpl'],['simpler']
Usability,Somewhat surprising that no one has written a shade plugin that renames SO symbols 🤷 . That's clearly the correct answer here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8576#issuecomment-616208715:94,clear,clearly,94,https://hail.is,https://github.com/hail-is/hail/pull/8576#issuecomment-616208715,1,['clear'],['clearly']
Usability,"Sorry I didn't get to this, Nik! I've been trying to think if we should revisit our experimental module guidelines in light of the questions we're getting on Zulip, but I think things are probably fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8265#issuecomment-600357758:104,guid,guidelines,104,https://hail.is,https://github.com/hail-is/hail/pull/8265#issuecomment-600357758,1,['guid'],['guidelines']
Usability,"Sorry about this! Will do!. On Tue, Mar 7, 2017 at 13:36 Tim Poterba <notifications@github.com> wrote:. > I just noticed that the spacing doesn't follow the style guide. Not; > critical, but try to autoformat before PRing; >; >; >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/1494#issuecomment-284814488>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADVxgc012iIeaevvZPZfYZuXXj1nuiE2ks5rjaOQgaJpZM4MVwyK>; > .; >; >; >; >; >; >; >; >; >; >; >; >; >; >; >; >; >; >; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1494#issuecomment-284817572:163,guid,guide,163,https://hail.is,https://github.com/hail-is/hail/pull/1494#issuecomment-284817572,1,['guid'],['guide']
Usability,"Sorry to drop another big one on you, Chris, but you have the context for this. . The big diff doesn't reflect the size of the conceptual change here. This PR does as follows:; * Breaks up and moves CodeOrdering to its own package under `ir`. ; * Changes all CodeOrdering factories to take STypes instead of PTypes; * Removes some factory methods, like `pType.codeOrdering`.; * There are now two places to construct orderings: `EmitClassBuilder.getOrderingFunction` (which takes stypes and an `Op`), and `CodeOrdering.makeOrdering`.; * I slightly changed the method layout to memoize within each ordering. We check the types on each method call.; * There are only a couple meaningful changes in the typed ordering generators. I changed CallOrdering and StringOrdering a bit to more clearly describe what they're doing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10091#issuecomment-784737260:782,clear,clearly,782,https://hail.is,https://github.com/hail-is/hail/pull/10091#issuecomment-784737260,1,['clear'],['clearly']
Usability,"Sorry will fix this, trying to break up the larger PR clearly failed. One min.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7599#issuecomment-557715665:54,clear,clearly,54,https://hail.is,https://github.com/hail-is/hail/pull/7599#issuecomment-557715665,1,['clear'],['clearly']
Usability,"Sorry, I should have been clearer. I think the first line shouldn't have any ""#""s and for the following lines, ""###"" is fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2256#issuecomment-332298462:26,clear,clearer,26,https://hail.is,https://github.com/hail-is/hail/pull/2256#issuecomment-332298462,1,['clear'],['clearer']
Usability,"Sorry, I wasn't clear before. The Batch LD Clumping example does not require Hail Query (and, more importantly, a JVM) to be installed on *the computer that submits the batch*. Hail is imported and used inside of the Batch task that performs GWAS. That task runs inside a Docker container that has Hail installed (its derived from `hailgenetics/hail`). I'm hesitant to make the *submission* of a batch dependent on the Hail Query library. Particularly when we have relatively low-effort alternative approaches. I'm delighted any time I see batch tasks use Hail Query! Konrad's Pan UKB work also does this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-671357400:16,clear,clear,16,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-671357400,1,['clear'],['clear']
Usability,"Sorry, I've been on my honeymoon and just got back. I resume work on this in the new year. Apologies for the delay.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1866888177:54,resume,resume,54,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1866888177,1,['resume'],['resume']
Usability,"Sounds good Dan, and agreed it's a long term issue. Regarding point 2, I also don't really like the idea of non-preemtible nodes from a resource utilization standpoint. I think we could probably write our own peak load predictor, or use one of the existing tools, outside of the kube ecosystem. There has been some interesting work using some relatively simple learning models to predict load. It would be interesting to use an RNN for this, but linear regression seems to work pretty well. This could be an interesting topic to investigate. https://medium.com/netflix-techblog/scryer-netflixs-predictive-auto-scaling-engine-part-2-bb9c4f9b9385",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5269#issuecomment-461549683:354,simpl,simple,354,https://hail.is,https://github.com/hail-is/hail/issues/5269#issuecomment-461549683,2,"['learn', 'simpl']","['learning', 'simple']"
Usability,"Sounds good. Thanks for the feedback. If it requires a significant effort to modify the code base to remove this behavior or if the change is not desired, it may be worth including a warning/info section describing this behavior in the documentation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14004#issuecomment-1813182236:28,feedback,feedback,28,https://hail.is,https://github.com/hail-is/hail/issues/14004#issuecomment-1813182236,1,['feedback'],['feedback']
Usability,Subquery simplification is in progress!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1270347717:9,simpl,simplification,9,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1270347717,1,['simpl'],['simplification']
Usability,"Suggestions:; 1) change `va.maf` to `va.panel_maf` in the example, say first something like ""Suppose we have already added a variant annotation `va.panel_maf` with allele frequencies computed from a reference panel.""; 2) add ""if unspecified, MAF will be estimated from the dataset"" to `-m`. How about using `-maf` instead of `-m`, it's still super short and much clearer?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/894#issuecomment-251433966:363,clear,clearer,363,https://hail.is,https://github.com/hail-is/hail/pull/894#issuecomment-251433966,1,['clear'],['clearer']
Usability,"TE 2].; > ; > I don't think changing these will have the desired effect and may make it impossible for someone to reproduce the database. The only changes to _existing_ sql you'll need to make are in the sql strings in python code.; > ; > 2. This needs to be written as a migration and maybe could be simplified?; > ; > I think this needs to be done as a database migration. We'll have no need for a stored procedure once complete. You can assume current columns and constraints exist, dispense with the error checking and simplify. Can you convert this to a sql script and add it to the end of the list of migrations in `build.yaml`? You'll probably want `online: false` too. I fear you'll have to take inspiration from `rename-job-groups-tables.sql` by applying one `ALTER TABLE` command then drop and recreate EVERYTHING that references that name (constraints, triggers, procedures etc). This will likely involve copy+paste and rename. Alternatively, create, execute then drop the procedure within `rename-job-groups-cancelled`.; > ; > [NOTE 1] migration applied in `build.yaml`; > ; > The relevant build step in `build.yaml` can be found by searching for the entry starting with the yaml below. This controls which migrations are applied and in what order.; > ; > ```yaml; > kind: createDatabase2; > name: batch_database; > databaseName: batch; > ```; > ; > [NOTE 2] estimated-current.yaml; > ; > I don't agree with why we have this. It would be nice to generate this automatically. Anyway, please keep your changes to this file as it's meant for documentation purposes only. None of it is applied and who knows how much of it works. Got it! I wasn't sure how Hail usually does schema update. Based on your above description the process becomes clearer ro me. Here's my second try:. - Updated `build.yaml` in the `batch` database migrations section.; - Simplified the sql in `rename-job-groups-cancelled-column.sql`. Do you mean `estimated-current.sql` rather than `estimated-current.yaml` above?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14672#issuecomment-2334778045:2165,clear,clearer,2165,https://hail.is,https://github.com/hail-is/hail/pull/14672#issuecomment-2334778045,2,"['Simpl', 'clear']","['Simplified', 'clearer']"
Usability,"Talked with jon, summary:. Clearly there are people who need larger block sizes due to data size and partition limits. There are also people who try to use the default block size with smaller data sets and without highmem machines. These people usually have a bad time. We should pay attention to reports of this and figure out how we can better educate people on using smaller block sizes for smaller data.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5375#issuecomment-464193120:27,Clear,Clearly,27,https://hail.is,https://github.com/hail-is/hail/pull/5375#issuecomment-464193120,1,['Clear'],['Clearly']
Usability,"Tested deletion in a separate database. 0 rows is instantaneous. 100,000,000 rows is 10 seconds. So at worst, it's probably on order of 10 minutes to drop a table since the table I had was very simple with not a lot of columns. Will rebase and then get this merged.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12710#issuecomment-1446634047:194,simpl,simple,194,https://hail.is,https://github.com/hail-is/hail/pull/12710#issuecomment-1446634047,1,['simpl'],['simple']
Usability,"Thank you all for another round of detailed critique!. OK, I think the only remaining critical fix is to hard-code a mainclass. This is a wee bit complicated because I need to multiplex the ServiceBackendSocketAPI2 and the Worker. I hope to do this tomorrow AM. I'll then dismiss reviews. I also have a list of todos generated by this process which will feedback into some master QoB doc that integrates the two teams necessary todos.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11194#issuecomment-1033173934:354,feedback,feedback,354,https://hail.is,https://github.com/hail-is/hail/pull/11194#issuecomment-1033173934,1,['feedback'],['feedback']
Usability,Thank you for the clear and easy-to-follow instructions! I've rebased my commit and applied your patch. What do I need to do now?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/753#issuecomment-251409770:18,clear,clear,18,https://hail.is,https://github.com/hail-is/hail/pull/753#issuecomment-251409770,1,['clear'],['clear']
Usability,"Thanks @danking for helping with this, and for the nudge to finally get it implemented!. Some more next steps:; * Make a benchmarking setup to collect data on performance and accuracy. I want to use the same metrics for measuring error as [here](http://quantiles.github.io/) (Kolmogorov-Smirnov divergence and total variation distance between the true and estimated CDFs, which are both simple to compute). As a first sanity check, we should get numbers in the same ballpark as they did (worse at first, because we started with a very naive algorithm).; * Make improvements to the algorithm, evaluating the gains in the benchmarks.; * When we feel we understand the behavior of the accuracy measures, we can pick a conservative upper error bound and turn that into an automated test.; * Also once we understand the behavior of the accuracy measures, figure out how to communicate that to users. One thought is to offer a few default choices of parameters, and for each document memory usage, empirical error from our benchmarks, and a theoretical upper bound on the error (of the form ""with probability > .99 the estimated q quantile element will have true quantile q ± .001""). This allows users to make an informed decision based on their use case. That looks like a lot, but I think those are all relatively simple. I'm also using this as a test case for thinking about how to implement approximate/randomized methods in Hail in general.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5332#issuecomment-463200410:387,simpl,simple,387,https://hail.is,https://github.com/hail-is/hail/pull/5332#issuecomment-463200410,2,['simpl'],['simple']
Usability,Thanks for reporting this. I had tried to remove our dependence on `setuptools` but had not done a good enough job clearly.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14630#issuecomment-2243322335:115,clear,clearly,115,https://hail.is,https://github.com/hail-is/hail/issues/14630#issuecomment-2243322335,1,['clear'],['clearly']
Usability,Thanks for the clear bug report @uqrmaie1! Let me know if you have any more trouble.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2763#issuecomment-360660531:15,clear,clear,15,https://hail.is,https://github.com/hail-is/hail/issues/2763#issuecomment-360660531,1,['clear'],['clear']
Usability,"Thanks for the feedback, I've simplified the logic, made the python test more comprehensive, and made element retrieval more direct and applicable to sparse block matrices. I'll clarify that the latter is supported in the sparse case as soon as #3539 goes in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3611#issuecomment-389940384:15,feedback,feedback,15,https://hail.is,https://github.com/hail-is/hail/pull/3611#issuecomment-389940384,2,"['feedback', 'simpl']","['feedback', 'simplified']"
Usability,"Thanks guys, something new to learn!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7826#issuecomment-575745357:30,learn,learn,30,https://hail.is,https://github.com/hail-is/hail/issues/7826#issuecomment-575745357,1,['learn'],['learn']
Usability,"Thanks so much Daniel!! This is awesome. I can't seem to be able to merge though, probably due to permissions?; <img width=""516"" alt=""Screen Shot 2021-04-22 at 9 58 00 am"" src=""https://user-images.githubusercontent.com/1575412/115636406-3ada5e00-a351-11eb-887d-3882271f6369.png"">. There are also conflicts, but I'm resolving them right now :). UPD: Ah, learned from Leo that the merge button will be available after the tests pass :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10347#issuecomment-824439697:353,learn,learned,353,https://hail.is,https://github.com/hail-is/hail/pull/10347#issuecomment-824439697,1,['learn'],['learned']
Usability,"Thanks, @tomwhite! This is great. Is there a Hive CLI equivalent of `LIKE PARQUET <file>`? I can't figure out how to get Hive to infer the schema from the Parquet file rather than specifying it explicitly. It would be awesome to be able to query the genotypes, too. It seems like we could write a SerDe (now I'm thinking ImpEx isn't so bad :)) to unpack the genotypes. Does that sound like the right approach?. On a related note, we've played with storing VDS natively as Parquet as (variant, variant annotations, array(genotype)). Even when I ported over some of the GenotypeStream encoding tricks (OD instead of DP, etc.), it was 2-3x larger (using Snappy compression vs. our internal LZ4 compression). That's disappointing, esp. when we have 30+TB datasets on the way. What's worse, simple operations like counting genotypes (`count -g`) are 5-10x in the native representation. Current master:. ```; $ hail importvcf profile225.vcf.bgz write -o profile225.vds read -i profile225.vds count -g; hail: info: timing:; importvcf: 508.829ms; write: 3m6.7s; read: 1.629s; count: 13.934s; $ du -sh profile225.vds; 2.0G profile225.vds; ```. And with the `jg_dataframe1` experimental branch, which uses native Parquet and computes the count using a UDF that computes the sum per array (fastest Parquet-based implementation we've found so far):. ```; $ hail importvcf profile225.vcf.bgz write -o profile225.vds read2 -i profile225.vds count2; hail: info: timing:; importvcf: 492.354ms; write: 5m57.1s; read2: 1.466s; count2: 1m44.1; $ du -sh profile225.vds; 5.4G profile225.vds; ```. That's 2.7x larger and >7x slower. This includes the fact that the Parquet version is only loading the GT field of the genotypes (!). This might be a non-starter for us. We'd love the flexibility and interoperability of standard Parquet. If you have other ideas about how to get Parquet close to what we currently have, I'd love to talk more.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/480#issuecomment-234027310:786,simpl,simple,786,https://hail.is,https://github.com/hail-is/hail/pull/480#issuecomment-234027310,1,['simpl'],['simple']
Usability,"That would work, though I think it's probably simpler to have min and max be the first and last elements of the pivots array (which should be required to be sorted).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10816#issuecomment-906667906:46,simpl,simpler,46,https://hail.is,https://github.com/hail-is/hail/pull/10816#issuecomment-906667906,1,['simpl'],['simpler']
Usability,"That's what I expected. Your name just came up in the roulette. I'll also want @cseed to give feedback, since I made these from his original work on https://github.com/cseed/hail/tree/partitioned-combiner.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4824#issuecomment-441771321:94,feedback,feedback,94,https://hail.is,https://github.com/hail-is/hail/pull/4824#issuecomment-441771321,1,['feedback'],['feedback']
Usability,"The ATGU intranet service is home for some tools we're going to build help support ATGU operations. After talking to the administrators, we started a simple tool for the admins to curate resources for members of the group. We've also talked about things related to personnel and financial and grant management. Although this will likely be a slightly different resource, we're talking to the PMs about tools we can build to help pulling together large-scale datasets like gnomAD. The complexity of doing this is becoming a blocker for producing such datasets. We're Hail. Whatever we build is part of Hail. Things that we own and operate and deploy together live in our monorepo.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9684#issuecomment-723166642:150,simpl,simple,150,https://hail.is,https://github.com/hail-is/hail/pull/9684#issuecomment-723166642,1,['simpl'],['simple']
Usability,"The Google docs aren't clear about whether the hash needs to be a suffix or prefix: . > add the hash of the sequence number as part of the object name to make it non-sequential. I'm somewhat hesitant to make this change since it means our part outputs are no longer sorted lexicographically, and this property has been very useful in the past.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10836#issuecomment-914241609:23,clear,clear,23,https://hail.is,https://github.com/hail-is/hail/pull/10836#issuecomment-914241609,1,['clear'],['clear']
Usability,"The [TextInputFormat](https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/mapred/TextInputFormat.html) class clearly comes from hadoop. It's no longer in the location from which we import it. We must get it from some other dependency. OK. So, before my simplification of build.gradle, we used a configuration called `compile` and another one called `testCompile`. [Neither of those exist in modern gradle, apparently](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph). I found a side-note about the `compile` configuration [here](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_dependency_management_overview) (search for ""compile""):. > **Why no compile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:117,clear,clearly,117,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,2,"['clear', 'simpl']","['clearly', 'simplification']"
Usability,"The change regarding the copy tool progress bar is because on non-verbose mode (like in the local backend) it was generating some weird whitespace by just creating the progress bar not disabled even though none of the tasks were visible. In jupyter notebooks, whitespace rendered as `5l` in the jupyter output.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13681#issuecomment-1729901749:35,progress bar,progress bar,35,https://hail.is,https://github.com/hail-is/hail/pull/13681#issuecomment-1729901749,2,['progress bar'],['progress bar']
Usability,"The command is hidden because to generate reasonable memory overhead and subsequent task sizes for even 10k samples and 10k variants, we should parallelize data generation of the RDD, rather than using `sc.parallelize` on a matrix at driver. That will be a subsequent improvement. For reference, running an IntelliJ test that simply generates the integer matrix of genotypes for 10k samples and 10k variants and 4 populations with the rest default takes about 7 seconds (one core). Small examples still work fine using this command, but PCA fails at the following scale unless repartition is used first:. ```; hail \; baldingnichols \; -k 3 \; -n 2000 \; -m 10000 \; -f .02,.03,.1 \; -d .2,.3,.5 \; -s 0 \; repartition -n 8 \; printschema -o ~/data/baldingnichols/schema.json \; pca -k 3 -s 'sa.pc' -e 'global.evals' \; showglobals -o ~/data/baldingnichols/global.tsv \; exportsamples -c 'sample = s, pop = sa.bn.pop, pc = sa.pc.*' -o ~/data/baldingnichols/samples.tsv \; exportvariants -c 'variant = v, freq = va.bn.*' -o ~/data/baldingnichols/variants.tsv; ```. Here is the annotation scheme created by `baldingnichols`:. ```; Global annotation schema:; global: Struct {; bn: Struct {; seed: Int,; nPops: Int,; nSamples: Int,; nVariants: Int,; popDist: Array[Double],; Fst: Array[Double]; }; }. Sample annotation schema:; sa: Struct {; bn: Struct {; pop: Int; }; }. Variant annotation schema:; va: Struct {; bn: Struct {; ancAF: Double,; AF0: Double,; AF1: Double,; AF2: Double; }; }; ```. The following python code shows three tight clusters corresponding to population using PC1 and PC2, and that PC3 is noise:. ```; import numpy as np; import matplotlib.pyplot as plt; import pandas as pd. %matplotlib inline. df = pd.read_table(""samples.tsv""); colors = {0: 'r', 1: 'b', 2: 'g'}. df.plot('pc.PC1', 'pc.PC2', 'scatter', c=df['pop'].map(colors), alpha=.3); plt.show(). df.plot('pc.PC1', 'pc.PC3', 'scatter', c=df['pop'].map(colors), alpha=.3); plt.show(). df.plot('pc.PC2', 'pc.PC3', 'scatter', c=d",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1029#issuecomment-257211215:326,simpl,simply,326,https://hail.is,https://github.com/hail-is/hail/pull/1029#issuecomment-257211215,1,['simpl'],['simply']
Usability,"The creeping expansion of the interface is on me as we tried to not break 0.1. I'd appreciate discussing in person what makes the most sense for 0.1. Here are the pieces I think we should separate for devel, though we could consider providing a meta-interface as well that combines some of them for usability. I'm writing (U, S, L) for a local matrix of eigenvectors U, an array of eigenvalues S, and an array of labels L on the rows of U (as with labels for SymmetricMatrix). 1) VDS to a (labeled) symmetric matrix (we have these: GRM, RRM, LD matrix, and Dan is working on a way to read and write them). 2) Symmetric matrix to (U, S, L), which we'll want to write and read. This modularizes the single-core eigen-decomposition bottleneck. 3) Variant-labeled (V, S, L) and VDS with those variants to transport (V, S, L) to sample-labeled (U, S, L). Currently this also requires knowing the number of samples used to make the LDMatrix since that number is used in its normalization. I agree it feels unnatural to need to remember this; to avoid it we'd need an unnormalized version. 4) Sample-labeled (U, S, L) and VDS to global fit of LMM including delta. This is currently a local computation that's been pretty fast in practice but as sample sizes increase we will want to distribute evaluating many values of delta in parallel. Note this step only uses the sample annotations on the VDS, so logically it could also be on KeyTable (which would be the sample KeyTable of the VDS). 5) Sample-labeled (U, S, L), VDS, and delta to per-variant-fit of LMM. This VDS can now contain exactly the variants one wants to fit. (5) should eventually be decomposed as well. The first command should project from Matrix to Matrix (projecting both numeric cells and a list of numeric sample annotations) and some additional small data. Then (6) will do per variant tests starting from after this projection (that is, after what is the BIG computation when you have tens of millions of variants). That way users can",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-319971210:299,usab,usability,299,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-319971210,1,['usab'],['usability']
Usability,"The default is to put the modules in ${HOME}/hail_modules, which in many; environments; would indeed be an NFS directory. It only goes to /tmp/hail_modules if; ${HOME} is undefined. The thinking behind this is that there's a huge amount of re-use of code; for an individual; from one Hail analysis to the next, but probably much less overlap between; different users.; And while multi-user sharing ought to work, it raises potential issues; about file access; permissions which seemed like trouble without a clear benefit. On Fri, Aug 3, 2018 at 10:49 AM Patrick Schultz <notifications@github.com>; wrote:. > *@patrick-schultz* commented on this pull request.; > ------------------------------; >; > In src/main/c/NativeModule.cpp; > <https://github.com/hail-is/hail/pull/3973#discussion_r207567962>:; >; > > +#include <string>; > +#include <vector>; > +; > +#if 0; > +#define D(fmt, ...) { \; > + char buf[1024]; \; > + sprintf(buf, fmt, ##__VA_ARGS__); \; > + fprintf(stderr, ""DEBUG: %s,%d: %s"", __FILE__, __LINE__, buf); \; > +}; > +#else; > +#define D(fmt, ...) { }; > +#endif; > +; > +namespace hail {; > +; > +namespace {; >; > The anonymous namespace can't be named, so no names introduced in an; > anonymous namespace can be referenced from outside the namespace. The; > exception is that on closing an anonymous namespace, it is automatically; > opened into the enclosing namespace. The typical use is to make things; > file-local.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > <https://github.com/hail-is/hail/pull/3973#discussion_r207567962>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AJzExuxprnaVF62eonAgCjSmqAERvBJiks5uNGLtgaJpZM4VbZpP>; > .; >",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410321049:508,clear,clear,508,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410321049,1,['clear'],['clear']
Usability,"The doc wasn't very clear about where information lived. I had imagined that the pools and the JobPrivateInstanceManager (JPIM) owned the information. Nit: the doc doesn't say the instance monitor monitors instances, it just monitors and handles *events*. Let me be explicit: I think the doc is wrong about the monitor doing health checking because that requires it to track the instances, which I just said should be owned by the pools and the JPIM. That didn't occur to me when we were writing the doc, my apologies. I still think the monitor should:; - route events to the right pool or to the JPIM, and; - aggregate summaries up for the web UI. ---. Let me try to be more specific in my critique:. I think of the system as three layers: the top most is the driver, the middle layer is the monitor, and the bottom layer is the pool or JobPrivateInstanceManager (JPIM). I don't want control flow to go down, up, and back down again. If that happens, then we can't reason about our system as separate layers, we necessarily have to think about the middle and bottom layer together. Very specifically, this flow worries me: (instance pool) create_instance -> (instance monitor) add_instance -> adjust_for_add_instance -> (instance pool) adjust_for_add_instance. We move from low to mid *back to low*. I want information to flow in one direction: either its downward information or its upward information. ---. I'm guessing you're also concerned about code organization / code duplication. I'm not that worried about this. The JPIM and the Pool are similar things and we might inevitably produce some duplication. That's OK with me. To be honest, I think a few stand-alone functions that both of them use will eliminate any code duplication. Both pools and the JPIM will have a `name_instances` and `instance_by_last_updated`. If the duplication gets hard to manage, we might pack that up into another class like InstanceCollection. I realize this means we have several monitoring loops. I'm not very w",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9772#issuecomment-738515358:20,clear,clear,20,https://hail.is,https://github.com/hail-is/hail/pull/9772#issuecomment-738515358,1,['clear'],['clear']
Usability,"The issue it's solving: allows the dropdown be the requested 75% width of the table. In order to have this you need to set width on the parent of the table, and allow the table to stretch. Hard part is not having it stretch too much when it's empty. Easy alternative is to have the dropdown fixed width. For the double scroll: for very narrow views, I don't think you should see that anymore, unless the table is wider than 1024px. ; * For very wide views, if we set max-width: 100% on the parent, you can have a slightly nicer UX than would have had previously, in that the table is scrollable (so 1 scroll bar), but the search bar is no longer off screen (ex below). But now parent is full width. To solve this can add a media query for narrow views. I found another issue, this time in Safari, will PR. Or can revert, up to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7786#issuecomment-580067553:528,UX,UX,528,https://hail.is,https://github.com/hail-is/hail/pull/7786#issuecomment-580067553,1,['UX'],['UX']
Usability,"The latest changes adopt the ""happy medium"" of having at all times either 0 or 1 NativeModule; objects corresponding to each lib, and a worker may get a shared ptr to what was constructed as; a master NativeModule. . In either case, the constructor is responsible for checking that lib already exists, or populating; it if it didn't exist. The big_mutex is held during constructors, in a way which a) protects the; module_table, and b) makes the transition from ""no lib file"" to ""complete and immutable lib file""; appear atomic, whether that occurs by invoking the makefile, or by writing binary data. Consequently, the makefile is simplified to just build $(MODULE).so without worrying about; atomicity, and the perl rename goes away. The loading is now done eagerly in the worker constructor, but still lazily for master-constructed; NativeModule's, since the most common lifecycle for a master is to construct it, do getKey, getBinary,; then throw it away without needing to load it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4211#issuecomment-417031457:632,simpl,simplified,632,https://hail.is,https://github.com/hail-is/hail/pull/4211#issuecomment-417031457,1,['simpl'],['simplified']
Usability,The other issue is I'm getting a small negative value for the first time point on CPU. Not sure how to fix that. Maybe we just ignore it for now? Or revert back to the simpler code where we omit the first timepoint? Although I don't know how to represent NaN in binary data if we keep the first memory timepoint.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11368#issuecomment-1058213280:168,simpl,simpler,168,https://hail.is,https://github.com/hail-is/hail/pull/11368#issuecomment-1058213280,1,['simpl'],['simpler']
Usability,"The problem I saw was this:. ToStream's invariant is that its children must be TIterable. Given this invariant, in boundary it is not safe to call ToArray on streamified when streamified.isInstanceOf[TStream] and node.typ.isInstanceOf[TArray], because this will miss cases (potentially) when node is a different TIterable, and likewise it is not safe to call ToArray on streamified when node.typ.isInstanceOf[TIterable], because we may inadvertently cast a non-array TIterable to TArray, and thereby break boundary's type invariance. So everywhere that we add a ToStream, we need to perform a check on the child: if it's a non-TArray TIterable, return it, else wrap in ToArray, unless we can be sure we never perform said wrap on a TIterable when streamify is called from boundary. . In the latest commit, I simplified the toStream code, and improved the type check to check not TContainer, but (TIterable && !TStream). This is more precise that checking TContainer alone. That being said I haven't created a convincing test yet (though it's trivially easy to make *a* test: pass a ToStream wrapping a node with typ TDict to boundary, with the old check on boundary, and a TIterable check-before-wrap-in-ToStream in the base case of streamify). However, I don't think we can avoid the condition you don't like in `boundary` without changing ToStream's child-type invariant to TArray.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586553403:808,simpl,simplified,808,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586553403,1,['simpl'],['simplified']
Usability,"The simpler version is slower, but in the python test, not by a large amount (previous version was, in this test 23.8s or so, although Scala benches may show a larger difference). {""config"": {""cores"": 1, ""version"": ""0.2.28-7888aeb97570"", ""timestamp"": ""2019-12-04 02:07:13.182303"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""make_ndarray_bench"", ""failed"": false, ""timed_out"": false, ""times"": [28.613776744999996, 28.361242108, 28.481231283]}]}. So 20% slower. I would prefer to use longs, because it doesn't feel right to me to leave performance on the table, however I'm ok with this tradeoff if you find it aligns with your goals better. ; - Regarding longs, to deal with alignment: right now we assume we're int aligned. To read longs, could we read the first 4 bytes as an int, then switch to longs, then do bits for the remaining length. Should be as terse. edit: I propose to put the unstaged version for a later time, but can do now as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561510056:4,simpl,simpler,4,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561510056,1,['simpl'],['simpler']
Usability,"There are a few small cosmetic changes in here that were a result of an updated pylint, but I put those in a separate commit to hopefully make that less confusing. There are a few follow-ups after this that I want to tackle; - simplifying the images for testing query (Dockerfile.hail-build, Dockerfile.hail-base, Dockerfile.hail-run). I think these are the only things that use `base_image` so we might be able to collapse a bunch of these; - updating to python 3.8 to avoid accidentally installing that in some of our images; - trying to produce eStargz images so that buildkit can lazily pull the base image when building new images. I hope that can bring some image build times down even further by not having to localize the installed pip dependencies when making changes to our python code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12578#issuecomment-1458470548:227,simpl,simplifying,227,https://hail.is,https://github.com/hail-is/hail/pull/12578#issuecomment-1458470548,1,['simpl'],['simplifying']
Usability,"There are some tiny formatting issues and typos, but the main thing is to add an short examples section in docs that makes clear what this is useful for. I'd put one example for INFO field and one for FORMAT field. For other commands for format, like:; https://hail.is/hail/hail.VariantDataset.html#hail.VariantDataset.pca",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1373#issuecomment-279790111:123,clear,clear,123,https://hail.is,https://github.com/hail-is/hail/pull/1373#issuecomment-279790111,1,['clear'],['clear']
Usability,"There is a [known issue](https://github.com/moby/moby/issues/41792) with the official Docker deb. If you uninstall docker and re-install it later, it might fail to start. The root cause is the `docker.socket` `systemd` unit failing to start because there are ""insufficient file descriptors available"". I think this is confusing verbiage. The socket's name must be `/var/run/docker.sock`. Clearly, if that filename is already in use, we cannot create a new socket at that filename. One of Google's [""Dataproc components""](https://cloud.google.com/dataproc/docs/concepts/components/overview) is Docker. I believe Google installed and then uninstalled docker in this image, thus leaving it in the broken state. For evidence of that:. <details>; <summary> find docker on a worker node of a *non-Hail* Dataproc cluster</summary>. ```; sudo find / -iname '*docker*'; ```. ```; /opt/conda/miniconda3/pkgs/dbus-1.13.6-h5008d03_3/info/recipe/patches/0004-disable-fd-limit-tests-not-supported-in-docker.patch; /opt/conda/miniconda3/pkgs/nbclassic-0.5.6-pyhb4ecaf3_1/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/nbclassic-0.5.6-pyhb4ecaf3_1/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/pkgs/notebook-6.2.0-py38h578d9bd_0/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/nbclassic/static/components/codemirror/mode/dockerfile/dockerfile.js; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile; /opt/conda/miniconda3/lib/python3.8/site-packages/notebook/static/components/codemirror/mode/dockerfile/docker",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751:388,Clear,Clearly,388,https://hail.is,https://github.com/hail-is/hail/issues/12936#issuecomment-1709120751,1,['Clear'],['Clearly']
Usability,"There is occasional use of this in other projects, e.g., gnomad_methods (`SimpleRichProgressBar` in this case). Do you consider these classes to be part of the API? Was it intended to rename these without any compatibility shim, e.g., having the old names as aliases for a while?. It's not the end of the world and gnomad_methods has already updated accordingly. It does however mean that older gnomad_methods is only compatible with hail ≤ 0.2.125 and newer gnomad_methods is only compatible with hail ≥ 0.2.126, which is an otherwise unnecessary lock-step restriction. ETA: gnomad_methods have now updated by removing the (apparently unused) progress bar reference, so now newer gnomad_methods is compatible with hail both ≤ 0.2.125 and ≥ 0.2.126 again. So this is no longer a significant problem for gnomad_methods, but remains FYI.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13832#issuecomment-1788106993:74,Simpl,SimpleRichProgressBar,74,https://hail.is,https://github.com/hail-is/hail/pull/13832#issuecomment-1788106993,2,"['Simpl', 'progress bar']","['SimpleRichProgressBar', 'progress bar']"
Usability,"There may also be a way of handling the intended effect using alpha blending, but this works and is a simple fix.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-644687247:102,simpl,simple,102,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-644687247,1,['simpl'],['simple']
Usability,"There's more work to be done here. This adds a new route to the batch UI for getting a certain job group within a batch. It then, instead of listing all jobs, only lists the jobs that belong directly to the currently viewed job group and also shows the child job groups of the current job group. When picking up this PR I would make sure to go through the Batch development tutorial to make sure you are familiar with dev deploying. Then, read [this](https://github.com/hail-is/hail/blob/main/dev-docs/development-process.md#alternatives-to-dev-deploy) to learn about all the ways you can avoid dev deploying 😄 . If you are only making tweaks in the HTML templates, you don't need to keep deploying for every little change. Instead, run. ```bash; make devserver SERVICE=batch; ```. in your terminal and you'll get a local server that proxies the Batch that your `hail` installation is pointed to. You can then make changes to HTML and refresh your browser to see the results. Note that this is just rendering the HTML locally, and will have any effect on what's deployed, meaning you can't use it for python changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14600#issuecomment-2239854998:556,learn,learn,556,https://hail.is,https://github.com/hail-is/hail/pull/14600#issuecomment-2239854998,1,['learn'],['learn']
Usability,"These are good thoughts. I agree that a visually clean format will make the guides easier for people to use. I like the idea of hiding the explanation underneath a clickable thing. I'd be hesitant to completely remove the explanatory text, because I think people will be more likely to use the how-to guides than to go through an entire tutorial, but making it optional is a good middle-ground. I can experiment on one of the files, before I do them all, so we can settle on a good format.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4089#issuecomment-411940112:76,guid,guides,76,https://hail.is,https://github.com/hail-is/hail/pull/4089#issuecomment-411940112,2,['guid'],['guides']
Usability,"These examples suggest to me that the main problem is loss of type specificity in the substituted type. As for digging through the fields of `TVariant`, I personally am not bothered by `vt.gr.inXPar _`. I don't see any simple way to preserve the fact that `vt` will be a `TVariant`. I'll modify it to the approach you suggested.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2226#issuecomment-334178886:219,simpl,simple,219,https://hail.is,https://github.com/hail-is/hail/pull/2226#issuecomment-334178886,1,['simpl'],['simple']
Usability,"Things aren't really consistent, so there's no clear pattern to follow. I'm happy to mimic python set/list functionality",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1491#issuecomment-284746931:47,clear,clear,47,https://hail.is,https://github.com/hail-is/hail/pull/1491#issuecomment-284746931,1,['clear'],['clear']
Usability,"This PR implements the beginning of the EmitCode and CodeBuilder change discussed here: https://dev.hail.is/t/on-the-subject-of-emittriplet/183/7. The codegen rule for ArrayRef is now the delightfully clear and concise:. ```; EmitCode.fromI(mb) { cb =>; emit(a).toI(cb).flatMap(cb) { (ac) =>; emit(i).toI(cb).flatMap(cb) { (ic) =>; val av = ac.asIndexable.memoize(cb, ""aref_a""); val iv = cb.memoize(ic.tcode[Int], ""aref_i""). cb.ifx(iv < 0 || iv >= av.loadLength(), {; cb._fatal(errorTransformer(; const(""array index out of bounds: index=""); .concat(iv.toS); .concat("", length=""); .concat(av.loadLength().toS))); }); av.loadElement(cb, iv); }; }; }; ```. Summary of changes:. Introduce CodeBuilder. CodeBuilder allows for the imperative, sequential construction of code. The idea is that it is the imperative analog of Code[Unit]. In this analogy, a function returning Code[Unit] becomes a function that takes a CodeBuilder, alternatively, a Code[Unit] can become a CodeLabel: the place to jump to run a given computation. In addition to CodeBuilder, I have a imperative implementation of EmitCode that is similar to the proposal in the dev post: IEmitCode. Under the above analog, the proposal in the dev post would become:. ```; trait IEmitCode {; def apply(missing: (CodeBuilder) => Unit, present: (CodeBuilder, PValue) => Unit): Unit; }; ```. However, I took the additional step of ""defunctionalizing"" this picture by using labels instead of functions of code, giving:. ```; case class IEmitCode(Lmissing: CodeLabel, Lpresent: CodeLabel, pc: PCode) {; ...; }; ```. In this model, the emit function will become: `Emit.emit(cb: CodeBuilder, ...): IEmitCode`. The discipline is after calling `emit`, the contents of the code builder, when executed, will jump to one of `Lmissing` or `Lpresent` (labels which are not defined yet) and the consumer can define those labels, and use the expression `pc` in the code after the `Lpresent` label only. Because obviously I haven't converted everything to the i",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8245#issuecomment-600899413:201,clear,clear,201,https://hail.is,https://github.com/hail-is/hail/pull/8245#issuecomment-600899413,1,['clear'],['clear']
Usability,"This change achieves the effect you desire. What I additionally need from this PR is a mental model of why this change works. This change specifies a pixel ratio of two when the device's physical:css pixel ratio is one, but uses the device's pixel ratio otherwise. This breaks my conceptual model. It's important for us all to share compatible models of what the code does so that we all are able to manipulate the code in the future. I think there's a few moving pieces and if we can get a handle on them all, we'll all agree on what the right fix is. AFAICT, three js is built on WebGL. The MDN recommends not using a WebGL `lineWidth` other than one because of inconsistent (or lack of) support for line widths other than one. You observe that `pixelRatio` affects the visual behavior, at least in Safari, when the lineWidth is set to 0.25. In particular, when the pixel ratio is set to `2` and the lineWidth is set to `0.25`, the lines appear thinner. If the pixel ratio is higher than the device pixel ratio, something must be interpolating to device pixels. It seems to me that relying on this interpolation behavior will lead to code that is more difficult to understand and manipulate. If the intention is to make the lines less striking, can we apply an alpha filter instead? Is there another simple & consistent-across-platforms solution?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-645569518:1302,simpl,simple,1302,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-645569518,1,['simpl'],['simple']
Usability,"This change fixes a huge problem caused by these lines of code and context:. https://github.com/hail-is/hail/pull/6605/files#diff-1278c1788239002cc63ccb82cbef8d76L190. The problem is that in our generated code, every literal is decoded *each time any literal is referenced*. This is **extremely** expensive! . In this change, we instead decode the literals once with the function is constructed from the partition index (used with randomness), by adding a new region argument which the literals are decoded into. This region must live as long as the RegionValues returned by any invocation of the function. The primary error mode I might expect is that we use the wrong region to generate the function, causing use-after-free errors. These are well-covered by tests, since I had a few of these bugs and fixed them due to test failures. The region we *shouldn't* be using is `ctx.region`, which refers to `RVDContext.region`, the per-row region that is cleared after each record. `ctx.r` (the global execution context region) and `ctx.freshRegion` (a partition-owned global region, generally named `globalRegion` or `partRegion`) are safe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6605#issuecomment-510677139:952,clear,cleared,952,https://hail.is,https://github.com/hail-is/hail/pull/6605#issuecomment-510677139,1,['clear'],['cleared']
Usability,"This doesn't necessarily fix the problem, but I think they are good changes in the direction of what we know. It passed test_{batch, pipeline} on the first try, so that's a good sign. What I did:. 1. Lock down Job state transitions. Now only set_state and _mark_job_task_complete change _state, and they log identically. Explicitly enumerate the valid state transitions are check them in each function. Slightly clarified the transitions around Pending. Now Pending can only go to Ready. 2. If a state update fails (the Python object is stale), throw JobStateWriteFailure. If we have a stale picture, we clearly don't want to be doing anything else. 3. Handle a few more cases in update_job_with_pod: a pod without a job or a job that shouldn't have one, and a cancellable pod that hasn't been cancelled yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6618#issuecomment-510731707:604,clear,clearly,604,https://hail.is,https://github.com/hail-is/hail/pull/6618#issuecomment-510731707,1,['clear'],['clearly']
Usability,This has diverged significantly and contains parts of some changes to handling hailgenetics images that was handled in separate PRs. Closing in favor of #12446 which is much simpler.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11797#issuecomment-1314533333:174,simpl,simpler,174,https://hail.is,https://github.com/hail-is/hail/pull/11797#issuecomment-1314533333,1,['simpl'],['simpler']
Usability,This is a great simplification. I'm on board,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673712560:16,simpl,simplification,16,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673712560,1,['simpl'],['simplification']
Usability,"This is a lot simpler, I'll try to run this tomorrow morning.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1803234894:14,simpl,simpler,14,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1803234894,1,['simpl'],['simpler']
Usability,"This is at a place where people could look. Currently plan is to implement storeShallow on every PType separately (could keep all in PType for convenience initially). Majority of functionality: https://github.com/hail-is/hail/pull/7639/files#diff-2cba834adc6803ff8b274f8634bb46c0R394; ; # TODO:. - [x] Implement deep copy; - [ ] Implement for things that are not PCanonicalArray or PArrayBackedContainer; - [ ] Non-staged version; - [ ] More tests. cc @patrick-schultz, @catoverdrive, @danking for feedback",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7639#issuecomment-568135072:498,feedback,feedback,498,https://hail.is,https://github.com/hail-is/hail/pull/7639#issuecomment-568135072,1,['feedback'],['feedback']
Usability,"This is caused by domain-by-domain CSRF tokens introduced in [#14180](https://github.com/hail-is/hail/issues/14180). An unfortunate side effect is that the tokens available on non-auth pages are no longer able to validate requests to the auth/logout API. Given the lack of apparent noise about this bug in our issues and zulip I suspect that this is not a common path for users, and that a fix along the lines of ""require add one button click to go to the User page first before logging out is acceptable"". On the other hand, the risk of a user clicking on the broken Logout button and believing themselves to be logged out when seeing a `401: Unauthorized` page (but actually still having logged-in state in their browser) raises this in my mind to a security bug rather than just a UX bug or an unfortunate user experience. Therefore my proposal is:; 1. To fix the bug as soon as possible; 2. Accept an additional redirect in a user flow which is rarely exercised; 3. To make the smallest number of potentially risky changes to the underlying security architecture; 4. Therefore: Remove the broken ""log out"" link in page headers and replace with a Log out button on the auth[...]/users page which is guaranteed to have the correct CSRF token in state.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14635#issuecomment-2253086187:784,UX,UX,784,https://hail.is,https://github.com/hail-is/hail/issues/14635#issuecomment-2253086187,2,"['UX', 'user experience']","['UX', 'user experience']"
Usability,"This is caused by the circularity in the import chain. Imports need to be a directed acyclic graph. The simplest fix seems to be to define `schedule_job` in `pool.py`, the only place it is used.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9832#issuecomment-758162781:104,simpl,simplest,104,https://hail.is,https://github.com/hail-is/hail/pull/9832#issuecomment-758162781,1,['simpl'],['simplest']
Usability,"This is indeed tricky, but I think there are other options here. For example, we could expand the spec so that a job specifies *either* a job_id or update_relative_job_id, and same for parents. This way the relative vs absolute job id is baked into the schema of the spec, and not inferred from the sign of the job id. Though similar in concept, I think that would be much less confusing. However,. > We can simplify things if we require all updates make two requests to the server to (1) get the start id and establish the update and then (2) submit new jobs with all absolute job IDs. I'd like to try this first. I feel like if we get a really solid API and it has a couple of superfluous requests in some edge cases, we will be able to come up with good performance shortcuts that don't muddle the normal path. Since the Query Driver currently lives the full life of the batch and is likely to stay that way for a while, it will satisfy these conditions without making any extra requests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1215951685:408,simpl,simplify,408,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1215951685,1,['simpl'],['simplify']
Usability,"This is more clear to me, thanks Tim! Would it be worth explaining why it's called as `hail.init()` vs say `hail.context.init()` or `HailContext()`? Knowing the chain of custody makes this indirection feel less magical to me. ```python; // Instantiates the HailContext class, unless called with dempotent == True; // Calls def __init__ ; // Imported in hail/__init__.py for use as hail.init() ; ```. Also, wondering if it makes sense to uses/benefits of treating as singleton, though that may be for a different pr.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4987#issuecomment-448319952:13,clear,clear,13,https://hail.is,https://github.com/hail-is/hail/pull/4987#issuecomment-448319952,1,['clear'],['clear']
Usability,"This is not because we forgot to unfreeze CI, we just have simply never added the dockerhub images to azure automatically. The couple that are there now (only 107 and 112) must have been uploaded manually. Because there are some build.yaml steps that run on deploy that are specific to the broad GCP instance (like maybe making a release), non-hail-vdc instances don't run the whole build.yaml pipeline on deploy, but a subset that are specified through terraform (this is how AUS and MS could decide to only deploy a subset of our services e.g. not monitoring. We somewhat recently added a step (separate from the `deploy` step) called `mirror_hailgenetics_images` that was entirely intended so that other hail deployments (including ourselves on Azure!) could pick up the images that we released to dockerhub. I never added that steps to the Azure CI's config. I have done that now. Somehow I had foreseen this incident happening and when it actually did any prior on it disappeared from my brain entirely.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1572657390:59,simpl,simply,59,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1572657390,1,['simpl'],['simply']
Usability,"This is on the radar, so I vote for closing this issue. We're using issues for bugs, and this seems more in the realm of a feature request / usability improvement.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9226#issuecomment-672877232:141,usab,usability,141,https://hail.is,https://github.com/hail-is/hail/issues/9226#issuecomment-672877232,1,['usab'],['usability']
Usability,"This is super cool! I am a big fan of the idea and the overall approach, particularly when it comes to setting up the tmp bucket and getting the permissions on it correct. Here's my high level thoughts. Sorry for the wall of text but I found these a little hard to articulate. ### Regarding number of prompts. I think this is my primary concern. There's a lot of great automation here, but it's a lot right off the bat. I think what this is aiming to do is make it quick and simple to start running batches and every time someone has to stop and ask someone a question as to how they should respond to some prompt that process gets longer and more complicated. I think it's worth considering what the first batch people should run might be and design for a minimal first experience. IMO, a temp bucket is an absolutely crucial piece of configuration before you can do anything interesting and configuring a temp bucket is something that `hailctl` can easily be very opinionated about. Container registry… I feel like there's harder questions there, and you can run a lot of cool batches before having to worry about provisioning your own. It's also not actually a part of the hailctl config (unless something has changed recently) so it feels a little unusual in this flow. I still think that it is helpful to set people up with an AR and keep them from footguns, but maybe that can go in a separate command that the initial init command points to once you're done? Something along the lines of ""if you get to the point where you need to upload custom container images, you can use hailctl to set up a registry""?. Another thing that gives me a little pause is the wording around google projects. I get that you need one to create a bucket, but I think we should just make sure to steer clear of the implication that you are ""selecting a GCP project to use for Hail Batch"", because that implies some link or ownership that isn't there. But I think there's a quick fix here: for a given resource that we",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012:475,simpl,simple,475,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012,1,['simpl'],['simple']
Usability,"This is very nice! I didn't know some of things about the 0.1 days. I agree with John's comments, though I think it's worth making explicit whether a given Tour of Hail Query is for Scientists or Software Engineers. I think you're proposing the latter? Also, a stylistic nitpick but I find bullet-delimited sentences quite difficult to read, and think it might be clearer to drop the ands and commas at the end of the bullets.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10020#issuecomment-776811671:364,clear,clearer,364,https://hail.is,https://github.com/hail-is/hail/pull/10020#issuecomment-776811671,1,['clear'],['clearer']
Usability,"This looks like good start. A few comments:; - I prefer using MySQL over auth0 mainly because it simplifies our eventual backup/restore story. If you think that's simpler overall, great. I don't see how integrating our db with their service does anything for us.; - I assume you're planning to pull the user data from MySQL during the login flow and add it to cookie? I think @danking @jigold and I are interested in nailing down the format for the cookie and seeing an example.; - I agree with @danking we should have an internal id field that's an integer. I think we should use that everywhere, and just use the auth0 id to look up the user record during login. So the integer id would be the primary key and the auth0 id would be unique with a secondary index.; - You need to get the GCP service account key and store it in a secret.; - The GCP service account needs permissions on the bucket. It should be bucket writer.; - Name ""user_secrets"" seems overly specific (buckets and service accounts are not secrets). ""user_data""?; - Please don't give the database a public IP.; - From a usability perspective, for user-visible names I have to say I really dislike long uuids and like the k8s-style short random string at the end. For k8s resource, you get this for free with the `generate_name` argument. For other stuff, long-term, this will potentially require retry logic to make it robust.; - I don't like this create table logic (FYI @danking @jigold). Most database users should not have permissions to create databases. There should be a k8s secret with the database root and a secret for each specific database application that only has access to that database.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473583731:97,simpl,simplifies,97,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473583731,3,"['simpl', 'usab']","['simpler', 'simplifies', 'usability']"
Usability,"This more or less follows the same strategy as the python splitting. Instead of each job figuring out which split it owns, I create 5 separate testng.xml files in `build_hail`. Each job reads one of those files. testng.xml has a pretty simple XML format and you can explicitly list the classes of interest. I noticed that hail java tests were up to 15 minutes which was really cramping my PR merging style. With this, some of the splits are a minute or two. I think we suffer a bit from programmatically generated tests since I'm splitting at the granularity of classes rather than methods, or, even better, generated methods.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9139#issuecomment-663248573:236,simpl,simple,236,https://hail.is,https://github.com/hail-is/hail/pull/9139#issuecomment-663248573,1,['simpl'],['simple']
Usability,This need substantial work. I will create a new PR which revamps import_matrix_table to be simpler and to correctly handle glob patterns.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12299#issuecomment-1304287294:91,simpl,simpler,91,https://hail.is,https://github.com/hail-is/hail/pull/12299#issuecomment-1304287294,1,['simpl'],['simpler']
Usability,"This proposal mounts to programming with explicit continuations. It doesn't increase the expressiveness of the loop construct that I can see. Our users are reluctant enough to learn functional programming, I think continuations is one step too far for the user interface. Internally, I don't care as much, although personally I would prefer to code up my solution. @catoverdrive's doing the work, so I'll let them decide. > As a side note, @iitalics stream emitter. Ah, I thought @catoverdrive was referring to IR level streams.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-559099522:176,learn,learn,176,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-559099522,1,['learn'],['learn']
Usability,"This seems very simple, I'm just not sure how to modify the job creation to do what we want it to. https://github.com/hail-is/hail/blob/86f21400e3f2ac127f084f15ab72594a6add6f15/hail/python/hailtop/batch/backend.py#L799-L807",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13816#issuecomment-1775716804:16,simpl,simple,16,https://hail.is,https://github.com/hail-is/hail/issues/13816#issuecomment-1775716804,1,['simpl'],['simple']
Usability,This should now be cleared to merge. I might need to go dismiss all of these alerts on `main` once that merges the first time. Let's leave it on for a bit and assess how much of a headache it is.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12269#issuecomment-1272065133:19,clear,cleared,19,https://hail.is,https://github.com/hail-is/hail/pull/12269#issuecomment-1272065133,1,['clear'],['cleared']
Usability,This uses an undocumented feature. It can wait for a little while.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6629#issuecomment-511021715:13,undo,undocumented,13,https://hail.is,https://github.com/hail-is/hail/pull/6629#issuecomment-511021715,1,['undo'],['undocumented']
Usability,"Though running: `pprint(dict(os.environ.items()))`, yielded:. ```; {'CLICOLOR': '1',; 'GIT_PAGER': 'cat',; 'HOME': '/root',; 'INVOCATION_ID': '0faec80a970f4cf29ce69112519fe641',; 'JOURNAL_STREAM': '8:38888',; 'JPY_PARENT_PID': '5858',; 'LANG': 'en_US.UTF-8',; 'LOGNAME': 'root',; 'MPLBACKEND': 'module://ipykernel.pylab.backend_inline',; 'PAGER': 'cat',; 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',; 'SHELL': '/bin/sh',; 'SPARKMONITOR_KERNEL_PORT': '38853',; 'TERM': 'xterm-color',; 'USER': 'root'}; ```. which does not include the environment variable you added saying to use the new thing, though that's clearly present in `init_notebook.py`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7087#issuecomment-532865823:634,clear,clearly,634,https://hail.is,https://github.com/hail-is/hail/pull/7087#issuecomment-532865823,1,['clear'],['clearly']
Usability,"Tim would you prefer RVD.unify to be separate from RVD.union, such that the caller controls upcast? Interface seems much simpler if RVD.union calls RVD.unify, but may result in unify being called too many times (if the caller unifies rvds, and doesn't realize that they also transitively call RVD.unify because some function the caller directly calls calls RVD.union)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8132#issuecomment-589323266:121,simpl,simpler,121,https://hail.is,https://github.com/hail-is/hail/pull/8132#issuecomment-589323266,1,['simpl'],['simpler']
Usability,"Tim, bug in the test fixed...but I'm not entirely clear why it should have caused an issue yet. In PBaseStruct.copyFromType, I was calling srcFieldType.storeShallowAtOffset instead of dstFieldType.storeShallowAtOffset, in a case where srcFieldType was +PCArray and dstFieldType was PCArray, aka:. ```scala; srcFieldType: +PCArray[+PInt32], dstFieldType: PCArray[PInt32]; ```. Where the invocation is:. ```scala; srcFieldType.storeShallowAtOffset(; this.fieldOffset(dstStructAddress, dstField.index),; dstFieldType.copyFromType(...); ```. The storeShallowAtOffset function on PCArray is stateless and identical between required and non-required PCArray instantiations:. ```scala; def storeShallowAtOffset(dstAddress: Code[Long], valueAddress: Code[Long]): Code[Unit] =; Region.storeAddress(dstAddress, valueAddress); ```. I don't have a clear idea why this issue occurred. Also, clearly not easily triggered, required PStruct(""bar"" -> PArray(PInt32(true),false) dest and PStruct(""bar"" -> PArray(PInt32(true),true) source, having the ""bar"" field be a primitive wouldn't do it (we had those tests)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958#issuecomment-578204878:50,clear,clear,50,https://hail.is,https://github.com/hail-is/hail/pull/7958#issuecomment-578204878,3,['clear'],"['clear', 'clearly']"
Usability,"Tim, if you're willing would like to keep this open (or make another issue), to track progress on Patrick/your proposal. Patrick walked me through it, and I like it. The proposal I had, although clearly not explained well, is similar in nature, and for educational reasons, would like to talk to you about it, to see pro's/cons (maybe next week?). Patrick's proposal diagram attached. I would like to implement this once this becomes a priority. ![IMG_6021](https://user-images.githubusercontent.com/5543229/72645429-a610d580-3941-11ea-8086-85fe1f8618a4.png)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7826#issuecomment-575791483:195,clear,clearly,195,https://hail.is,https://github.com/hail-is/hail/issues/7826#issuecomment-575791483,1,['clear'],['clearly']
Usability,"Timing is not clear, gonna try an LRU cache. I will close until I have time to work on it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3450#issuecomment-385008102:14,clear,clear,14,https://hail.is,https://github.com/hail-is/hail/pull/3450#issuecomment-385008102,1,['clear'],['clear']
Usability,"To be abundantly clear: this is strictly a rename. Originally I had some changes in Python, but I've backed them out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13594#issuecomment-1710921838:17,clear,clear,17,https://hail.is,https://github.com/hail-is/hail/pull/13594#issuecomment-1710921838,1,['clear'],['clear']
Usability,"To be clear `.select_globals()` fixes the problem, but...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3639#issuecomment-391115483:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/issues/3639#issuecomment-391115483,1,['clear'],['clear']
Usability,To be clear this is a straight copy-paste job.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14314#issuecomment-1949442248:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/14314#issuecomment-1949442248,1,['clear'],['clear']
Usability,To be clear this is just the *visual* output. The data is fine.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13512#issuecomment-1773467913:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/issues/13512#issuecomment-1773467913,1,['clear'],['clear']
Usability,"To be clear, I'm approving the Python code, and the fact that it runs to completion (will check for correctness shortly). Someone else might want to look over the Scala code changes)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3211#issuecomment-376013809:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/3211#issuecomment-376013809,1,['clear'],['clear']
Usability,"To be clear, I'm working on *aiohttp* project, not *Sanic*.; Regarding TechEmpower -- I did not investigate.; Maybe the problem is trivial, maybe it is fixed on master. ; IIRC Sanic has a partial Flow-Control/HTTP-Pipelining implementation now but I'm not 100% sure.; I have many points to apply my spare time, Sanic problems are not in my TOP-10 personal list. I hope you understand my position.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461451746:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461451746,1,['clear'],['clear']
Usability,"To be clear, all this does is encode in the types what we already guarantee: if version X returns `{'foo': int}`, then all future versions of the server must *at least* return a dict containing the `'foo'` key with an integer. If those servers start returning `{'bar': int}`, that would break all the old clients (and violate the types that we wrote in those clients).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13500#issuecomment-1693583847:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/13500#issuecomment-1693583847,1,['clear'],['clear']
Usability,"To be clear, not the link you provided, what the page (https://internal.hail.is/dking/site/index.html) pulls.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8923#issuecomment-639057471:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/8923#issuecomment-639057471,1,['clear'],['clear']
Usability,"Took a look, and not clear why this is an issue. They seem to track different information, with WatchedBranch relating to one branch/sha combination and PR relating to two (with also a sha for the PR itself). Also Code doesn't appear to define a concrete `code` implementation, at least as of now. If you can help me understand the issue, I'll attempt to address tonight.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6142#issuecomment-497841118:21,clear,clear,21,https://hail.is,https://github.com/hail-is/hail/issues/6142#issuecomment-497841118,1,['clear'],['clear']
Usability,"Two different tests: first running N linregs as separate aggregations, and the second running N linregs inside an array_agg. I suspect you're right that the first one is running into some kind of method size limit in the jit. Time 1 is master, Time 2 is this branch. ```python; @benchmark; def table_aggregate_linregN():; ht = hl.read_table(resource('many_ints_table.ht')); ht.aggregate(hl.tuple([hl.agg.linreg(ht[f'i{i%5}'],; [ht[f'i{(i+1)%5}'], ht[f'i{(i+2)%5}']]); for i in range(N)])); ```. ```quote; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_linreg20 101.2% 11.622 11.765; table_aggregate_linreg21 98.0% 11.964 11.730; table_aggregate_linreg22 22.2% 54.272 12.068; table_aggregate_linreg23 99.9% 54.989 54.939; table_aggregate_linreg24 101.7% 54.753 55.661; table_aggregate_linreg25 102.7% 55.902 57.422; ----------------------; Geometric mean: 78.3%; Simple mean: 87.6%; Median: 100.6%; ```. ```python; @benchmark; def table_aggregate_linregN():; ht = hl.read_table(resource('many_ints_table.ht')); ht.aggregate(hl.agg.array_agg(lambda i: hl.agg.linreg(ht.i0 + i, [ht.i1, ht.i2]),; hl.range(N))); ```. ```quote; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_linreg22 79.1% 10.609 8.389; table_aggregate_linreg23 79.0% 11.006 8.695; table_aggregate_linreg21 78.6% 10.559 8.295; table_aggregate_linreg25 77.2% 11.579 8.937; table_aggregate_linreg24 76.3% 11.520 8.793; table_aggregate_linreg20 75.7% 10.792 8.173; ----------------------; Geometric mean: 77.6%; Simple mean: 77.6%; Median: 77.9%; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-540058423:883,Simpl,Simple,883,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-540058423,2,['Simpl'],['Simple']
Usability,Two high-level comments:; - Here is the default documentation:. https://ci.hail.is/repository/download/HailSourceCode_HailCi/846:id/docs/index.html#exportaggregate. Some documentation of the output format and maybe and example or two (with and without `--by-matrix`) would be awesome.; - We need at least some testing. I think a simple aggregation on a small file that you verify by hand would be sufficient. I'll look over the code and let you know if I have additional comments.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/837#issuecomment-249244766:329,simpl,simple,329,https://hail.is,https://github.com/hail-is/hail/pull/837#issuecomment-249244766,1,['simpl'],['simple']
Usability,"Two small comments:; - make it clear the name/description tables are describing the scope of the corresponding expression. We might need to do this elsewhere in the documentation, too.; - I'd write `aIndices[newIndex] = oldIndex` just to make it clear you're talking about the indices, and not the alleles.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/551#issuecomment-240494452:31,clear,clear,31,https://hail.is,https://github.com/hail-is/hail/issues/551#issuecomment-240494452,2,['clear'],['clear']
Usability,"Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1296: >>> hl.eval(d.key_set()) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1312: >>> hl.eval(d.keys()) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1329: >>> hl.eval(d.map_values(lambda x: x * 10)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1366: >>> hl.eval(d.values()) # doctest: +NOTEST; Binary file /Users/dking/projects/hail/hail/python/hail/expr/expressions/__pycache__/typed_expressions.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/table.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/matrixtable.cpython-37.pyc matches; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:21: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:24: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:27: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:30: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:42: >>> hl.eval(hl.array([a, b, c])) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198:9157,guid,guides,9157,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198,1,['guid'],['guides']
Usability,"WIP solution. We need to fetch resources for job groups that have completed but have not been cancelled. ; The `job_groups` table describes if job group has been cancelled. Simply joining the job groups to `job_group_inst_coll_cancellable_resources` is prohibitively expensive due to explodes. My approach is to query for finished non-cancelled job groups from a last (batch, job) id then process records iteratively:. ```python; sql = """"""\; WITH T AS ( ; SELECT G.batch_id, G.job_group_id; FROM job_groups AS G ; INNER JOIN job_group_self_and_ancestors AS D; ON G.batch_id = D.batch_id; AND G.job_group_id = D.job_group_id; LEFT JOIN job_groups_cancelled AS C ; ON C.id = G.batch_id; AND C.job_group_id = D.ancestor_id ; WHERE G.batch_id >= ?; AND G.job_group_id > ?; AND G.time_completed IS NOT NULL; AND C.id IS NULL; ORDER BY G.batch_id ASC, G.job_group_id ASC; LIMIT 1000; ); SELECT group_resources.batch_id; , group_resources.update_id; , group_resources.job_group_id; , group_resources.inst_coll; , SUM(group_resources.n_creating_cancellable_jobs) AS n_creating_cancellable_jobs; , SUM(group_resources.n_ready_cancellable_jobs) AS n_ready_cancellable_jobs; , SUM(group_resources.n_running_cancellable_jobs) AS n_running_cancellable_jobs; , SUM(group_resources.ready_cancellable_cores_mcpu) AS ready_cancellable_cores_mcpu; , SUM(group_resources.running_cancellable_cores_mcpu) AS running_cancellable_cores_mcpu; , COUNT(*) as `count`; FROM job_group_inst_coll_cancellable_resources AS group_resources; INNER JOIN T USING (batch_id, job_group_id); GROUP BY group_resources.batch_id; , group_resources.update_id; , group_resources.job_group_id; , group_resources.inst_coll;; "". last_batch_id = 0; last_job_group_id = -1. while True:; rows = db.execute(sql, [last_batch_id, last_job_group_id]); ; if not rows:; break. for r in rows:; if r.count > 1:; delete records from job_group_inst_coll_cancellable_resources where token > 0; update record with accumulated result in r; ; last_batch_id = r.bat",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14623#issuecomment-2253530481:173,Simpl,Simply,173,https://hail.is,https://github.com/hail-is/hail/issues/14623#issuecomment-2253530481,1,['Simpl'],['Simply']
Usability,Waiting for guidance from htsjdk team on how to replace the deprecated method `Allele.acceptableAlleleBases`. https://github.com/samtools/htsjdk/issues/1623,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12229#issuecomment-1266123134:12,guid,guidance,12,https://hail.is,https://github.com/hail-is/hail/pull/12229#issuecomment-1266123134,1,['guid'],['guidance']
Usability,We added `simpleAssert`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/39#issuecomment-235158444:10,simpl,simpleAssert,10,https://hail.is,https://github.com/hail-is/hail/issues/39#issuecomment-235158444,1,['simpl'],['simpleAssert']
Usability,We could add a warning to the docs to make it even clearer.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3912#issuecomment-403844335:51,clear,clearer,51,https://hail.is,https://github.com/hail-is/hail/pull/3912#issuecomment-403844335,1,['clear'],['clearer']
Usability,"We need to stop this because the oomkiller (a) acts before the JVM GC can free things and (b) prevents us from getting JVM diagnostics on failure. We control the JVM's max heap with hailctl's --master-memory-fraction (default is 0.8 for 80% of the master machine type's advertised RAM). I suggest we set this down to 0.6 and continue using an n1-highmem-16 driver.; If Hail is (incorrectly) accumulating garbage memory per-group, we'll have a better chance diagnosing that with a running JVM instead of one that's been SIGKILL'ed. To understand what's going on, we gotta see what is using RAM in the n1-highmem-16 case. If I could SSH to the cluster, a simple solution is a screen with top -s 300 -n 100 >memory.log (I'd guess no more than 500KiB per hour of logs) and retrieve that file if the cluster fails. If we could get Google Monitoring set up to retrieve process-level memory statistics from the driver node that should also work. Just to be clear, I don't anticipate any changes to Hail in the next week that would change the memory use of this pipeline. There could be a memory leak, but I have no clews that lead to it. I realize this is an unsatisfying answer. I'm pretty perplexed as to what could be the issue here. #### technical details. We'll call the second to most recent run Run A and the most recent run Run B. Run A (like all runs before it) only manages two sample groups before failing. Run B made it through 50 groups before failing on 51. Why did they fail? The syslog for Run A is clear: the oomkiller killed Run A. We lack syslogs for Run B, so we cannot be certain but the lack of a JVM stack trace suggests to me that (a) the driver failed and (b) the driver was killed by the system.; Let's focus on the driver machines. In Run A, we used an n1-highmem-8 which is advertised to have 52GiB (53248 MiB). In Run B, we used an n1-highmem-16 which is advertised to have 104GiB (106,496 MiB). hailctl sets the JVM max heap size to 80% of the advertised RAM, so 42598 MiB (see ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449:1264,clear,clear,1264,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449,1,['clear'],['clear']
Usability,"We run this query to get fair share values per user:. ```; SELECT user, CAST(COALESCE(SUM(n_cancelled_running_jobs), 0) AS SIGNED) AS n_cancelled_running_jobs; FROM user_inst_coll_resources; GROUP BY user; HAVING n_cancelled_running_jobs > 0;; ```. This query will return 0 even though there could be attempts still running. Plus these queries only look at running batches. ```; async for batch in self.db.select_and_fetchall(; '''; SELECT id; FROM batches; WHERE user = %s AND `state` = 'running' AND cancelled = 1;; ''',; (user,),; timer_description=f'in cancel_cancelled_running_jobs: get {user} cancelled batches'):; async for record in self.db.select_and_fetchall(; '''; SELECT jobs.job_id, attempts.attempt_id, attempts.instance_name; FROM jobs FORCE INDEX(jobs_batch_id_state_always_run_cancelled); STRAIGHT_JOIN attempts; ON attempts.batch_id = jobs.batch_id AND attempts.job_id = jobs.job_id; WHERE jobs.batch_id = %s AND state = 'Running' AND always_run = 0 AND cancelled = 0; LIMIT %s;; ''',; (batch['id'], remaining.value),; timer_description=f'in cancel_cancelled_running_jobs: get {user} batch {batch[""id""]} running cancelled jobs'):; record['batch_id'] = batch['id']; yield record; ``` . I'll think about whether I can combine these queries over the attempts. However, it seemed clearer to me to look for two different things as the other queries are optimized by looking at the batch and job state where the orphaned query doesn't care about fair share or the batch / job state..",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10071#issuecomment-783583573:1294,clear,clearer,1294,https://hail.is,https://github.com/hail-is/hail/pull/10071#issuecomment-783583573,1,['clear'],['clearer']
Usability,"We should discuss the struct ordering in person. I think there are orderings that can be defined on the space of all tuples (since the names don't matter) of arbitrary lengths, which are very helpful in working with changing keys and partition keys. In principle, it should be easy to repartition an OrderedRVD with a longer partition key to a partitioner with a shorter partition key, but currently that doesn't look simple to do. I tried to lay the groundwork here to make that trivial.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3159#issuecomment-373723920:418,simpl,simple,418,https://hail.is,https://github.com/hail-is/hail/pull/3159#issuecomment-373723920,1,['simpl'],['simple']
Usability,"We use feature flags to communicate requester pays information to the service backend.; In this change, I've made the local backend do the same to make a future refactoring simpler.; I intend to follow up this change that'll split config from feature flags.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14407#issuecomment-1998508308:173,simpl,simpler,173,https://hail.is,https://github.com/hail-is/hail/pull/14407#issuecomment-1998508308,1,['simpl'],['simpler']
Usability,We'll test this when we add keytable random gens. For now I think this is a clear fix,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1972#issuecomment-316468753:76,clear,clear,76,https://hail.is,https://github.com/hail-is/hail/pull/1972#issuecomment-316468753,1,['clear'],['clear']
Usability,"Well, fraction reads supporting that alternate allele (`1-Ref` for the bi-allelic case, but not necessarily for the multi-allelic) - but that's possibly a separate discussion. GQ histogram I think is a simple application here. For each variant, a histogram of GQs - I think `gs.hist()` is the right idea though yes (this is an idea, does not exist yet, right?)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/509#issuecomment-237703639:202,simpl,simple,202,https://hail.is,https://github.com/hail-is/hail/issues/509#issuecomment-237703639,1,['simpl'],['simple']
Usability,"What do you mean specifically? Code-wise? If you're asking how I feel about the code, I think the change is clear now, but it's a bit verbose. I think it was more readable without all of the `_mcpu` extensions, but was also more confusing that way. . I had an idea that I tried to implement earlier where we had a class `Cores` that internally represented the cores as mCPU but then printed everything in CPU when referenced. That could have worked but I had to be careful with how I overrode all of the mathematical operations. I thought this was overkill for the problem so I abandoned it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7241#issuecomment-541195142:108,clear,clear,108,https://hail.is,https://github.com/hail-is/hail/pull/7241#issuecomment-541195142,1,['clear'],['clear']
Usability,"What do you think about simplifying the name to `annotation`? I think that's just as clear as `annotationFromRG`, especially as the RG is optional.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3062#issuecomment-370081471:24,simpl,simplifying,24,https://hail.is,https://github.com/hail-is/hail/pull/3062#issuecomment-370081471,2,"['clear', 'simpl']","['clear', 'simplifying']"
Usability,What do you think of setting the auto increment to 0 for the region id? I think that will make the bit shift operations clearer and less vulnerable to mistakes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1277915822:120,clear,clearer,120,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1277915822,1,['clear'],['clearer']
Usability,"What kind of feedback would you like? At a high-level, I think constructing these URLs and embedding links like this into the PR page is a great idea. Love how little code it takes to do this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13744#issuecomment-1739576643:13,feedback,feedback,13,https://hail.is,https://github.com/hail-is/hail/pull/13744#issuecomment-1739576643,1,['feedback'],['feedback']
Usability,What should we do about testing Cassandra? We need an `annotatevariants cass` as well I think. This stuff looks good though (awesome that it can be so simple!),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/282#issuecomment-208341414:151,simpl,simple,151,https://hail.is,https://github.com/hail-is/hail/pull/282#issuecomment-208341414,1,['simpl'],['simple']
Usability,"When I run copy inside a batch job to copy some files, it's really annoying to get no feedback at all.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11776#issuecomment-1101494934:86,feedback,feedback,86,https://hail.is,https://github.com/hail-is/hail/pull/11776#issuecomment-1101494934,1,['feedback'],['feedback']
Usability,"While we're making breaking changes to the `hailctl` interface... there is a beta feature to start/stop Dataproc clusters. Once this is released, it could create some confusion that `hailctl dataproc start` runs `gcloud dataproc clusters create` instead of `gcloud dataproc clusters start`. Likewise for `hailctl dataproc stop` and `gcloud dataproc clusters delete`. Should we rename `hailctl dataproc` start/stop to create/delete?. https://cloud.google.com/dataproc/docs/guides/dataproc-start-stop",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-767171070:472,guid,guides,472,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-767171070,1,['guid'],['guides']
Usability,"Whoa, it worked. I included one change that might have warranted re-review. I was getting errors becomes some Jobs, on which delete had been called, were still being used. I tracked it down to a recent cancel => delete change in `PR.update_from_completed_batch_job`. If look at that function, it is clear delete is not OK because in several cases the build object keep a handle to the job. I reverted it, and now clear all the fields of Job when it is deleted. https://github.com/hail-is/hail/pull/5655/files#diff-433f83d97fa8a526a3f8cff52590e422R479; https://github.com/hail-is/hail/pull/5655/files#diff-0c1f876ad25335b076837f768f727566R59",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5655#issuecomment-475474180:299,clear,clear,299,https://hail.is,https://github.com/hail-is/hail/pull/5655#issuecomment-475474180,2,['clear'],['clear']
Usability,"Whoops, sorry for not getting back to this! Basically, I'd like to see a test of just the heap structure exercised in a large number of ways (basically doing a compare + insert in all sorts of different configurations). You're kind of doing this with the large TakeBy test, but I'd prefer to see a simpler test with many, many more inserts being done and tested for correctness. This is basically to flush out any edge cases that you wouldn't be hitting with a more basic/structured test that wouldn't reach the correct internal state to trigger it. . I've found that creating a simple test structure that mimics the desired end result and using the random generator to generate comparison tests (with the count set pretty high) is generally a pretty good way of sanity checking and flushing these bugs out, rather than writing specific test cases---usually if I've written a test for a specific case, I won't have missed it when coding, and if I've missed an edge case when coding, I won't think to test it. I think I'm pushing on this extra hard because the generated code is at a level of complexity where I can look at it and say ""yeah, this looks generally right"" but I'm not sure that I trust myself, as the reviewer, to guarantee that it's accounted for every single insert configuration correctly, if that makes sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6942#issuecomment-530961530:298,simpl,simpler,298,https://hail.is,https://github.com/hail-is/hail/pull/6942#issuecomment-530961530,2,['simpl'],"['simple', 'simpler']"
Usability,"With natives, it clearly isn't dominated by the matrix multiply and I get something comparable to master: ~33 (master) vs ~36 (this branch, plus some fixes I will suggest in comments) on an example I cooked up (10K variants already mostly independent, a bad case for ld_prune).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385311049:17,clear,clearly,17,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385311049,1,['clear'],['clearly']
Usability,"With the binding changes I can't even find the regression code. We're totally swamped by the compiler. After the JIT is warm, the compiler is ~3s. The regression code is probably equally as fast as scikit learn on this tiny example.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12793#issuecomment-1477072386:205,learn,learn,205,https://hail.is,https://github.com/hail-is/hail/pull/12793#issuecomment-1477072386,1,['learn'],['learn']
Usability,"Working backwards, we need to not return a 500 on error. We could return a BadRequest error code with the message 'invalid spec' and then handle the MJC database call on the driver. I chose instead to have the worker to post job complete so we get the error message with the stack trace showing up in the UI as having the normal job flow seemed cleaner to me last week then special casing `schedule_job` on the driver. `post job complete` needs a job object to get the status to send back to the driver. However, a `Job` has two concrete implementations and we don't know which the bad job is because we can't get the spec. Furthermore, the `Job` class does a lot of work based on the spec right now. So I thought it was clearer to just create a new class that had the status, but nothing else. After writing this out, it's probably better to have the driver MJC upon error rather than from the worker. The code below would be more complicated. We'd have to get the traceback / error message from the response from the worker. ```python3; try:; await client_session.post(; f'http://{instance.ip_address}:5000/api/v1alpha/batches/jobs/create',; json=body,; timeout=aiohttp.ClientTimeout(total=2),; ); await instance.mark_healthy(); except aiohttp.ClientResponseError as e:; await instance.mark_healthy(); if e.status == 403:; log.info(f'attempt already exists for job {id} on {instance}, aborting'); if e.status == 503:; log.info(f'job {id} cannot be scheduled because {instance} is shutting down, aborting'); raise e; except Exception:; await instance.incr_failed_request_count(); raise; ```. And the error handling would look something like this:. ```python3; try:; body = await job_config(app, record, attempt_id); except Exception:; log.exception('while making job config'); status = {; 'version': STATUS_FORMAT_VERSION,; 'worker': None,; 'batch_id': batch_id,; 'job_id': job_id,; 'attempt_id': attempt_id,; 'user': record['user'],; 'state': 'error',; 'error': traceback.format_exc(),; 'container_s",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11391#issuecomment-1048213078:721,clear,clearer,721,https://hail.is,https://github.com/hail-is/hail/pull/11391#issuecomment-1048213078,1,['clear'],['clearer']
Usability,Working on it! #12848 will be merged soon and #12849 will be reopened subsequently. The next steps after the billing tables are fully populated are not clear to me and we might want to discuss after stand up once the other two are merged.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13656#issuecomment-1737882692:152,clear,clear,152,https://hail.is,https://github.com/hail-is/hail/issues/13656#issuecomment-1737882692,1,['clear'],['clear']
Usability,"Would it be useful to give people repr() feedback on lazy operations? Like ""scheduling x"" and ""executing x""? cc @tpoterba. Would be a separate PR, but related issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7828#issuecomment-572726743:41,feedback,feedback,41,https://hail.is,https://github.com/hail-is/hail/issues/7828#issuecomment-572726743,1,['feedback'],['feedback']
Usability,Ya I really need to set up running clusters locally. It's a frustrating feedback loop for a single cluster test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5686#issuecomment-477170521:72,feedback,feedback,72,https://hail.is,https://github.com/hail-is/hail/pull/5686#issuecomment-477170521,1,['feedback'],['feedback']
Usability,Ya the progress bars I mentioned were the file upload summary and the batch submission. I can try to make a quiet mode so it can cleanly print just the json. My intention was not to wait it in `submit.py` but to print out a json and then use `hailctl batch wait`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324152841:7,progress bar,progress bars,7,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324152841,1,['progress bar'],['progress bars']
Usability,"Ya you're right, I was over-optimizing trying to share credentials between jobs of the same user. Just kept it as 1:1 jobs to credentials and it got a lot simpler. I changed the key to the job id because using the name of the identity would cause collisions between jobs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14125#issuecomment-1881179738:155,simpl,simpler,155,https://hail.is,https://github.com/hail-is/hail/pull/14125#issuecomment-1881179738,1,['simpl'],['simpler']
Usability,"Yeah, I misjudged, clearly the determinism issue. I cached for my test case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4096#issuecomment-410890171:19,clear,clearly,19,https://hail.is,https://github.com/hail-is/hail/issues/4096#issuecomment-410890171,1,['clear'],['clearly']
Usability,"Yeah, I think I agree that we have a unique UUID. What I'm more skeptical of is: what if we throw an exception in a `write`? Do we clean up all the open resources? If not, that could totally leave a writer open that will conflict when we retry (even if we retried on a different VM!). ---. `retryTransientErrors` expects partition code to be safe to execute twice, but otherwise it's quite simple:. ```scala; def retryTransientErrors[T](f: => T): T = {; var delay = 0.1; var errors = 0; while (true) {; try {; return f; } catch {; case e: Exception =>; errors += 1; if (errors == 1 && isRetryOnceError(e)); return f; if (!isTransientError(e)); throw e; if (errors % 10 == 0); log.warn(s""encountered $errors transient errors, most recent one was $e""); }; delay = sleepAndBackoff(delay); }. throw new AssertionError(""unreachable""); }; ```; and this is the call site:; ```scala; val htc = new ServiceTaskContext(i); var result: Array[Byte] = null; var userError: HailException = null; try {; retryTransientErrors {; result = f(context, htc, theHailClassLoader, fs); }; } catch {; case err: HailException => userError = err; }; htc.close(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1531592331:390,simpl,simple,390,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1531592331,1,['simpl'],['simple']
Usability,"Yeah, OK, this isn't great. Do you have exac sites file snippet you're using somewhere? I clearly need to start doing more systematic benchmarking.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2089#issuecomment-321580378:90,clear,clearly,90,https://hail.is,https://github.com/hail-is/hail/pull/2089#issuecomment-321580378,1,['clear'],['clearly']
Usability,"Yeah, code-wise. I wanted to see how you felt my suggestion(s) were playing out. I agree with you. Having seen the code, I think I still like this best since it is the least confusing (clearest?) A `Cores` class if we used it consistently is an interesting option, although I also like that everyone knows how integers work and there's no conceptual overhead.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7241#issuecomment-541225212:185,clear,clearest,185,https://hail.is,https://github.com/hail-is/hail/pull/7241#issuecomment-541225212,1,['clear'],['clearest']
Usability,"Yeah, this was broken in a recent update to the gcloud libraries. For now, following the command to do:; ```; gcloud config set dataproc/region VALUE; ```; will generate the best user experience. We'll fix this for the next version though.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8078#issuecomment-584868077:179,user experience,user experience,179,https://hail.is,https://github.com/hail-is/hail/issues/8078#issuecomment-584868077,1,['user experience'],['user experience']
Usability,"Yes, absolutely! I was confused between filename and method name when I first added them. I think things are clear in my head now -- but maybe some more explanations about what is required to add a method to experimental (beyond adding the method code) would be neat!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4052#issuecomment-409731138:109,clear,clear,109,https://hail.is,https://github.com/hail-is/hail/pull/4052#issuecomment-409731138,1,['clear'],['clear']
Usability,"Yes, definitely! I'll assign you as a reviewer, though I'd like to also do a quick design review with Cotton to make sure I'm not doing anything crazy. I don't think there are any major redesigns I have in mind, barring feedback from review. I think I'll make it possible to control the default split size using a flag / env var, but other than that it works and seems to improve performance.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10512#issuecomment-852084745:220,feedback,feedback,220,https://hail.is,https://github.com/hail-is/hail/pull/10512#issuecomment-852084745,1,['feedback'],['feedback']
Usability,You will use the principal components space that you learned from the unrelated samples. You can project the withheld samples by summing over all variants and multiplying the variant loadings by the withheld samples' GTs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-1284296019:53,learn,learned,53,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-1284296019,1,['learn'],['learned']
Usability,You're also removing Interval.point_type (just to be clear what the breaking changes are).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5152#issuecomment-454915985:53,clear,clear,53,https://hail.is,https://github.com/hail-is/hail/pull/5152#issuecomment-454915985,1,['clear'],['clear']
Usability,"You're right, they don't. @tpoterba Let's make this clear in the documentation. Although it is on the roadmap, it is not easy to support nested aggregators in full generality (what amounts to subqueries in SQL). I propose adding a `oneHot(x, arr)` where `x: Whatever`, `arr: Array[Whatever]` and `oneHot` returns the one hot encoding of `x` with respect to the ordered values in `arr` as an `Array[Int]` (and missing if `x` is not in `arr`). Then, using Tim's new changes that support aggregating over arrays (https://github.com/broadinstitute/hail/pull/584, still being reviewed but very close), you can write the above example as:. ```; annotateglobal expr -c 'global.pops = [""AFR"", ""NFE""]'; annotateglobals expr -c 'global.pop_counts = samples.sum(oneHot(sa.meta_test.POP, global.pops))'; ```. Reasonable?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/549#issuecomment-240003377:52,clear,clear,52,https://hail.is,https://github.com/hail-is/hail/issues/549#issuecomment-240003377,1,['clear'],['clear']
Usability,Yup! Mitja and I have been talking and sharing code on this issue. But clearly there is some work to be done for this functionality to be integrated naturally in Hail. And obviously the phasing stuff would be neat :),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/104#issuecomment-279858875:71,clear,clearly,71,https://hail.is,https://github.com/hail-is/hail/issues/104#issuecomment-279858875,1,['clear'],['clearly']
Usability,`TableCollect(TableOrderBy(...))` has a simplify rule that uses a local sort,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7144#issuecomment-570306267:40,simpl,simplify,40,https://hail.is,https://github.com/hail-is/hail/issues/7144#issuecomment-570306267,1,['simpl'],['simplify']
Usability,"```. dspr calls to the corresponding BLAS Level 2 command, which updates A to A + x.t \* x in place:; http://www.netlib.org/lapack/explore-html/d7/d15/group__double__blas__level2_ga22adb497a4f41eabc6a8dcac6f326183.html#ga22adb497a4f41eabc6a8dcac6f326183. Down the line we might also consider using BLAS level 3 dsyrk on each partition, which updates A to A + B.t \* B:; http://www.netlib.org/lapack/explore-html/d1/d54/group__double__blas__level3_gae0ba56279ae3fa27c75fefbc4cc73ddf.html#gae0ba56279ae3fa27c75fefbc4cc73ddf. @cseed The ArrayIndex exception on profile225k in the current master is concerning, and may be related to serialization. Here is the full stack trace:. ```; hail: grm: caught exception: org.apache.spark.SparkException: Job aborted due to stage failure: Task 5 in stage 3.0 failed 1 times, most recent failure: Lost task 5.0 in stage 3.0 (TID 45, localhost): java.lang.ArrayIndexOutOfBoundsException: 1048578; at com.esotericsoftware.kryo.util.IdentityObjectIntMap.clear(IdentityObjectIntMap.java:345); at com.esotericsoftware.kryo.util.MapReferenceResolver.reset(MapReferenceResolver.java:47); at com.esotericsoftware.kryo.Kryo.reset(Kryo.java:804); at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:570); at org.apache.spark.serializer.KryoSerializationStream.writeObject(KryoSerializer.scala:194); at org.apache.spark.serializer.SerializationStream.writeValue(Serializer.scala:147); at org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:185); at org.apache.spark.util.collection.ExternalAppendOnlyMap.spill(ExternalAppendOnlyMap.scala:206); at org.apache.spark.util.collection.ExternalAppendOnlyMap.spill(ExternalAppendOnlyMap.scala:55); at org.apache.spark.util.collection.Spillable$class.maybeSpill(Spillable.scala:93); at org.apache.spark.util.collection.ExternalAppendOnlyMap.maybeSpill(ExternalAppendOnlyMap.scala:55); at org.apache.spark.util.collection.ExternalAppendOnlyMap.insertAll(ExternalAppendOnlyMap.scala:158); at org",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/801#issuecomment-247861703:2320,clear,clear,2320,https://hail.is,https://github.com/hail-is/hail/pull/801#issuecomment-247861703,1,['clear'],['clear']
Usability,"`clear ""import"" graph: javautils > types > utils > expr` . Sounds good to me.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5152#issuecomment-456802543:1,clear,clear,1,https://hail.is,https://github.com/hail-is/hail/pull/5152#issuecomment-456802543,1,['clear'],['clear']
Usability,"`hail` was hanging after all commands completed when running kudu commands against the quickstart. From the thread dump, it looked like it was spinning in the kudu client. Shutting down the kudu context seemed to fix the problem. See any problems with this patch? Also, I removed latest. It didn't seem to be used. ```; diff --git a/src/main/scala/org/kududb/spark/KuduContext.scala b/src/main/scala/org/kududb/spark/KuduContext.scala; index c48dcd4..71be7d2 100644; --- a/src/main/scala/org/kududb/spark/KuduContext.scala; +++ b/src/main/scala/org/kududb/spark/KuduContext.scala; @@ -41,8 +41,6 @@ class KuduContext(@transient sc: SparkContext,. val broadcastedKuduMaster = sc.broadcast(kuduMaster). - LatestKuduContextCache.latest = this; -; /**; * A simple enrichment of the traditional Spark RDD foreachPartition.; * This function differs from the original in that it offers the; @@ -169,10 +167,6 @@ class KuduContext(@transient sc: SparkContext,; def fakeClassTag[T]: ClassTag[T] = ClassTag.AnyRef.asInstanceOf[ClassTag[T]]; }. -object LatestKuduContextCache {; - var latest:KuduContext = null; -}; -; object KuduClientCache {; var kuduClient: KuduClient = null; var asyncKuduClient: AsyncKuduClient = null; @@ -195,4 +189,14 @@ object KuduClientCache {; asyncKuduClient; }. + def close() {; + if (kuduClient != null) {; + kuduClient.close(); + kuduClient = null; + }; + if (asyncKuduClient != null) {; + asyncKuduClient.close(); + asyncKuduClient = null; + }; + }; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/242#issuecomment-220667612:753,simpl,simple,753,https://hail.is,https://github.com/hail-is/hail/pull/242#issuecomment-220667612,1,['simpl'],['simple']
Usability,"`inHemiX` depends on sex. How about `inXPar` and `inXNonPar`, so that Non clearly just refers to Par? This reads as ""in the X pseudo-autosomal region"" or ""in the X non-pseudo-autosomal-region""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/499#issuecomment-235665809:74,clear,clearly,74,https://hail.is,https://github.com/hail-is/hail/pull/499#issuecomment-235665809,1,['clear'],['clearly']
Usability,"`test_rectangles_to_numpy` shouldn't pass on local, that's one of the weird ones where we don't understand why it's passing, it's clearly unlowered. In fact, in this PR I added the `fail_local` annotation to it. I'll try what you suggested.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11637#issuecomment-1078198872:130,clear,clearly,130,https://hail.is,https://github.com/hail-is/hail/pull/11637#issuecomment-1078198872,1,['clear'],['clearly']
Usability,"a simpler solution which was attractive because the microservices are looking more and more like services and less like web servers (even more so moving all the rendering to the front end with the web app, the legacy version of scorecard using jinja is not the representative case). Did you look at aiohttp?; > * From the code:; > > Global variables that are modified ...; > ; > ; > I don't want to have to think about shared state and locking. I want a shared-nothing architecture in the microservices where the only globals are true constants and threads communication by sending immutable data through queues.; > * Finally, a meta-comment. I started reviewing this when it was just ujson, I did a bit of research about json packages to understand your choices and when I came back, the PR had expanded with all the async stuff. I would have approved the ujson stuff. The async stuff could have been a separate PR. Nobody wants to review a moving target, so the scope of a change should be roughly frozen when you assign a PR and additional changes should be minimized and restricted to that scope. You're welcome to have an open PR with no reviewer if you're still fleshing out the scope, of course. Thanks!. In response:. 1) aiohttp is an option, but appears to be generally considered slow on a per-response basis (published benchmarks, haven't had a chance to try it), even potentially slower than flask. It seems wrong to choose something slower if there are are reasonable alternatives.; 2) The globals were a feature of the initial implementation (the GitHub cache). It felt outside of the scope of my PR to change that to some queue solution. Meta comment. Ok. I didn't think it had been looked at, and expanded what it did pretty quickly, as I realized that ujson wasn't helping much. I can make a ujson-specific pr, but my goal was to test async library implementations in a simple applications, since we need a long term strategy for python web stuff that isn't Flask (or not just Flask)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051:2115,simpl,simple,2115,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461191051,1,['simpl'],['simple']
Usability,added a new benchmark:; ```; wm2b0-b9b:hail wang$ hail-bench compare old.json new.json --metric median; Name Ratio Time 1 Time 2; ---- ----- ------ ------; group_by_take_rekey 23.5% 23.902 5.612; ----------------------; Geometric mean: 23.5%; Simple mean: 23.5%; Median: 23.5%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7194#issuecomment-538159223:243,Simpl,Simple,243,https://hail.is,https://github.com/hail-is/hail/pull/7194#issuecomment-538159223,1,['Simpl'],['Simple']
Usability,added disjoint interval. Happy to go over the code with you if you want -- it's pretty simple right now!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6109#issuecomment-492688221:87,simpl,simple,87,https://hail.is,https://github.com/hail-is/hail/pull/6109#issuecomment-492688221,1,['simpl'],['simple']
Usability,"addressed your comment (good catch). I commented out a simplify rule that is currently invalid, but will be possible to introduce soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7141#issuecomment-536620808:55,simpl,simplify,55,https://hail.is,https://github.com/hail-is/hail/pull/7141#issuecomment-536620808,1,['simpl'],['simplify']
Usability,"also, a note on the comment - Konrad, Cotton, and I discussed a simple function ""write_expr"" in the experimental module that uses a dummy table and writes in globals.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5044#issuecomment-452252677:64,simpl,simple,64,https://hail.is,https://github.com/hail-is/hail/pull/5044#issuecomment-452252677,1,['simpl'],['simple']
Usability,"ambda:; ```; hl.loop(; lambda sum, ret, i, x:; hl.cond(i < 10, sum(i + 1, x + i), ret(x)),; 0, 0); ```. The second difference is in the typing. In this PR, the `hl.recur` expression is given the type of the entire loop. I would add a single new type `Bottom`, and give all expressions which jump (both the recur and the break expressions) the type `Bottom`. `Bottom` is the empty type, so there can be no closed expressions of type `Bottom`. In the type checker, `Bottom` is only allowed to appear in tail positions, and for `If`, we keep the rule that both branches must have the same type, so either both branches are `Bottom` or neither are. This keeps the semantics simple: an if statement either makes a value or it jumps away, there's no confusing mix. One nice property of this setup is that if an expression has a non-bottom type, then it is guaranteed not to jump away from itself (it may jump internally), so it is safe to method-wrap. This also make codegen very simple, and @iitalics has already implemented it! See `JoinPoint` and `JoinPoint.CallCC`. In the IR, I don't think this requires much change. If we're already adding a continuation context (as mentioned above), then `TailLoop` just needs to bind both a recur and a break continuation, where recur takes the loop variable types, and break takes the loop result type. Then `Recur` can be replaced by a `Jump` node which calls (jumps to) a continuation in context. There's also a middle ground where we make break continuations explicit in the IR, but we want to keep the scheme-like interface in python. Then the pass @cseed described for inferring where the loop exits are would just go in python instead of the emitter. > Using the stream interface seems wrong to me also. When I mentioned this, I was thinking we could reuse the region management logic from the stream emitter for loops, but I've since changed my mind. I think loops will have hard region management no matter what. > What's the type of the stream the loop t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407:2293,simpl,simple,2293,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407,1,['simpl'],['simple']
Usability,"ar` takes a `Widget` but isn't concerned with its lifetime management, it should take its argument as a `Widget*` or `Widget&`, with the usual reasoning to choose between them. The caller owns the widget, and the lifetime of `bar` is nested inside that of its caller, so lifetime management isn't an issue.; * If `bar` takes a `Widget` and needs to take ownership, it should take its argument as a `unique_ptr<Widget>`. This serves as documentation that the function is taking over responsibility for deleting the Widget, in a way enforced by the compiler.; * A `unique_ptr<Widget>*` or `unique_ptr<Widget>&` is an in-out parameter, where the function needs to be able to point the pointer somewhere else.; * A const pointer or reference to a unique_ptr should never be used. Just pass a raw pointer or reference. Essentially the same rubric should be used for shared_ptr, replacing ""take ownership"" with ""share ownership"". If a function is simply using a value and isn't concerned with its lifetime management, it should be taking a raw pointer or reference, not a shared_ptr. It should be completely agnostic what method the caller is using to manage the lifetime of the object. Herb Sutter gives his typical thorough analysis of this question [here](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/). > I would be fine with that extra learning curve and complexity if unique_ptr solved a difficult; problem. But - by definition! - it doesn't. It only works for the easy case where you have one; pointer to each object. The invariant that unique_ptr is designed to keep isn't that there is only one pointer to each object. There can be any number of aliases, changing over time, but at any time exactly one must be a unique_ptr, which documents which alias is the ""owner"". The design of and idioms around unique_ptr ensure that all non-owning aliases have lifetimes which are nested inside the lifetime of the owning pointer, and that ownership can be passed around unam",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638:2365,simpl,simply,2365,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638,1,['simpl'],['simply']
Usability,assuming I haven't messed something up:; ```; wm2b0-b9b:hail wang$ hail-bench compare old.json new.json --metric median; Name Ratio Time 1 Time 2; ---- ----- ------ ------; group_by_collect_per_row 10.0% 38.441 3.852; ----------------------; Geometric mean: 10.0%; Simple mean: 10.0%; Median: 10.0%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7195#issuecomment-538148467:265,Simpl,Simple,265,https://hail.is,https://github.com/hail-is/hail/pull/7195#issuecomment-538148467,1,['Simpl'],['Simple']
Usability,"ately once per run. I ran; this three times using a commit very similar to `main` [1]. All three runs failed:. 1. In run 1, three partitions had this error.; 2. In run 2, one partition had a different error (#13721 to be exact).; 3. In run 3, two partitions had this error. After my fix [2] for this issues bug, the #13721 bug became super common! I saw it 50 times in my first run:; ```; Caused by: is.hail.relocated.com.google.cloud.storage.StorageException: Missing Range header in response; 	|> PUT https://storage.googleapis.com/upload/storage/v1/b/aou_tmp/o?name=tmp/hail/icullIwHC8dQXtq8JU2uDW/aggregate_intermediates/-ntpjdAQ9sKaR8lK26cV0p5790a4d87-9035-41ae-afc6-326f710d9a89&uploadType=resumable&upload_id=ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	|> content-range: bytes */*; 	| ; 	|< HTTP/1.1 308 Resume Incomplete; 	|< content-length: 0; 	|< content-type: text/plain; charset=utf-8; 	|< x-guploader-uploadid: ADPycdtl5JSqwvftT4W190_-ueC032I_oZcwLAlVVMFkqp06W4eY8b-XMwf8DeT7If9I7uIgmI_PLCuFsExsT0aEh2b4FrHtAiUktumQbvgl1U0icw; 	| ; ```. Luckily, that one is actually trivial to fix, we just need to [update to the latest GCS client; library](https://github.com/hail-is/hail/issues/13721#issuecomment-1737924344). # Test Code. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://danking/tmp/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://danking/foo.vcf.bgz'. vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t, output = out, tabix = True). ```. # Failing Batch (in my namespace). https://internal.hail.is/dking/batch/batches/8?q=state%3Dbad. # Footnotes. [1] I was using `de009fdb89`, which I pushe",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184:1073,Resume,Resume,1073,https://hail.is,https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184,1,['Resume'],['Resume']
Usability,"azing-fast-python-networking. In short, one of the creators of asyncio discusses uvloop performance relative to other libraries. They key is:. ""However, the performance bottleneck in aiohttp turned out to be its HTTP parser, which is so slow, that it matters very little how fast the underlying I/O library is."". <img width=""1001"" alt=""screen shot 2019-02-06 at 7 29 00 pm"" src=""https://user-images.githubusercontent.com/5543229/52382977-77a62d00-2a45-11e9-8c04-b8142586eb5c.png"">. <img width=""936"" alt=""screen shot 2019-02-06 at 7 29 19 pm"" src=""https://user-images.githubusercontent.com/5543229/52382985-812f9500-2a45-11e9-9155-97c00ef9784b.png"">. As an aside I've spent some time reading about this over the last ~month, and besides relatively consistent messaging about the messiness of Python's ecosystem, performance and user experience are deeply important to me, so when I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp libra",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:1631,Usab,Usability,1631,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['Usab'],['Usability']
Usability,"b.com/kubernetes/kubernetes/pull/53947. Batch: `kube_event_loop` is always involved. Always:; ```log; Traceback (most recent call last):; File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 384, in _make_request; six.raise_from(e, None); File ""<string>"", line 2, in raise_from; File ""/usr/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 380, in _make_request; httplib_response = conn.getresponse(); File ""/usr/lib/python3.6/http/client.py"", line 1331, in getresponse; response.begin(); File ""/usr/lib/python3.6/http/client.py"", line 297, in begin; version, status, reason = self._read_status(); File ""/usr/lib/python3.6/http/client.py"", line 258, in _read_status; line = str(self.fp.readline(_MAXLINE + 1), ""iso-8859-1""); File ""/usr/lib/python3.6/socket.py"", line 586, in readinto; return self._sock.recv_into(b); socket.timeout: timed out; ```. Seems that the simplest issue may be to increase `read_timeout` past 120 seconds, although depending on the causes of this issue, that may not eliminate the problem, and of course leaves a long delay, which may be unacceptable for the use-case. As for why read takes so long: not 100% sure yet, setting up batch and CI is still incomplete, and I have not triggered this error myself. My guess is that Kubernetes takes too long to generate the response, either due to garbage collection, or simply because the requested information takes N > 120 seconds to return. That would be a very long time for any reasonable response, so either the resource isn't ready and it waits, or there are network connectivity issues. If network issues, not sure what solutions are. If I were on AWS, I would think about using a larger instance, with a higher-bandwidth NIC.; * Possible connection: https://github.com/arangodb/arangodb/issues/7813 ; * Possible solution: Reduce work Kubernetes must do to return response. #### 2nd set of errors:; ```log; # Batch; ERROR	| 2018-12-18 21:25:00,095 	| server.py 	| run_forever:447 | run_forever:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389:1094,simpl,simplest,1094,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389,1,['simpl'],['simplest']
Usability,"bility and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/2902. In the second branch related to this pull request, linked above, I chose Starlette, and it is a thin abstraction, nearly identical performance, over Uvicorn + httptools, which were both written by Yury Selivanov, the asyncio person I mention above. Starlette and Uvicorn are currently the fastest options, (Sanic isn't tested), by a relatively large margin, on Techempower's benchmarks. If there is a reference standard benchmark of http library performance, Techempower is it: https://www.techempower.com/benchmarks/#section=data-r17 . Starlette is something like base Go performance (though 1/5-1/10th the performance of Go's fasthttp library for simple responses, and much closer for anything involving database calls). Sanic also uses httptools and uvloop, but has more stuff.. so yeah maybe a bit slower than Starlette, or not, but the diff will probably be small. Regarding the benchmark you linked, it is benchmarking the power of sleep. There is something deeply wrong with their results. Sanic has 1800 timeouts, vs 200 for aiohttp, and 3x the connection errors. Fine, so Sanic is super slow. But look at their non-db tests. Sanic is >2x as fast, 0 timeouts. They aren't using anything Sanic specific to query the database, and both use the same event loop. Adding asyncio Postgres to two programs that fundamentally differ mainly in how the handle http requests and responses, shows the one that is faster at http requests/responses (Sanic) becoming much slower, and in fact reversing its relationship to Aiohttp. This is strange to say the least. I was really curious about this, so I ran the bench. First, I upgraded ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:2654,simpl,simple,2654,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['simpl'],['simple']
Usability,"cated. I think it's worth considering what the first batch people should run might be and design for a minimal first experience. IMO, a temp bucket is an absolutely crucial piece of configuration before you can do anything interesting and configuring a temp bucket is something that `hailctl` can easily be very opinionated about. Container registry… I feel like there's harder questions there, and you can run a lot of cool batches before having to worry about provisioning your own. It's also not actually a part of the hailctl config (unless something has changed recently) so it feels a little unusual in this flow. I still think that it is helpful to set people up with an AR and keep them from footguns, but maybe that can go in a separate command that the initial init command points to once you're done? Something along the lines of ""if you get to the point where you need to upload custom container images, you can use hailctl to set up a registry""?. Another thing that gives me a little pause is the wording around google projects. I get that you need one to create a bucket, but I think we should just make sure to steer clear of the implication that you are ""selecting a GCP project to use for Hail Batch"", because that implies some link or ownership that isn't there. But I think there's a quick fix here: for a given resource that we *are* creating for hail use, like the temp bucket, ask for the name first and then ask which project it should be created in, using the projects listed in gcloud as choices with the option to write in your own. ### Regarding number of checks; I think it'd be good to avoid warnings when possible. From looking at this I see a pattern of; 1. Ask a leading question; 2. Emit a warning if the user selects the alternative option instead of the suggested option. I think I would prefer instead to ask a leading question and in the prompt explain why the alternative option might be undesirable. Then when they make a decision just move on. On a broader not",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012:1651,pause,pause,1651,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012,1,['pause'],['pause']
Usability,"cause is that newer versions of autodoc include, [as an experimental addition](https://www.sphinx-doc.org/en/2.0/usage/extensions/autodoc.html#generating-documents-from-type-annotations), sphinx-autodoc-typehints. This addition (which we use in batch) only works when a class is documented using its true name (i.e. where it is defined, not re-exported). A quick fix is to [disable this functionality](https://www.sphinx-doc.org/en/2.0/usage/extensions/autodoc.html#confval-autodoc_typehints):; ```; autodoc_typehints = 'none'; ```. - autodoc issue about this https://github.com/agronholm/sphinx-autodoc-typehints/issues/38; - another autodoc issue with a fix for the particular use case https://github.com/agronholm/sphinx-autodoc-typehints/issues/124; - root sphinx issue wrt fully qualified names versus the documented name: https://github.com/sphinx-doc/sphinx/issues/4826. The autodoc-typehints maintainer seems to have gotten stuck when trying to fix this. It appears that someone went and figured out enough of Sphinx to [fix this](https://git-cral.univ-lyon1.fr/MUSE/mpdaf/blob/23d52ba059fe76df5e1655542b17a28a7137cf20/doc/ext/smart_resolver.py). When a doc string is processed, they record a mapping from the documented name to the fully-resolved name. The code that catches missing references and fixes them is kinda big and complicated. I'm uncomfortable dropping it into our project. There's some good documentation about how autodoc_typehints works at [scanpydocs' docs](https://icb-scanpydoc.readthedocs-hosted.com/en/latest/scanpydoc.elegant_typehints.html). This [flying sheep](https://github.com/flying-sheep) seems pretty competent. I think they fixed it for scanpydocs [here](https://github.com/theislab/scanpydoc/pull/19/files) but it's a rather complex looking solution. It's frankly pretty shocking that such a simple operation (have a mapping from all the names of an object to its documented name) results in a two years of back and forth that still hasn't reached a solution.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9403#issuecomment-703776111:1842,simpl,simple,1842,https://hail.is,https://github.com/hail-is/hail/pull/9403#issuecomment-703776111,1,['simpl'],['simple']
Usability,"cc @iris-garden: You might find this discussion interesting. > Is it kosher to use write_output on the individual items within a ResourceGroup like this?. Yes, that is fine. > The resulting code is IMHO overall less clear than the original version in which the resource group models the relationship between all three filenames. The resource group was intended for sets of files that should be **localized** together. The primary motivation was for PLINK files with `.bed, .bim, and .fam` extensions. This is not quite your use case. > If Hail Batch is a well-rounded orthogonal API, then that code ought to work too. It's a fair criticism that the ResourceGroup API isn't very flexible. We can think about ways to improve it. It's unclear from your code what exactly you want to have happen. Do you want to be able to declare not to localize the tsv only file? In this toy example, a string path is assumed to be `ResourceGroupFile(path, localize=True)`. ```python3; j = b.new_job(…). j.declare_resource_group(counts={; 'tsv': ResourceGroupFile('{root}.counts.tsv', localize=False),; 'tsv.gz': '{root}.counts.tsv.gz',; 'tsv.gz.tbi': '{root}.counts.tsv.gz.tbi',; }). j.command(f""""""; gatk SubCommand … --output {j.tsv_counts}; bgzip {j.tsv_counts}; gatk IndexFeatureFile --input {j.counts['tsv.gz']}; """"""). b.write_output(j.counts, output_dir_path); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13191#issuecomment-1599590271:216,clear,clear,216,https://hail.is,https://github.com/hail-is/hail/issues/13191#issuecomment-1599590271,1,['clear'],['clear']
Usability,"cc: @daniel-goldstein is it possible to make the error more clear? The CI test job is a bit hard to read. Maybe the last line of the output should be something like ""XXXX file is out of date, run YYYY""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11840#issuecomment-1325464620:60,clear,clear,60,https://hail.is,https://github.com/hail-is/hail/pull/11840#issuecomment-1325464620,1,['clear'],['clear']
Usability,cc: @jigold some changes to memory to simplify it and address some weird behavior. sent over to Daniel since I feel like I've been hitting you with a bunch of PRs lately 😉 !,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11202#issuecomment-1006964286:38,simpl,simplify,38,https://hail.is,https://github.com/hail-is/hail/pull/11202#issuecomment-1006964286,1,['simpl'],['simplify']
Usability,"ches.id DESC; -> LIMIT 51;; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; | 1 | SIMPLE | batches | NULL | range | PRIMARY,batches_deleted,batches_token,batches_user_state,batches_time_completed,batches_billing_project_state | PRIMARY | 8 | NULL | 1348998 | 5.00 | Using where; Backward index scan |; | 1 | SIMPLE | batches_n_jobs_in_complete_states | NULL | eq_ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 1 | 100.00 | NULL |; | 1 | SIMPLE | batches_cancelled | NULL | eq_ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 1 | 100.00 | Using index |; | 1 | SIMPLE | aggregated_batch_resources | NULL | ref | PRIMARY | PRIMARY | 8 | batch.batches.id | 61 | 100.00 | NULL |; | 1 | SIMPLE | resources | NULL | eq_ref | PRIMARY | PRIMARY | 302 | batch.aggregated_batch_resources.resource | 1 | 100.00 | NULL |; | 1 | SIMPLE | billing_project_users | NULL | eq_ref | PRIMARY | PRIMARY | 604 | batch.batches.billing_project,const | 1 | 100.00 | Using index |; +----+-------------+-----------------------------------+------------+--------+---------------------------------------------------------------------------------------------------------------+---------+---------+-------------------------------------------+---------+----------+----------------------------------+; 6 rows in set, 1 warning (0.01 sec); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910:2049,SIMPL,SIMPLE,2049,https://hail.is,https://github.com/hail-is/hail/pull/12057#issuecomment-1196612910,5,['SIMPL'],['SIMPLE']
Usability,closing this because i ripped some stuff out prematurely and i'm not sure it's actually clearer to have this as a separate PR,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3939#issuecomment-406155895:88,clear,clearer,88,https://hail.is,https://github.com/hail-is/hail/pull/3939#issuecomment-406155895,1,['clear'],['clearer']
Usability,"crossposting from a message I sent to the variants team. ---. #### executive summary. Excess JVM memory use is almost certainly not the issue. I've taken a close look at the import_gvs.py loop and the related Hail Python code. No obvious accumulation of RAM use. AFAICT, the oomkiller keeps killing the pipelines. We need to stop this because the oomkiller (a) acts before the JVM GC can free things and (b) prevents us from getting JVM diagnostics on failure. We control the JVM's max heap with hailctl's --master-memory-fraction (default is 0.8 for 80% of the master machine type's advertised RAM). I suggest we set this down to 0.6 and continue using an n1-highmem-16 driver.; If Hail is (incorrectly) accumulating garbage memory per-group, we'll have a better chance diagnosing that with a running JVM instead of one that's been SIGKILL'ed. To understand what's going on, we gotta see what is using RAM in the n1-highmem-16 case. If I could SSH to the cluster, a simple solution is a screen with top -s 300 -n 100 >memory.log (I'd guess no more than 500KiB per hour of logs) and retrieve that file if the cluster fails. If we could get Google Monitoring set up to retrieve process-level memory statistics from the driver node that should also work. Just to be clear, I don't anticipate any changes to Hail in the next week that would change the memory use of this pipeline. There could be a memory leak, but I have no clews that lead to it. I realize this is an unsatisfying answer. I'm pretty perplexed as to what could be the issue here. #### technical details. We'll call the second to most recent run Run A and the most recent run Run B. Run A (like all runs before it) only manages two sample groups before failing. Run B made it through 50 groups before failing on 51. Why did they fail? The syslog for Run A is clear: the oomkiller killed Run A. We lack syslogs for Run B, so we cannot be certain but the lack of a JVM stack trace suggests to me that (a) the driver failed and (b) the drive",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449:967,simpl,simple,967,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449,1,['simpl'],['simple']
Usability,"ctest: +NOTEST; docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; docs/functions/random.rst:42: >>> hl.eval(hl.array([a, b, c])) # doctest: +NOTEST; docs/functions/random.rst:50: >>> table.show() # doctest: +NOTEST; docs/functions/random.rst:72: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:75: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:82: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:90: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:98: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:110: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/functions/random.rst:114: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:68: >>> mt # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:71: >>> mt.locus # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:83: >>> mt.DP.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:107: >>> mt.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:266: >>> mt_new.replicate_num.show() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:299: >>> mt.aggregate_entries(hl.agg.mean(mt.GQ)) # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:307: >>> mt.aggregate_entries((agg.stats(mt.DP), agg.stats(mt.GQ))) # doctest: +NOTEST; docs/hailpedia/table.rst:63: >>> ht.describe() # doctest: +NOTEST; docs/hailpedia/table.rst:102: >>> ht # doctest: +NOTEST; docs/hailpedia/table.rst:105: >>> ht.ID # doctest: +NOTEST; experimental/import_gtf.py:56: >>> ht.describe() # doctest: +NOTEST; expr/aggregators/aggregators.py:365: >>> table1.aggregate(agg.counter(table1.S",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878:1328,guid,guides,1328,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878,1,['guid'],['guides']
Usability,dHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.140ms self 0.140ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.026ms self 0.026ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.154ms self 0.069ms children 0.085ms %children 55.31%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#appl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:171593,Simpl,Simplify,171593,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,dHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.187ms self 0.187ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.031ms self 0.031ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.346ms self 0.121ms children 0.225ms %children 65.07%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#appl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:28276,Simpl,Simplify,28276,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,"dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14692#issuecomment-2358958754:3726,Learn,Learn,3726,https://hail.is,https://github.com/hail-is/hail/pull/14692#issuecomment-2358958754,1,['Learn'],['Learn']
Usability,"dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14691#issuecomment-2357221524:3726,Learn,Learn,3726,https://hail.is,https://github.com/hail-is/hail/pull/14691#issuecomment-2357221524,1,['Learn'],['Learn']
Usability,"dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14690#issuecomment-2356990835:3726,Learn,Learn,3726,https://hail.is,https://github.com/hail-is/hail/pull/14690#issuecomment-2356990835,1,['Learn'],['Learn']
Usability,"dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14686#issuecomment-2354274670:3726,Learn,Learn,3726,https://hail.is,https://github.com/hail-is/hail/pull/14686#issuecomment-2354274670,1,['Learn'],['Learn']
Usability,"docs/functions/random.rst:30: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; docs/functions/random.rst:42: >>> hl.eval(hl.array([a, b, c])) # doctest: +NOTEST; docs/functions/random.rst:50: >>> table.show() # doctest: +NOTEST; docs/functions/random.rst:72: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:75: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:82: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:90: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:98: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:110: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/functions/random.rst:114: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:68: >>> mt # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:71: >>> mt.locus # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:83: >>> mt.DP.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:107: >>> mt.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:266: >>> mt_new.replicate_num.show() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:299: >>> mt.aggregate_entries(hl.agg.mean(mt.GQ)) # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:307: >>> mt.aggregate_entries((agg.stats(mt.DP), agg.stats(mt.GQ))) # doctest: +NOTEST; docs/hailpedia/table.rst:63: >>> ht.describe() # doctest: +NOTEST; docs/hailpedia/table.rst:102: >>> ht # doctest: +NOTEST; docs/hailpedia/table.rst:105: >>> ht.ID # doctest: +NOTEST; experimental/import_gtf.py:56: >>> ht.describe() # doctest: +NOTEST; expr/aggrega",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878:1262,guid,guides,1262,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878,1,['guid'],['guides']
Usability,"e the only reason that we currently require a zone be provided either in gcloud configuration or on the command line is to maintain backwards compatibility. `cloudtools` and earlier versions of `hailctl` had a default value for the `--zone` option of `hailctl dataproc start` (I think it was `us-central1-b`). > I stripped all gcloud pass through args from hailctl dataproc modify. There aren't any left. Invoking modify now looks like:; > ; > ```; > hailctl dataproc modify my-cluster \; > --extra-glcoud-update-args='---num-workers=2 --num-secondary-workers=100'; > ```; >; > The extra in the option name sounds a little weird since they are the only options (and the command isn't run if they aren't specified), but I'm leaving it for consistency for now. I moved the help text from the removed options into the help for the modify command itself. The output of modify --help is included below. I have mixed feelings on this one. On the one hand, `--extra-gcloud-update-args` sounds like it is extra arguments for a `gcloud update` command, which isn't a thing. On the other hand, `--extra-gcloud-dataproc-clusters-update-args` is an awfully long argument name. > I plan to leave the --async option to stop, although it is pass through. > Then there is --files for submit. This is passed through, but --py-files is needed (it is not passed through, but modified). Do I leave --files? I'm currently inclined to. Agreed. I support having the most frequently used parameters as `hailctl` parameters, even if they are only simple pass throughs. My original comment about minimizing the number of simple pass through parameters was mainly directed toward `hailctl dataproc start`, which has several options than can be specified separately for master node, worker nodes, and secondary worker nodes. I wanted to avoid cases where, for example, `--worker-boot-disk-size` was a `hailctl` option, but `--secondary-worker-boot-disk-size` had to be specified after a `--` or with `--extra-gcloud-start-args`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-767168393:3155,simpl,simple,3155,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-767168393,2,['simpl'],['simple']
Usability,"e.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14747](https://github.com/hail-is/hail/pull/14747) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14693#issuecomment-2362149504:3726,Learn,Learn,3726,https://hail.is,https://github.com/hail-is/hail/pull/14693#issuecomment-2362149504,6,['Learn'],['Learn']
Usability,end.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.004ms self 0.004ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.063ms self 0.063ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.010ms self 0.010ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.102ms self 0.032ms children 0.070ms %children 68.44%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.063ms self 0.063ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.i,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:216023,Simpl,Simplify,216023,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,end.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.004ms self 0.004ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.070ms self 0.070ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.010ms self 0.010ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.108ms self 0.034ms children 0.074ms %children 68.32%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.067ms self 0.067ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.i,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:200050,Simpl,Simplify,200050,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,end.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.005ms self 0.005ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.064ms self 0.064ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.011ms self 0.011ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.101ms self 0.033ms children 0.068ms %children 67.31%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.061ms self 0.061ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.i,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:208002,Simpl,Simplify,208002,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,end.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.005ms self 0.005ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.072ms self 0.072ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.011ms self 0.011ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.102ms self 0.035ms children 0.067ms %children 66.15%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.060ms self 0.060ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.i,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:195398,Simpl,Simplify,195398,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,"es into a per-process directory and using in-memory (std::mutex) synchronization.; But y'know, given that we have to write the DLL's out, it just seemed natural to let them persist; (and until debugging it on MacOS, I thought I could manage it with nothing but atomic file-create; and atomic-rename, but that didn't quite pan out). As for writing LLVM IR, it can definitely be done, because that's what Endeca/Oracle did. But there; was such a huge learning curve that only 3 people ever did it successfully (I wasn't one of them),; and debugging seemed very unpleasant and slow. [It was also a masterful achievement in ; job-security-through-obscurity, because no-one in management was going to mess with the; two people who wrote it - until the whole project got canned]. ... and in the time I was there, the Endeca/Oracle stuff wasn't distributed, which could be another; place where the generate-LLVM-IR needs some kind of extra glue for distributing compiled code,; whereas the conventional DLL's are trivial to ship around. Not claiming that part of it is difficult,; just that it didn't happen at Oracle until long after I left. In contrast, at PhysicsSpeed it was fairly smooth to implement nice abstractions (dense-join-table,; hash-join-table, tuple-with-order) as template classes which could be tested and debugged; in a standalone environment, and then have simpler codegen using those abstractions. At least,; that's a good way to get a lot of functionality with modest effort - and it doesn't preclude migrating; towards a more complex codegen later. It's nice to be able to have templates as low-runtime-cost; abstractions, but you don't have to use them if you don't want to. In short, most of the usual arguments about the benefits of HLL's apply. Plus the larger pool of; potential hires w/ C++ experience compared to the pool of people w/ lower-level/LLVM/IR/compiler-; internals expertise, and the possibility of very occasionally picking up useful fragments of open-source code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385:3137,simpl,simpler,3137,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-412742385,1,['simpl'],['simpler']
Usability,"es the source) and the somewhat bizarre terminology and syntax; used to express that in C++. I agree that move semantics takes getting used to, but I think it is much too integrated into modern C++ to ignore, going far beyond unique_ptr. Writing interfaces that take advantage of move semantics requires understanding rvalue-references in more detail, but for users of those move-enabled interfaces I think the guidelines are easy to teach: a variable will only be modified by moving if it is explicitly tagged with a `std::move`, so all you have to remember is ""after a `std::move(foo)`, the variable `foo` may only be assigned to or deleted."". > And then you get into a whole host of associated design decisions (I'm holding this as a unique_ptr,; but I want to pass it to a function - should I pass it as a raw pointer ? a raw reference ? a reference; to the unique_ptr ?). Keeping in mind the model that letting a function/class `foo` hold a `unique_ptr<Widget>` means explicitly ""`foo` owns this Widget, and is responsible for deleting it or passing ownership somewhere else"", these questions have pretty clear answers. * If a function `bar` takes a `Widget` but isn't concerned with its lifetime management, it should take its argument as a `Widget*` or `Widget&`, with the usual reasoning to choose between them. The caller owns the widget, and the lifetime of `bar` is nested inside that of its caller, so lifetime management isn't an issue.; * If `bar` takes a `Widget` and needs to take ownership, it should take its argument as a `unique_ptr<Widget>`. This serves as documentation that the function is taking over responsibility for deleting the Widget, in a way enforced by the compiler.; * A `unique_ptr<Widget>*` or `unique_ptr<Widget>&` is an in-out parameter, where the function needs to be able to point the pointer somewhere else.; * A const pointer or reference to a unique_ptr should never be used. Just pass a raw pointer or reference. Essentially the same rubric should be used ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638:1391,clear,clear,1391,https://hail.is,https://github.com/hail-is/hail/pull/3718#issuecomment-396669638,1,['clear'],['clear']
Usability,"expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/ExtractIntervalFilters, iteration: 0 total 0.016ms self 0.016ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/NormalizeNames, iteration: 0 total 0.363ms self 0.004ms children 0.358ms %children 98.82%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/NormalizeNames, iteration: 0/is.hail.expr.ir.NormalizeNames.apply total 0.358ms self 0.358ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/Simplify, iteration: 0 total 0.077ms self 0.077ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/ForwardLets, iteration: 0 total 0.659ms self 0.292ms children 0.367ms %children 55.66%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/ForwardLets, iteration: 0/is.hail.expr.ir.NormalizeNames.apply total 0.367ms self 0.367ms children 0.000ms %children 0.00%; timing is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/Optimize: relationalLowerer, after LowerMatrixToTable/Transform/is.hail.expr.ir.TypeCheck.apply total 0.127ms self 0.127ms children 0.000ms %c",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966:12317,Simpl,Simplify,12317,https://hail.is,https://github.com/hail-is/hail/pull/14679#issuecomment-2341990966,2,['Simpl'],['Simplify']
Usability,"gatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:745). 2019-01-22 13:12:06 YarnClientSchedulerBackend: INFO: Interrupting monitor thread; 2019-01-22 13:12:06 YarnClientSchedulerBackend: INFO: Shutting down all executors; 2019-01-22 13:12:06 YarnSchedulerBackend$YarnDriverEndpoint: INFO: Asking each executor to shut down; 2019-01-22 13:12:06 SchedulerExtensionServices: INFO: Stopping SchedulerExtensionServices; (serviceOption=None,; services=List(),; started=false); 2019-01-22 13:12:06 YarnClientSchedulerBackend: INFO: Stopped; 2019-01-22 13:12:06 MapOutputTrackerMasterEndpoint: INFO: MapOutputTrackerMasterEndpoint stopped!; 2019-01-22 13:12:06 MemoryStore: INFO: MemoryStore cleared; 2019-01-22 13:12:06 BlockManager: INFO: BlockManager stopped; 2019-01-22 13:12:06 BlockManagerMaster: INFO: BlockManagerMaster stopped; 2019-01-22 13:12:06 OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: INFO: OutputCommitCoordinator stopped!; 2019-01-22 13:12:06 TransportResponseHandler: ERROR: Still have 1 requests outstanding when connection from /192.168.18.203:44844 is closed; 2019-01-22 13:12:06 YarnSchedulerBackend$YarnSchedulerEndpoint: WARN: Attempted to get executor loss reason for executor id 14 at RPC address 192.168.18.189:50356, but got no response. Marking as slave lost.; java.io.IOException: Connection from /192.168.18.203:44844 closed; at org.apache.spark.network.client.TransportResponseHandler.channelInactive(TransportResponseHandler.java:146); at org.apache.spark.network.server.TransportChannelHandler.channelInactive(Transpo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587:209969,clear,cleared,209969,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587,1,['clear'],['cleared']
Usability,gnomAD is also exhausting memory (exit code 137) on their frequencies generating pipeline. They’re still exhausting memory after eliminating fork-joins in their pipeline. They were unintentionally invoking densification four times. We’ll need to sort out why even the simple frequencies blows memory.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13584#issuecomment-1712493167:268,simpl,simple,268,https://hail.is,https://github.com/hail-is/hail/issues/13584#issuecomment-1712493167,1,['simpl'],['simple']
Usability,"he location from which we import it. We must get it from some other dependency. OK. So, before my simplification of build.gradle, we used a configuration called `compile` and another one called `testCompile`. [Neither of those exist in modern gradle, apparently](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph). I found a side-note about the `compile` configuration [here](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_dependency_management_overview) (search for ""compile""):. > **Why no compile configuration?**; > The Java Library Plugin has historically used the compile configuration for dependencies that are required to both compile and run a project’s production code. It is now deprecated, and will issue warnings when used, because it doesn’t distinguish between dependencies that impact the public API of a Java library project and those that don’t. You can learn more about the importance of this distinction in [Building Java libraries](https://docs.gradle.org/current/userguide/building_java_projects.html#sec:building_java_libraries). OK, so, we used to just dump everything into our runtime dependencies. I changed it so that we have three kinds of dependencies:; 1. `shadow`: these are provided by Dataproc/QoB at run-time. They are not in any JAR. They are not on the `testRuntimeClasspath` or `runtimeClasspath`. They are on the `testCompileClasspath` because I [explicitly requested](https://github.com/hail-is/hail/blob/main/hail/build.gradle#L98) that `testCompileOnly` bring in our `shadow` dependencies.; 2. `implementation`: these are included in all class paths and in shadow JARs (but not ""thin"" jars generated by `./gradlew jar`).; 3. `testImplementation`: these are included in test class paths and in shadow JARs. Our test code references these third-party classes:; ```; import breeze.linalg.DenseMatrix; import breeze.linalg._; import breeze.linalg.{*, diag, DenseMatrix => BDM, D",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741:1121,learn,learn,1121,https://hail.is,https://github.com/hail-is/hail/issues/13706#issuecomment-1738232741,1,['learn'],['learn']
Usability,"hink for Stanley Center stuff we; should use GCP auth. > I'm getting proxy timeouts. We need an ready endpoint and something on the; > client side to poll and redirect. Actually, awesome if it doesn't poll but; > uses, say, websockets, and the server watches the pod for a notification for; > k8s (or does this and also polls, which seems to be our standard pattern). The proxy timeouts might be because I shut the whole thing down? But yeah, I; also saw timeouts if a pod can't be scheduled right away. > Should we have an auto-scaling non-preemptible pool and schedule these there?. We already have such a pool, and these pods do not tolerate the preemptible; taint, so they are forced to get scheduled on non-preemptibles. > If we do that, to optimize startup time, we should have imagePullPolicy: Never; > and then pull the image on startup and push it on update. I think `imagePullPolicy: Never` is a bad idea. If there's a bug where the image; is not present, then we get stuck. I think we should rely on k8s to pull the 5GB; jupyter image in a reasonable time period. If we cannot rely on that, we just; start up N nodes before the tutorial, ssh to each and pull the image. If; somehow the image disappears, `imagePullPolicy: IfNotPresent` ensures we just; experience a delay rather than complete interruption. > When do you reap jupyter pods? jupyterhub has a simple management console that; > lets you shut down notebooks. I just run `make clean-jobs`, but we could add a delete endpoint and a little; web page. > I don't think you can do this dynamically using headers. Blueprints seem to be; > the answer in Flask:; > https://stackoverflow.com/questions/18967441/add-a-prefix-to-all-flask-routes/18969161#18969161. ah, cool. > Is there a reason you didn't make it a subdomain? I thought we decided we; > preferred that. I thought it would take less time to get a subdirectory working than figure out; how to add a new domain and a cert and deal with DNS. Long term a subdomain makes sense.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4576#issuecomment-431185878:2177,simpl,simple,2177,https://hail.is,https://github.com/hail-is/hail/pull/4576#issuecomment-431185878,1,['simpl'],['simple']
Usability,"https://github.com/hail-is/hail/files/12231481/data2.tar.gz. Simplest repro I have. One row in chr8... two rows in ch5... ; ```; In [2]: import hail as hl; ...: y = hl.read_table(""chr8_51749536.ht""); ...: x = hl.read_table('ch5_and_ch8.ht'); ...: print(y.annotate(gene=x[y.locus].gene).collect()); ```. TableIR:; ```; (TableCollect; (TableOrderBy (Alocus Aalleles); (TableMapRows; (TableLeftJoinRightDistinct __uid_3; (TableRead; Table{global:Struct{},key:[locus,alleles],row:Struct{locus:Locus(GRCh38),alleles:Array[String]}}; False (TableNativeReader chr8_51749536.ht )); (TableRead; Table{global:Struct{},key:[locus],row:Struct{locus:Locus(GRCh38),gene:String}}; False (TableNativeReader ch5_and_ch8.ht ))); (InsertFields; (SelectFields (locus alleles) (Ref row)); None; (gene; (GetField gene (GetField __uid_3 (Ref row)))))))); ```; [hail-20230801-1154-0.2.120-be655bbda3cb.log](https://github.com/hail-is/hail/files/12231617/hail-20230801-1154-0.2.120-be655bbda3cb.log)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13339#issuecomment-1660613347:61,Simpl,Simplest,61,https://hail.is,https://github.com/hail-is/hail/issues/13339#issuecomment-1660613347,1,['Simpl'],['Simplest']
Usability,"i went through and manually fixed everything that `--unsafe-fixes` had initially addressed (after undoing the unsafe fixes, obv), and i broke all my changes up into separate commits based on which linter rule they were addressing",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14150#issuecomment-1894479704:98,undo,undoing,98,https://hail.is,https://github.com/hail-is/hail/pull/14150#issuecomment-1894479704,1,['undo'],['undoing']
Usability,"icate is signed by the same root certificate. I think using a root cert is quite secure (a big improvement over our current situation!). However, I endeavored in this PR to additionally prevent, for example, a compromised `notebook` from masquerading as `batch`. I agree that additionally verifying that the certificate came from a single root certificate (that we, perhaps, destroy after everything is signed) would additionally prevent a malicious user from inserting their certificates into the trusted certificates list. AFAICT, python's `ssl` module has no support for this verification strategy. We could probably build an SSLContext shim that contained two SSLContexts one with a root cert and one with the trusted certs and require certification verification to pass both. Seems easy to get wrong, so I'm inclined to not take this path. ### trusted cert lists. Yeah, it felt a little silly to duplicate the cert in each secret. However, this seems like the simplest approach if I require each principal to only trust a subset of incoming/outgoing principals. If I had one secret per principal, then I have to modify build.yaml or deployment.yamls if I modify the trust sets. That seemed error prone. If I had one secret with all the certs, then when a service starts up it has to select the trusted ones and only insert those into its certificate store. This seems OK, but a little harder to inspect. Duplicating a cert for each trust list to which it belongs occupies what seems like a good spot to me from a developer ergonomics perspective:; - O(trusts) modifications necessary to update/revoke the cert; - O(1) configuration to load a trust list; - no pod-start-time configuration; - the trust list is on the container's file system, so its easy to inspect. Small point: I don't pin the incoming certs yet due to the mTLS challenges. ### create on each deploy. Only creating certs if they don't exist is an easy change. Seems fine, though leaves unresolved how to rotate the certs. I guess",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8561#issuecomment-617428243:1664,simpl,simplest,1664,https://hail.is,https://github.com/hail-is/hail/pull/8561#issuecomment-617428243,1,['simpl'],['simplest']
Usability,ildren 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.005ms self 0.005ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.086ms self 0.086ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.011ms self 0.011ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.123ms self 0.054ms children 0.068ms %children 55.59%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.061ms self 0.061ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.O,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:188662,Simpl,Simplify,188662,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ildren 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.006ms self 0.006ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.095ms self 0.095ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.014ms self 0.014ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.114ms self 0.048ms children 0.067ms %children 58.31%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.060ms self 0.060ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.O,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:181637,Simpl,Simplify,181637,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ildren 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.012ms self 0.012ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.173ms self 0.173ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.025ms self 0.025ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.315ms self 0.116ms children 0.199ms %children 63.18%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.153ms self 0.153ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.O,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:15372,Simpl,Simplify,15372,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ildren 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.014ms self 0.014ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.179ms self 0.179ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.028ms self 0.028ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 0.328ms self 0.115ms children 0.213ms %children 64.89%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.164ms self 0.164ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.O,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:8388,Simpl,Simplify,8388,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ildren 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ExtractIntervalFilters.apply total 0.506ms self 0.506ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.500ms self 0.500ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 7.523ms self 7.523ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 4.611ms self 3.590ms children 1.020ms %children 22.13%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply/is.hail.expr.ir.NormalizeNames.apply total 0.442ms self 0.442ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.O,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:4097,Simpl,Simplify,4097,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,"in 7.2 seconds; > ...; > The 20 seconds is: clone from github.com, git-merge; > The 7.2 seconds is: download from GCS, untar; > Just ran the test in the cloud using the google cloud sdk image started by k run, 3.7 seconds; > The download is super fast, like a second; > the untar is about the same in both contexts, 1.2 seconds; > But the download drops from 4.7 to ~1.5. Chris pointed out I should skip going to disk and pipe into tar, I have not timed that yet. I was seeing fetch being more like 8 minutes to my repository. My repository is significantly larger than Alex's. I could delete some old branches to address this. ---. > for inputs/outputs, I wonder if we should have a flag that indicates it is an archive and do the archive/extract automatically (like you've done here but more generally), and stop using cp -r. I almost went down this route. It would save a couple lines of tar/untar in runImage steps. I felt the savings wasn't worth the effort of implementing it. In the buildImage case (what this PR addressed), I think it's worth it to keep images small. > for downstream steps that only need a small part of the repo, is it better to copy out different pieces (archived or no) rather than copy the whole thing and extra the parts you need?. I haven't investigated this. I agree, there exists an inflection point where the size of data overcomes GCS latency and GCS-throughput / tar-decompress is the bottleneck. There's something to be said for tar'ing everything except for `.git`, but I didn't carefully check which steps need it and which steps do not. ---. In conclusion, I'd say this PR is necessary for #7534, and #7534 is a big quality of life improvement for those of us with large repos running tests on images that are deep on the critical path (the shuffler test is behind 3 images and build hail, which also clones the repo, so for my repo I wait at least 2 minutes before I even have a chance to get feedback; with this PR and #7534 I should wait like 45 seconds?).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927:2295,feedback,feedback,2295,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560442927,1,['feedback'],['feedback']
Usability,"ionpool.py"", line 380, in _make_request; httplib_response = conn.getresponse(); File ""/usr/lib/python3.6/http/client.py"", line 1331, in getresponse; response.begin(); File ""/usr/lib/python3.6/http/client.py"", line 297, in begin; version, status, reason = self._read_status(); File ""/usr/lib/python3.6/http/client.py"", line 258, in _read_status; line = str(self.fp.readline(_MAXLINE + 1), ""iso-8859-1""); File ""/usr/lib/python3.6/socket.py"", line 586, in readinto; return self._sock.recv_into(b); socket.timeout: timed out; ```. Seems that the simplest issue may be to increase `read_timeout` past 120 seconds, although depending on the causes of this issue, that may not eliminate the problem, and of course leaves a long delay, which may be unacceptable for the use-case. As for why read takes so long: not 100% sure yet, setting up batch and CI is still incomplete, and I have not triggered this error myself. My guess is that Kubernetes takes too long to generate the response, either due to garbage collection, or simply because the requested information takes N > 120 seconds to return. That would be a very long time for any reasonable response, so either the resource isn't ready and it waits, or there are network connectivity issues. If network issues, not sure what solutions are. If I were on AWS, I would think about using a larger instance, with a higher-bandwidth NIC.; * Possible connection: https://github.com/arangodb/arangodb/issues/7813 ; * Possible solution: Reduce work Kubernetes must do to return response. #### 2nd set of errors:; ```log; # Batch; ERROR	| 2018-12-18 21:25:00,095 	| server.py 	| run_forever:447 | run_forever: target kube_event_loop threw exception; Traceback (most recent call last):; File ""/usr/lib/python3.6/site-packages/urllib3/response.py"", line 601, in _update_chunk_length; self.chunk_left = int(line, 16); ValueError: invalid literal for int() with base 16: b''. # CI; ERROR	| 2018-12-18 21:25:22,041 	| app.py 	| log_exception:1761 | Exception on /re",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389:1569,simpl,simply,1569,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-450444389,1,['simpl'],['simply']
Usability,"ittle unusual in this flow. I still think that it is helpful to set people up with an AR and keep them from footguns, but maybe that can go in a separate command that the initial init command points to once you're done? Something along the lines of ""if you get to the point where you need to upload custom container images, you can use hailctl to set up a registry""?. Another thing that gives me a little pause is the wording around google projects. I get that you need one to create a bucket, but I think we should just make sure to steer clear of the implication that you are ""selecting a GCP project to use for Hail Batch"", because that implies some link or ownership that isn't there. But I think there's a quick fix here: for a given resource that we *are* creating for hail use, like the temp bucket, ask for the name first and then ask which project it should be created in, using the projects listed in gcloud as choices with the option to write in your own. ### Regarding number of checks; I think it'd be good to avoid warnings when possible. From looking at this I see a pattern of; 1. Ask a leading question; 2. Emit a warning if the user selects the alternative option instead of the suggested option. I think I would prefer instead to ask a leading question and in the prompt explain why the alternative option might be undesirable. Then when they make a decision just move on. On a broader note, I think we should focus on having good documentation and linking to it over having perfectly thorough ; explanations in the CLI. At some point in an interactive setup if it gets longwinded I start spamming enter, but if it was quick and at the end it said something to the effect of: ""Your current configuration could result in excess cloud cost. See the documentation <here> about common pitfalls and how to avoid them"", I might decide to read through that FAQ with a more discerning eye. This is just my opinion though, I would be curious to see if other folks disagree regarding the UX.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012:3243,UX,UX,3243,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012,1,['UX'],['UX']
Usability,"ld implement convenience methods for building while/for loops if we decide it's worth it. > Giving each loop a name seems natural. Apart from the wrapping issue (the greatest existential threat our generation faces) I don't see any problem calling an outer loop from an inner loop. Also agree. This will require either adding another context of loops/continuations in the environment (valid places to jump to, and their argument types), or keeping them in the normal value context by adding a new continuation type. > Is Patrick's proposal for extra types written up anywhere?. My proposal has two main differences. In; ```; hl.loop(; lambda i, x:; hl.cond(i < 10, hl.recur(i + 1, x + i), x),; 0, 0); ```; the point that jumps back to the top of the loop is explicit, but the point that jumps out of the loop is not. I suggested making this something like; ```; hl.loop(; lambda i, x:; hl.cond(i < 10, hl.recur(i + 1, x + i), hl.break(x)),; 0, 0); ```; or, if we're giving names to loops, it might be simpler to pass the break and recur functions to the lambda:; ```; hl.loop(; lambda sum, ret, i, x:; hl.cond(i < 10, sum(i + 1, x + i), ret(x)),; 0, 0); ```. The second difference is in the typing. In this PR, the `hl.recur` expression is given the type of the entire loop. I would add a single new type `Bottom`, and give all expressions which jump (both the recur and the break expressions) the type `Bottom`. `Bottom` is the empty type, so there can be no closed expressions of type `Bottom`. In the type checker, `Bottom` is only allowed to appear in tail positions, and for `If`, we keep the rule that both branches must have the same type, so either both branches are `Bottom` or neither are. This keeps the semantics simple: an if statement either makes a value or it jumps away, there's no confusing mix. One nice property of this setup is that if an expression has a non-bottom type, then it is guaranteed not to jump away from itself (it may jump internally), so it is safe to method-wrap.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407:1265,simpl,simpler,1265,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407,1,['simpl'],['simpler']
Usability,"looks like the differences between `--unsafe-fixes` and my manual edits based on the feedback the linter gave were:; * `assert <boolean value> == True` becomes `assert <boolean value> is True`, not `assert <boolean value>`; * `if <value> == foo or <value> == bar` becomes `if <value> in (foo, bar)`, not `if <value> in {foo, bar}`; * `<unused variable> = foo` becomes `foo` instead of being deleted outright. those seem fine, though i think the manual version of the latter two is better in the cases where i had added it, as i only used sets for hashable types and deleted things that didn't have side effects, afaik",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14128#issuecomment-1883396355:85,feedback,feedback,85,https://hail.is,https://github.com/hail-is/hail/pull/14128#issuecomment-1883396355,1,['feedback'],['feedback']
Usability,ly/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.566ms self 0.566ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.445ms self 0.445ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 2.252ms self 0.765ms children 1.487ms %children 66.02%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowerin,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:121639,Simpl,Simplify,121639,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ly/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.609ms self 0.609ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.195ms self 0.195ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 1.409ms self 0.648ms children 0.762ms %children 54.04%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowerin,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:137357,Simpl,Simplify,137357,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,ly/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.NormalizeNames.apply total 0.655ms self 0.655ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.Simplify.apply total 0.184ms self 0.184ms children 0.000ms %children 0.00%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.EvalRelationalLetsPass/is.hail.expr.ir.lowering.EvalRelationalLets.apply/is.hail.expr.ir.lowering.EvalRelationalLets.apply execute/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.LowerOrInterpretNonCompilablePass/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.Compile.apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowering.OptimizePass/is.hail.expr.ir.Optimize.apply/is.hail.expr.ir.ForwardLets.apply total 2.228ms self 1.353ms children 0.875ms %children 39.29%; is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.CompileAndEvaluate._apply/is.hail.expr.ir.lowering.LoweringPipeline#apply/is.hail.expr.ir.lowerin,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141:153144,Simpl,Simplify,153144,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417774141,1,['Simpl'],['Simplify']
Usability,more improvements (though less simple) to come.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6980#issuecomment-527418968:31,simpl,simple,31,https://hail.is,https://github.com/hail-is/hail/pull/6980#issuecomment-527418968,1,['simpl'],['simple']
Usability,"my strategy here was just to undo everything added in [this commit](https://github.com/hail-is/hail/commit/12e0f497db0f3e5453f870495e48e44191b315f4), except the version upgrades, so i'm not sure if there are some changes i'm making here that are unnecessary or produce weird results as far as what all ends up in the jar or anything. from running `jar -tf` on the jar produced by the current `main` and the one produced by the commit prior to the one i'm partially reverting, it looked like the updates to the config only added things to the jar, rather than removing any, so hopefully that should be fine",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13759#issuecomment-1743654792:29,undo,undo,29,https://hail.is,https://github.com/hail-is/hail/pull/13759#issuecomment-1743654792,1,['undo'],['undo']
Usability,"nats are now not types and align more with the ReferenceGenome structure, making for better function signatures. There's a `NatBase` with `Nat` and `NatVariable` as extending classes. For `NatVariable`, instances mutate a single class variable `_nat`. Type variables behave similarly using using a map of name -> box, but I didn't really see the point of ever needing more than one `nat` variable in the same context. Either way it seems a little weird so glad to take feedback.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5737#issuecomment-479528708:469,feedback,feedback,469,https://hail.is,https://github.com/hail-is/hail/pull/5737#issuecomment-479528708,1,['feedback'],['feedback']
Usability,"nformation. Nit: the doc doesn't say the instance monitor monitors instances, it just monitors and handles *events*. Let me be explicit: I think the doc is wrong about the monitor doing health checking because that requires it to track the instances, which I just said should be owned by the pools and the JPIM. That didn't occur to me when we were writing the doc, my apologies. I still think the monitor should:; - route events to the right pool or to the JPIM, and; - aggregate summaries up for the web UI. ---. Let me try to be more specific in my critique:. I think of the system as three layers: the top most is the driver, the middle layer is the monitor, and the bottom layer is the pool or JobPrivateInstanceManager (JPIM). I don't want control flow to go down, up, and back down again. If that happens, then we can't reason about our system as separate layers, we necessarily have to think about the middle and bottom layer together. Very specifically, this flow worries me: (instance pool) create_instance -> (instance monitor) add_instance -> adjust_for_add_instance -> (instance pool) adjust_for_add_instance. We move from low to mid *back to low*. I want information to flow in one direction: either its downward information or its upward information. ---. I'm guessing you're also concerned about code organization / code duplication. I'm not that worried about this. The JPIM and the Pool are similar things and we might inevitably produce some duplication. That's OK with me. To be honest, I think a few stand-alone functions that both of them use will eliminate any code duplication. Both pools and the JPIM will have a `name_instances` and `instance_by_last_updated`. If the duplication gets hard to manage, we might pack that up into another class like InstanceCollection. I realize this means we have several monitoring loops. I'm not very worried about that. I think it's fine and it helps simplify the architecture. It avoids entangling the monitor with the pools and the JPIM.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9772#issuecomment-738515358:2051,simpl,simplify,2051,https://hail.is,https://github.com/hail-is/hail/pull/9772#issuecomment-738515358,1,['simpl'],['simplify']
Usability,"none-any.whl"" which is different from old value ""gs://hail-30-day/hailctl/dataproc/edmund-dev/0.2.129-827516e474c3/hail-0.2.129-py3-none-any.whl""; mkdir -p env; printf ""gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" > env/wheel_cloud_path; rm -f python/hailtop/hailctl/deploy.yaml; echo ""dataproc:"" >> python/hailtop/hailctl/deploy.yaml; for FILE in init_notebook.py vep-GRCh37.sh vep-GRCh38.sh; do \; echo "" $FILE: gs://hail-common/hailctl/dataproc/0.2.129/$FILE"" >> python/hailtop/hailctl/deploy.yaml || exit 1; done; echo "" wheel: gs://hail-common/hailctl/dataproc/0.2.129/hail-0.2.129-py3-none-any.whl"" >> python/hailtop/hailctl/deploy.yaml; printf "" pip_dependencies: "" >> python/hailtop/hailctl/deploy.yaml; cat python/pinned-requirements.txt | sed '/^[[:blank:]]*#/d;s/#.*//' | grep -v pyspark | tr ""\n"" ""|||"" | tr -d '[:space:]' >> python/hailtop/hailctl/deploy.yaml; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; gcloud storage cp python/hailtop/hailctl/dataproc/resources/init_notebook.py python/hailtop/hailctl/dataproc/resources/vep-GRCh37.sh python/hailtop/hailctl/dataproc/resources/vep-GRCh38.sh build/deploy/dist/hail-0.2.129-py3-none-any.whl gs://hail-common/hailctl/dataproc/0.2.129; gcloud storage objects update -r gs://hail-common/hailctl/dataproc/0.2.129 --add-acl-grant=entity=AllUsers,role=READER; gcloud storage objects update ""gs://hail-common/hailctl/dataproc/0.2.129/*"" --temporary-hold; ```. Note the following:; - mill is not invoked; - deploy.yaml is re-made with the correct uris; - the wheel is built",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145:1815,Clear,Clear,1815,https://hail.is,https://github.com/hail-is/hail/pull/14453#issuecomment-2045927145,1,['Clear'],['Clear']
Usability,"ok, let me know when I can try again. I’m now importing another large WES study, hope doesn’t have the same problem.; cheers,. > On Apr 16, 2016, at 5:08 PM, cseed notifications@github.com wrote:; > ; > I think this is due to HDFS filling up. Possibly related to the fact Tim was creating a copy of ExAC. I will retry the job once we clear up some space.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/broadinstitute/hail/issues/301#issuecomment-210901646",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/301#issuecomment-210901896:334,clear,clear,334,https://hail.is,https://github.com/hail-is/hail/issues/301#issuecomment-210901896,1,['clear'],['clear']
Usability,"omment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14692** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14692?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14691** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14691?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14690** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14690?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14686** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @ehigham and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14683#issuecomment-2359375453:1773,Learn,Learn,1773,https://hail.is,https://github.com/hail-is/hail/pull/14683#issuecomment-2359375453,2,['Learn'],['Learn']
Usability,"one sec, need to remove the clearMissingBits function",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7831#issuecomment-572767655:28,clear,clearMissingBits,28,https://hail.is,https://github.com/hail-is/hail/pull/7831#issuecomment-572767655,1,['clear'],['clearMissingBits']
Usability,"one that's been SIGKILL'ed. To understand what's going on, we gotta see what is using RAM in the n1-highmem-16 case. If I could SSH to the cluster, a simple solution is a screen with top -s 300 -n 100 >memory.log (I'd guess no more than 500KiB per hour of logs) and retrieve that file if the cluster fails. If we could get Google Monitoring set up to retrieve process-level memory statistics from the driver node that should also work. Just to be clear, I don't anticipate any changes to Hail in the next week that would change the memory use of this pipeline. There could be a memory leak, but I have no clews that lead to it. I realize this is an unsatisfying answer. I'm pretty perplexed as to what could be the issue here. #### technical details. We'll call the second to most recent run Run A and the most recent run Run B. Run A (like all runs before it) only manages two sample groups before failing. Run B made it through 50 groups before failing on 51. Why did they fail? The syslog for Run A is clear: the oomkiller killed Run A. We lack syslogs for Run B, so we cannot be certain but the lack of a JVM stack trace suggests to me that (a) the driver failed and (b) the driver was killed by the system.; Let's focus on the driver machines. In Run A, we used an n1-highmem-8 which is advertised to have 52GiB (53248 MiB). In Run B, we used an n1-highmem-16 which is advertised to have 104GiB (106,496 MiB). hailctl sets the JVM max heap size to 80% of the advertised RAM, so 42598 MiB (see hailctl's --master-memory-fraction). In Run A (the only run for which we have syslogs), based on the driver's syslog, before Spark starts, the system has already allocated 8500 MiB to Linux/Google/Dataproc daemons. Moreover, the actual RAM of the system (as reported by the earlyoom daemon) is 52223 MiB (51 GiB, 1GiB less than Google advertises for n1-highmem-8). Assuming these daemons never release their memory, all our user code must fit in 43723 MiB. Since the JVM's max heap is 42598 MiB, Python",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449:1822,clear,clear,1822,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832666449,1,['clear'],['clear']
Usability,"python/hail/expr/expressions/typed_expressions.py:934: >>> hl.eval(s1.add(10)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1296: >>> hl.eval(d.key_set()) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1312: >>> hl.eval(d.keys()) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1329: >>> hl.eval(d.map_values(lambda x: x * 10)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:1366: >>> hl.eval(d.values()) # doctest: +NOTEST; Binary file /Users/dking/projects/hail/hail/python/hail/expr/expressions/__pycache__/typed_expressions.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/table.cpython-37.pyc matches; Binary file /Users/dking/projects/hail/hail/python/hail/__pycache__/matrixtable.cpython-37.pyc matches; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:21: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:24: >>> hl.eval(x) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:27: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:30: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; /Users/dking/projects/hail/hail/python/hail/docs/functions/random.rst:42: >>> hl.eval(hl.array([a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198:9048,guid,guides,9048,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-506359198,1,['guid'],['guides']
Usability,"r, there is a [GCS connector](https://www.hdfgroup.org/solutions/cloud-amazon-s3-storage-hdf5-connector/). It's not an object store, but there's also support for [Hadoop HDFS](https://www.hdfgroup.org/solutions/hadoop-hdfs-hdf5-connector/). There's also [the Virtual Object Layer](https://docs.hdfgroup.org/hdf5/develop/_h5_v_l__u_g.html) which appears to be a file system abstraction that would permit storing HDF5 ""files"" in multiple objects which plays well with cloud object store scaling. We should prioritize an importer because no one has asked for HDF5 export nor is it clear that the HDF5 client libraries make it easy to write a single HDF5 ""file"" from a cluster of cores separated by a network. An importer would look something like `MatrixVCFReader`. It will need to use an HDF5 Java client library. An HDF5 client API is described [here](https://docs.hdfgroup.org/hdf5/develop/_h_d_f5_l_i_b.html) but they don't link to any JARs or maven repositories. This [support thread from 2022](https://forum.hdfgroup.org/t/how-to-get-started-wih-hdf5-java/10346/14) appears to ultimately conclude that [netcdf-java](https://forum.hdfgroup.org/t/how-to-get-started-wih-hdf5-java/10346/24) supports reading HDF5 files. Including netcdf-java in a gradle or maven project is described [here](https://docs.unidata.ucar.edu/netcdf-java/current/userguide/using_netcdf_java_artifacts.html). It is not entirely clear how to use netcdf-java to access objects in Google Cloud Storage or Azure Blob Storage. There's an [open issue to support S3](https://github.com/Unidata/netcdf-java/issues/111). ---. OK, so, this is roughly what I'd do:. Driver side:; 1. Get the schema, cook up a corresponding Hail type.; 2. Choose a partitioning of the index space. Worker side:; 1. Read the same slice of each field/column based on the partition information.; 2. Construct a Hail SType/PType. See `GVCFPartitionReader` for an example. That class is misnamed, it's just a VCF partition reader, its not specific to GVCFs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14311#issuecomment-1955112694:1792,clear,clear,1792,https://hail.is,https://github.com/hail-is/hail/issues/14311#issuecomment-1955112694,1,['clear'],['clear']
Usability,r.functions.qnorm:1: WARNING: py:meth reference target not found: pnorm; /Users/dking/projects/hail/hail/python/hail/expr/functions.py:docstring of hail.expr.functions.qpois:1: WARNING: py:meth reference target not found: ppois; /Users/dking/projects/hail/hail/python/hail/expr/functions.py:docstring of hail.expr.functions.qpois:15: WARNING: py:meth reference target not found: ppois; /Users/dking/projects/hail/hail/python/hail/genetics/pedigree.py:docstring of hail.genetics.pedigree.Pedigree.filter_to:: WARNING: py:class reference target not found: list of str; /Users/dking/projects/hail/hail/python/hail/genetics/pedigree.py:docstring of hail.genetics.pedigree.Pedigree.write:14: WARNING: py:meth reference target not found: hail.KeyTable.import_fam; /Users/dking/projects/hail/hail/python/hail/genetics/reference_genome.py:docstring of hail.genetics.reference_genome.ReferenceGenome.write:10: WARNING: py:meth reference target not found: hail.ReferenceGenome.read; /Users/dking/projects/hail/hail/python/hail/docs/guides/api.rst:19: WARNING: py:func reference target not found: Table.show; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:docstring of hail.expr.expressions.typed_expressions.CallExpression.one_hot_alleles:25: WARNING: py:obj reference target not found: tint32; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:docstring of hail.expr.expressions.typed_expressions.IntervalExpression.overlaps:11: WARNING: py:data reference target not found: tinterval; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:docstring of hail.expr.expressions.typed_expressions.NDArrayExpression.T:5: WARNING: py:func reference target not found: transpose; /Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py:docstring of hail.expr.expressions.typed_expressions.NDArrayNumericExpression.T:5: WARNING: py:func reference target not found: transpose; /Users/dking/projects/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9403#issuecomment-685996666:11578,guid,guides,11578,https://hail.is,https://github.com/hail-is/hail/pull/9403#issuecomment-685996666,1,['guid'],['guides']
Usability,"s explicit, but the point that jumps out of the loop is not. I suggested making this something like; ```; hl.loop(; lambda i, x:; hl.cond(i < 10, hl.recur(i + 1, x + i), hl.break(x)),; 0, 0); ```; or, if we're giving names to loops, it might be simpler to pass the break and recur functions to the lambda:; ```; hl.loop(; lambda sum, ret, i, x:; hl.cond(i < 10, sum(i + 1, x + i), ret(x)),; 0, 0); ```. The second difference is in the typing. In this PR, the `hl.recur` expression is given the type of the entire loop. I would add a single new type `Bottom`, and give all expressions which jump (both the recur and the break expressions) the type `Bottom`. `Bottom` is the empty type, so there can be no closed expressions of type `Bottom`. In the type checker, `Bottom` is only allowed to appear in tail positions, and for `If`, we keep the rule that both branches must have the same type, so either both branches are `Bottom` or neither are. This keeps the semantics simple: an if statement either makes a value or it jumps away, there's no confusing mix. One nice property of this setup is that if an expression has a non-bottom type, then it is guaranteed not to jump away from itself (it may jump internally), so it is safe to method-wrap. This also make codegen very simple, and @iitalics has already implemented it! See `JoinPoint` and `JoinPoint.CallCC`. In the IR, I don't think this requires much change. If we're already adding a continuation context (as mentioned above), then `TailLoop` just needs to bind both a recur and a break continuation, where recur takes the loop variable types, and break takes the loop result type. Then `Recur` can be replaced by a `Jump` node which calls (jumps to) a continuation in context. There's also a middle ground where we make break continuations explicit in the IR, but we want to keep the scheme-like interface in python. Then the pass @cseed described for inferring where the loop exits are would just go in python instead of the emitter. > Using",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407:1989,simpl,simple,1989,https://hail.is,https://github.com/hail-is/hail/pull/7614#issuecomment-559072407,1,['simpl'],['simple']
Usability,"s/random.rst:27: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; docs/functions/random.rst:30: >>> hl.eval(hl.rand_unif(0, 1)) # doctest: +NOTEST; docs/functions/random.rst:33: >>> hl.eval(hl.array([x, x, x])) # doctest: +NOTEST; docs/functions/random.rst:42: >>> hl.eval(hl.array([a, b, c])) # doctest: +NOTEST; docs/functions/random.rst:50: >>> table.show() # doctest: +NOTEST; docs/functions/random.rst:72: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:75: >>> hl.eval(hl.rand_unif(0, 1, seed=0)) # doctest: +NOTEST; docs/functions/random.rst:82: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:90: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:98: >>> table.x.collect() # doctest: +NOTEST; docs/functions/random.rst:110: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/functions/random.rst:114: >>> hl.eval(hl.array([hl.rand_unif(0, 1), hl.rand_unif(0, 1)])) # doctest: +NOTEST; docs/guides/basics.rst:95: >>> mt.describe() # doctest: +NOTEST; docs/guides/basics.rst:141: >>> ht.describe() # doctest: +NOTEST; docs/guides/basics.rst:164: >>> mt.s.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:68: >>> mt # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:71: >>> mt.locus # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:83: >>> mt.DP.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:107: >>> mt.describe() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:266: >>> mt_new.replicate_num.show() # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:299: >>> mt.aggregate_entries(hl.agg.mean(mt.GQ)) # doctest: +NOTEST; docs/hailpedia/matrix_table.rst:307: >>> mt.aggregate_entries((agg.stats(mt.DP), agg.stats(mt.GQ))) # doctest: +NOTEST; docs/hailpedia/table.rst:63: >>> ht.describe() # doctest: +NOTEST; docs/hailpedia/table.rst:102: >>> ht # doctest: +NOTEST; docs/hailpedia/table.rst:105: >>> ht.ID # doctest: +NOTEST; experimental",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878:1197,guid,guides,1197,https://hail.is,https://github.com/hail-is/hail/issues/4817#issuecomment-451506878,1,['guid'],['guides']
Usability,"simpler:; ```; In [12]: import hail as hl; ...: ; ...: t1kg = hl.utils.range_matrix_table(1,1); ...: t1kg = t1kg.key_rows_by(locus=hl.locus(hl.str(t1kg.row_idx), t1kg.row_idx), alleles=['A','T']); ...: t1kg = hl.split_multi(t1kg); ...: t1kg._force_count_rows(); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4527#issuecomment-429050886:0,simpl,simpler,0,https://hail.is,https://github.com/hail-is/hail/issues/4527#issuecomment-429050886,1,['simpl'],['simpler']
Usability,"simpler:; ```; In [16]: import hail as hl; ...: ; ...: t1kg = hl.utils.range_matrix_table(1,1); ...: t1kg = t1kg.key_rows_by(locus=hl.locus(hl.str(t1kg.row_idx+1), t1kg.row_idx+1), alleles=['A','T']); ...: t1kg.write('/tmp/foo.mt', overwrite=True); 2018-10-11 13:42:55 Hail: INFO: Coerced sorted dataset; 2018-10-11 13:42:55 Hail: INFO: wrote 1 items in 1 partitions to /tmp/foo.mt; ^[[A; In [17]: import hail as hl; ...: ; ...: t1kg = hl.read_matrix_table('/tmp/foo.mt'); ...: t1kg = hl.split_multi(t1kg); ...: t1kg._force_count_rows(); ```; error:; ```; FatalError: HailException: optimization changed type!; before: Matrix{global:Struct{},col_key:[col_idx],col:Struct{col_idx:Int32},row_key:[[locus,alleles]],row:Struct{row_idx:Int32,locus:Locus(GRCh37),alleles:Array[String],a_index:Int32,was_split:Boolean,old_locus:Locus(GRCh37),old_alleles:Array[String]},entry:Struct{}}; after: Matrix{global:Struct{},col_key:[col_idx],col:Struct{col_idx:Int32},row_key:[[locus,alleles]],row:Struct{row_idx:Int32,locus:Locus(GRCh37),alleles:Array[String],a_index:Int32,was_split:Boolean,old_locus:Locus(GRCh37),old_alleles:Array[String]},entry:Struct{}}; ```; describe:; ```; In [18]: import hail as hl; ...: ; ...: t1kg = hl.read_matrix_table('/tmp/foo.mt').describe(); ...: ; ----------------------------------------; Global fields:; None; ----------------------------------------; Column fields:; 'col_idx': int32 ; ----------------------------------------; Row fields:; 'row_idx': int32 ; 'locus': locus<GRCh37> ; 'alleles': array<str> ; ----------------------------------------; Entry fields:; None; ----------------------------------------; Column key: ['col_idx']; Row key: ['locus', 'alleles']; ----------------------------------------; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4527#issuecomment-429051397:0,simpl,simpler,0,https://hail.is,https://github.com/hail-is/hail/issues/4527#issuecomment-429051397,1,['simpl'],['simpler']
Usability,"so I can remove the computeEigenvalues option and just always return them, but I'm less clear on the loadings. @tpoterba are you suggesting that I can remove the computeLoadings option because the computation is lazy? Does passing the KeyTable object through to python count as ""using"", though?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2454#issuecomment-348580540:88,clear,clear,88,https://hail.is,https://github.com/hail-is/hail/pull/2454#issuecomment-348580540,1,['clear'],['clear']
Usability,"sorry, I think I wasn't clear -- you can put them in globals when doing `mt.localize_entries` by passing both the `entries_field_name` and `columns_array_field_name` params.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9121#issuecomment-662700219:24,clear,clear,24,https://hail.is,https://github.com/hail-is/hail/issues/9121#issuecomment-662700219,1,['clear'],['clear']
Usability,"sorry, wasn't clear. I don't think it's trivial to figure out what a no-args checkpoint should do, but it IS trivial to make that change back-compatibly when we do.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5528#issuecomment-469468966:14,clear,clear,14,https://hail.is,https://github.com/hail-is/hail/pull/5528#issuecomment-469468966,1,['clear'],['clear']
Usability,"specific Hail Query functionality, let's mirror that structure. Let's move REGENIE and any non-Python dependencies of it into `hailtop/batch/genetics/regenie`. Sure. > How is the Dockerfile meant to be used? As written it doesn't appear that it would work because there doesn't exist any regenie source code to COPY in. It's meant to create a Regenie docker image that we could use. It's a copy of the regenie c++ repo's dockerfile, with the removal of the ENTRYPOINT /usr/local/bin/regenie, so that I could issue a command that included an executable, which is convenient to give me the ability to check that intermediate files are actually created (wc, ls) by batch, and because that seems more idiomatic for batch. I don't think there is a published regenie image, but docker hub is down so can't double check. . You're right, I shouldn't have deleted the bulk of the repo, kept as is. Didn't want to deal with submodules. > I've made some other in-line comments in the python file. It's not clear to me how all those other files are related to the python files and I'm a bit uncomfortable adding a whole directory with a LICENSE file, especially when not all the files in the directory fall under that license (e.g. the regenie py file) and moreover the license makes claims about things linking to BGEN, which none of our code here does. The license is only contained within the folder with the licensed files. In a previous conversation with Nate/Cotton, if we use any open-source software, best to keep those files segregated, alongside their license (license must be kept alongside the code, easier to see the demarcation if in a separate folder). > We have some BGEN files for testing in the Hail src/test/resources. I already have an example provided. The example folder contains the config for that, and the regenie folder contains the example. We need an example that has a known result, and regenie's c++ repo conveniently provides that. This is what the regenie/regenie folder contains.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987:1323,clear,clear,1323,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987,1,['clear'],['clear']
Usability,"sses that backslash and newline to the shell. In Make 3.81, the `\` was also required but the newline and backslash *are not passed* to the shell. In other words: in 3.81, backslash-newline is always replaced with a space and in 4.0, backslash-newline is replaced with a space *except on recipe lines in which case it is necessary to indicate the recipe continues but it is also passed literally to the shell*. The docs page you linked directly addresses our use case and suggests we put the command inside of a make variable (thus triggering normal backslash-newline rules rather than the special recipe line rules). > Sometimes you want to split a long line inside of single quotes, but you don’t want the backslash/newline to appear in the quoted content. This is often the case when passing scripts to languages such as Perl, where extraneous backslashes inside the script can change its meaning or even be a syntax error. One simple way of handling this is to place the quoted string, or even the entire command, into a make variable then use the variable in the recipe. In this situation the newline quoting rules for makefiles will be used, and the backslash/newline will be removed. If we rewrite our example above using this method:; > ; > ```; > HELLO = 'hello \; > world'; > ; > all : ; @echo $(HELLO); > ```; > ; > we will get output like this:; > ; > ```; > hello world; > ```; >; > If you like, you can also use target-specific variables (see [Target-specific Variable Values](https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html)) to obtain a tighter correspondence between the variable and the recipe that uses it. It seems to me like there are not any great choices. Putting the JSON into a Make variable seems too magical and likely to confuse a newbie editing this file. Using escaped double quotes is less legible than literal JSON. Putting the whole JSON array on one line is quite long. I guess we can go with double quotes for now. I tested on Make 3.81 a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14138#issuecomment-1894411324:1080,simpl,simple,1080,https://hail.is,https://github.com/hail-is/hail/pull/14138#issuecomment-1894411324,1,['simpl'],['simple']
Usability,"sure, seems clearer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12213#issuecomment-1254048690:12,clear,clearer,12,https://hail.is,https://github.com/hail-is/hail/pull/12213#issuecomment-1254048690,1,['clear'],['clearer']
Usability,"tHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14751** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14747** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @grohli and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14747#issuecomment-2438734907:1740,Learn,Learn,1740,https://hail.is,https://github.com/hail-is/hail/pull/14747#issuecomment-2438734907,1,['Learn'],['Learn']
Usability,"tHub because a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14751** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14751?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14747** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14747?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14684** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14684?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14686](https://github.com/hail-is/hail/pull/14686) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14686?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14683** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14683?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @grohli and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14751#issuecomment-2457987492:1740,Learn,Learn,1740,https://hail.is,https://github.com/hail-is/hail/pull/14751#issuecomment-2457987492,1,['Learn'],['Learn']
Usability,take a look and tell me if this helps simplify this trigger,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1670091762:38,simpl,simplify,38,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1670091762,1,['simpl'],['simplify']
Usability,"tely crucial piece of configuration before you can do anything interesting and configuring a temp bucket is something that `hailctl` can easily be very opinionated about. Container registry… I feel like there's harder questions there, and you can run a lot of cool batches before having to worry about provisioning your own. It's also not actually a part of the hailctl config (unless something has changed recently) so it feels a little unusual in this flow. I still think that it is helpful to set people up with an AR and keep them from footguns, but maybe that can go in a separate command that the initial init command points to once you're done? Something along the lines of ""if you get to the point where you need to upload custom container images, you can use hailctl to set up a registry""?. Another thing that gives me a little pause is the wording around google projects. I get that you need one to create a bucket, but I think we should just make sure to steer clear of the implication that you are ""selecting a GCP project to use for Hail Batch"", because that implies some link or ownership that isn't there. But I think there's a quick fix here: for a given resource that we *are* creating for hail use, like the temp bucket, ask for the name first and then ask which project it should be created in, using the projects listed in gcloud as choices with the option to write in your own. ### Regarding number of checks; I think it'd be good to avoid warnings when possible. From looking at this I see a pattern of; 1. Ask a leading question; 2. Emit a warning if the user selects the alternative option instead of the suggested option. I think I would prefer instead to ask a leading question and in the prompt explain why the alternative option might be undesirable. Then when they make a decision just move on. On a broader note, I think we should focus on having good documentation and linking to it over having perfectly thorough ; explanations in the CLI. At some point in an interacti",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012:1786,clear,clear,1786,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648633012,1,['clear'],['clear']
Usability,"that one is simple:; ```; def get_old_mu_data() -> hl.Table:; old_mu_data = hl.import_table('gs://gnomad-resources/constraint/source/fordist_1KG_mutation_rate_table.txt',; delimiter=' ', impute=True); return old_mu_data.transmute(context=old_mu_data['from'], ref=old_mu_data['from'][1],; alt=old_mu_data.to[1]).key_by('context', 'ref', 'alt'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4314#issuecomment-420405426:12,simpl,simple,12,https://hail.is,https://github.com/hail-is/hail/issues/4314#issuecomment-420405426,1,['simpl'],['simple']
Usability,"the error in #4529 was:; ```; ERROR: Create cluster failed!; ERROR: gcloud crashed (AttributeError): 'Operation' object has no attribute 'details'. If you would like to report this issue, please run the following command:; gcloud feedback. To check gcloud for common problems, please run the following command:; gcloud info --run-diagnostics; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 11, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 76, in main; start.main(args); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/start.py"", line 237, in main; check_call(cmd); File ""/home/hail/.conda/envs/hail/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'ci-test-nhxn5owt', '--image-version=1.2-deb9', '--metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/ba8134f0f121a49ea96d7dd30ea3be330802cfef/784ab2796878cd2f825c554e80d29d304f21d0f4/hail.jar,ZIP=gs://hail-ci-0-1/temp/ba8134f0f121a49ea96d7dd30ea3be330802cfef/784ab2796878cd2f825c554e80d29d304f21d0f4/hail.zip', '--properties=spark:spark.driver.memory=41g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1', '--initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-init-docker.sh', '--master-machine-type=n1-highmem-8', '--master-boot-disk-size=100GB', '--num-master-local-ssds=0', '--num-preemptible-workers=0', '--num-worker-local-ssds=0', '--num-workers=2', '--preemptible-worker-boot-disk-size=40GB', '--worker-boot-disk-size=40', '--worker-machine-type=n1-highmem-8', '--",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-431996515:230,feedback,feedback,230,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-431996515,1,['feedback'],['feedback']
Usability,the getting_started docs now point to using conda envs with the environment.yml. Thanks for the feedback @verdurin!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2978#issuecomment-378608438:96,feedback,feedback,96,https://hail.is,https://github.com/hail-is/hail/issues/2978#issuecomment-378608438,1,['feedback'],['feedback']
Usability,"the script may be clearer and easier to extend if written in python, too.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5910#issuecomment-484684296:18,clear,clearer,18,https://hail.is,https://github.com/hail-is/hail/pull/5910#issuecomment-484684296,1,['clear'],['clearer']
Usability,"to be clear, the comment on default is a conversation starter, not a change request",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8164#issuecomment-591670074:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/8164#issuecomment-591670074,1,['clear'],['clear']
Usability,"to be clear, there is an option to display row fields, but it defaults to `False`. There's a lot of visual noise if you show both.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5677#issuecomment-476797101:6,clear,clear,6,https://hail.is,https://github.com/hail-is/hail/pull/5677#issuecomment-476797101,1,['clear'],['clear']
Usability,"ugh, this PR is quite mislabeled. This was meant to be the secondary indexing stub -- the last commit here -- but was stacked on the keyed_intersection stuff (which has merged to main in another PR) and I didn't fix up the title. I'll rebase to make this clearer as an example for us to poke at indexing for seqr, and make the warning fix in another PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12539#issuecomment-1349720433:255,clear,clearer,255,https://hail.is,https://github.com/hail-is/hail/pull/12539#issuecomment-1349720433,1,['clear'],['clearer']
Usability,"ugh. just to be clear, this is just removing the `:`s right? (to force converting to tables most of the time). but you are planning on keeping `[]` generally (maybe as shorthand if you suggest generally using `index_*`)?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4383#issuecomment-423410409:16,clear,clear,16,https://hail.is,https://github.com/hail-is/hail/pull/4383#issuecomment-423410409,1,['clear'],['clear']
Usability,update: took 160s on profile225 (2.0GB as .vcf.gz). The size input to LD Prune (after filtering and split-multi) is 700MB (as mt). 1KG is 16MB as an mt. There's clearly a lot of overhead for small datasets.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5078#issuecomment-452419381:161,clear,clearly,161,https://hail.is,https://github.com/hail-is/hail/pull/5078#issuecomment-452419381,1,['clear'],['clearly']
Usability,"use a downstack PR is open. Once all requirements are satisfied, merge this PR as a stack <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14533?utm_source=stack-comment-downstack-mergeability-warning"" >on Graphite</a>.</b>; > <a href=""https://graphite.dev/docs/merge-pull-requests"">Learn more</a>. * **#14533** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14533?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a> 👈; * **#14509** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14509?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * **#14514** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14514?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>: 1 other dependent PR ([#14554](https://github.com/hail-is/hail/pull/14554) <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14554?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>); * **#14517** <a href=""https://app.graphite.dev/github/pr/hail-is/hail/14517?utm_source=stack-comment-icon"" target=""_blank""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""10px"" height=""10px""/></a>; * `main`. This stack of pull requests is managed by Graphite. <a href=""https://stacking.dev/?utm_source=stack-comment"">Learn more about stacking.</a>; <h2></h2>. Join @patrick-schultz and the rest of your teammates on <a href=""https://graphite.dev?utm-source=stack-comment""><img src=""https://static.graphite.dev/graphite-32x32-black.png"" alt=""Graphite"" width=""11px"" height=""11px""/> <b>Graphite</b></a>; <!-- Current dependencies on/for this PR: -->",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14533#issuecomment-2098889324:1740,Learn,Learn,1740,https://hail.is,https://github.com/hail-is/hail/pull/14533#issuecomment-2098889324,1,['Learn'],['Learn']
Usability,"v oauth2 key. Alternatively, we should create a separate login flow doesn't use oauth2 but uses production credentials.; - and interactively tested notebook2 creating notebooks (but haven't tested the config of the notebooks themselves). Summary of changes:; - auth service that handles login/logout flow via Google OAuth2 and user verification via /userdata endpoint. Web sessions are stored in the aiohttp_session cookie (encrypted), command line sessions are stored in tokens file: tokens.json. Token files potentially contain tokens for multiple namespaces (e.g. default and cseed in the example workflow above).; - sessions are now started in the database, table `users.sessions`, which have session_id (32 random bytes, base64-encoded), user_id, creation time and max_age (for expiry); - I write notebook2 to use our async stack; - added a notion of ""deploy config"" that has three parts: location (one of external, k8s or gce), default_namespace (the default namespace to find services), and service_namespace (of overrides for specific services ... so e.g. you can use the default auth with batch in cseed). deploy_config main function is to construct URLs to contact services.; - JWTs and the jwt secret key are gone.; - Simplified configuration/data file handling by enforcing consistent defaults. File paths should be determined by the location, which is loaded from HAIL_DEPLOY_CONFIG_FILE. If that isn't set, I look in ~/.hail/deploy_config.json, and if that doesn't exist, use external/default. All other configuration files are determined by the location: the tokens file is in ~/.hail/tokens.json for external, in /user-tokens/tokens.json for k8s, etc. What remains:; - what a `hailctl dev config` to set the (local) deploy config for switching between default and dev namespaces.; - salt session IDs in the database; - dev oauth2 key; - add `dev deploy` service override option so we can use production/default auth with services deployed in dev namespaces. These are all pretty easy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251:1972,Simpl,Simplified,1972,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251,1,['Simpl'],['Simplified']
Usability,"we're thinking that GitHub issues should just be bug reports / problems with a clear fix that can be addressed with a maximum of a few commits. Feature requests should be in the forum, development discuss in in dev.hail.is or Zulip dev channel.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8009#issuecomment-613667435:79,clear,clear,79,https://hail.is,https://github.com/hail-is/hail/issues/8009#issuecomment-613667435,1,['clear'],['clear']
Usability,what if you do a simpler benchmark: `filter_genotypes('g.gq > 20')`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1292#issuecomment-275122784:17,simpl,simpler,17,https://hail.is,https://github.com/hail-is/hail/pull/1292#issuecomment-275122784,1,['simpl'],['simpler']
Usability,whoops this clearly broke batch somehow,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13053#issuecomment-1548722663:12,clear,clearly,12,https://hail.is,https://github.com/hail-is/hail/pull/13053#issuecomment-1548722663,1,['clear'],['clearly']
Usability,will add this to the style guide when I update it,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3065#issuecomment-370182016:27,guid,guide,27,https://hail.is,https://github.com/hail-is/hail/pull/3065#issuecomment-370182016,1,['guid'],['guide']
Usability,"with the new mypy update, mypy complains if we don't use the type stubs for our dependencies. This is fixed in main (we add the type stubs) but not in the previously released pip hail, because well it's already released. One option is we decide we don't like this requirement and disable that for mypy (though I do enjoy having the type hints). The problem remains that we lint the released version with the `setup.cfg` on main, so this will fail if we ever tighten our linting. It's not clear to me why we want to lint already-released hail",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1061947409:488,clear,clear,488,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1061947409,1,['clear'],['clear']
Usability,"yeah this was a simple error, forgot to do one upstream processing step",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11413#issuecomment-1050268863:16,simpl,simple,16,https://hail.is,https://github.com/hail-is/hail/issues/11413#issuecomment-1050268863,1,['simpl'],['simple']
Usability,yes much clearer. Corrected!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1423#issuecomment-281794307:9,clear,clearer,9,https://hail.is,https://github.com/hail-is/hail/pull/1423#issuecomment-281794307,1,['clear'],['clearer']
Usability,"yes, sure. I'll ask Kumar for more feedback tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7240#issuecomment-540264157:35,feedback,feedback,35,https://hail.is,https://github.com/hail-is/hail/pull/7240#issuecomment-540264157,1,['feedback'],['feedback']
Usability,"your intuition is exactly what we're doing. We look for bind and lambda AST nodes, add those to the declared scope. If we find a `top_level=False` reference not in that scope, we error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3055#issuecomment-369986005:5,intuit,intuition,5,https://hail.is,https://github.com/hail-is/hail/pull/3055#issuecomment-369986005,1,['intuit'],['intuition']
