quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:147,config,configuring,147,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,2,"['config', 'portab']","['configuring', 'portable']"
Modifiability,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:172,Config,Configuration,172,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139,1,['Config'],['Configuration']
Modifiability,"When passing the -DCMAKE_INSTALL_PREFIX=/home/user/directory at the top-level build this flag does not get passed on to cmake processes that are called by the main, like in my case pybind11. As a result cmake tries to install that package in /usr/local. Is there any way around it other than manually installing all the dependencies?; ; ```; [100%] Built target pybind11_tests; Install the project...; -- Install configuration: ""MinSizeRel""; -- Installing: /usr/local/include/pybind11; CMake Error at cmake_install.cmake:41 (file):; file INSTALL cannot make directory ""/usr/local/include/pybind11"":; Permission denied; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548:413,config,configuration,413,https://psicode.org,https://github.com/psi4/psi4/issues/1548,1,['config'],['configuration']
Modifiability,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271928177:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177,1,['plugin'],['plugin']
Modifiability,"Where was/is the check for the PSI_SCRATCH environmental variable? I'm okay with supporting the standard TMPDIR and family of variables, but I'd also like to see PSI_SCRATCH checked as not to break things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105554198:57,variab,variable,57,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105554198,2,['variab'],"['variable', 'variables']"
Modifiability,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:33,variab,variable,33,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,1,['variab'],['variable']
Modifiability,While I agree raw ASCII isn't particularly a good way to go for information transfer as you noted it does seem to be in many places already. Does FCIDUMP become all that large? It would be hard to justify HDF5 for just a few megabytes of data when there are other formats like JSON/MsgPack/etc that are much more portable. Microsoft Quantum has a way of passing FCIDUMP like data using YAML with NWChem: https://docs.microsoft.com/en-us/quantum/libraries/chemistry/schema/spec?view=qsharp-preview. However that representation is pretty horrible in terms of data density.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449644430:313,portab,portable,313,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449644430,1,['portab'],['portable']
Modifiability,While im thinking of it could you replace all the `type` and `file` variable names to something else so they are not Python reserved objects/types? LGTM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532#issuecomment-263686733:68,variab,variable,68,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263686733,1,['variab'],['variable']
Modifiability,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234:173,variab,variable,173,https://psicode.org,https://github.com/psi4/psi4/issues/2234,2,['variab'],['variable']
Modifiability,"While testing out some enhancements to third-order SAPT, Jonathan Waldrop and I seem to have found a bug in the E(30)ind implementation in psi4/psi4/src/psi4/libsapt_solver/ind30.cc. The E(30)ind correction is given by Eq. (72) of JCP 125, 154107 (2006), which stems from evaluating the matrix elements in Eq. (75) using the second-order induction amplitudes in Eq. (79). Psi4 proceeds slightly differently, by actually evaluating the induction amplitudes from Eq. (79) (as far as I can see, the code in psi4/psi4/src/psi4/libsapt_solver/amplitudes.cc matches Eq. (79) exactly) and contracting them with the \omega electrostatic potential matrix elements in psi4/psi4/src/psi4/libsapt_solver/ind30.cc in SAPT2p3::ind30(). The problem is that this algorithm accounts for the first 2 matrix elements in Eq. (75) but not for the last one, <VS_AS_B>. Unless I understand something incorrectly, the Psi4 code is missing the <VS_AS_B> contribution in E(30)ind. Going now back to Eq. (72), it is easy to prove that <VS_AS_B>=4s^r_a v^{ab}_{rs} s^s_b, that is, it contributes a quarter of the last term in Eq. (72). Our working hypothesis was that, because of the omission of this term, E(30)ind programmed in Psi4 has the last term in Eq. (72) multiplied by 12 instead of 16. Therefore, Jonathan modified his Psi4NumPy E(30)ind code to include this last term with the incorrect factor of 12, and now his values are matching Psi4 perfectly! In other words, we are quite certain that the Psi4 implementation includes the last term in Eq. (72) with an erroneous factor of 12 instead of 16. Fortunately, this doesn’t affect the SAPT2+(3) or SAPT2+3 results that also include delta HF, but it will (slightly) affect the third-order SAPT results computed without delta HF. I think the E(30)ind,resp code is fine but the wrong E(30)ind will slightly affect the scaled approximated value of E(30)exch-ind,resp. Please let me know if I need to explain anything better or if I can be of any further help. All the best,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677:23,enhance,enhancements,23,https://psicode.org,https://github.com/psi4/psi4/issues/1677,1,['enhance'],['enhancements']
Modifiability,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:140,extend,extend,140,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['extend'],['extend']
Modifiability,Windows Azure config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:14,config,config,14,https://psicode.org,https://github.com/psi4/psi4/pull/2018,1,['config'],['config']
Modifiability,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:170,config,configuration,170,https://psicode.org,https://github.com/psi4/psi4/issues/3067,1,['config'],['configuration']
Modifiability,"With current master on Ubuntu 15.04. ```; $ ./setup obj2 --python=/usr/bin/python3; [... snip ...]. $ grep PYTHON build/CMakeCache.txt ; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_python.a; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_python.a; PYTHON_INCLUDE_DIR:PATH=/usr/include/python3.4m; PYTHON_INTERPRETER:UNINITIALIZED=/usr/bin/python3; PYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython2.7.so; PYTHON_LIBRARY_DEBUG:FILEPATH=PYTHON_LIBRARY_DEBUG-NOTFOUND; [... snip ...]; ```. Note that the include path points to the python3 headers, but the library path points incorrectly libpython2.7.so. The idea of https://github.com/psi4/psi4public/blob/master/cmake/ConfigPython.cmake#L37-L39 should be to select matching headers/library.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/163:730,Config,ConfigPython,730,https://psicode.org,https://github.com/psi4/psi4/issues/163,1,['Config'],['ConfigPython']
Modifiability,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:176,variab,variable,176,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875,1,['variab'],['variable']
Modifiability,"With the current code, when `make update_version` is run with py3, the fields variable is something like `[""b'f9256f7\\n'""]`, with the extra escaped newline.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/159:78,variab,variable,78,https://psicode.org,https://github.com/psi4/psi4/pull/159,1,['variab'],['variable']
Modifiability,"Working Notes:. PSI4: Git: Rev {master} ad9c3d9; Config: RHEL/icpc/MKL/Debug; Hardware: i7x6, 64GB, 2TB. Running with GDB:. 30 GB/12 threads - passes, max memory ~27 GB, ~25 mins; 40 GB/12 threads - Segfault! . Source:. Program received signal SIGSEGV, Segmentation fault.; 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; #2 0x0000000001bc54f7 in psi::dfmp2::RDFMP2::form_L (this=0xeb31d30); at /theoryfs2/ds/parrish/psi4public/src/bin/dfmp2/mp2.cc:1912. mp2.cc:1912 zeros Gmn, a three-center tensor which is currently 1896 x 1086^2 = 2236134816, which as we all know is just above 2^31 - 1 = 2147483647. So I suspect:. frame 1; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; 1002 memset(&(matrix_[h][0][0]), 0, size);; (gdb) print size; $1 = 18446744057257762112. Yep, matrix zero is FUBAR. The offending line is matrix.cc:999:. ```; size = rowspi_[h] * colspi_[h^symmetry_] * sizeof(double);; ```. Changed to:. ```; size = rowspi_[h] * ((size_t) colspi_[h^symmetry_]) * sizeof(double);; ```. Ed and I once worked out that casting to size_t works properly if the left-most element in a chain of integer multiplies is size_t. But I don't completely trust that, and so often do all work in size_t. I'll close if working in another half hour.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/119#issuecomment-130852343:49,Config,Config,49,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130852343,1,['Config'],['Config']
Modifiability,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344706017:39,plugin,plugin,39,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017,2,['plugin'],"['plugin', 'plugins']"
Modifiability,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,adapt,adapted,58,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139,1,['adapt'],['adapted']
Modifiability,Yay! Should the headers be removed from the ambit plugin template?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/735#issuecomment-307127282:50,plugin,plugin,50,https://psicode.org,https://github.com/psi4/psi4/pull/735#issuecomment-307127282,1,['plugin'],['plugin']
Modifiability,"Ycoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 238, in normalize_shell; self.contraction_normalization(); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 228, in contraction_normalization; self.PYcoef[i] *= norm. UnboundLocalError: local variable 'norm' referenced before assignment; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:2241,variab,variable,2241,https://psicode.org,https://github.com/psi4/psi4/issues/846,1,['variab'],['variable']
Modifiability,"Yea, I realized that `HD_KAVE` only delays this result to about 50 angstroms, so I had removed that suggestion. The FCI Hamiltonian of your supplied geometry is diagonal so your eigenvectors are unit vectors (hence the `1`'s). The warnings are, in perhaps an obscure way, telling you that the wrong symmetry is found in the H0 block eigenvectors. The overlap between the Gaussian basis functions is a hard zero after about 45 angstroms, so no coupling can occur. For what its worth MOLPRO returns the same result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561#issuecomment-271910877:443,coupling,coupling,443,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271910877,1,['coupling'],['coupling']
Modifiability,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271969458:719,plugin,plugin,719,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232734584:561,config,configure,561,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584,1,['config'],['configure']
Modifiability,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236171587:368,variab,variable,368,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587,1,['variab'],['variable']
Modifiability,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288535859:238,config,configuration,238,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859,1,['config'],['configuration']
Modifiability,"Yeah, I think the allocation at osrecur.cc:998 was a ""let's get a version working and I'll refactor later"" and later never occurred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276352793:91,refactor,refactor,91,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276352793,1,['refactor'],['refactor']
Modifiability,"Yeah, for a general RASCI, ""occupied"" and ""virtual"" become unimportant, and what's important is frozen docc, RAS1, RAS2, RAS3, RAS4, frozen uocc. Other multi-reference correlated methods may also need more flexible orbital spaces than merely frozen-docc, active-docc, socc, active uocc, and frozen uocc. I agree that DETCI shouldn't need the Fock matrix.... anything it needs it should rebuild. It will require a Fock matrix for arbitrary-order perturbation theory computations... test ci-multi should check the MBPT capabilities (which I think use an internally-built Fock matrix), and test case zaptn-nh2 should test ZAPT. . If all the DETCI tests pass, I think it's fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454632313:206,flexible,flexible,206,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454632313,1,['flexible'],['flexible']
Modifiability,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:196,maintainab,maintainable,196,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,1,['maintainab'],['maintainable']
Modifiability,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:370,variab,variables,370,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160,1,['variab'],['variables']
Modifiability,"Yeah, the recomp is annoying, but that `gitversion.py` takes care of at least:; - defining of `GIT_VERSION` and `PSI_VERSION` compile definitions including computing a sortable version from `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:896,config,config,896,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['config'],['config']
Modifiability,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235360382:302,plugin,plugin-writing,302,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382,2,"['plugin', 'rewrite']","['plugin-writing', 'rewrite']"
Modifiability,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:82,variab,variables,82,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051,1,['variab'],['variables']
Modifiability,"Yes on the first two items with a few tweaks. We can add you as an endorsed plugin [here](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/driver/endorsed_plugins.py). I wouldn't write a new python module just for the binding, as long as the API is stable we could consider adding it directly to the endorsed plugin file. You could also consider reverse hooks where you have a method like `adcc.register_psi4()` which would hook into Psi4, but be called from the endorsed plugin file. . A few ways to do it, if your API is still in a bit of flux then it probably makes more sense for the code to live in your current repo. Yes to the third item :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018:76,plugin,plugin,76,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018,3,['plugin'],['plugin']
Modifiability,"Yes, I think I'll refactor all the `adcc` tests using `pytest`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513#issuecomment-1084636181:18,refactor,refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2513#issuecomment-1084636181,1,['refactor'],['refactor']
Modifiability,"Yes, I was using Intel 2018 and GCC 5.2 and 7.2, so those are all fully C++11 compliant. If you'd like to prevent OpenBLAS from building with unsatisfactory compilers, you're welcome to adapt https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658:186,adapt,adapt,186,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658,1,['adapt'],['adapt']
Modifiability,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131,1,['adapt'],['adapted']
Modifiability,"Yes, see [comment](https://github.com/psi4/psi4/issues/580#issuecomment-273803591). If you absolutely must build 1.0, I can see about getting you access to a proper codebase. But because of the history rewrite, building 1.0 from main repo is impossible. Because of all the other changes, you don't even want 1.0 because you can't move forward from it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581#issuecomment-273805880:202,rewrite,rewrite,202,https://psicode.org,https://github.com/psi4/psi4/issues/581#issuecomment-273805880,1,['rewrite'],['rewrite']
Modifiability,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:164,plugin,plugin,164,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,2,['plugin'],['plugin']
Modifiability,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276091624:384,Config,ConfigMath,384,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624,1,['Config'],['ConfigMath']
Modifiability,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271956386:62,plugin,plugin,62,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yes, that's just what we needed. We made some changes in 1.6 (finally delivering on the driver refactor we promised in the 1.4 paper) with a very high likelihood of causing bugs in how Psi4 passes information around, which is what your error appears to be. ""Check the interface to CFOUR works"" may have slipped through the cracks of things we tested. Lori would know for sure. I unfortunately don't have CFOUR so can't test this myself, but I'll agitate to get a hold of one of the developers who does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225:95,refactor,refactor,95,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225,1,['refactor'],['refactor']
Modifiability,"Yes, that’s exactly how to fix that error. The API changed in Nov. (couple weeks ago for the public mirror), but stray cases like you found are still popping up. Thanks for the catch. Lori. > On Mar 1, 2015, at 3:53 PM, wpoely86 notifications@github.com wrote:; > ; > I was trying the sointegrals plugin with 14c78ea https://github.com/psi4/psi4public/commit/14c78eabdca86f8e094576890518d93d300d2500 but I got a exception:; > ; > RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; > GDB show this as the traceback:; > ; > #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; > #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; > #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; > #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; > Has something in the API changed that needs changing in the plugin?; > Replacing the line; > ; > shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; > with; > ; > shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; > seems to help. Is this the correct way of handling this?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/74.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74#issuecomment-76630641:297,plugin,plugin,297,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76630641,2,['plugin'],['plugin']
Modifiability,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:69,rewrite,rewrite,69,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['rewrite'],['rewrite']
Modifiability,"Yes, the HF subclasses are fine. More general wavefunctions are not. We stumbled across it by trying to take a CASSCF wavefunction, convert it to c1, and feed that the de-symmetrized orbitals into an orbital localizer. This is a different use case than passing a reference!. I would think that the `hf.cc` class can figure out what it needs to do, based on checking `same_a_b_orbs` and `same_a_b_dens`. Other subclasses should only need to extend if it needs anything more sophisticated than that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770:440,extend,extend,440,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770,1,['extend'],['extend']
Modifiability,"Yes, the `copy_if_different` was what used to work (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2). One of the psi4/psi4-config --version wasn't responding properly so I just clobbered it with `copy`. I'd prefer to go back to it, but there may be subtle unworkingness. The make fast trick is neat. I don't think it had spread to GaTech.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239053251:160,config,config,160,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239053251,1,['config'],['config']
Modifiability,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65#issuecomment-72927187:347,plugin,plugin,347,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187,1,['plugin'],['plugin']
Modifiability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:9,plugin,plugin,9,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:318,plugin,plugin,318,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735,1,['plugin'],['plugin']
Modifiability,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351195906:126,extend,extended,126,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906,1,['extend'],['extended']
Modifiability,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681365:295,plugin,plugin,295,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365,2,['plugin'],['plugin']
Modifiability,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343777115:173,plugin,plugins,173,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115,6,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235905609:159,plugin,plugins,159,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609,1,['plugin'],['plugins']
Modifiability,You also need to put the 2nd layer into the molecule section to have it enter the calculation.; Adding surrounding point charges in place of Na Cl atoms from missing layers/edges is a common way to do slabs in molecular codes (point charge embedding). Stabilises the electrostatics and reduces edge effects. Should help to converge the SCF as well. I'd suggest trying def2-SVP and a (meta)GGA and first see if you can converge the SCF before doing a geometry optimisation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209:166,layers,layers,166,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209,1,['layers'],['layers']
Modifiability,You also wouldn't have the problem if the loop variables weren't declared globally :wink:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2077#issuecomment-755482830:47,variab,variables,47,https://psicode.org,https://github.com/psi4/psi4/pull/2077#issuecomment-755482830,1,['variab'],['variables']
Modifiability,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:606,config,config,606,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,1,['config'],['config']
Modifiability,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:359,config,config,359,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['config'],['config']
Modifiability,"You're right about the potential for plugins. My vote is to ping @fevangelista to see if any of these are needed in Forte. If not, I suggest we remove them and encourage plugin writers to file issues for missing bindings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433449526:37,plugin,plugins,37,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433449526,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:340,variab,variable,340,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887,2,['variab'],['variable']
Modifiability,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:267,extend,extend,267,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,2,"['extend', 'plugin']","['extend', 'plugins']"
Modifiability,[Here](http://psicode.org/psi4manual/master/external.html#environment-variables) maybe (compiled)? Can edit it directly with the pencil icon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671#issuecomment-305372235:70,variab,variables,70,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305372235,1,['variab'],['variables']
Modifiability,"[Some users who are using `clone` to change the number of orbitals report that `nmo_` doesn't update and request a way to change `nmo_`.](https://forum.psicode.org/t/reallocation-of-matrix-object-ca-with-new-matrix-of-different-dimension/2720/3?u=jmisiewicz) Ideally, `nmo()` should be `nmopi_.sum()`, and the `nmo_` variable no longer stored. This eliminates a possible internal inconsistency, and on the scale of other operations, the store/compute time savings are negligible.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2875:317,variab,variable,317,https://psicode.org,https://github.com/psi4/psi4/issues/2875,1,['variab'],['variable']
Modifiability,[WIP] Coupled cluster wavefunction rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:35,rewrite,rewrite,35,https://psicode.org,https://github.com/psi4/psi4/pull/1273,1,['rewrite'],['rewrite']
Modifiability,"[cct3 plugin] crash will different molecules in same input, e.g. in NBody calculations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:6,plugin,plugin,6,https://psicode.org,https://github.com/psi4/psi4/issues/2009,1,['plugin'],['plugin']
Modifiability,"[draco:~/src] crawdad% psi4 --new-plugin myplugin; Traceback (most recent call last):; File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'. This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503:34,plugin,plugin,34,https://psicode.org,https://github.com/psi4/psi4/issues/503,1,['plugin'],['plugin']
Modifiability,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:2601,parameteriz,parameterizations,2601,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['parameteriz'],['parameterizations']
Modifiability,"](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:1970,config,config,1970,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:1154,variab,variable,1154,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['variab'],['variable']
Modifiability,"_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:1360,config,configure,1360,https://psicode.org,https://github.com/psi4/psi4/issues/2572,1,['config'],['configure']
Modifiability,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:3049,variab,variable,3049,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"_restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-fopenmp;-Wl,--end-group;-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;-fopenmp;-Wl,--end-group; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;FC_SYMBOL=2;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H; -- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. But it fails when the binary is linked:. ```; Linking CXX executable ../../../bin/psi4; ../../../lib/libdmrg.a(dmrgscf.cc.o): In function `psi::dmrg::chemps2_groupnumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)':; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:43: undefined reference to `CheMPS2::Irreps::getGroupName[abi:cxx11](int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:51: undefined reference to `CheMPS2::Irreps::getGroupName[abi:cxx11](int)'; ../../../lib/libdmrg.a(dmrgscf.cc.o): In function `psi::dmrg::copyPSIMXtoCHEMPS2MX(boost::shared_ptr<psi::Matrix>, CheMPS2::DMRGSCFindices*, CheMPS2::DMRGSCFmatrix*)':; /home/seba/software",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:5360,Config,Configuring,5360,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Config'],['Configuring']
Modifiability,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:461,variab,variable,461,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,5,['variab'],['variable']
Modifiability,"`CheMPS2_DIR` is the right approach, but it wants the dir with the `CheMPS2Config.cmake`, not the root dir. [here D for details](http://psicode.org/psi4manual/master/chemps2.html#how-to-configure-chemps2-for-building-psi4). Blame CMake, not me, for that one. I think that's the problem. But if that fails, remove the version from [here](https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L2) and [here](https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L59).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288503545:186,config,configure-,186,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288503545,1,['config'],['configure-']
Modifiability,"`DESTDIR` hasn't been part of Psi4 cmake for a few years since it was updated for Windows compatibility. Looking through some docs, I see it can have influence if set as an environment variable. That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186:185,variab,variable,185,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186,1,['variab'],['variable']
Modifiability,"`LLVM` compatibility with `MSVC` ABI is not yet complete (http://clang.llvm.org/docs/MSVCCompatibility.html), so compiling with `LLVM` and linking with the C++ library from `MSVC`, might give some problems. I got just one linkage problem! It happens when trying to create `psi::PsiOutStream` with `std::make_shared`, while passing `mode` argument:; ```c++; auto printer = std::make_shared<psi::PsiOutStream>(""filename"", std::ostream::trunc);. error LNK2001: unresolved external symbol ""__declspec(dllimport) public: static enum std::_Iosb<int>::_Openmode const std::_Iosb<int>::trunc"" (__imp_?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B); ```; but it works, in such cases:; ```c++; // Creating std::share_ptr explicitly; auto printer = std::shared_ptr(new psi::PsiOutStream(""filename"", std::ostream::trunc));. // Using the argument default value (mode = std::ostream::trunc); auto printer = std::make_shared<psi::PsiOutStream>(""filename"");. // Using a temporary variable; auto mode = std::ostream::trunc;; auto printer = std::make_shared<psi::PsiOutStream>(""filename"", mode);; ```; I use the last case to fix the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425938802:957,variab,variable,957,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425938802,1,['variab'],['variable']
Modifiability,"`NO_RESPONSE` is only for SAPT0, that's right. The open-shell SAPT0 uses a different implementation and a different variable (I think it's `COUPLED_INDUCTION`) that already issues the proper warning, so I thought it would be more consistent to have closed-shell SAPT0 do the same. Currently, when induction is uncoupled, the induction energy gets put in both an UNCOUPLED and a COUPLED induction Psivar, with a warning in the output file. Would you rather have us not set the COUPLED variables ? We could then delete the warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-362872366:116,variab,variable,116,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-362872366,2,['variab'],"['variable', 'variables']"
Modifiability,`PYTHON_INTERPRETER` is specific to our `setup` script and `ConfigPython`. The `cmake` value is `PYTHON_EXECUTABLE`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378#issuecomment-218800322:60,Config,ConfigPython,60,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800322,1,['Config'],['ConfigPython']
Modifiability,```; !pip install -q condacolab; import condacolab; condacolab.install(). %%capture; !conda config --add channels http://conda.anaconda.org/psi4; !mamba install psi4 resp -c conda-forge/label/libint_dev -c conda-forge; !mamba install nglview ase -c conda-forge. from google.colab import output; output.enable_custom_widget_manager(). import psi4; ```. returns: ModuleNotFoundError: No module named 'psi4',MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109:92,config,config,92,https://psicode.org,https://github.com/psi4/psi4/issues/3109,1,['config'],['config']
Modifiability,"```; $ ctest -R cubeprop-esp -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp ...................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:127,Config,Config,127,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,2,['Config'],['Config']
Modifiability,"```; $ ctest -R json-schema_0_properties -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:139,Config,Config,139,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,2,['Config'],['Config']
Modifiability,"```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=lib;-DCMAKE_INSTALL_INCLUDEDIR=include;-DBUILD_SHARED_LIBS=OFF;-DCMAKE_POSITION_INDEPENDENT_CODE=ON;-DSIMINT_STANDALONE=OFF;-DENABLE_TESTS=OFF;-DSIMINT_VECTOR=sse;-DSIMINT_MAXAM=6;-C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-$<CONFIG>.cmake;-GUnix Makefiles;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external'; ./stage/usr/local/psi4/share/cmake/simint/simintConfig.cmake:set(simint_VECTOR sse); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:2642,CONFIG,CONFIG,2642,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['CONFIG'],['CONFIG']
Modifiability,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:801,CONFIG,CONFIG,801,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705,1,['CONFIG'],['CONFIG']
Modifiability,"```; [ 22%] Performing configure step for 'psi4-core'; cd /usr/ports/science/psi4/work/.build/psi4-core-prefix/src/psi4-core-build && /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/ports/science/psi4/work/.build/stage -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/usr/bin/c++ ""-DCMAKE_CXX_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -fno-omit-frame-pointer -isystem /usr/local/include -march=native"" -DCMAKE_C_COMPILER=/usr/bin/cc ""-DCMAKE_C_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -march=native"" -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_Fortran_COMPILER= -DCMAKE_Fortran_FLAGS= -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_DATADIR=share -DCMAKE_INSTALL_INCLUDEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:23,config,configure,23,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['config'],['configure']
Modifiability,"```console; $ cmake --version; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:770,config,configure,770,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['config'],['configure']
Modifiability,"```external/upstream/libint/CMakeLists.txt``` has this line:; ```; find_package(Libint 1.2.0 CONFIG QUIET COMPONENTS ${MAX_AM_ERI}); ```. I have the latest version of libint installed: libint-1.2.1_1 (also see here https://repology.org/project/libint/versions). I changed this line to the latest version:; ```; find_package(Libint 1.2.1 CONFIG QUIET COMPONENTS ${MAX_AM_ERI}); ```; but it fails to find it:; ```; -- Suitable Libint could not be located, Building Libint instead.; ```. libint-1.2.1_1 doesn't provide .pc or .cmake files, so I am not sure how can it even ever be able to find it through a cmake script like this?. It's undesirable to download and rebuild libint when the package is available. Please also note that the latest generation of libint is libint2, which does provide ```libint2.pc``` .",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589:93,CONFIG,CONFIG,93,https://psicode.org,https://github.com/psi4/psi4/issues/1589,2,['CONFIG'],['CONFIG']
Modifiability,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:1453,config,config,1453,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561,3,['config'],['config']
Modifiability,"`detci` has a variable called `print_lvl_` that is currently set at 0 and remains at 0, no matter what the user sets the `print` keyword to. As a result, it's not possible [for a user to see the S^2 value if they want](http://forum.psicode.org/t/computing-s-2-on-an-fci-calculation/2439/2). A developer should have `print_lvl_` take the value of the standard `print` keyword.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2487:14,variab,variable,14,https://psicode.org,https://github.com/psi4/psi4/issues/2487,1,['variab'],['variable']
Modifiability,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,adapt,adapt,81,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,1,['adapt'],['adapt']
Modifiability,"`distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-sea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:4962,inherit,inheritance,4962,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['inherit'],['inheritance']
Modifiability,"`mp2_test.py` changed by no longer looking for custom spin variables when custom spin wasn't set, but that was all. Now that this is in, time for the Big One...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-582496652:59,variab,variables,59,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-582496652,1,['variab'],['variables']
Modifiability,"`omp_get_thread_num()` will work even in a plugin:. ```; void timer_on(); {; printf(""timer thread rank: %d\n"", omp_get_thread_num());; }. extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }; } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. You must call `psi4 -n 4` or some other number because psi4 tells OpenMP to use 1 thread by default. ```; Attention! This SCF may be density-fitted.; Hello World from thread = 0; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; timer thread rank: 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; Number of threads = 4; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; timer thread rank: 0; Number of threads = 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308702663:43,plugin,plugin,43,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308702663,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1553,Adapt,Adapting,1553,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['Adapt'],['Adapting']
Modifiability,`wfn` Variable Names,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:6,Variab,Variable,6,https://psicode.org,https://github.com/psi4/psi4/issues/2203,1,['Variab'],['Variable']
Modifiability,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:1194,inherit,inheritance,1194,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['inherit'],['inheritance']
Modifiability,"a-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; qcengine 0.19.0 pyhd8ed1ab_0 psi4; scipy 1.8.1 py38h9bf8e03_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:2869,config,configfile,2869,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['config'],['configfile']
Modifiability,"a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Le",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4663,config,config,4663,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['config'],['config']
Modifiability,"ably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.52915989; > H 2.41269553 -1.74021190 -3.52915989; > units bohr; > }; >; > set {; > basis 6-31G; > d_convergence 11; > points 5; > }; >; > anl = gradient('scf', df_functional='wB97X-D', dertype=1); > num = gradient('scf', df_functional='wB97X-D', dertype=0); >; > anl.print_out(); > num.print_out(); >; > Yields the following analytic/numerical grads for B3LYP:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 -0.00000000000000 0.01448961501491; > 2 0.00000000000000 0.00000000000000 0.00650495770571",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:1502,rewrite,rewrite,1502,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['rewrite'],['rewrite']
Modifiability,acke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2810,Config,ConfigMath,2810,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,adapt for pydantic v1 and v2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:0,adapt,adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/3019,1,['adapt'],['adapt']
Modifiability,add cct3 plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:9,plugin,plugin,9,https://psicode.org,https://github.com/psi4/psi4/pull/1934,1,['plugin'],['plugin']
Modifiability,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:1423,config,configuring,1423,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['config'],['configuring']
Modifiability,addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4605,plugin,plugin,4605,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,adds missing mp3 energy variables to dfocc and occ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:24,variab,variables,24,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['variab'],['variables']
Modifiability,adds t1/d1 diagnostics computed in fnocc to psi4 global variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['variab'],['variables']
Modifiability,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-288652354:52,variab,variable,52,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354,4,"['config', 'variab']","['configuration', 'configure', 'variable']"
Modifiability,"al_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1162,config,configfile,1162,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['config'],['configfile']
Modifiability,"algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1214,variab,variable,1214,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['variab'],['variable']
Modifiability,"all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2150,refactor,refactored,2150,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['refactor'],['refactored']
Modifiability,an/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4681,plugin,plugins,4681,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong.; - `print` in Psithon (input file syntax) no longer processed into `print_out` commands that redirect to output file. Now it means whatever your python print means. ## Suggest adopting conda/conda RN categories:. ### New Features. ### Deprecations/Breaking Changes. ### Improvements. ### Non-User-Facing Changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:3084,variab,variable,3084,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['variab'],['variable']
Modifiability,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1760,plugin,plugin,1760,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271921477:17,plugin,plugins,17,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"args); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the erro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:1726,variab,variables,1726,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variables']
Modifiability,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,adapt,adapted,1017,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,2,"['adapt', 'config']","['adapted', 'configurational']"
Modifiability,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2346,config,configure,2346,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['config'],['configure']
Modifiability,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3720,Plugin,Plugin,3720,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['Plugin'],['Plugin']
Modifiability,at least one testing channel should run; - [ ] full ctest tests -- 7/8 now in Linux Azure by #3021 for v1.9; - [ ] full pytest tests -- 7/8 of non-stdsuite in Linux Azure by #3021 for v1.9; - [ ] codecov analysis; - [ ] bonus wish -- use GitHub Actions to test master regularly against plugin repos.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1841:286,plugin,plugin,286,https://psicode.org,https://github.com/psi4/psi4/issues/1841,1,['plugin'],['plugin']
Modifiability,"ata: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:2972,layers,layers,2972,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['layers'],['layers']
Modifiability,"ate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are buil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8585,variab,variables,8585,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2450,variab,variables,2450,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['variab'],['variables']
Modifiability,"ave been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MESSAGE=ON`. I can see all of the output related to FindBoost.cmake is identical. CMake is searching the correct path for the boost library files (`$HOME/anaconda/envs/psi4-py2.7/lib`). And does not add `/usr/local/anything` to the search paths. . Yet, if boost 1.60.0 is linked it reports it found the correct libraries version 1.59.0, and if those links are removed it reports they are not found. In both cases it sets `Boost_FOUND = 1` but with the boost 1.60.0 links removed the pre-packaged boost is configured to build anyway. . It is also interesting that `_boost_TEST_VERSIONS` includes 1.55.0-1.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:515 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:517 ] Boost_USE_MULTITHREADED = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:519 ] Boost_USE_STATIC_LIBS = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:521 ] Boost_USE_STATIC_RUNTIME = OFF; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:523 ] Boost_ADDITIONAL_VERSIONS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:525 ] Boost_NO_SYSTEM_PATHS = ; -- [ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:2787,config,configured,2787,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['config'],['configured']
Modifiability,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1044,config,configure,1044,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['config'],['configure']
Modifiability,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3065,Enhance,Enhanced,3065,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Enhance'],['Enhanced']
Modifiability,"b/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1049,CONFIG,CONFIG,1049,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['CONFIG'],['CONFIG']
Modifiability,beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMa,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4413,plugin,plugins,4413,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"bject would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:1118,rewrite,rewrite,1118,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['rewrite'],['rewrite']
Modifiability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:1045,config,config,1045,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['config'],['config']
Modifiability,"c. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TESTING=ON \; -D CMAKE_PREFIX_PATH=""/psi/toolchainconda/envs/singleboost;/psi/toolchainconda/envs/singlegmp;/psi/toolchainconda/envs/singleeigen"" \; -D ENABLE_MPFR=OFF \; -D LIBINT_LOCAL_EIGEN3_INSTALL=OFF \; -D CMAKE_CXX_COMPILER=$CXX \; -D CMAKE_C_COMPILER=$CC \; -D ENABLE_FORTRAN=OFF \; -D LIBINT2_SHGAUSS_ORDERING=standard \; -D ERI3_PURE_SH=OFF \; -D ERI2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:2132,config,configures,2132,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['config'],['configures']
Modifiability,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1186,Config,ConfigMath,1186,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 beca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1659,Config,ConfigMath,1659,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['Config'],['ConfigMath']
Modifiability,"can't run the pytest tests locally?; * `cd <objdir>`; * adjust PATH for psiapi http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-paths-for-psiapi via `<objdir>/bin/psi --psiapi-path`; * get pytest via `conda install pytest` or `pip install pytest`; * `pytest ../tests/pytest -k methane-H_analytic`; the pytest tests can also be run via `psi4.test()`, `psi4 --test`, or `make pytest` but the above has more control. Yes, confirmed non-deterministic, so above was a red herring, sorry. But something has made it much less stable than before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272:143,config,configure-paths-for-psiapi,143,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272,1,['config'],['configure-paths-for-psiapi']
Modifiability,cast int to list for array variable,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:27,variab,variable,27,https://psicode.org,https://github.com/psi4/psi4/pull/1927,1,['variab'],['variable']
Modifiability,"cause ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of targ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:1263,config,configuration,1263,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['config'],['configuration']
Modifiability,"cc #162. this does seem to be sufficient for compiling my plugin, but I could be missing something.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:58,plugin,plugin,58,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['plugin'],['plugin']
Modifiability,"ch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2494,variab,variable,2494,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['variab'],['variable']
Modifiability,"characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"";",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:1549,plugin,plugin,1549,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['plugin'],['plugin']
Modifiability,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2175,variab,variables,2175,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['variab'],['variables']
Modifiability,"class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to fix the numerical instabilities of `incfock` in COSX. Per @davpoolechem, using `incfock` on COSX indeed leads to significant time savings on larger systems, even if it is always OFF by default for the last iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:1391,variab,variables,1391,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,2,"['refactor', 'variab']","['refactor', 'variables']"
Modifiability,"clude; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone (happy to submit this as a new issue, if that would be preferable).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:2088,config,configure,2088,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,2,['config'],['configure']
Modifiability,cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. p,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4997,plugin,plugins,4997,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5049,plugin,plugins,5049,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"cmake is the barrier to libxc 3. it's not been proven impossible, but I'm not eager to try find_package to pkg-config. a tag (first point of https://gitlab.com/libxc/libxc/issues/61) is the major barrier to libxc 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450762992:111,config,config,111,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450762992,1,['config'],['config']
Modifiability,cmake var `Libxc_DIR` can likely help https://psicode.org/psi4manual/master/libxc.html?highlight=libxc_dir#how-to-configure-libxc-for-building-psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2676#issuecomment-1212508760:114,config,configure-libxc-for-building-,114,https://psicode.org,https://github.com/psi4/psi4/issues/2676#issuecomment-1212508760,1,['config'],['configure-libxc-for-building-']
Modifiability,comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4369,plugin,plugins,4369,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;-openmp;-Wl,--end-group); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -g -O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:3593,config,config,3593,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['config'],['config']
Modifiability,"conda plugins, psiapi docs, py36",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:6,plugin,plugins,6,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['plugin'],['plugins']
Modifiability,configure doesn't remove control sequences when its output isn't a terminal,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2680:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2680,1,['config'],['configure']
Modifiability,configure fails to find libint2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2675:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2675,1,['config'],['configure']
Modifiability,configure fails to find libxc and then downloads and rebuilds it,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2676:0,config,configure,0,https://psicode.org,https://github.com/psi4/psi4/issues/2676,1,['config'],['configure']
Modifiability,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK: command ""C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:2572,plugin,plugin,2572,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['plugin'],['plugin']
Modifiability,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: vir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:5119,plugin,plugin,5119,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['plugin'],['plugin']
Modifiability,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1687,plugin,plugin,1687,https://psicode.org,https://github.com/psi4/psi4/issues/414,5,['plugin'],['plugin']
Modifiability,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1497,config,config,1497,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['config'],['config']
Modifiability,"ct pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5030,config,config,5030,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['config'],['config']
Modifiability,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2532,config,config,2532,https://psicode.org,https://github.com/psi4/psi4/issues/516,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,"ction91, among others, with the purpose of computing XC terms within Density Functional Theory (DFT) calculations in a massively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1036,parameteriz,parameterizes,1036,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['parameteriz'],['parameterizes']
Modifiability,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1738,Refactor,Refactor,1738,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Refactor'],['Refactor']
Modifiability,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,adapt,adapted,1807,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['adapt'],['adapted']
Modifiability,"d by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:1126,variab,variables,1126,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['variab'],['variables']
Modifiability,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2805,variab,variable,2805,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['variab'],['variable']
Modifiability,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1261,Config,Configuring,1261,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Config'],['Configuring']
Modifiability,d8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; font-ttf-dejavu-sans-mono 2.37 hab24e00_0 conda-forge; font-ttf-inconsolata 3.000 h77eed37_0 conda-forge; font-ttf-source-code-pro 2.038 h77eed37_0 conda-forge; font-ttf-ubuntu 0.83 hab24e00_0 conda-forge; fontconfig 2.14.2 h82840c6_0 conda-forge; fonts-conda-ecosystem 1 0 conda-forge; fonts-conda-forge 1 0 conda-forge; fonttools 4.33.3 py39h9eb174b_0 conda-forge; freetype 2.12.1 hd633e50_1 conda-forge; frozenlist 1.4.0 py39h0f82c59_1 conda-forge; gau2grid 2.0.7 h1a8c8d9_2 conda-forge; geoip2 4.7.0 pyhd8ed1ab_0 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gettext 0.21.1 h0186832_0 conda-forge; gflags 2.2.2 hc88da5d_1004 conda-forge; giflib 5.2.1 h27ca646_2 conda-forge; globus-sdk 3.28.0 pyhd8ed1ab_0 conda-forge; glog 0.6.0 h6da1cb0_0 conda-forge; greenlet 1.1.2 py39h0ef5a74_2 conda-forge; grpc-cpp 1.51.1 h44b9a77_1 conda-forge; gtest 1.14.0 h1995070_1 conda-forge; gunicorn 21.2.0 py3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2966,extend,extended,2966,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['extend'],['extended']
Modifiability,"d; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the requested orbital.; ; Thus, if the MSCF calculation is performed for CASINO, it is necessary simultaneously with the molden file create correlation.data. If PSI4 using configuration state function (**CSF**), then group of determinants for each **CSF** should be labeled for simultaneous optimization like the 2nd and 3rd determinants in the example above. The opt-flag for all determinants except the first one should be equal to 1. PSI4 [output](https://github.com/user-attachments/files/17463891/output.txt) on the basis of which the above-described file could be generated. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:2533,config,configuration,2533,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['config'],['configuration']
Modifiability,"d_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1648,variab,variables,1648,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['variab'],['variables']
Modifiability,dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4886,plugin,plugins,4886,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ded up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands ca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:1415,variab,variable,1415,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['variab'],['variable']
Modifiability,"ding by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(curren",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1429,plugin,plugin,1429,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['plugin'],['plugin']
Modifiability,directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs commen,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4280,plugin,plugins,4280,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` doesn't seem to use ``OpenMP_LIBRARY_DIRS`` but I don't know anything about CMake so I might just be wrong here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:2357,Config,Configuring,2357,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['Config'],['Configuring']
Modifiability,"driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:1843,config,config,1843,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1817,variab,variables,1817,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050,4,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapt,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapter']
Modifiability,"e-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/build.make:106: recipe for target 'external/upstream/ambit/ambit_external-prefix/src/ambit_external-stamp/ambit_external-configure' failed; make[2]: *** [external/upstream/ambit/ambit_external-prefix/src/ambit_external-stamp/ambit_external-configure] Error 1; CMakeFiles/Makefile2:1220: recipe for target 'external/upstream/ambit/CMakeFiles/ambit_external.dir/all' failed; make[1]: *** [external/upstream/ambit/CMakeFiles/ambit_external.dir/all] Error 2. ```; Later on, I'll also try building against CUDA to see if gpu_dfcc now builds (it had the OpenMPMath error when I tried the other day), although that also involves fighting g++ versions, etc...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:1628,Config,Configuring,1628,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1053,adapt,adapted,1053,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['adapt'],['adapted']
Modifiability,"e. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1057,config,configures,1057,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['config'],['configures']
Modifiability,"eJK, any combinations of its sub-algorithms can be called by setting SCF_TYPE to `J_alg+K_alg`, where _J_alg_ is the separate J build algorithm of choice, and _K_alg_ is the separate K algorithm of choice. As of now, the two CompositeJK options available are `DIRECTDFJ+LINK` representing the old DFJLinK class, and `DIRECTDFJ+COSX` representing the old DFJCOSK class. The key here, is that the ""+"" delimiter in SCF_TYPE serves as a signal to Psi4 that a CompositeJK algorithm is being used. ; - Back end. Basically all of the back-end changes can be classified into two categories - merging DFJLinK and DFJCOSK into the initial CompositeJK implementation, and modifications of functions where necessary to support the above front-end changes. . ## User API & Changelog headlines; - [X] The ""COSX"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+COSX"".; - [X] The ""LINK"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+LINK"". ## Dev notes & details; - [X] Refactors the DFJLinK and DFJCOSK classes into the combined CompositeJK JK subclass. CompositeJK can perform the computations previously performed by both DFJLinK and DFJCOSK within a single JK subclass. These changes are largely localized to the commits f0c4f6c8e31696f6690e101d71bef1863bcf324c - ca66c91976cb5e8c42c8292fcf90c6d28b885fd0, with bfdff974dbfbb9513c85a460b00495598e5f240e also counting. ; - [X] Implements a new scheme for ""SCF_TYPE"" names associated with CompositeJK algorithm combinations. This scheme uses the ""+"" delimiter in conjunction with the names of the separate J and K algorithms present in CompositeJK to use a specific combination of separate J and K build algorithms. ; - [X] Changes functionalities in DFJLinK and DFJCOSK, as well of the JK base class itself, as necessary to support the standardized ""SCF_TYPE"" naming scheme and the general flexibility and ease of expansion that CompositeJK is aiming for.; - [X] Updates relevant tests and documentation. ## To-do; - [x] Update CompositeJK metho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:3222,Refactor,Refactors,3222,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['Refactor'],['Refactors']
Modifiability,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:974,variab,variable,974,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['variab'],['variable']
Modifiability,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,adapt,adapted,1216,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['adapt'],['adapted']
Modifiability,"ecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2. ```; (I'm not convinced that uncommenting the cmake_print_properties bit at the end of FindMathOpenMP.cmake produced much more in the way of output.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4858,Config,Configuring,4858,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"edure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5976,Extend,Extend,5976,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Extend'],['Extend']
Modifiability,"ef_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:1884,variab,variables,1884,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variables']
Modifiability,"eference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1172,variab,variable,1172,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"ema(conformer=0); psi4.set_num_threads(4); psi4.set_memory(5e+9). xtb_opt = xtb_ff_opt(qc_mol=qc_mol); opt_molecule = Molecule.from_qcschema(xtb_opt); conformer_Ang = opt_molecule.conformers[0].to(unit.angstrom).m. #Generate Grid to calculate properties to; grid = generate_grid(molecule = molecule, ; conformer= opt_molecule.conformers[0].to(unit.bohr), ; grid_settings=grid_settings); grid = grid.to(unit.angstrom).m; numpy.savetxt(""grid.dat"", grid, delimiter="" "", fmt=""%16.10f""). psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT_EPSILON"": 70.84,; ""DDX_RADII_SET"": ""uff"",; ""DDX_MODEL"": ""PCM""}). conformer_Ang_string = ""nocom\nnoreorient\n""; for index, atom in enumerate(opt_molecule.atoms):; conformer_Ang_string += f""{SYMBOLS[atom.atomic_number]}\t{conformer_Ang[index, 0]}\t{conformer_Ang[index, 1]}\t{conformer_Ang[index, 2]}\n"". molecule_psi4 = psi4.geometry(conformer_Ang_string.strip()); print(molecule_psi4); molecule_psi4.set_units(GeometryUnits.Angstrom). E, wfn = psi4.energy('PBE0-D3BJ/def2-TZVPPD', molecule = molecule_psi4, return_wfn = True); psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print( wfn.variable(""MULLIKEN_CHARGES"")); log_memory_usage(); #very basic error handling; except Exception as e:; continue. if __name__ == ""__main__"":; main(); ```. For the minimal example above, memory usage slowly rises too (I have checked the QCEngine tools and this is not occurring here):. ```; Memory Usage: 484.4296875 MB; Memory Usage: 632.46875 MB; Memory Usage: 634.3203125 MB; Memory Usage: 635.75390625 MB; Memory Usage: 636.6015625 MB; Memory Usage: 676.36328125 MB; Memory Usage: 676.7109375 MB; Memory Usage: 676.7421875 MB; Memory Usage: 676.77734375 MB; Memory Usage: 676.8046875 MB; Memory Usage: 676.890625 MB; Memory Usage: 676.921875 MB; Memory Usage: 676.98828125 MB; Memory Usage: 677.015625 MB; Memory Usage: 677.03125 MB; ```. Apologies for the long post but I wanted to add as much info as possible!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:8516,variab,variable,8516,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['variab'],['variable']
Modifiability,"en running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:977,variab,variable,977,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['variab'],['variable']
Modifiability,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1980,variab,variable,1980,https://psicode.org,https://github.com/psi4/psi4/issues/3156,1,['variab'],['variable']
Modifiability,enables plugin gpu_dfcc as external plugin compiled with psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/997,2,['plugin'],['plugin']
Modifiability,enhances the visibility of psi4's error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:0,enhance,enhances,0,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['enhance'],['enhances']
Modifiability,"equires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you wo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:1669,variab,variable,1669,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['variab'],['variable']
Modifiability,"er/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:2094,rewrite,rewrite,2094,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['rewrite'],['rewrite']
Modifiability,"erest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1333,config,configurable,1333,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['config'],['configurable']
Modifiability,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2878,Config,ConfigMath,2878,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"ers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2593,plugin,plugin,2593,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,esp. 16 & 20 seemed close enough (docs & test McGibbon's resp plugin) to be tickets in their own right. but feel free to edit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508#issuecomment-259291901:62,plugin,plugin,62,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-259291901,1,['plugin'],['plugin']
Modifiability,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6507,Adapt,Adapted,6507,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,"et_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4181,layers,layers,4181,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['layers'],['layers']
Modifiability,"ething is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6798,variab,variable,6798,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variable']
Modifiability,"except for the last they all give the same error with not finding cdefs.h; ```; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ```. last one gives:; icpc --sysroot=$CONDAENV/x86_64-conda_cos6-linux-gnu/sysroot -Qlocation,ld,$CONDAENV/x86_64-conda_cos6-linux-gnu/bin hello.cc -o hello && ./hello; ```; In file included from hello.cc(1):; /usr/include/c++/5/iostream(38): catastrophic error: cannot open source file ""bits/c++config.h""; #include <bits/c++config.h>; ```; file exist here: /usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386733869:490,config,config,490,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386733869,3,['config'],['config']
Modifiability,export boys localizer for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:26,plugin,plugins,26,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['plugin'],['plugins']
Modifiability,"external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3788,Config,Config,3788,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['Config'],['Config']
Modifiability,externals and plugins prep for 1.0rc2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/430:14,plugin,plugins,14,https://psicode.org,https://github.com/psi4/psi4/pull/430,1,['plugin'],['plugins']
Modifiability,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6874,Adapt,Adapted,6874,https://psicode.org,https://github.com/psi4/psi4/pull/1349,4,['Adapt'],['Adapted']
Modifiability,fchk in Psi4 is mainly data transfer for gdma (for which we had a few fchk from the code you allude to). The fchk enhancements are good for psi4/psi4#402 and maybe as a starter project for our developers workshop this week.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708#issuecomment-301914256:114,enhance,enhancements,114,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301914256,1,['enhance'],['enhancements']
Modifiability,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:1539,rewrite,rewrite,1539,https://psicode.org,https://github.com/psi4/psi4/issues/402,1,['rewrite'],['rewrite']
Modifiability,"fit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] remove redundant def2-*-[jk|j]fit basis sets. Presuming Susi accepts my PR, this one will additionally accomplish; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:2756,plugin,plugins,2756,https://psicode.org,https://github.com/psi4/psi4/pull/1804,2,['plugin'],"['plugin', 'plugins']"
Modifiability,fix failing test case plugin skeleton,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/139:22,plugin,plugin,22,https://psicode.org,https://github.com/psi4/psi4/issues/139,1,['plugin'],['plugin']
Modifiability,fix local options for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:22,plugin,plugins,22,https://psicode.org,https://github.com/psi4/psi4/pull/1032,1,['plugin'],['plugins']
Modifiability,fix plugin for doccpi_ and misc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:4,plugin,plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/2988,1,['plugin'],['plugin']
Modifiability,"fwiw, I don't anticipate GT having problems if GCC min boosted. alternately, can do alternate defs of the enum with preprocessor variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-767309054:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-767309054,1,['variab'],['variables']
Modifiability,"g is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2783,plugin,plugin,2783,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,"g not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4512,config,config,4512,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['config'],['config']
Modifiability,g/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4785,plugin,plugins,4785,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,g/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5141,plugin,plugins,5141,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1761,adapt,adapted,1761,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,adapt,adapting,2143,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['adapt'],['adapting']
Modifiability,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1253,plugin,plugin,1253,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,3,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"gins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plugin('v2rdm_casscf.so', ref_wfn); E RuntimeError:; E Fatal Error: v2RDM did not converge.; E Error occurred in file: /scratch/psilocaluser/conda-builds/v2rdm_casscf_1491348825317/work/v2rdm_solver.cc on line: 1799; E The most recent 5 function calls were:; E; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::v2rdm_casscf::v2RDMSolver::compute_energy(); E py_psi_plugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<psi::Wavefunction>). /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/pymodule.py:66: RuntimeError; ---------------------------------------------- Captured stdout call -----------------------------------------------; N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A; =========================== 1 failed, 15 passed, 2 skipped, 1 xfailed in 201.46 seconds ===========================; ```. </details>; Also here is the current",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:5458,plugin,plugin,5458,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability,gins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > C,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5668,plugin,plugins,5668,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a depreca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3595,rewrite,rewrite,3595,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['rewrite'],['rewrite']
Modifiability,"globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x000055ff90740523 in run_mod (mod=mod@entry=0x55ff952b55d8, filename=filename@entry=0x7fac0e29b2d0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0, ; flags=flags@entry=0x7fff1128dce8, arena=arena@entry=0x7fac0e303b90) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1312; #424 0x000055ff905d76f5 in pyrun_file (fp=fp@entry=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, start=start@entry=257, globals=globals@entry=0x7fac0e241bc0, ; locals=locals@entry=0x7fac0e241bc0, closeit=closeit@entry=1, flags=0x7fff1128dce8) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1208; #425 0x000055ff9073a9fe in _PyRun_SimpleFileObject (fp=0x55ff95162c40, filename=0x7fac0e29b2d0, closeit=1, flags=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:456; #426 0x000055ff9073a594 in _PyRun_AnyFileObject (fp=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, closeit=closeit@entry=1, flags=flags@entry=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:90; #427 0x000055ff9073778b in pymain_run_file_obj (skip_source_first_line=0, filename=0x7fac0e29b2d0, program_name=0x7fac0e299d10) at /usr/local/src/conda/python-3.10.14/Modules/main.c:357; #428 pymain_run_file (config=0x55ff95142180) at /usr/local/src/conda/python-3.10.14/Modules/main.c:376; #429 pymain_run_python (exitcode=0x7fff1128dce4) at /usr/local/src/conda/python-3.10.14/Modules/main.c:591; #430 Py_RunMain () at /usr/local/src/conda/python-3.10.14/Modules/main.c:670; #431 0x000055ff907081f7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at /usr/local/src/conda/python-3.10.14/Modules/main.c:1090; #432 0x00007fac1bfc1088 in __libc_start_call_main () from /lib64/libc.so.6; #433 0x00007fac1bfc114b in __libc_start_main_impl () from /lib64/libc.so.6; #434 0x000055ff907080f1 in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:88853,config,config,88853,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['config'],['config']
Modifiability,"gnificantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() framework in JK class to represent shell significance testing.; - [x] Removal of shell_significant_density() from TwoBodyAOInt.; - [x] Reimplementation of density screening in DirectJK via the shell_significant framework.; - [ ] Reimplementation of density screening in other JK methods via the shell_significant framework.; - [x] Alteration of other shell quartet screening implementations in other JK algorithms via the JK framework. ## Questions; - [ ] The shell_significant framework has not yet been added to DFJCOSK. Should that be done this PR, or added in a later PR? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:2173,variab,variable,2173,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['variab'],['variable']
Modifiability,"hat contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:4094,rewrite,rewrite,4094,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,"he compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:1740,variab,variable-length,1740,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['variab'],['variable-length']
Modifiability,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:2187,variab,variable,2187,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['variab'],['variable']
Modifiability,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:1557,config,config,1557,https://psicode.org,https://github.com/psi4/psi4/pull/554,7,"['config', 'plugin']","['config', 'plugin', 'plugin-compile', 'plugin-makefile', 'plugin-name']"
Modifiability,"hing. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:1035,rewrite,rewrite,1035,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['rewrite'],['rewrite']
Modifiability,"home/ward/tmp/psi4release/build/CMakeFiles ; [ 98%] [ 98%] Build aointegrals example plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile:127: recipe for target 'all' failed; make: *** [all] Error 2; ```. It tries to use the `PSIDATADIR` of the install directory before psi4 is actually installe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:1089,plugin,plugins,1089,https://psicode.org,https://github.com/psi4/psi4/issues/90,3,['plugin'],['plugins']
Modifiability,"hon-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `PSIDATADIR=/path/to/share/psi4` or `psi4 -l /path/to/share/psi4`.; - wB97X-based functionals were using the 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2587,Plugin,Plugins,2587,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['Plugin'],['Plugins']
Modifiability,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,adapt,adapted,146,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['adapt'],['adapted']
Modifiability,"i was trying to parameterize a compound with FFParam and i wanted to do a dihedral scan for one of the dihedrals in my molecule, however, an error was produced saying that the atoms should not be in a ring. . is there a way to overcome this error?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2599:16,parameteriz,parameterize,16,https://psicode.org,https://github.com/psi4/psi4/issues/2599,1,['parameteriz'],['parameterize']
Modifiability,"i4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to other CC* modules).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:2556,plugin,plugin,2556,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,1,['plugin'],['plugin']
Modifiability,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3195,plugin,plugin,3195,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"ian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'cc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1412,config,config,1412,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['config'],['config']
Modifiability,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:1041,plugin,plugin,1041,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['plugin'],['plugin']
Modifiability,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,adapt,adapt,1239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['adapt'],['adapt']
Modifiability,"ift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2729,variab,variable,2729,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"igen_maps()` functions, then, return Eigen matrix-like objects that directly link with the Psi4 matrix data buffer of the Psi4 matrix for which the function was called. This provides an efficient fashion by which to utilize Psi4 matrices in contexts which require Eigen constructs, with no data deepcopying or Eigen-to-Psi4 back-conversions required. There is a key difference between the two functions. `eigen_map()` assumes that the matrix has a single irrep, and returns a single `Eigen::Map` object. `eigen_maps()` , on the other hand, is used for matrices with multiple irreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds two new member functions to `Psi4::Matrix`, `eigen_map()` and `eigen_maps()`, that return `Eigen::Map` representations of the Psi4 matrix object. ## Questions; - [X] N/A. ## Notes; - [X] I did look into forward declaring the necessary Eigen classes, but forward declaring `Eigen::Map` turns out to be a bit ugly, as it is a class template that, to forward declare, ends up requiring forward declarations for other Eigen classes and enums (such as `Stride` and `AlignmentType`) that aren't specifically necessary for the Psi4 use case. Therefore, I have skipped forward declarations here.; - [X] I can confirm the correctness ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:1620,plugin,plugins,1620,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['plugin'],['plugins']
Modifiability,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1531,rewrite,rewrite,1531,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['rewrite'],['rewrite']
Modifiability,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:3200,inherit,inherit,3200,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['inherit'],['inherit']
Modifiability,implement adaptable reference for closed/open-shell,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:10,adapt,adaptable,10,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['adapt'],['adaptable']
Modifiability,"ine 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:2124,config,config,2124,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['config'],['config']
Modifiability,"ing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found version ""3.5.2""); -- Found Python: /home/vayu/anaconda3/lib/libpython3.5m.so; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/CMakeFiles/CMakeError.log"". ```; The CmakeOutput.log and CMakeError.log are attached. . [CMakeError.log.txt](https://github.com/psi4/psi4/files/801080/CMakeError.log.txt); [CMakeOutput.log.txt](https://github.com/psi4/psi4/files/801081/CMakeOutput.log.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:9087,Config,Configuring,9087,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Config'],['Configuring']
Modifiability,"ing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compilers, cmake, etc.) and psi4 buildtime ecosystem packages along with a little script `psi4-path-advisor` to firmly configure cmake with conda env locations. As far as I know, this is pretty convenient and durable, especially for build-once-use-forever workflows. Complications I've heard of are (1) Mac `CONDA_BUILD_SYSROOT` sometimes required present/absent and (2) `psi4-dev` is monolithic, awkward to update, or sometimes out-of-date with psi4 master's requirements. I, for one, don't often use `psi4-dev` b/c I want more flexibility with switching out packages. **So, I'd be glad to hear thoughts on what form and contents the build helpers should take. A few plans and questions below, but any feedback appreciated.**. 1. Do you want docker images of the stuff that was in `psi4-dev`? I think from PsiCon2022 the answer is yes.; 2. Do you want minimal (build tools & req'd deps) or maximal (+ optional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:2864,config,configure,2864,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configure']
Modifiability,"ing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3894,coupling,coupling,3894,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['coupling'],['coupling']
Modifiability,"ing the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3004,variab,variables,3004,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,ins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5346,plugin,plugins,5346,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,integrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_i,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5569,plugin,plugins,5569,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ints pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2544,variab,variables,2544,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['variab'],['variables']
Modifiability,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1600,plugin,pluginintegrales,1600,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,6,['plugin'],['pluginintegrales']
Modifiability,issing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5501,plugin,plugins,5501,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,ists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5199,plugin,plugins,5199,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1486,refactor,refactor,1486,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['refactor'],['refactor']
Modifiability,"ix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the number of columns of matrix A; > 	ldb is the number of columns of matrix B; > 	ldc is the number of columns of matrix C; > 	do the actual matrix multiplication; > ```; > ; > BLAS savants will notice that I simplified the explanation of `lda`, `ldb`, and `ldc` because we can assume contiguous memory. Thanks for the explanation. I edited the program to check for each symmetry block. I'm not entirely sure how the symmetry_ variable works (and the xor involvement), but I mimicked how it was used in other parts of the method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:2452,variab,variable,2452,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['variab'],['variable']
Modifiability,"ix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the language can differ in the details. If you want to overload on pointer types and/or use pointer types with templates, use `nullptr` to signal the null pointer. The correct overload/template parameter will then be deduced. Using `nullptr` also makes the code more readable, especially if `auto` is used consistently throughout.; _Reference_: Item 8 in [Effective Modern C++].; _Note_: This PR only replaces `NULL` with `nullptr`. ## Todos; * **Developer Interest**; - [x] Converts `std::shared_ptr<TYPE> VARIABLE = std::shared_ptr<TYPE>(new TYPE(PARAMETERS));` to `std::shared_ptr<TYPE> VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Use `auto` on the left-hand side of some of the now converted declarations: `auto VARIABLE = std::make_shared<TYPE>(PARAMETERS);`; - [x] Replace occurrences of `NULL` with `nullptr`. ## Status; - [x] Ready to go. [Effective Modern C++]:; https://edisciplinas.usp.br/pluginfile.php/1995323/mod_resource/content/1/Effective%20Modern%20C%2B%2B%202014.pdf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:2965,VARIAB,VARIABLE,2965,https://psicode.org,https://github.com/psi4/psi4/pull/836,4,"['VARIAB', 'plugin']","['VARIABLE', 'pluginfile']"
Modifiability,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:3205,Config,ConfigMath,3205,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['Config'],['ConfigMath']
Modifiability,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:2293,evolve,evolves,2293,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['evolve'],['evolves']
Modifiability,"l check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops after `mkl_rt` and doesn't add `iomp5;pthread;etc`. Those are still formed into `tgt::lapack` in cmake/common/lapack. But before formati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1491,plugin,plugins,1491,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugins']
Modifiability,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3221,variab,variables,3221,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['variab'],['variables']
Modifiability,"l_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:2211,variab,variable,2211,https://psicode.org,https://github.com/psi4/psi4/issues/1375,3,['variab'],"['variable', 'variables']"
Modifiability,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1790,Config,ConfigMath,1790,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"lassify.cc; src/psi4/ccdensity/densgrid_RHF.cc; src/psi4/ccdensity/distribute.cc; src/psi4/ccdensity/file_build.cc; src/psi4/ccdensity/get_frozen.cc; src/psi4/ccdensity/idx_error.cc; src/psi4/ccdensity/idx_permute.cc; src/psi4/ccdensity/resort_gamma.cc; src/psi4/ccdensity/resort_tei.cc; src/psi4/ccdensity/x_xi_check.cc; src/psi4/ccenergy/cc2_WabijT2.cc; src/psi4/cceom/check_sum.cc; src/psi4/cceom/hbar_norms.cc; src/psi4/cceom/norm_HC1.cc; src/psi4/cceom/sigmaCC3_RHF.cc; src/psi4/cceom/sort_amps.cc; src/psi4/cchbar/Wabei_RHF_FT2_a.cc; src/psi4/cclambda/overlap_LAMPS.cc; src/psi4/cclambda/BL2_AO.cc; src/psi4/cclambda/Lmag.cc; src/psi4/cclambda/WabeiL1.cc; src/psi4/cclambda/check_sum.cc; src/psi4/cclambda/halftrans.cc; src/psi4/cclambda/spinad_amps.cc; src/psi4/ccresponse/print_X.cc; src/psi4/cctriples/ET_AAA.cc; src/psi4/cctriples/ET_AAB.cc; src/psi4/cctriples/ET_ABB.cc; src/psi4/cctriples/ET_BBB.cc; src/psi4/cctriples/test_abc_loops.cc; src/psi4/detci/import_vector.cc; src/psi4/dfocc/arrays.cc; src/psi4/dfocc/combine_ref_sep_tpdm.cc; src/psi4/dfocc/conv_mo_tei.cc; src/psi4/dfocc/conv_mo_tei_ref.cc; src/psi4/dfocc/fock_so.cc; src/psi4/dfocc/olddf.cc; src/psi4/dfocc/ref_grad.cc; src/psi4/dfocc/t2_1st_scs_gen.cc; src/psi4/dfocc/t2_1st_scs_sc.cc; src/psi4/dfocc/z_vector_cg.cc; src/psi4/mcscf/algebra_interface.cc; src/psi4/psimrcc/blas_resorting.cc; src/psi4/psimrcc/matrix_iterator.cc; src/psi4/psimrcc/mrcc_mkccsd.cc; src/psi4/psimrcc/mrcc_mp3.cc; src/psi4/psimrcc/sort_in_core.cc; src/psi4/psimrcc/updater_sr.cc; ```. This list is already cleaned of IWL, Transqt2, and CCSort. It may be worth cleaning out some of the deprecated libciomr/libqt things. It could probably be argued that they shouldnt be called anymore. There is a good bit of lib3index/libfock that Rob wrote as toy code which may be better to live in plugins as well. We may be able to clean up some of the other files as well. Overall I agree with @andysim, another pass through the headers is probably worthwhile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262124158:2985,plugin,plugins,2985,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262124158,1,['plugin'],['plugins']
Modifiability,"le plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile:127: recipe for target 'all' failed; make: *** [all] Error 2; ```. It tries to use the `PSIDATADIR` of the install directory before psi4 is actually installed. CMake needs to set the `PSIDATADIR` to the build directory prior to installing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:1295,plugin,plugins,1295,https://psicode.org,https://github.com/psi4/psi4/issues/90,6,['plugin'],['plugins']
Modifiability,"led with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, 21 deselected in 80.60 seconds =============; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3990,plugin,plugin,3990,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,7,['plugin'],['plugin']
Modifiability,"led); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input file:; for method in Earray:; water.reset_point_group(sym); water.fix_orientation(True); water.update_geometry(); banner('Testing %s' % (method)); --> G, wfn = gradient(method, return_wfn=True); ans = wfn.energy(); print('%16s\t%s\t%s\t%s' % (method, water.schoenflies_symbol(), variable('CURRENT ENERGY') - ans, ans)); clean(); print(' Checking gradient methods (excited state) ...'); Earray = [; Psi4 stopped on: Friday, 31 January 2020 05:10PM; Psi4 wall time for execution: 0:00:06.47; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:2277,variab,variable,2277,https://psicode.org,https://github.com/psi4/psi4/issues/1793,1,['variab'],['variable']
Modifiability,"less, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1724,Config,Configure,1724,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['Config'],['Configure']
Modifiability,letonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registr,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5407,plugin,plugins,5407,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:5295,Variab,Variable,5295,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,['Variab'],['Variable']
Modifiability,"libcubeprop will also be getting some I/O refactoring soon, so feel free to chime in if there's anything relevant you see going wrong or right with your planned uses.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116#issuecomment-410095742:42,refactor,refactoring,42,https://psicode.org,https://github.com/psi4/psi4/issues/1116#issuecomment-410095742,1,['refactor'],['refactoring']
Modifiability,"ll return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""OpenMP::Open",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3585,plugin,plugins,3585,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugins']
Modifiability,"ll those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH rel",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2788,Plugin,Plugins,2788,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['Plugin'],['Plugins']
Modifiability,"low. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, plus it's so easy to adjust after link. I'm hoping to continue ignoring rpath on Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:3247,Config,ConfigMath,3247,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Config'],['ConfigMath']
Modifiability,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:2140,variab,variable,2140,https://psicode.org,https://github.com/psi4/psi4/issues/1959,1,['variab'],['variable']
Modifiability,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1229,config,config,1229,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['config'],['config']
Modifiability,"m scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1208,config,config,1208,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['config']
Modifiability,"m the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1136,refactor,refactor,1136,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['refactor'],['refactor']
Modifiability,"ma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks. Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:3280,variab,variable,3280,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['variab'],['variable']
Modifiability,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:3044,config,config,3044,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['config'],['config']
Modifiability,"make; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ----------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2238,plugin,plugins,2238,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['plugin'],['plugins']
Modifiability,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10023,variab,variable,10023,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['variab'],['variable']
Modifiability,"metry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1446,variab,variable,1446,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6687,Config,Configuring,6687,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Config'],['Configuring']
Modifiability,missing symbol for JK object in plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:32,plugin,plugins,32,https://psicode.org,https://github.com/psi4/psi4/issues/971,1,['plugin'],['plugins']
Modifiability,more wavefunction-pass for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/309:27,plugin,plugins,27,https://psicode.org,https://github.com/psi4/psi4/pull/309,1,['plugin'],['plugins']
Modifiability,"mpty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already know this will be brought up, so I'll start it off: what's the best name for this keyword? `SCF_COSX_GUESS` and `DF_SCF_GUESS` do very similar things, but have a different naming structure, i.e., SCF is located at a different point in the variable name. I intentionally picked `SCF_COSX_GUESS` because putting SCF at the front makes it clear that the option applies for the whole SCF rather than just COSX itself, which is exacerbated by the existence of other `COSX_xxx` variables that exist specifically for COSX. I actually wouldn't mind switching the name of `DF_SCF_GUESS`, too, to maintain consistency. But if `COSX_SCF_GUESS` is preferred by everyone else, I'll switch to that. . ## Checklist; - [X] Tests added for any new features; - [] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:4219,variab,variable,4219,https://psicode.org,https://github.com/psi4/psi4/pull/3158,2,['variab'],"['variable', 'variables']"
Modifiability,"n Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3164,plugin,plugin,3164,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,['plugin'],['plugin']
Modifiability,"n-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-report -Wall -Wuninitialized ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-group;-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;-openmp;-Wl,--end-group; -- Definitions : SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;FC_SYMBOL=2;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H; -- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. Point where it fails:. ```; [ 45%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/softw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:5652,Config,Configuring,5652,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Config'],['Configuring']
Modifiability,naive Makefile for plugin from binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/216,1,['plugin'],['plugin']
Modifiability,naointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5518,plugin,plugins,5518,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:7237,config,config,7237,https://psicode.org,https://github.com/psi4/psi4/issues/2510,5,['config'],['config']
Modifiability,"nda-forge` (latter cmd is a simplification -- don't use as-is), so while most of the `-c psi4` packages are perfectly compatible with master, they're not the freshest and will continue to decay.; 3. New release means new tag, so you'll need to pull tags anyway (`git fetch upstream 'refs/tags/*:refs/tags/*'`) for versioning, distributed driver, and dispersion addons to work. ### Interim Build Directions. Altogether, now is a good time to do a fresh clone, environment, and compile ... if only there were directions. The interim build guidance is:; 1. Create an environment from one of the ""buildrun"" env spec files under https://github.com/psi4/psi4/tree/master/devtools/conda-envs . First edit it to the python you want and the env name you want, and comment out any optional qc addons you don't want. ; 2. Then issue something like`conda env create -f Linux-buildrun-maxeco.yaml` and activate the environment. ; 3. Clone psi4, then `cmake -S. -Bobjdir -DBUILD_SHARED_LIBS=ON ...`, and it usually configures fine. ; 4. For Apple Silicon, there isn't a env yaml file yet, but replacing `libblas=*=*mkl` with `libblas=*=*accelerate` or `libblas=*=*openblas`, getting rid of other mkl lines, and aggressively pruning qc addons (not many ported to arm64) should do the trick.; 5. For Apple in general, you probably need the `target-sdk` stuff at https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml; 6. For Linux, if you want a high-AM L2, replace this line `conda-forge/label/libint_dev::libint=2.7.3dev1` https://github.com/psi4/psi4/blob/master/devtools/conda-envs/Linux-buildrun-maxeco.yaml#L22 with `psi4/label/testing::libint2=2.7.2=h2fe1556_1` . Despite the different package names, versions, and channels, they're built from the same source, just different configuration. (I can't build a big AM w/i the 6h c-f time window.). ### Future Build Tools. Previously, the main build helper has been the `psi4-dev` conda package that combines a maximal set of build tools (compil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:1752,config,configures,1752,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['config'],['configures']
Modifiability,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341:1921,variab,variable,1921,https://psicode.org,https://github.com/psi4/psi4/issues/1341,1,['variab'],['variable']
Modifiability,"ne-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; - [x] Add a plain `psi4 --psiapi` variation on `psi4 --psiapi-path` that can be used in `eval $(psi4 --psiapi)`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4895,variab,variable,4895,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,ng CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4683,plugin,plugins,4683,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ng for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() framework in JK class to represent shell significance testing.; - [x] Removal of shell_significant_density() from TwoBodyAOInt.; - [x] Reimplementation of density screening in DirectJK via the shell_significant framework.; - [ ] Reimplementation of density screening in other JK methods via the shell_significant framework.; - [x] Alteration of other shell quartet screening implementations in other JK algorithms via the JK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:1972,refactor,refactor,1972,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['refactor'],['refactor']
Modifiability,ng/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5314,plugin,plugins,5314,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,ng/bakerjcc93/CMakeLists.txt; > - 31. optking/beran: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4506,plugin,plugins,4506,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"no idea where to do this : . A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; PsiReturnType skeleton(Options& options); to:; SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185847048:74,plugin,plugins,74,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185847048,1,['plugin'],['plugins']
Modifiability,"nown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1386, in select_mrcc; return func(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 4935, in run_mrcc; ref_wfn = scf_helper(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:8904,config,config,8904,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['config'],['config']
Modifiability,"nt, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quali",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1178,enhance,enhancements,1178,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['enhance'],['enhancements']
Modifiability,ntegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5462,plugin,plugins,5462,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,nv/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4386,plugin,plugin,4386,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"o latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not always be the case. I believe some of pybind's asserted control over symbols is actually meant to allow better mixing of pb projects, in which case we should also consider doing as they advise and only exporting the symbols we need. ## Status; - [x] Ready to go. This is now pointing to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:1338,plugin,plugins,1338,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['plugin'],['plugins']
Modifiability,o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4936,plugin,plugins,4936,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"ocal/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2524,config,configuration,2524,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['config'],['configuration']
Modifiability,"of a determinant depends on the ordering of the; spin orbitals. In this code, all alpha spin orbitals come first, and then; all beta spin orbitals (this winds up being an easier rule to state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1261,variab,variables,1261,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variables']
Modifiability,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2150,variab,variable,2150,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['variab'],['variable']
Modifiability,"ombinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual ini",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:1005,variab,variables,1005,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['variab'],['variables']
Modifiability,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:3099,refactor,refactor,3099,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['refactor'],['refactor']
Modifiability,"on there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:1823,plugin,plugins,1823,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['plugin'],['plugins']
Modifiability,"on; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://github.com/evaleev/libint ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:953,Config,Configuring,953,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['Config'],['Configuring']
Modifiability,ondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_input.py`; - [ ] 66. snsmp2/cf-o: mismatched marks ct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5631,plugin,plugins,5631,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5999,Adapt,Adapted,5999,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,"op='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3309,variab,variable,3309,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['variab'],['variable']
Modifiability,openmp inheritance for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:7,inherit,inheritance,7,https://psicode.org,https://github.com/psi4/psi4/pull/1520,2,"['inherit', 'plugin']","['inheritance', 'plugins']"
Modifiability,"opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;-fopenmp;-Wl,--end-group); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: gcc; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O0 -g3 -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_201",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:3474,config,config,3474,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['config'],['config']
Modifiability,"optional fortran compiler, adjustable cmake config installation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:44,config,config,44,https://psicode.org,https://github.com/psi4/psi4/pull/2946,1,['config'],['config']
Modifiability,optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4848,plugin,plugins,4848,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmak,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5457,plugin,plugins,5457,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5456,refactor,refactored,5456,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['refactor'],['refactored']
Modifiability,"orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-pac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1342,variab,variable,1342,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability,"ork well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10307,rewrite,rewrite,10307,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['rewrite'],['rewrite']
Modifiability,"orr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2269,variab,variables,2269,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['variab'],['variables']
Modifiability,"ort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1778,config,configuring,1778,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['config'],['configuring']
Modifiability,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16288,Config,Configuring,16288,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Config'],['Configuring']
Modifiability,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:4508,config,configured,4508,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['config'],['configured']
Modifiability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8954,variab,variables,8954,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['Refactor', 'variab']","['Refactor', 'variables']"
Modifiability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3347,variab,variables,3347,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['Refactor', 'variab']","['Refactor', 'variables']"
Modifiability,"ove, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been reformulated to enable calculations with grids containing negative grid weights. ## Questions; - [x] Is the current way of handling computation of the numerical overlap matrix acceptable? Currently, two X matrices are used to form the numerical overlap matrix. One goal of folding the grid weight sign into the formation of G was to prevent the use of multiple X matrices. However, I don't think that can be done here without removing the call to `linalg::doublet` in the `compute_numeric_overlap` function. One could probably do a slightly-modified, manually-implemented matrix multiply with the grid weight folded in, and construct $S_{N}$ with a single $X$ matrix that way. But that comes at the cost of not utilizing BLAS. What does everyone consider preferable?; - [ ] What, exactly, is the best way to test this? I would like to add a test ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:2100,config,configurations,2100,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['config'],['configurations']
Modifiability,"ow what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2678,plugin,plugins,2678,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugins']
Modifiability,plug-in compilation problem,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:0,plug-in,plug-in,0,https://psicode.org,https://github.com/psi4/psi4/issues/308,1,['plug-in'],['plug-in']
Modifiability,plugin https://github.com/mayhallgroup/PsiEmbed ; work with @danclaudino and/or @shannonhouck. needs changes to psi itself. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1839:0,plugin,plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/1839,1,['plugin'],['plugin']
Modifiability,plugin: https://github.com/Masterluke87/psixas. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1837:0,plugin,plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/1837,1,['plugin'],['plugin']
Modifiability,"plugins on windows could be pursued, but they're not in demand. presently failing on OpenMP detection in plugin cmake configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229,3,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,plugins testing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/569:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/569,1,['plugin'],['plugins']
Modifiability,plugins to binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/370:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/370,1,['plugin'],['plugins']
Modifiability,possibly related to https://github.com/psi4/psi4/issues/1679. Although it should fit in the `int` variable raised in that issue. (i think). Is there any other output? `stderr` captured by slurm?; What is the last content of `timer.dat`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-560861573:98,variab,variable,98,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560861573,1,['variab'],['variable']
Modifiability,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2486,plugin,plugin,2486,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['plugin'],['plugin']
Modifiability,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4471,variab,variable,4471,https://psicode.org,https://github.com/psi4/psi4/issues/2330,5,['variab'],['variable']
Modifiability,psio changes break plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/221:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/221,1,['plugin'],['plugin']
Modifiability,"pt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER = 12 FREEZE CORE = yes; NUM ROOTS = 10 ICORE = 1; PRINT = 1 FCI = no; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-08 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 130; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 1; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = yes TRANS DENSITY= yes. FILES = 50 51 52 53. EX ALLOW = 1 1 ; STATE AVERAGE = 1(1.00) ; STATE AVERAGE = 1(1.00) . ORBITALS:; NMO = 246 NUM ALP = 47; ORBS IN CI = 232 NUM ALP EXPL = 33; FROZEN CORE = 14 NUM BET = 47; RESTR CORE = 0 NUM BET EXPL = 33; IOPEN = no; RAS1 LVL = 32 A RAS3 MAX = 2; RAS1 MIN = 92 B RAS3 MAX = 2; A RAS1 LVL",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:15264,COUPLING,COUPLING,15264,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['COUPLING'],['COUPLING']
Modifiability,put.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory reg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5558,plugin,plugins,5558,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,put.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4634,plugin,plugins,4634,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"py as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, supe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1120,variab,variable,1120,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1980,Extend,Extended,1980,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['Extend'],['Extended']
Modifiability,"pybind11, plugins, externals, and targets",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:10,plugin,plugins,10,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['plugin'],['plugins']
Modifiability,"python.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: [libint2.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libdl.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libmkl_rt.so]; 0x0000000000000001 (NEEDED) Shared library: [libiomp5.so]; 0x0000000000000001 (NEEDED) Shared library: [libpthread.so.0]; 0x0000000000000001 (NEE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:1218,plugin,plugins,1218,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,1,['plugin'],['plugins']
Modifiability,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3259,config,configure,3259,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['config'],['configure']
Modifiability,"quires C++ 11 to compile (GCC 4.9+, clang 3.3+, Apple clang 6.1+, ICC 2016+). Note that ICC requires GCC and therefore GCC 4.9+.; - The fundamental restructuring of Psi4 is complete. There are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be u",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2254,variab,variables,2254,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['variab'],['variables']
Modifiability,"r. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over? Anything amiss?. ## Checklist; - [x] `ctest -L scf` passes. ## Status; - [x] Ready for review; - [ ] Let's discuss the two questions before merging this in, please.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2298:1464,plugin,plugins,1464,https://psicode.org,https://github.com/psi4/psi4/pull/2298,1,['plugin'],['plugins']
Modifiability,ration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched direc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4782,plugin,plugins,4782,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"re, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1669,variab,variable,1669,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['variab'],['variable']
Modifiability,"reate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:1155,plugin,plugin,1155,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['plugin'],['plugin']
Modifiability,"reating an environment out of the box with mamba using conda-forge Psi4 seems to set PSIDATADIR to a build directory. (I'll try with conda as well). ```shell; $ mamba create --name psi4-1.8-py39 python=3.9 psi4=1.8 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8-py39; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/lib/python3.9/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815705089/work/build/stage/share/psi4'; ```. I tried 3.11 as well:. ```shell; $ mamba create --name psi4-1.8 psi4 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/lilywang/miniconda3/envs/psi4-1.8/lib/python3.11/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815712644/work/build/stage/share/psi4'; ```; Manually setting PSIDATADIR seems to fix things, but the docs actively recommend against doing that:. ```; $ export PSIDATADIR=~/miniconda3/envs/psi4-1.8/share/psi4; $ psi4 --version; 1.8; ```. https://psicode.org/psi4manual/master/build_planning.html#why-not-to-set-psidatadir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2993:1548,variab,variable,1548,https://psicode.org,https://github.com/psi4/psi4/issues/2993,2,['variab'],['variable']
Modifiability,refactor empirical dispersion,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:0,refactor,refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['refactor'],['refactor']
Modifiability,"reformat and disable/enable if you like for `config.h`, @JonathonMisiewicz, but that particular loss of alignment doesn't bother me. the nice thing (for me, b/c I enjoy formatting too much) is that yapf/c-f put a slight barrier to opt-ing in to hand formatting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415881613:45,config,config,45,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415881613,1,['config'],['config']
Modifiability,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355307312:93,plugin,plugin,93,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312,1,['plugin'],['plugin']
Modifiability,"rface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1167,plugin,plugin,1167,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['plugin'],['plugin']
Modifiability,"rfunctional class: A complete list of functionals in a superfunctional can be accessed with `functionals()`. `add_x_functional(fnctl)` and `add_c_functional(fnctl)` were removed in favor of `add_functional(fnctl)`. Also removes `is_libxc_func()` since there is now no distinction. ## Dev notes & details; - [ ] The base `Functional` class now has a `kind()` field. When implemented in the `LibXCFunctional`, this allows one to get the kind of functional from LibXC -- Now, LibXC is treated as the single source of truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python sid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:1217,inherit,inheritance,1217,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['inherit'],['inheritance']
Modifiability,"rief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:975,plugin,plugin,975,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['plugin'],['plugin']
Modifiability,"rking CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing config",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2246,Config,Configuring,2246,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Config'],['Configuring']
Modifiability,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3516,variab,variable,3516,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['variab'],['variable']
Modifiability,"rminants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1996,variab,variable,1996,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variable']
Modifiability,"roperties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:1897,variab,variables,1897,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['variab'],['variables']
Modifiability,"roup); INFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: gcc; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O0 -g3 -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings; -- C compiler flags : -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -O0 -g3 -Wall -Wextra -Winit-self -Wuninitialized -Wmissing-declarations -Wwrite-strings ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:3509,Plugin,Plugins,3509,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Plugin'],['Plugins']
Modifiability,"rs thoughts?. I hope you know what you're asking for. Storage of ground-state densities is lawless, let alone excited-state densities. For excited-state densities...; * ADC won't export densities of any sort.; * TD-DFT will save left and right eigenvectors. From my (very shaky) knowledge of TD-DFT theory, those are left and right transition densities.; * EOM-CC creates but will not save its left and right transition densities. Before this PR, it would write excited state densities to the wavefunction. (In the current version of the PR, it still does). For ground-state densities...; * For fully variational methods (including in orbitals), the density of the correlated method is unambiguous and saved to the wavefunction.; * For methods that are not fully variational, you have orbital-relaxed and orbital-unrelaxed densities. If orbital relaxation is not needed, this density may or may not get saved to the wavefunction. If it is not saved, the density is probably still the SCF density.; * Some methods have it even worse. For example, ODC-12 with perturbative lambda has _three conceivable densities_. ODC-12 density, ODC-12 density + perturbative lambda, and ODC-12 + perturbative lambda + orbital relaxtion.; * CAS-DMRG-PT2 through the `dmrg` module saves the DMRG density to the wavefunction, which is not the DMRGPT2 density.; * If the user requests a spin-scaled density, the standard densities need to be further monkeyed with to be correct in gradients. I don't know if this is actually done. I suspect it is not. And to represent all that, the current tools we have are `Da`, `Db`, and the pool of psivars. I'm in favor of deprecating `Da` and `Db` for anything other than internal SCF use and creating a new wavefunction member to store all the densities, _with proper labeling_. This will of course be a lot of code refactoring, but that is quite literally the entire point of me doing all this `cc` PRs. And of course, somebody will need to tell `dfocc` about this API change. 🙂",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094422746:2016,refactor,refactoring,2016,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094422746,1,['refactor'],['refactoring']
Modifiability,"rsion will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_LIBERD=OFF -DENABLE_JKFACTORY=OFF -DENABLE_GPU_DFCC=OFF -DENABLE_DUMMY_PLUGIN=OFF -DENABLE_PCMSOLVER=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_A",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:9256,config,configure,9256,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['config'],['configure']
Modifiability,"s code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`.; - [X] Expands the use cases of the `COSX_RADIAL_POINTS_INITIAL`, `COSX_SPHERICAL_POINTS_INITIAL`, and `COSX_MAXITER_FINAL` keywords. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` control the size of the grid used for the `SCF_COSX_GUESS` guess ( default: (20/50) ). `COSX_MAXITER_FINAL` controls how many `DIRECT`/`DFDIRJ+LINK` iterations to run after the converged `COSX` SCF (default: 2).; -[X] Cleans up `scf_iterator.py`, renaming `early_screening` and all associated variables, and adding comments for cases where multi-stage SCF convergence procedures are used.; - [X] Adds testing for `SCF_COSX_GUESS` and `COSX_MAXITER_FINAL`. ## Questions; - [ ] I already know this will be brought up, so I'll start it off: what's the best name for this keyword? `SCF_COSX_GUESS` and `DF_SCF_GUESS` do very similar things, but have a different naming structure, i.e., SCF is located at a different point in the variable name. I intentionally picked `SCF_COSX_GUESS` because putting SCF at the front makes it clear that the option applies for the whole SCF rather than just COSX itself, which is exacerbated by the existence of other `COSX_xxx` variables that exist specifically for COSX. I actually wouldn't mind switching the name of `DF_SCF_GUESS`, too, to maintain consistency. But if `COSX_SCF_GUESS` is preferred by everyone else, I'll switch to that. . ## Checklist; - [X] Tests added for any new features; - [] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:3787,variab,variables,3787,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['variab'],['variables']
Modifiability,s comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5241,plugin,plugins,5241,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,s comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4900,plugin,plugins,4900,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"s don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:1158,variab,variables,1158,https://psicode.org,https://github.com/psi4/psi4/issues/1375,3,['variab'],"['variable', 'variables']"
Modifiability,"s is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the objec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:1726,config,configurables,1726,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['config'],['configurables']
Modifiability,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2261,variab,variable,2261,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['variab'],['variable']
Modifiability,"s the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1200,flexible,flexible,1200,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['flexible'],['flexible']
Modifiability,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:993,variab,variable,993,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['variab'],['variable']
Modifiability,"s, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to depreca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:1585,variab,variables,1585,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['variab'],['variables']
Modifiability,"s.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5331,config,configure,5331,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['config'],['configure']
Modifiability,s/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:5194,plugin,plugins,5194,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,s/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5826,plugin,plugins,5826,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,s/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py; > - 66. snsmp2/cf-o: mismatched marks ctest (snsmp;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5890,plugin,plugins,5890,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,s: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5363,plugin,plugins,5363,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5325,CONFIG,CONFIG,5325,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,3,"['CONFIG', 'config']","['CONFIG', 'config', 'configs']"
Modifiability,"scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not one unified place, so see if they're right.; - [x] Check the EFP bit is what we want. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:1610,plugin,plugins,1610,https://psicode.org,https://github.com/psi4/psi4/pull/993,1,['plugin'],['plugins']
Modifiability,"ser input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1536,refactor,refactored,1536,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['refactor'],['refactored']
Modifiability,"set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2891,variab,variable,2891,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010136:591,plugin,plugin,591,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136,1,['plugin'],['plugin']
Modifiability,set_output_file enhancements,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:16,enhance,enhancements,16,https://psicode.org,https://github.com/psi4/psi4/pull/2932,1,['enhance'],['enhancements']
Modifiability,si4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom ==,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4365,plugin,plugin,4365,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"si4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking gen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:2526,config,configuration,2526,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['config'],['configuration']
Modifiability,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:2880,config,config,2880,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,"sis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/liboptions.h>; #include <libmints/wavefunction.h>; #include <libmints/basisset.h>; #include <libmints/matrix.h>; #include <libmints/vector.h>; #include <libpsio/psio.hpp>; #include <libthce/lreri.h>; #include <libthce/thcew.h>; #include <libthce/thce.h>. INIT_PLUGIN. using namespace boost;. namespace psi{ namespace dfmp2 {. extern ""C""; int read_options(std::string name, Options& options); {; if (name == ""DFMP2""|| options.read_globals()) {; /*- The amount of information printed to the output file -*/; options.add_int(""PRINT"", 1);; }. return true;; }. extern ""C""; PsiReturnType dfmp2(Options& options); {; int print = options.get_int(""PRINT"");; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; boost::shared_ptr<BasisSet> primary = wfn->basisset();. boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_orbital(primary->molecule(), ""DF_BASIS_MP2"", options.get_str",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:2858,plugin,plugin,2858,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability,"sition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1936,variab,variable,1936,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variable']
Modifiability,"so I've changed the `cc46` test case to grab `EOM-CC2` variables for all ground-state quantities. Excited state quantities are set by the EOM code and so still follow `CC XPROPERTYX`. I think this is a reasonable move, considering anyone wanting to use these variables will need to check their names to get the syntax right in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716213255:55,variab,variables,55,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716213255,2,['variab'],['variables']
Modifiability,sointegrals plugin not working?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/issues/74,1,['plugin'],['plugin']
Modifiability,"sointegrals plugin works smoothly now, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/369#issuecomment-215009614:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/pull/369#issuecomment-215009614,1,['plugin'],['plugin']
Modifiability,"sort will use 2.02 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.01 seconds = 0.00 minutes; 	system time = 0.03 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.46 seconds = 0.01 minutes; 	system time = 0.09 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:9940,Config,Configuration,9940,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Config'],['Configuration']
Modifiability,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:9108,Config,Configuring,9108,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['Config'],['Configuring']
Modifiability,"starting with conda psi4 `0.3.491`, you should be getting all the headers (though not namespace protected) and the basic `psi4-config` script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172949103:127,config,config,127,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172949103,1,['config'],['config']
Modifiability,still merge queue config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2923:18,config,config,18,https://psicode.org,https://github.com/psi4/psi4/pull/2923,1,['config'],['config']
Modifiability,strategy 2 for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2104:15,plugin,plugins,15,https://psicode.org,https://github.com/psi4/psi4/pull/2104,1,['plugin'],['plugins']
Modifiability,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13266,Plugin,Plugins,13266,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Plugin'],['Plugins']
Modifiability,"t this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1068,variab,variable,1068,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['variab'],['variable']
Modifiability,"t threading itself automatically. If we roll back to 1.1 does the issue become better?. -Daniel Smith; Sent from my iPhone. . > On Jun 6, 2018, at 04:29, Peter Kraus <notifications@github.com> wrote:; > ; > To add to Lori's table from here, I've compiled the 1.2-rc2 tag against various blas/lapack combinations, and ran the dft-bench-ionisation test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):; > ; > 	N=1	N=4	N=1	N=4; > Psi4/1.2-rc2-acml-5.3.1	FAIL	 	 	 ; > Psi4/1.2-rc2-lapack-3.8.0	395.944	299.438	1.00	1.32; > Psi4/1.2-rc2 (1.2rc2.dev35)	268.523	223.574	1.47	1.77; > Psi4/1.2-rc2-blis-0.3.2	356.723	262.964	1.11	1.51; > Psi4/1.2-rc2-openblas-0.2.20	FAIL	 	 	 ; > Psi4/1.2-rc2-openblas-0.3.0	FAIL	 	 	 ; > All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0.; > ; > ACML-5.3.1 is a binary.; > ; > Netlib's BLAS and lapack (3.8.0) compiled with -O3 -march=barcelona -fPIC and -O3 -frecursive -march=barcelona -fPIC respectively, including deprecated functions. I had to add -DENABLE_dkh=ON to the psi4 build options, otherwise the fortran compiler wouldn't get picked up.; > ; > The 1.2rc2.dev35 is a binary that was available in conda, compiled against mkl 2018.0.2, intel-openmp 2018.0.0.; > ; > Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with ./configure auto; lapack compiled as above.; > ; > OpenBLAS-0.2.20 was compiled with USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA. OpenBLAS-0.3.0 was compiled with both make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 and make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" and linked using the .so and .a; it doesn't pass at all even with psi4 -n 1.; > ; > The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290:1346,config,configure,1346,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290,1,['config'],['configure']
Modifiability,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2167,variab,variable,2167,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122,1,['variab'],['variable']
Modifiability,"t-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk.cc](https://github.com/psi4/psi4/pull/2543#discussion_r848780442)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:1230,Refactor,Refactor,1230,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['Refactor'],['Refactor']
Modifiability,t; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). v,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5095,plugin,plugins,5095,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:2828,Refactor,Refactor,2828,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['Refactor'],['Refactor']
Modifiability,"tates 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1733,variab,variable,1733,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,1,['variab'],['variable']
Modifiability,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:4171,Plugin,Plugin,4171,https://psicode.org,https://github.com/psi4/psi4/issues/2491,4,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,test module plugin on windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/pull/2099,1,['plugin'],['plugin']
Modifiability,"th pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1136,plugin,plugins,1136,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['plugin'],['plugins']
Modifiability,"th the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4367,Config,Config,4367,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['Config'],['Config']
Modifiability,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1460,adapt,adapted,1460,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Modifiability,"the snsmp2 plugin (https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/wavefunctioncache.py) is a big user of the npz format for file 180 before wavefunction serialization to a npy file. (Probably the only external user.) Moreover, they both use them and write out new ones for consumption. They also modify and store `Ca_occ` in their exchange files. (Looks like npz did this: https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bf) For those from a psi4 run, the Ca_occ can just be extracted by API from the deserialized wfn. But is there any facility for storing extra items in the npy?. There's some lengthy workarounds for issues since resolved (custom cast-up) but the guess of dimer from stack of monomer isn't in psi4 and the plugin isn't being actively developed (to my knowledge), so I suggest a minimal patch-up rather than thorough update. The way to run this is to build an up-to-date psi, edit it to apply #1508, then clone the snsmp2 repo (above), navigate to `<sns-mp2-repo>/tests/` and run an input with `PYTHONPATH=../ <path-to-psi4-objdir>/stage/bin/psi4 simple.in`. If this doesn't get taken up, we'll tackle it next Wednesday the @CDSherrill group programming. In the meantime, snsmp2 is getting dropped from `psi4-rt`. FYI @rmcgibbo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514:11,plugin,plugin,11,https://psicode.org,https://github.com/psi4/psi4/issues/1514,2,['plugin'],['plugin']
Modifiability,"there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1077,variab,variable,1077,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['variab'],['variable']
Modifiability,"this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:; 1. Separate out density screening from the SCREENING keyword and into its own keyword (likely something like DENSITY_SCREENING); 2. Removal of any density matrix function/variable from TwoBodyAOInt. Without density screening in TwoBodyAOInt, these density matrix references in TwoBodyAOInt are unnecessary and more properly placed into JK, as well. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implementation of shell_significant() fram",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:1566,refactor,refactor,1566,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['refactor'],['refactor']
Modifiability,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['variab'],['variables']
Modifiability,"thm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK derived classes, and thus different composite algorithm combinations; but this is a case where specifically fine-tuning the input for different methods may be preferable. What does everyone think?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:1574,Refactor,Refactors,1574,https://psicode.org,https://github.com/psi4/psi4/pull/2955,2,"['Refactor', 'variab']","['Refactors', 'variable']"
Modifiability,thread pool: fix unsafe variable change,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/20:24,variab,variable,24,https://psicode.org,https://github.com/psi4/psi4/pull/20,1,['variab'],['variable']
Modifiability,tion. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4588,plugin,plugins,4588,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"tions from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1917,config,configurations,1917,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['config'],['configurations']
Modifiability,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:387,variab,variable,387,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239,1,['variab'],['variable']
Modifiability,"truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:1850,variab,variables,1850,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['variab'],['variables']
Modifiability,ts/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4026,plugin,plugin,4026,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"turns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3989,extend,extend,3989,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['extend'],['extend']
Modifiability,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1239,plugin,plugin,1239,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,2,['plugin'],['plugin']
Modifiability,"u weren't linked in with this thread. Unfortunately, the situation at the moment isn't much better than this issue reflects. Between branch and API updates (see #2442), the specific requirements of psi (see https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L26), and the quirk that I can't yet myself get past a symbol limit with larger AM and the Intel linker to build a big-AM L2 conda package, building bigger Libint2's hasn't been something we recommend casually. As far as I know, it can be done with gcc, though. Any generation or build step will take hours in parallel. I don't suggest you do this, esp. if you're most accustomed to single-line builds. Nevertheless, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1044,config,configure,1044,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['config'],['configure']
Modifiability,"uency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4372,plugin,plugin,4372,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugin']
Modifiability,"undError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <modul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1186,plugin,plugins,1186,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['plugin'],['plugins']
Modifiability,"urposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. Composite JK algorithms commonly implemented a density-based screening within them, as part of their formulation, but a shell_significant() formalism has been added to SplitJK. This framework isn't unified the same way it is for the base JK class, because the needs for testing shell significance for different composite subalgorithms varies from method to method. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Targe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:1859,refactor,refactor,1859,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['refactor'],['refactor']
Modifiability,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1914,variab,variables,1914,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['variab'],['variables']
Modifiability,"ut more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3203,adapt,adapt,3203,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['adapt'],['adapt']
Modifiability,"utput_file('output.dat', False); psi4.core.set_num_threads(2). mol = psi4.geometry(""""""; O; H 1 1.1; H 1 1.1 2 104; symmetry c1; """"""). psi4.core.set_active_molecule(mol). options = {'BASIS':'STO-3G', 'SCF_TYPE':'PK',; 'E_CONVERGENCE':1e-10,; 'D_CONVERGENCE':1e-10; }. psi4.set_options(options). rhf_e, wfn = psi4.energy('SCF', return_wfn=True); ```. Debug traceback shows hang is in SAD guess at `DFHelper::contract_metric_AO_core_symm`. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) gdb --args python ../tests/psi4numpy/rhf-hessian/input.py ; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchainconda/envs/p4dev36/lib/python3.6/site-packages/numpy/../../../libiomp5.so; Detaching after fork from child process 16215.; Detaching after fork from child process 16216.; Detaching after fork from child process 16217.; Detaching after fork from child process 16218.; Detaching after fork from child process 16219.; Threads set to 2 by Python driver. *** tstart() called on psinet; *** at Wed Apr 25 23:55:59 2018. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:1480,config,configured,1480,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['config'],['configured']
Modifiability,"v2rdm strikes again! :-). fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196,1,['plugin'],['plugin']
Modifiability,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1612,config,configuration,1612,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['config'],['configuration']
Modifiability,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:4963,variab,variable,4963,https://psicode.org,https://github.com/psi4/psi4/issues/2178,3,['variab'],['variable']
Modifiability,"version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occurred!; See also ""/media/BIGdisk/psi4/objdir/CMakeFiles/CMakeOutput.log"".; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ cmake --version; cmake version 3.9.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ git describe; v1.2rc1. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:5351,Config,Configuring,5351,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['Config'],['Configuring']
Modifiability,vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. pytho,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5152,plugin,plugins,5152,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1079,extend,extended,1079,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['extend'],['extended']
Modifiability,"w modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought https://sphinx-tabs.readthedocs.io/en/latest/ would be a nice way to show psithon/psiapi/qcschema syntax, so I added that requirement to the docs build along with a quick example. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1907,config,configuration,1907,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['config'],['configuration']
Modifiability,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332296506:87,variab,variable,87,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506,1,['variab'],['variable']
Modifiability,"when you use the driver function `psi4.geometry()` the `psi4.core.Molecule` object that is returned has not been completely initialized yet. To complete the initialization of the molecule you can call the the `update_geometry` method of the `psi4.core.Molecule` instance that is returned. . In your case:. ```python; >>> import psi4; >>> mol = psi4.geometry('H 0.0 0.0 0.0\nH 1.5 0.0 0.0'); >>> atoms = mol.geometry().to_array(); >>> atoms; array([], shape=(0, 3), dtype=float64). >>> mol.update_geometry(); >>> atoms2 = mol.geometry().to_array(); >>> atoms2 ; array([[ -1.41729460e+00, -2.16960662e-17, 0.00000000e+00],; [ 1.41729460e+00, 2.16960662e-17, 0.00000000e+00]]). ```. While the docstring for `psi4.geometry()` might not make this clear, and perhaps it should? The docstring for `psi4.core.Molecule.update_geometry()` does:. ```python; >>> import psi4; >>> print(psi4.core.Molecule.update_geometry.__doc__); update_geometry(self: psi4.core.Molecule) -> None. Reevaluates the geometry with current variable values, orientation directives, etc. ; Must be called after initial Molecule definition by string.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316060861:1008,variab,variable,1008,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316060861,1,['variab'],['variable']
Modifiability,"while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3776,rewrite,rewrite,3776,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:587,variab,variables,587,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,1,['variab'],['variables']
Modifiability,with ENABLE_GENERIC=OFF:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found BLAS: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/libdl.so); -- LAPACK will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; -- Found LAPACK: MKL (/home/termo/intel/mkl/lib/intel64/libmkl_rt.so); -- Found LAPACK MKL: /home/termo/intel/mkl/lib/intel64/libmkl_rt.so;... ```; with ENABLE_GENERIC=ON:; ```; -- BLAS will be searched for based on MATH_ROOT=/home/termo/intel/mkl/ ; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external BLAS library found (have you set the MATH_ROOT environment; variable?); Call Stack (most recent call first):; cmake/math/ConfigMath.cmake:105 (config_math_service); external/common/lapack/CMakeLists.txt:12 (include); ```; [CMakeOutput.log](https://pastebin.com/pWwucBCZ),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004:749,variab,variable,749,https://psicode.org,https://github.com/psi4/psi4/issues/1004,2,"['Config', 'variab']","['ConfigMath', 'variable']"
Modifiability,work with @shannonhouck on plugin https://github.com/mayhallgroup/psi4fockci. check; - [ ] build; - [ ] tests; - [ ] docs; - [ ] conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1838:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/issues/1838,1,['plugin'],['plugin']
Modifiability,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:1940,variab,variables,1940,https://psicode.org,https://github.com/psi4/psi4/issues/2572,5,"['plugin', 'variab']","['plugin', 'variable', 'variables']"
Modifiability,"x000056022aa64bd0 in pyrun_file (fp=fp@entry=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; start=start@entry=257, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; closeit=closeit@entry=1, flags=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1643; #37 0x000056022aa6420e in _PyRun_SimpleFileObject (fp=0x560259cb7470, filename=0x7f21abe2c090, closeit=1, ; flags=0x7ffc67b36bd0) at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:433; #38 0x000056022aa63ee4 in _PyRun_AnyFileObject (fp=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; closeit=closeit@entry=1, flags=flags@entry=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:78; #39 0x000056022aa5cf42 in pymain_run_file_obj (skip_source_first_line=0, filename=0x7f21abe2c090, ; program_name=0x7f21abe2c270) at /usr/local/src/conda/python-3.12.5/Modules/main.c:360; --Type <RET> for more, q to quit, c to continue without paging--; #40 pymain_run_file (config=0x56022ada5c38 <_PyRuntime+77720>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:379; #41 pymain_run_python (exitcode=0x7ffc67b36ba4) at /usr/local/src/conda/python-3.12.5/Modules/main.c:633; #42 Py_RunMain () at /usr/local/src/conda/python-3.12.5/Modules/main.c:713; #43 0x000056022aa147e7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:767; #44 0x00007f21b9bd3088 in __libc_start_call_main (main=main@entry=0x56022aa14720 <main>, argc=argc@entry=6, ; argv=argv@entry=0x7ffc67b36e38) at ../sysdeps/nptl/libc_start_call_main.h:58; #45 0x00007f21b9bd314b in __libc_start_main_impl (main=0x56022aa14720 <main>, argc=6, argv=0x7ffc67b36e38, ; init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc67b36e28); at ../csu/libc-start.c:360; #46 0x000056022aa14681 in _start (); (gdb) ; ```; which corresponds to; https://github.com/psi4/psi4/blob/3484122eaaec9e185bc33581c6cdef4669f2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:9849,config,config,9849,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['config'],['config']
Modifiability,"y about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3417,rewrite,rewrite,3417,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,y registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4518,plugin,plugins,4518,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,yhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc8_0 ; ipython_genutils 0.2.0 pyhd3eb1b0_1 ; ipywidgets 7.6.3 pyhd3eb1b0_1 ; isort 5.8.0 pyhd3eb1b0_0 ; jedi 0.17.2 py39h06a4308_1 ; jinja2 3.0.0 pyhd3eb1b0_0 ; jpeg 9b h024ee3a_2 ; jsonschema 3.2.0 py_2 ; jupyter 1.0.0 py39h06a4308_7 ; jupyter_client 6.1.12 pyhd3eb1b0_0 ; jupyter_console 6.4.0 pyhd3eb1b0_0 ; jupyter_core 4.7.1 py39h06a4308_0 ; jupyterlab_pygments 0.1.2 py_0 ; jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 ; krb5 1.18.2 h173b8e3_0 ; ld_impl_linux-64 2.33.1 h53a641e_7 ; libblas 3.9.0 1_h6e990d7_netlib conda-forge; libboost 1.73.0 h3ff78a5_11 ; libcurl 7.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:1570,plugin,plugins-base,1570,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127,1,['plugin'],['plugins-base']
Modifiability,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3754,polymorphi,polymorphism,3754,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['polymorphi'],['polymorphism']
Modifiability,"ython=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2405,config,configure,2405,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['config'],['configure']
Performance," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:2582,load,loaded,2582,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['load'],['loaded']
Performance," (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2310,load,load,2310,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29947,optimiz,optimized,29947,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36207,optimiz,optimized,36207,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37544,optimiz,optimized,37544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45207,optimiz,optimized,45207,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46544,optimiz,optimized,46544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47881,optimiz,optimized,47881,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53205,optimiz,optimized,53205,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60868,optimiz,optimized,60868,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62205,optimiz,optimized,62205,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72320,optimiz,optimized,72320,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73657,optimiz,optimized,73657,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81320,optimiz,optimized,81320,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82657,optimiz,optimized,82657,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83994,optimiz,optimized,83994,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/usr/local/lib/libgg.1.dylib' (no such file), '/usr/lib/libgg.1.dylib' (no such file). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kianpu/miniconda3/envs/psi4env_37/bin/psi4"", line 185, in <module>; import psi4; File ""/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/core.cpython-37m-darwin.so, 0x0002): Library not loaded: @rpath/libgg.1.dylib; Referenced from: /Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/core.cpython-37m-darwin.so; Reason: tried: '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578:2468,load,loaded,2468,https://psicode.org,https://github.com/psi4/psi4/issues/2578,1,['load'],['loaded']
Performance, -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTE,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2350,Perform,Performing,2350,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2309,Perform,Performing,2309,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.372481393212; H 0.518565778818 -1.191478177535 -0.672179821662; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,)--------------------------------------------------------------------------. SETUP_PHASE; Threads set to 14 by Python driver. Scratch directory: [REMOVED]. *** tstart() called on [REMOVED]; *** at Fri Jul 22 13:16:33 2022. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 13-18 entry C line 144 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs ; atoms 7-12, 19-24 entry H line 14 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 14 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -0.260781259973 -0.714012941782 1.022641061033 12.000000000000; C 0.448798235138 -0.584866555587 1.116392879147 12.000000000000; C 0.671191593804 0.158609920222 1.104026912627 12.000000000000; C 0.177969561551 0.681404978559 1.093307893756 12.000000000000; C -0.560580808895 0.542719215",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:5654,Load,Loading,5654,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Load'],['Loading']
Performance," -757.95743638517786 -9.76555e-01 1.78554e-03 DIIS; @DF-RKS iter 95: -759.85317643211795 -1.89574e+00 8.92026e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 96: -757.77254419159442 2.08063e+00 2.04014e-03 DIIS; @DF-RKS iter 97: -759.86786185265203 -2.09532e+00 8.71296e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 98: -756.63806624552649 3.22980e+00 2.28461e-03 DIIS; @DF-RKS iter 99: -759.79391928550524 -3.15585e+00 9.68819e-04 SOKS, nmicro=40; @DF-RKS iter 100: -758.45496753171210 1.33895e+00 1.31995e-03 SOKS, nmicro=40. PsiException: Could not converge SCF iterations in 100 iterations. Failed to converge.; Traceback (most recent call last):; File ""/apps/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 73, in <module>; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1339, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 677, in gradient; return driver_nbody.nbody_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 291, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 502, in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:14758,optimiz,optimize,14758,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance," // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:1199,Perform,Perform,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['Perform'],['Perform']
Performance," /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43433,optimiz,optimized,43433,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1468,optimiz,optimized,1468,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['optimiz'],['optimized']
Performance," 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3160,optimiz,optimized,3160,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance," 302; Total Points = 239042; Total Blocks = 1831; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 9 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-8, 10-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.162 GiB; user supplied 0.162 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condition number of the overlap matrix is 9.8342984140E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -39.70316824232670 -3.97032e+01 0.00000e+00 ; @DF-RKS iter 1: -43.27234536758360 -3.56918e+00 3.69413e-03 ADIIS/DIIS; @DF-RKS iter 2: -43.35383639315761 -8.14910e-02 2.43782e-03 ADIIS/DIIS; @DF-RKS iter 3: -43.38733837751467 -3.35020e-02 1.10466e-03 ADIIS/DIIS; @DF-RKS iter 4: -43.39730753466733 -9.96916e-03 3.77682e-04 ADIIS/DIIS; @DF-RKS iter 5: -43.39937943728395 -2.07190e-03 2.05445e-04 ADIIS/DIIS; @DF-RKS iter 6: -43.4004478",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:10083,Cache,Cached,10083,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Cache'],['Cached']
Performance," ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3223,perform,performance,3223,https://psicode.org,https://github.com/psi4/psi4/issues/1562,3,"['Optimiz', 'perform']","['Optimize', 'performance']"
Performance," = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.03 minutes; Constructing Basis Sets for SAPT... => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: RIFIT; Keyword: DF_BASIS_SAPT; atoms 1 entry LI line 90 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-ri.gbs ; atoms 2 entry H line 30 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-ri.gbs . //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT0 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on filip-ThinkPad-E495; *** at Wed Mar 4 16:29:34 2020. 	 --------------------------------------------------------; 	 SAPT ; 	 Rob Parrish and Ed Hohenstein ; 	 Open-shell: Jérôme Gonthier ; 	 --------------------------------------------------------. ==> Sizes <==. => Resources <=. Memory [MiB]: 878. => Orbital Ranges <=. ------------------; Range M_A M_B; ------------------; natom 1 1; nso 32 32; ------------------; Alpha orbitals ; ------------------; nmo 32 32; nocc 2 1; nvir 30 31; nfocc 0 0; naocc 2 1; navir 30 31; nfvir 0 0; ------------------; Beta orbitals ; ------------------; nmo 32 32; nocc 1 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:11769,Load,Loading,11769,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance," > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3206,optimiz,optimize,3206,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimize']
Performance, ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1813,Perform,Performing,1813,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1610,Perform,Performing,1610,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1265,perform,perform,1265,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['perform'],['perform']
Performance," CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2537,Optimiz,Optimizer,2537,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['Optimiz'],['Optimizer']
Performance," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2163,CACHE,CACHE,2163,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,2,['CACHE'],['CACHE']
Performance, Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1980,Perform,Performing,1980,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2404,Perform,Performing,2404,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4721,load,load,4721,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['load'],['load']
Performance," Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.0547599541743",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7872,optimiz,optimization,7872,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimization']
Performance," Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Car",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:2398,Load,Loading,2398,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance," J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon, J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0225E-02; VV10 C = 7.4505E-01. => Molecular Quadrature <=. Radial Scheme = EM; Pruning Scheme = ROBUST; Pruning Type = REGION; Nuclear Scheme = SBECKE. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:9715,Load,Loading,9715,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Load'],['Loading']
Performance," Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 9.4278934862E-03.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -151.27216259883716 -1.51272e+02 1.06941e-01 ; @DF-RHF iter 1: -150.75117737973858 5.20985e-01 1.41546e-02 ; @DF-RHF iter 2: -150.80128895895751 -5.01116e-02 4.59853e-03 DIIS; @DF-RHF iter 3: -150.80585921166312 -4.57025e-03 1.25933e-03 DIIS; @DF-RHF iter 4: -150.80646429745690 -6.05086e-04 4.11701e-04 DIIS; @DF-RHF iter 5: -150.80654183074188 -7.75333e-05 7.17643e-05 DIIS; @DF-RHF iter 6: -150.80654589438382 -4.06364e-06 1.72552e-05 DIIS; @DF-RHF iter 7: -150.80654619116103",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:4373,Cache,Cache,4373,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Cache'],['Cache']
Performance," Na 5.6405600000 8.4608400000 2.8202800000 ; Cl 8.4608400000 8.4608400000 2.8202800000 ; Na 8.4608400000 0.0000000000 2.8202800000 ; Na 5.6405600000 2.8202800000 2.8202800000 ; Cl 8.4608400000 2.8202800000 2.8202800000 ; Na 2.8202800000 16.9216800000 2.8202800000 ; Na 0.0000000000 19.7419600000 2.8202800000 ; Cl 2.8202800000 19.7419600000 2.8202800000 ; Na 2.8202800000 11.2811200000 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:8767,optimiz,optimize,8767,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['optimiz'],['optimize']
Performance," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:918,optimiz,optimizer,918,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['optimiz'],['optimizer']
Performance, OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4790,Perform,Performing,4790,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xope,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4749,Perform,Performing,4749,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance," PR or communicate the fix here, whatever you prefer. ```; Traceback (most recent call last):; File ""/opt/conda/envs/psi4-env/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 50, in <module>; File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 1152, in optimize; return optimize_geometric(name, **kwargs); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 918, in optimize_geometric; optimizer.prepareFirstStep(); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/optimize.py"", line 376, in prepareFirstStep; self.H0 = self.IC.guess_hessian(self.coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 3457, in guess_hessian; Hprim = self.Prims.guess_hessian(coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 2730, in guess_hessian; elem1 = min(Elements.index(self.elem[ic.a]), Elements.index(self.elem[ic.b])). ValueError: 'CL' is not in list. Printing out the relevant lines from the Psithon --> Python processed input file:; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; core.set_global_option(""GEOM_MAXITER"", 5); --> optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```. Versions:; - geometric 1.0; - psi4 1.7+6ce35a5; - python 3.9. Psi4 input file:; ```; memory 14000 MB; molecule ligand {; 0 1; Cl -1.0833 -0.2140 0.0000 ; O -0.3456 1.2535 0.0000 ; O 1.0833 1.2535 0.0000 ; N 1.0362 -0.4689 0.0000 ; N -0.0436 -1.2535 0.0000 ; N 0.7813 -1.2535 0.0000 ; C 0.3688 0.0160 0.0000 ; C -0.2986 -0.4689 0.0000 ; C 0.3688 0.8410 0.0000 . units angstrom; no_com; no_reorient; symmetry c1; }. set basis 6-311G(d,p); set opt_type min; geometric_keywords = {; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:1686,optimiz,optimize,1686,https://psicode.org,https://github.com/psi4/psi4/issues/2871,2,['optimiz'],['optimize']
Performance, Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; --,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2478,Perform,Performing,2478,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; --,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2437,Perform,Performing,2437,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance, Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2445,Perform,Performing,2445,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 238643; Total Blocks = 1822; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 3-8 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2, 9-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.163 GiB; user supplied 0.163 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:21607,Load,Loading,21607,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance," Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0.1670 HF . => LibXC Density Thresholds <==. XC_HYB_GGA_XC_WB97X_V: 1.00E-14 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 239042; Total Blocks = 1831; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 9 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-8, 10-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.162 GiB; user supplied 0.162 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:9209,Load,Loading,9209,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748:1372,load,loaded,1372,https://psicode.org,https://github.com/psi4/psi4/issues/748,2,['load'],['loaded']
Performance," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73061426:880,optimiz,optimize,880,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426,2,['optimiz'],"['optimization', 'optimize']"
Performance, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4911,Perform,Performing,4911,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5295,Perform,Performing,5295,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag =,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4870,Perform,Performing,4870,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5254,Perform,Performing,5254,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance," There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 2 Threads, 500 MiB Core; ---------------------------------------------------------. ... ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 7 7 0 0 0 0; -------------------------------------------------------; Total 7 7 5 5 5 0; -------------------------------------------------------. [New Thread 0x7fffd6116780 (LWP 16220)]; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 5; Number of primitives: 15; Number of atomic orbitals: 7; Number of basis functions: 7. Integral cutoff 1.00e-12; Number of threads: 2. Performing in-core PK; Using 812 doubles for integral storage.; We computed 133 shell quartets total.; Whereas there are 120 unique shell quartets.; 10.83 percent of shell quartets recomputed by reordering.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 2; Minimum eigenvalue in the overlap matrix is 4.3422219878E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ^C; Program received signal SIGINT, Interrupt.; 0x00007fffe3ca696f in psi::DFHelper::contract_metric_AO_core_symm(double*, double*, unsigned long, unsigned long) [clone ._omp_fn.16] (); from /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/lib/psi4/core.so; Missing separate debuginfos, use: debuginfo-install glibc-2.17-157.el7_3.1.x86_64 libuuid-2.23.2-33.el7.x86_64; (gdb) bt; #0 0x00007fffe3ca696f in psi::DFHelper::contract_metric_AO_core_symm(double*, double*, unsigned long, unsigne",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:3704,Perform,Performing,3704,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['Perform'],['Performing']
Performance," ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1732,optimiz,optimize,1732,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:34174,perform,performance,34174,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['perform'],['performance']
Performance," `PSI_API`, to serve as a potential replacement for the lost functionality. Other LAPACK functions are already `PSI_API`, so this should not be any more burden Psi4-side. ### Archival; - [x] Add `ael.cc` to [psi4attic](https://github.com/psi4/psi4attic) **(merged https://github.com/psi4/psi4attic/pull/1)**; - [ ] Add `Wabei_RHF_FT2_a.cc` to [psi4attic](https://github.com/psi4/psi4attic). ### TODO; - [ ] Rework the remaining `Matrix::diagonalize` to only take references, and rework all callers to only pass references, eliminating pointer arguments. May touch: `dct/dct_memory.cc`, `libmints/cdsalclist.cc`, `libmints/molecule.cc`, ...; - [ ] `adc/prepare_tensors.cc` is now the only remaining caller of the Davidson solver in `libqt`. It has exactly one call site, and the solver is not `PSI_API`. Candidate for future cleanup. ## Questions; - [ ] Question1. ## Checklist; - [x] No new features; - [x] Almost the entire test suite passes, sans MRCC due to unrelated issues. Some runtime-loaded plugins are not covered.; ```; ========================================================================================================== short test summary info ==========================================================================================================; > FAILED ../tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > FAILED ../tests/pytests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; > FAILED ../tests/mrcc/optfreq/test_input.py::test_mrcc_optfreq - AssertionError: Using the `local_options` keyword argument is deprecated in favor of using `task_config`, in version 0.30.0 it will stop working.; > =========================================================================== 3 failed, 3726 passed, 173 skipped, 219 xfailed, 7068 warnings in 2238.06s (0:37:18) ==================================",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:6334,load,loaded,6334,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['load'],['loaded']
Performance," `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Also, the issue is not present when using PK in multi-threaded environments, but using a different input, e.g.; `python test.py --num_threads 6 --scf_type PK --element 6 --multiplicity 3`; >-37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675. After digging a bit deeper, it seems like the difference between results stems from the entry for TWO ELECTRON ENERGY, which is essentially random (at least for single electron systems). It seems weird to me that this entry is non-zero at all for a single hydrogen atom, even for presumably correct results (i.e. when using DIRECT instead of PK), but I am no DFT expert. Note that when changing the method from PBE0 to HF, the random results problem persists, but correct results will have a TWO ELECTRON ENERGY of zero (as expected), whereas wrong results will have a non-zero entry. . [minimal_example.py.zip](https://github.com/psi4/psi4/files/9867943",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:2052,multi-thread,multi-threaded,2052,https://psicode.org,https://github.com/psi4/psi4/issues/2760,1,['multi-thread'],['multi-threaded']
Performance," args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38747,optimiz,optimized,38747,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59331,optimiz,optimized,59331,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:49084,optimiz,optimized,49084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:54408,optimiz,optimized,54408,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42671,optimiz,optimized,42671,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56995,optimiz,optimized,56995,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78784,optimiz,optimized,78784,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle on a name? Others are ""geometry"" and ""set_options"". ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:1333,load,load,1333,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['load'],['load']
Performance," by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1036,optimiz,optimization,1036,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance," copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchainconda/envs/p4dev36/lib/python3.6/site-packages/numpy/../../../libiomp5.so; Detaching after fork from child process 16215.; Detaching after fork from child process 16216.; Detaching after fork from child process 16217.; Detaching after fork from child process 16218.; Detaching after fork from child process 16219.; Threads set to 2 by Python driver. *** tstart() called on psinet; *** at Wed Apr 25 23:55:59 2018. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/share/psi4/basis/sto-3g.gbs ; atoms 2-3 entry H line 19 file /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/share/psi4/basis/sto-3g.gbs . There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 2 Threads, 500 MiB Core; ---------------------------------------------------------. ... ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 7 7 0 0 0 0; -------------------------------------------------------; Total 7 7 5 5 5 0; -------------------------------------------------------. [New Thread 0x7ff",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:2414,Load,Loading,2414,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['Load'],['Loading']
Performance," covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:958,optimiz,optimization,958,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['optimiz'],"['optimization', 'optimized']"
Performance, does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1722,load,load,1722,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > -------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1255,optimiz,optimize,1255,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['optimiz'],['optimize']
Performance," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:1978,optimiz,optimizer,1978,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['optimiz'],['optimizer']
Performance," eye but still plausible geometry, oddz; > ; > molecule oddz {; > C; > H 1 1.792; > H 1 1.792 2 59.4; > H 1 1.089 2 136.7 3 -127.3; > F 1 2.089 2 101.7 4 -135.9; > }; > ; > # reference start NRE, E, G for this geometry; > ; > odd_nre_start = 25.7790014493 # Q-Chem; > odd_e_start = -139.1749807824 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7411,optimiz,optimized,7411,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimized']
Performance," f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25000,optimiz,optimized,25000,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3107,Perform,Performing,3107,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance, for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2320,Perform,Performing,2320,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSIT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3033,Perform,Performance,3033,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance," g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2953,optimiz,optimize,2953,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimize']
Performance," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1545,optimiz,optimizer,1545,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,3,['optimiz'],"['optimization', 'optimizer']"
Performance," heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3153,perform,performed,3153,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['perform'],['performed']
Performance," in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:2649,optimiz,optimized,2649,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance," into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1098,load,load,1098,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance," kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43670,optimiz,optimized,43670,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1445,optimiz,optimize,1445,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,"['Load', 'optimiz']","['Loading', 'optimize']"
Performance," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2703,cache,cache,2703,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['cache'],['cache']
Performance," nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59094,optimiz,optimized,59094,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1028,optimiz,optimizeGeometry,1028,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['optimiz'],['optimizeGeometry']
Performance," optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see https://optking.readthedocs.io/en/latest/; The lines changed is almost entirely due to ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:1071,optimiz,optimization,1071,https://psicode.org,https://github.com/psi4/psi4/pull/2727,2,['optimiz'],"['optimization', 'optimizations']"
Performance," out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68142,optimiz,optimized,68142,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," psi4-0.5 with g++ and chemps2. ```; seba@seb-desktop:~/software/psi4-0.5/objects$ CXX=g++ CC=gcc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is GNU 5.2.1; -- The C compiler identification is GNU 5.2.1; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:820,Perform,Performing,820,https://psicode.org,https://github.com/psi4/psi4/issues/264,6,['Perform'],['Performing']
Performance," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1257,cache,cache,1257,https://psicode.org,https://github.com/psi4/psi4/pull/1233,3,"['Cache', 'cache']","['Cache', 'cache']"
Performance," scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2431,load,loading,2431,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['load'],['loading']
Performance," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2483,Optimiz,Optimized,2483,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['Optimiz'],['Optimized']
Performance," the TOC, moving it to a separate page, to be followed by notes.; - [x] the main hand-generated capabilities table in introduction.rst tried to do a lot in specifying allowed refs, types, dertypes, and parallelism, including by specifying exceptions in footnotes. This discouraged updating since it was hard to know what was right w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and comparison to GAMESS concluded that for arbitrary-order MPn and ZAPTn through DETCI that the written docs were right (MPn for RHF only and ZAPTn for ROHF only) and what was allowed was wrong (both for both). This has been reworked to match the written docs and various UpgradeHelpers have been positioned. Some tests had to change. Note that ZAPTn reduces to MPn for RHF, and DETCI was producing that correctly. However, DETCI MPn for ROHF wasn't producing anything we had confidence in, so it's good to get that disabled. Ugur's ROHF MP2 matches GAMESS `ospt=rmp` and DETCI's ROHF ZAPT2 matches GAMESS `ospt=zapt`, so I think this puts #311 to rest.; - [x] As reported in #2634, MRCC wasn't playing nicely with distributed driver due to the two-stage call-with-mrmtd then intercept-and-replace-mtd-with-dict. This scheme is replaced by an ordinary method call with MRCC backend indicated by `set qc_program mrcc`, just like intra-psi modules. Psi4 won't just default to MRCC if available; it must be specified. An UpgradeHelper has been deplo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:5183,concurren,concurrently,5183,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['concurren'],['concurrently']
Performance," the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:1166,optimiz,optimized,1166,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['optimiz'],['optimized']
Performance," the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yahoo/bing. Can someone make sure we still; > > have control of the domain name? Whois is still showing it registered to; > > David Sherrill, and it still shows it going to godaddy, but it w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2941,load,load,2941,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1692,Load,Loading,1692,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['Load'],['Loading']
Performance," unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; EXECUTING LOOP; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; EXECUTING LOOP; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06; EXECUTING LOOP; 3 -76.2055243922 -7.91e-08 4.89e-06 2.97e-05 6.34e-07; EXECUTING LOOP; 4 -76.2055243935 -1.38e-09 6.15e-07 4.23e-06 8.53e-08; EXECUTING LOOP; 5 -76.2055243936 -2.45e-11 1.61e-07 7.61e-07 1.16e-08; EXECUTING LOOP; 6 -76.2055243936 -9.95e-13 1.87e-08 1.49e-07 1.92e-09. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1143:1973,Perform,Performing,1973,https://psicode.org,https://github.com/psi4/psi4/issues/1143,1,['Perform'],['Performing']
Performance," using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1684,Optimiz,Optimization,1684,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Optimiz'],['Optimization']
Performance," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4779,load,load,4779,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['load'],['load']
Performance," was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:1460,optimiz,optimize,1460,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['optimiz'],['optimize']
Performance," what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2883,optimiz,optimizations,2883,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,['optimiz'],['optimizations']
Performance, |	 @DF-RHF iter 47: -43.08926782443959 2.19694e+01 2.36869e+01; Module time:								 |	 @DF-RHF iter 48: -78.66235883775985 -3.55731e+01 2.94519e+00; user time = 0.52 seconds = 0.01 minutes		 |	 @DF-RHF iter 49: -70.94249211110359 7.71987e+00 1.24515e+01; system time = 0.02 seconds = 0.00 minutes		 |	 @DF-RHF iter 50: -53.43926705464214 1.75032e+01 1.87808e+01; total time = 1 seconds = 0.02 minutes		 |	 @DF-RHF iter 51: -79.39673953309567 -2.59575e+01 2.79921e+00; Total time:								 |	 @DF-RHF iter 52: -21.09855845676194 5.82982e+01 3.40665e+01; user time = 3.91 seconds = 0.07 minutes		 |	 @DF-RHF iter 53: -76.58563241339290 -5.54871e+01 2.64622e+00; system time = 0.39 seconds = 0.01 minutes		 |	 @DF-RHF iter 54: -86.44756575789327 -9.86193e+00 1.45852e+00; total time = 5 seconds = 0.08 minutes		 |	 @DF-RHF iter 55: -76.67102843314724 9.77654e+00 6.54797e+00; Constructing Basis Sets for SAPT...					 |	 @DF-RHF iter 56: -76.14089910093142 5.30129e-01 9.61054e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 57: -86.01797407418083 -9.87707e+00 3.32711e+00; Name: DEF2-QZVPP-RI							 |	 @DF-RHF iter 58: -85.08445334159371 9.33521e-01 4.87812e+00; Role: RIFIT								 |	 @DF-RHF iter 59: -73.84912066572218 1.12353e+01 7.38988e+00; Keyword: DF_BASIS_SAPT						 |	 @DF-RHF iter 60: -73.64413189685598 2.04989e-01 9.80522e+00; atoms 1-2 entry H line 24 file /Users/runner/work/psi4	 |	 @DF-RHF iter 61: -86.70368775982897 -1.30596e+01 2.11859e+00; atoms 3 entry O line 406 file /Users/runner/work/psi4	 |	 @DF-RHF iter 62: -58.03773298700472 2.86660e+01 1.34869e+01; atoms 4 entry CA line 1382 file /Users/runner/work/psi4	 |	 @DF-RHF iter 63: -70.60093508339824 -1.25632e+01 5.80309e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 64: -73.83035588197933 -3.22942e+00 5.03538e+00; Name: (LANL2DZ AUX)							 |	 @DF-RHF iter 65: -81.54129188728777 -7.71094e+00 5.28840e+00; Role: JKFIT								 |	 @DF-RHF iter 66: -85.99899600012829 -4.45770e+00 1.45148e+00; Keyword: DF_BASIS_ELST			,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:12999,Load,Loading,12999,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Load'],['Loading']
Performance,"!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2697,optimiz,optimize,2697,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,"""Rather fragile"" is about right. (And if anybody reading this needs help freezing two distances in PsiAPI, at time of writing, they need to be on the same line, like `1 2 1 3`.). I'll leave it to the core devs to decide whether this is worth fixing now, or whether it's worth waiting until @psi-rking brings the optimization code Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385417768:312,optimiz,optimization,312,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385417768,1,['optimiz'],['optimization']
Performance,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:178,perform,performance,178,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['perform'],['performance']
Performance,"# Known bugs; - PCM-ROHF is broken. See #999; # Library updates; - PCMSolver is updated to its latest version (1.2.1) This new release of PCMSolver is a maintenance release and no new features were added to Psi4 through this upgrade. However, more tests were added for PCM used in conjunction with ERI algorithms other than PK. A test was also added for geometry optimizations with PCM run using finite differences. See the [library's changelog](https://github.com/PCMSolver/pcmsolver/blob/release/1.2/CHANGELOG.md) for more information on what changed in the library itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386064898:363,optimiz,optimizations,363,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386064898,1,['optimiz'],['optimizations']
Performance,"## Big Picture of the Project; For those who haven't been following the saga, orbital convergence in occ has been unreliable for quite some time. In #1772, I changed the defaults for orbital convergence to be the same as for dfocc. Tests started failing because the orbitals couldn't be converged. My investigation has indicated the problem relates back to the details of the DIIS implementation: the orbital DIIS needs to be coupled to the DIIS for T2 amplitudes. My own Psi4Numpy implementations of orbital-optimized methods show no convergence problems when I do this, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you onl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:509,optimiz,optimized,509,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['optimiz'],['optimized']
Performance,"## Description. All manner of sowreap cleanup and upgrade; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] make Hessian by both E & G return same non-mass-weighted matrix, relabel output, fixing #225 ; - [x] preserve `.1` files for optimization for cbs calcs, so no more multiple first cycles, fixing #303 ; - [x] sowreap testing machinery fixed up: catches more errors, works for optimizations, pep8-ified. @amjames, you may want to take a look at 31162be; - [x] new capability to do frequencies in sow/reap by finite difference of gradients, fixing psi4/psi4private#80; - [x] in order to do previous, needed format_molecule to preserve orientation, which zmat doesn't do naturally, so added `forcexyz=True` kwarg to optionally write in Carts (including no_com/no_reorient). conveniently, this fixes http://forum.psicode.org/t/embarrassingly-parallel-frequency-calculation-misbehaving/111 also.; - [x] general cleanup of db, opt, freq by E sow/reap procedures after wavefunction_pass, especially return statements and forcing return_wfn True, fixing #291 ; ## Questions; - [x] @psi-rking should probably take a look at 380a93c; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/318:273,optimiz,optimization,273,https://psicode.org,https://github.com/psi4/psi4/pull/318,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"## Description. Allow CDJK to read a previously generated Cholesky vector. This is useful for my work as we use cholesky in an external plugin to PSI4. The code was generating the Cholesky integrals every time the JK object was initialized. . A workflow where this would be useful is given below,. ```; scf_type cd; set df_ints_io save; refscf, refwfn = energy('scf', return_wfn=True); set df_ints_io load; energy('my_plugin', ref_wfn=refwfn) ; ```. Before, the cholesky vectors could be written after CDJK was initialized. It was not possible to read in Cholesky vectors into CDJK before. . I'm not sure how useful this will be in PSI4, but I have needed this when studying transition metal complexes as the generation of the cholesky integrals takes quite a long time. ; ## Todos; - [x] Read previously generated cholesky vectors from file. ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405:401,load,load,401,https://psicode.org,https://github.com/psi4/psi4/pull/405,1,['load'],['load']
Performance,"## Description. Finally, the first of @bozkaya's new methods. These are the canonical (non-orbital-optimized, non-FNO) CC methods with UHF reference by density-fitting and Cholesky decomposition. Gradients available for the most popular methods. This is PR No. 5 in the mega-dfocc-remp series. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] new methods!; - [x] uhf df ccd E & G; - [x] uhf df ccsd E & G ; - [x] uhf df ccsd(t) E & G (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf df a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:99,optimiz,optimized,99,https://psicode.org,https://github.com/psi4/psi4/pull/2739,5,['optimiz'],['optimized']
Performance,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:264,optimiz,optimizations,264,https://psicode.org,https://github.com/psi4/psi4/pull/432,1,['optimiz'],['optimizations']
Performance,"## Description. Fixes cc14 by assigning SOCC and DOCC, which previously changed during the optimization. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/538:91,optimiz,optimization,91,https://psicode.org,https://github.com/psi4/psi4/pull/538,1,['optimiz'],['optimization']
Performance,## Description. Fixing issue #310 CH3F was not fully optimizing due to missing internal coordinates. This issue led to the discovery that the code joining separated fragments had significant problems (basically atom reindexing/ordering).; ## Todos; ## Questions. None; ## Status. Ready to go. All optimization tests passed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/314:53,optimiz,optimizing,53,https://psicode.org,https://github.com/psi4/psi4/pull/314,2,['optimiz'],"['optimization', 'optimizing']"
Performance,"## Description. Improved fixed-coordinate optimizations. Test opt7 still works, as does a full dihedral scan of HOOH in C2 symmetry. Resolves issue #10 (there are no longer any nonsymmetric displacements). A new keyword `FIXED_COORD_FORCE_CONSTANT` allows tweaking for softer or firmer constraints, if necessary. The code does interpret fixed dihedrals <-180 or >180. However, the code does NOT currently deduce the most direct way through the dihedral discontinuity at 180. So it's a bad idea to give an input geometry with a dihedral of, say 178, and assign a target value of -178. Also, I've turned off dynamic trust radius sizing for optimizations with fixed coordinate targets by default.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:42,optimiz,optimizations,42,https://psicode.org,https://github.com/psi4/psi4/pull/328,2,['optimiz'],['optimizations']
Performance,"## Description. Modified linear bend algorithm in optking to bend, when possible, along cartesian axes. Added SF4 (opt14) test case for which this change was made.; ## Todos; - [x] Optimizer now works for odd cases where linear bend is in a symmetry plane but is not constrained to be linear by the molecular point group. Fixed problem discovered by WebMO use for SF4.; - [x] Added opt14 test case for SF4.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/300:181,Optimiz,Optimizer,181,https://psicode.org,https://github.com/psi4/psi4/pull/300,1,['Optimiz'],['Optimizer']
Performance,"## Description. Reduced memory requirements for MRPT integral presorts.; ## Todos; - [x] Less memory use for MRPT calculations.; - [x] More shorttests and quicktests coverage of PSIMRCC codes.; ## Questions; - [x] Do you think we should also use the DPD buffers to perform the presort for CCSD calculations, instead of IWL, @fevangelista ?; - [x] Also, do you agree with these changes to the MRPT setup code, @fevangelista ?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/296:265,perform,perform,265,https://psicode.org,https://github.com/psi4/psi4/pull/296,1,['perform'],['perform']
Performance,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:28,race condition,race condition,28,https://psicode.org,https://github.com/psi4/psi4/pull/2891,2,['race condition'],['race condition']
Performance,"## Description. This PR is part two of a mini-project regarding the two DFJK algorithms present in Psi4. The first PR (https://github.com/psi4/psi4/pull/2848) applied to MemDFJK, and the second PR (this one) applies to DiskDFJK. The goal of this PR project is to add an expert keyword to allow user control over which subalgorithm is used by either MemDFJK or DiskDFJK. See, MemDFJK and DiskDFJK, despite their name, each have separate ""subalgorithms"" optimized to be run either in-core or out-of-core. While MemDFJK and DiskDFJK can be independently selected with `SCF_TYPE`, their subalgorithms cannot be; subalgorithm selection was previously controlled exclusively through memory allocated to Psi4. The mini-project this PR is part of, is meant to rectify that issue. In the previous PR of this project, the `SCF_SUBTYPE` keyword was introduced, an expert option allowing for forced execution of a given subalgorithm. The default option, `AUTO`, has the code select the subalgorithm automatically, as before. `INCORE` forces MemDFJK to use the in-core subalgorithm, and throws an exception if not enough memory is allocated to Psi4 to do so. `OUT_OF_CORE` forces MemDFJK to use the out-of-core subalgorithm, even if enough memory is allocated to Psi4 to use the in-core subalgorithm. This current PR takes the `SCF_SUBTYPE` keyword, previously applied to MemDFJK, and applies it to the DiskDFJK algorithm, with the same effects. ## User API & Changelog headlines; - N/A. ## Dev notes & details; - [X] Implements functionality of the SCF_SUBTYPE keyword to the DiskDFJK class (i.e., the DISK_DF SCF_TYPE). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2924:452,optimiz,optimized,452,https://psicode.org,https://github.com/psi4/psi4/pull/2924,1,['optimiz'],['optimized']
Performance,"## Description. With ICC 2015 and `XHOST` turned off the changed loop will fail. You can either turn `XHOST` on, set `#prama novector` for the inner loops, or unroll the loop as shown to fix the problem. I would consider this a compiler bug, but I was curious if anyone had other opinions. A bit scary that we are running into this kind of thing. A few details:; - `TPDMp` and `actMOp` are both `double**`'s with shapes of `nact*nact` by `nact*nact`.; - All indices are within bounds.; - Very excited for everyone to review the most neglected piece of code in the MCSCF orbital optimization.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/316:578,optimiz,optimization,578,https://psicode.org,https://github.com/psi4/psi4/pull/316,1,['optimiz'],['optimization']
Performance,"## Description. `COSX` has always been a bit... troublesome since its introduction to Psi4. The primary issue with it, is that it is VERY tricky finding grid settings that provide a satisfactory balance of performance and accuracy. To help alleviate this issue, `COSX` uses a two-grid scheme, converging the SCF on a small initial grid, then performing `COSX_MAXITER_FINAL` number of SCF iterations (generally 1) on a larger final grid. With the two-grid scheme, the performance is controlled mainly by the initial grid, while accuracy is controlled primarily by the final grid. But this brings up an idea... instead of using a larger `COSX` grid, why not just use a 4-center **K** construction method for the final iteration(s) instead?. This PR introduces the `SCF_COSX_GUESS` keyword to Psi4. `SCF_COSX_GUESS` can be used in conjunction with either the `DIRECT` or `DFDIRJ+LINK` options for `SCF_TYPE` . When enabled, the calculation will first converge the SCF on a small `COSX` grid, followed by executing SCF using the specified `SCF_TYPE`. Another way of framing it, is that `SCF_COSX_GUESS` is similar to `DF_SCF_GUESS`, but uses `COSX` instead of `DFJK` for the initial SCF convergence process. To support `SCF_COSX_GUESS`, some keyword functionality has been expanded. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` can be used to control the `COSX` grid size for the `SCF_COSX_GUESS`, with the grid in this context defaulting to (20/50). `COSX_MAXITER_FINAL` can be used to control the number of `DIRECT`/`DFDIRJ+LINK` iterations to run after the `COSX` guess, defaulting to 2 in this context. Note that the grid for `SCF_COSX_GUESS` uses different defaults compared to the usual initial grid for `DFDIRJ+COSX` runs. This PR also adds a fair bit of cleanup/QoL changes, as follows:; - The `early_screening` variable in `scf_iterator.py`, and all related quantities, have been renamed for clarity.; - `DFDIRJ+LINK` can now be used in conjunction with `DF_SCF_GUESS`.; - Tes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:206,perform,performance,206,https://psicode.org,https://github.com/psi4/psi4/pull/3158,3,['perform'],"['performance', 'performing']"
Performance,## Description; * Fixes a line in docs that was causing a docs build fail; * Uses the new GHA concurrency feature to cancel previous docs job if new one presents itself. I've already seen it working correctly for the two commits of this branch. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2172:94,concurren,concurrency,94,https://psicode.org,https://github.com/psi4/psi4/pull/2172,1,['concurren'],['concurrency']
Performance,"## Description; - [x] Addresses #1820 with new syntax. Let's see if Windows and Mac setups can cope.; - [x] Addresses #1819 with explicit rounding direction. before (stride, memory, collocation_size) `MEM 1 954741720.0000 1678037264`; ```; (dev10) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir: (safeforqcel2018) grep iB dftmem.out ; Memory: 500.0 MiB; Memory set to 14.901 GiB by Python driver.; 1 Threads, 15258 MiB Core; DFHelper Memory: AOs need 3.981 GiB; user supplied 3.981 GiB. Using in-core AOs.; Memory [MiB]: 4076; Cached 100.0% of DFT collocation blocks in 12.502 [GiB].; ```; after `MEM 2 954741720.0000 1678037264`; ```; (dev10) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir: (safeforqcel2018) grep iB dftmem2.out ; Memory: 500.0 MiB; Memory set to 14.901 GiB by Python driver.; 6 Threads, 15258 MiB Core; DFHelper Memory: AOs need 4.062 GiB; user supplied 4.062 GiB. Using in-core AOs.; Memory [MiB]: 4159; Cached 50.0% of DFT collocation blocks in 6.277 [GiB]. ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1823:548,Cache,Cached,548,https://psicode.org,https://github.com/psi4/psi4/pull/1823,2,['Cache'],['Cached']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cast in DFTensor memory estimation so that one can perform a fno-df-cc on 6 heavy atoms with aqz in 31 GiB of memory, not 17179869183.261 GiB . (How did this bug live this long?) Improve printing to match DFHelper; - [x] start converting existing mem printing to GiB from mega. afaict, the fnocc values were already mebibytes, though labeled MB; - change in printing for identical calc below:. ```; < The DF Tensor (Qso) construction requires 31.261 GiB of memory. ; ---; > DFTensor Memory: Qso construction needs 31.261 GiB; user supplied 35.390 GiB. ; ```; ```; < Total memory available: 38146.97 mb; < CCSD memory requirements: 35113.77 mb; < 3-index integrals: 10081.38 mb; < CCSD intermediates: 25032.39 mb; < (T) algorithm: 9055.34 mb (low-memory); ---; > Total memory available: 37.253 [GiB]; > CCSD memory requirements: 34.291 [GiB]; > 3-index integrals: 9.845 [GiB]; > CCSD intermediates: 24.446 [GiB]; > (T) algorithm: 8.843 [GiB] (low-memory); ```. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2673:238,perform,perform,238,https://psicode.org,https://github.com/psi4/psi4/pull/2673,1,['perform'],['perform']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:158,optimiz,optimizing,158,https://psicode.org,https://github.com/psi4/psi4/pull/2872,1,['optimiz'],['optimizing']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds optking keywords missed in #3204. For users, if these options are needed with an older version of Psi4, they can be passed through `psi4.optimize(..., 'optimizer_keywords'=)` to optking. Features require `optking >= 0.3.0`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Adds shortcut for freezing all dihedrals in a molecule `freeze_all_dihedrals` and `unfreeze_dihedrals` . ## Checklist; - [x] Ran -L opt subset; - [x] keywords checked explicitly in optking's tests . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3209:222,optimiz,optimize,222,https://psicode.org,https://github.com/psi4/psi4/pull/3209,1,['optimiz'],['optimize']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Disables libint2's primitive screening via the `engine_precision` parameter. This integral screening provided a minor speedup, but in rare cases led to disastrously wrong SCF behavior as noted in #2114 and [here](https://github.com/edeprince3/hilbert/issues/8). This pull request closes those issues. Note that this primitive screening is independent of the shell-pair level Schwarz and CSAM screening performed in Psi4. The previous workaround to this problem, which was to set the `ints_tolerance` keyword to 0.0, is no longer necessary. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Change precision. ## Checklist; - [x] all ctests are unaffected by this change. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139:482,perform,performed,482,https://psicode.org,https://github.com/psi4/psi4/pull/2139,1,['perform'],['performed']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fix for the bug described in [issue #1968](https://github.com/psi4/psi4/issues/1968) about incorrectly loading ECPs for ghosted atoms. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Calculations using ghosted atoms that contain ECPs in the basis set can now be executed properly. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] When loading basis functions we check if we should skip loading ECPs (`skip_ghost_ecps`) and if `true` then we check if an atom is a ghost (`mol->Z(atom) == 0.0`). If yes we do not load ECPs fot it.; - [x] Added optional boolean argument `skip_ghost_ecps` for `construct_basisset_from_pydict` function. The default is `true`, we set it `false` for atomic calculations (like SAD guess). ## Questions; - [x] Are the check runs failing due to the changes in this PR?. ## Checklist; - [x] Minimal working example; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167:183,load,loading,183,https://psicode.org,https://github.com/psi4/psi4/pull/3167,4,['load'],"['load', 'loading']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:117,optimiz,optimizations,117,https://psicode.org,https://github.com/psi4/psi4/pull/2827,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:595,cache,cache,595,https://psicode.org,https://github.com/psi4/psi4/pull/2980,1,['cache'],['cache']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:320,optimiz,optimization,320,https://psicode.org,https://github.com/psi4/psi4/pull/2727,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:87,perform,performance,87,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['perform'],['performance']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/pull/2377,1,['optimiz'],['optimization']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:751,optimiz,optimization,751,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['optimiz'],['optimization']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request fixes the functionality of the EMBPOT perturbation to the core Hamiltonian in SCF calculations and adds appropriate gradients for the EMBPOT potential. The EMBPOT perturbation works by reading x, y, z, w, and v coordinates from a file (`EMBPOT`) during the call to `HF::form_H()`. The core Hamiltonian of the `HF` object is then modified to include a contribution that is calculated by performing numerical integration of the basis over the EMBPOT coordinates, weights, and potentials. This functionality assumed that the values of phi calculated in the `BasisSet::compute_phi()` routine are always in a cartesian basis and not in a spherical basis, which was true up until the fix in #2210, which was included in the 1.4 release. Accordingly, an unnecessary AO to SO transformation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:484,perform,performing,484,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['perform'],['performing']
Performance,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:151,optimiz,optimize,151,https://psicode.org,https://github.com/psi4/psi4/pull/2929,1,['optimiz'],['optimize']
Performance,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:377,perform,performance-on-multi-core-systems,377,https://psicode.org,https://github.com/psi4/psi4/pull/604,1,['perform'],['performance-on-multi-core-systems']
Performance,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:463,optimiz,optimized,463,https://psicode.org,https://github.com/psi4/psi4/pull/1772,2,['optimiz'],['optimized']
Performance,"## Description; A minor bugfix in optking: internal coordinate files are now kept after a successful optimization. I'm well-aware that the days of C-Optking are numbered, but I came across this when investigating a tangentially related bug report in forums, so I might as well fix it. ## Checklist; - [x] Code runs and keeps internal coordinate files when `keep_intcos` set to `true`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2188:101,optimiz,optimization,101,https://psicode.org,https://github.com/psi4/psi4/pull/2188,1,['optimiz'],['optimization']
Performance,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:217,perform,performed,217,https://psicode.org,https://github.com/psi4/psi4/pull/975,2,"['Perform', 'perform']","['Performs', 'performed']"
Performance,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2382:210,bottleneck,bottleneck,210,https://psicode.org,https://github.com/psi4/psi4/pull/2382,1,['bottleneck'],['bottleneck']
Performance,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1277:119,perform,performs,119,https://psicode.org,https://github.com/psi4/psi4/pull/1277,1,['perform'],['performs']
Performance,"## Description; Adds convergence threshold option for geometry optimization of supermolecular complexes which is slight relaxation of `g_convergence gau_tight` criteria which allows for:; - tight convergence of energy and forces, and; - relaxed convergence of `max_disp` and `rms_disp` displacement criteria. . These criteria allow for successful optimization on flat potential surfaces, especially those associated with interfragment (supermolecular) geometry optimizations. ## Todos; Adds `interfrag_gau_tight` value to `g_convergence` OPTKING convergence threshold control keyword. . * **User-Facing for Release Notes**; - Basic users can use keyword to achieve quality geometry optimizations of supermolecular complexes, without manual manipulation of individual `g_convergence` components. ## Questions; - [x] `interfrag_gau_tight` vs. `gau_tight_interfrag`? One one hand, it's a modification of `gau_tight`, but on the other hand, it has no counterpart within the Gaussian package. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/776:63,optimiz,optimization,63,https://psicode.org,https://github.com/psi4/psi4/pull/776,4,['optimiz'],"['optimization', 'optimizations']"
Performance,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2076:237,bottleneck,bottleneck,237,https://psicode.org,https://github.com/psi4/psi4/pull/2076,1,['bottleneck'],['bottleneck']
Performance,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/635:345,tune,tuned,345,https://psicode.org,https://github.com/psi4/psi4/pull/635,1,['tune'],['tuned']
Performance,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592:345,tune,tuned,345,https://psicode.org,https://github.com/psi4/psi4/pull/592,1,['tune'],['tuned']
Performance,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:88,perform,performance,88,https://psicode.org,https://github.com/psi4/psi4/pull/1083,1,['perform'],['performance']
Performance,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:355,optimiz,optimize,355,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['optimiz'],['optimize']
Performance,"## Description; Allows for the use of the GeomeTRIC optimizer within a Psi4 input. The desired optimization engine, either `geometric` or `optking` (default), can now specified with an `engine` argument to the `optimize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:52,optimiz,optimizer,52,https://psicode.org,https://github.com/psi4/psi4/pull/1813,7,"['Optimiz', 'optimiz']","['Optimizer', 'optimization', 'optimize', 'optimizer']"
Performance,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/882:46,perform,performed,46,https://psicode.org,https://github.com/psi4/psi4/pull/882,1,['perform'],['performed']
Performance,"## Description; As part of #1005, UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The keyword `SOLVER_ROOTS_PER_IRREP` has been added to allow more fine-tuned control over the roots converged during instability analysis.; - [x] Instability keywords have moved from the `CPHF` module to the `SCF` module. See the corresponding SCF subsection of the documentation for details. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] LoC reduced by nearly 2000; - [x] Several CPHF keywords have been removed or copied over to SCF.; - [x] UHF LDA stability analysis is now enabled.; - [x] SOLVER_ROOTS_PER_IRREP keyword has been added. It overrides SOLVER_N_ROOT.; - [x] If SOLVER_N_GUESS is not set, the number of guess vectors is taken from SOLVER_CONVERGENCE, per the TDSCF code.; - [x] To the handling of landing in the same instability: the check is made more precise by checking absolute value, and we remember to reset the step scaling after landing in a new instability.; - [x] The Davidson solver no longer eliminates zero and negative eigenvalues by default. ## Question; - [x] Do we need more test coverage? I haven't actually _checked_ LDA instability analysis. Imagining a test is tricky. ## Checklist; - [x] Tests should still be passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766:395,tune,tuned,395,https://psicode.org,https://github.com/psi4/psi4/pull/2766,1,['tune'],['tuned']
Performance,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:80,cache,cache,80,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['cache'],['cache']
Performance,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:197,optimiz,optimized,197,https://psicode.org,https://github.com/psi4/psi4/pull/1846,1,['optimiz'],['optimized']
Performance,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:1550,optimiz,optimization,1550,https://psicode.org,https://github.com/psi4/psi4/pull/1289,1,['optimiz'],['optimization']
Performance,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:205,optimiz,optimize,205,https://psicode.org,https://github.com/psi4/psi4/pull/772,2,['optimiz'],"['optimization', 'optimize']"
Performance,"## Description; Cleanup of tests directory following #2555. Heals various typos preventing some tests from getting pytest registration as well as some discrepancies between ctest and pytest labels. Deletes many unused/broken tests. ## Todos; - [x] All unused optimizer tests deleted following discussion in #2555.; - [x] All unused sowreap tests deleted.; - [x] `cc5`, `scf11-freq-from-energies`,`dft-pbe0-2`, `dft-dsd`, `dft-dldf` are all unused duplicates of other tests. Deleted.; - [x] `min-input` Broken + unused. Deleted.; - [x] `fsapt-diff1` Unused + not a test. Deleted. ; - [x] `dfmp2-freq1`, `dfmp2-freq2`, `props4` were unused but are passing, quick, and useful. These are saved and added to `CMakeLists.txt`.; - [x] `tester.py` no longer erroneously complains about ecppint tests having mismatched labels. ## Checklist; - [x] All tests that were missing registrations are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655:259,optimiz,optimizer,259,https://psicode.org,https://github.com/psi4/psi4/pull/2655,1,['optimiz'],['optimizer']
Performance,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:280,optimiz,optimized,280,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['optimiz'],['optimized']
Performance,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:516,bottleneck,bottleneck,516,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['bottleneck'],['bottleneck']
Performance,"## Description; Current qcel not compatible with the new pydantic v2. I minted a new qcel build with the constraint, but the solver sometimes optimizes for pydantic anyways. So let's try explicit constraint. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2999:142,optimiz,optimizes,142,https://psicode.org,https://github.com/psi4/psi4/pull/2999,1,['optimiz'],['optimizes']
Performance,"## Description; Currently, COSX in Psi4 uses a two-grid scheme to complete the SCF - the SCF is first converged on a smaller grid, and then a single iteration is performed on a larger grid, a scheme proposed by Neese. This scheme works quite well for energies; but since the SCF isn't converged on the larger grid, it may not be as ideal if wavefunction properties (e.g., gradients) are desired. This PR fixes that by adding a new keyword, `COSX_MAXITER_FINAL`, an integer that determines the maximum number of SCF iterations to run on the final COSX grid. By default, this keyword is set to 1, mimicking the current behavior of the code. A more detailed description of behavior can be broken down as follows:. - If `COSX_MAXITER_FINAL` < 0; the SCF will attempt to fully converge on the final COSX grid (within the constraints provided by `MAXITER`, of course).; - If `COSX_MAXITER_FINAL` == 0; the SCF will not run on the final grid at all, effectively turning the COSX algorithm into a single-grid implementation.; - If `COSX_MAXITER_FINAL` > 0; the SCF will run on the final grid for a maximum number of iterations specified by the keyword. ; - If the SCF converges on the final grid before the iteration count specified by `COSX_MAXITER_FINAL`, the SCF will exit upon convergence.; - If the iteration count specified by `COSX_MAXITER_FINAL` is reached before the SCF is converged on the final grid, the SCF will exit, treated as a success.; - If the `MAXITER` SCF iteration limit is hit before the `COSX_MAXITER_FINAL` limit is reached, the calculation will fail. Also of note, this PR changes CompositeJK so that early_screening is disabled for LinK-based composite methods. Practically, this means that LinK-based methods do not run the extra post-early-screening SCF iteration that is present in COSX-based methods. ## User API & Changelog headlines; - [X] Adds a new keyword, `COSX_MAXITER_FINAL`, for controlling the maximum number of SCF iterations to run on the final COSX grid. ## Dev not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2981:162,perform,performed,162,https://psicode.org,https://github.com/psi4/psi4/pull/2981,1,['perform'],['performed']
Performance,"## Description; Described in great detail [here](https://github.com/psi4/psi4/issues/1736). ## Todos; I see this PR occurring in six major stages.; - [x] Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:533,perform,perform,533,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['perform'],['perform']
Performance,"## Description; During the course of one of my projects, where I was attempting to perform very tight optimizations of nonbonded clusters with DFT, I encountered some very strange noise in the DF-M05-2X analytic gradients with Psi4. The noise actually prevented us from successfully converging several optimizations to `g_convergence interfrag_tight`. I've attached [this file](https://github.com/psi4/psi4/files/1908011/summary.txt) which contains a variety of gradients, computed using a new-ish version of Psi4 (1.2a1), pre-inversion Psi4 (PSI 4.0.0-beta5) and Q-Chem 4.4, but I'll summarize the results here. Modern Psi4 (1.2a1):; - Density fitting errors in M05-2X yield gradient noise of around 10^{-6} in analytic gradients vs. direct; - Increasing the grid density from the standard (72, 302) to (150, 434) can result in differences as large as 10^{-3} for DF-M05-2X vs. 5pt FD; - Neither direct- nor DF-M05-2X match either 3- or 5-point numerical gradients, which match each other to < 10^{-7}; - DF-B97/cc-pVDZ analytic vs. 5-point FD grad match to ~10^{-5}, and DF-RHF/cc-pVDZ, direct-RHF/cc-pVDZ, & FD(5pt)-RHF/cc-pVDZ all match to < 10^{-7}. Psi4 Beta5:; - Analytic DF-M05-2X gradients vs 5pt FD exhibit differences as large as 10^{-4}; - Similarly small density fitting error vs direct as in modern Psi4; - DF-RHF analytic grads match 5pt FD nearly perfectly, density fitting differences of < 10^{-5}. vs. Q-Chem 4.4 (apples-to-apples comparisons):; - Psi4 1.2a1 analytic direct-M05-2X w/ dense grids, analytic direct-RHF both agree w/ Q-Chem to 10^{-5}; - Psi4 Beta5 analytic direct-M05-2X w/ dense grids matches to ~10^{-5}, with direct-RHF matching to 10^{-7}. I'm unsure if this is an issue in the FINDIF code which may be fortuitously resolved by #884 or more of the same strange behavior noted by @CDSherrill in #867, but we thought it strange enough to want to bring it to the greater community's attention.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962:83,perform,perform,83,https://psicode.org,https://github.com/psi4/psi4/issues/962,3,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:182,load,loaded,182,https://psicode.org,https://github.com/psi4/psi4/pull/866,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:362,optimiz,optimization,362,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['optimiz'],['optimization']
Performance,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:234,optimiz,optimization,234,https://psicode.org,https://github.com/psi4/psi4/pull/1862,9,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimization', 'optimize']"
Performance,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:84,optimiz,optimization-error,84,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['optimiz'],['optimization-error']
Performance,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:196,perform,performance,196,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['perform'],['performance']
Performance,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:1131,Optimiz,Optimized,1131,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['Optimiz'],['Optimized']
Performance,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520:332,perform,performs,332,https://psicode.org,https://github.com/psi4/psi4/pull/520,2,['perform'],['performs']
Performance,"## Description; I realized that when running PBEh-3c, the calculation would take longer than expected. This was due to the use of a large basis during the density fitting procedure. I have just added the information required to make the code use the same auxiliary basis for the def2-mSVP basis as the ones used for def2-SVP. I did not test this modifications using the test cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improve performance of PBEh-3c when used with the default def2-mSVP basis set. ## Questions; - [ ] None. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1558:488,perform,performance,488,https://psicode.org,https://github.com/psi4/psi4/pull/1558,1,['perform'],['performance']
Performance,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:167,load,loading,167,https://psicode.org,https://github.com/psi4/psi4/pull/2759,4,['load'],"['loaded', 'loading', 'loads']"
Performance,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:891,perform,performed,891,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['perform'],['performed']
Performance,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:353,optimiz,optimize,353,https://psicode.org,https://github.com/psi4/psi4/pull/743,3,"['Optimiz', 'optimiz', 'perform']","['Optimization', 'optimize', 'performance']"
Performance,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:517,optimiz,optimizations,517,https://psicode.org,https://github.com/psi4/psi4/pull/638,1,['optimiz'],['optimizations']
Performance,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:666,cache,cached,666,https://psicode.org,https://github.com/psi4/psi4/pull/751,2,"['cache', 'latency']","['cached', 'latency']"
Performance,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:16,Optimiz,Optimizes,16,https://psicode.org,https://github.com/psi4/psi4/pull/2481,5,"['Optimiz', 'optimiz']","['Optimization', 'Optimizes', 'optimize', 'optimized']"
Performance,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1291:943,perform,performance,943,https://psicode.org,https://github.com/psi4/psi4/pull/1291,1,['perform'],['performance']
Performance,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2049:159,perform,performance,159,https://psicode.org,https://github.com/psi4/psi4/pull/2049,1,['perform'],['performance']
Performance,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:70,optimiz,optimization-with-hessian,70,https://psicode.org,https://github.com/psi4/psi4/pull/1551,3,['optimiz'],"['optimization', 'optimization-with-hessian', 'optimizations']"
Performance,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:494,load,loading,494,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['load'],['loading']
Performance,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:195,perform,performed,195,https://psicode.org,https://github.com/psi4/psi4/pull/634,1,['perform'],['performed']
Performance,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1102,cache,cache,1102,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['cache'],['cache']
Performance,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:801,perform,performance,801,https://psicode.org,https://github.com/psi4/psi4/pull/540,1,['perform'],['performance']
Performance,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:591,cache,cache,591,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['cache'],['cache']
Performance,"## Description; Some MO transformations were being performed many times instead of just once in the DF SCF analytic Hessians, as a result of some closed braces being in the wrong place. The results were correct before but the code was *very* slow. Sorry for the mistake - my bad. Fixes #1145. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805:51,perform,performed,51,https://psicode.org,https://github.com/psi4/psi4/pull/1805,1,['perform'],['performed']
Performance,"## Description; Substitute ""geometry projection"" with ""geometry optimization"" in `opt.rst`. ## Todos; - [x] Fix a misprint in `opt.rst`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/589:64,optimiz,optimization,64,https://psicode.org,https://github.com/psi4/psi4/pull/589,1,['optimiz'],['optimization']
Performance,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1963:99,optimiz,optimized,99,https://psicode.org,https://github.com/psi4/psi4/pull/1963,2,['optimiz'],['optimized']
Performance,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1483:106,optimiz,optimizations,106,https://psicode.org,https://github.com/psi4/psi4/pull/1483,3,['optimiz'],"['optimization', 'optimizations']"
Performance,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:62,perform,perform,62,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['perform'],['perform']
Performance,"## Description; The goal of this PR is to save one-electron integrals in core and cache them. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] One-electron integrals are no longer stored on disk. The `Wavefunction` base class holds a pointer to a `MintsHelper` object.; - [x] T, V, and S integrals are cached.; - [x] Address issue #1758 (no effect of perturbation on X2C energy); - [x] Fixes issue #1794; - [x] May fix issue #1791. ## For developers; - [x] Added a `MintsHelper` object to `Wavefunction`. ## Checklist; - [x] Tests added for X2C finite field contributions; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) except for eight test cases that are linked to #1793. ## Status; - [x] Working code; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1770:82,cache,cache,82,https://psicode.org,https://github.com/psi4/psi4/pull/1770,2,['cache'],"['cache', 'cached']"
Performance,"## Description; The idea here was suggested by @CDSherrill, and implemented in this PR. What is this ""idea""? Currently, CompositeJK methods are accessed through `SCF_TYPE` options of the form `J_algo+K_algo`, with `J_algo` and `K_algo` being the respective composite J and K build algorithms to be used for the calculation. Meanwhile, one notable benefit of the CompositeJK class is that, for DFT calculations that use non-hybrid functionals, composite methods can be used to specify an algorithm specifically optimized for J matrix construction, in contrast to general algorithms which need to also account for the K matrix. Since non-hybrid DFT calculations only require the J matrix, CompositeJK can lead to speedups in such cases. But in those cases where only the J algorithm is needed, the current `SCF_TYPE` specification for CompositeJK has a problem - the composite K algorithm that must be specified, is unnecessary and unused. . This PR allows for the specification of CompositeJK algorithms via _only_ the J algorithm for cases such as non-hybrid DFT, where only the J matrix is needed. If CompositeJK is called without a K algorithm in cases where a K algorithm is needed, such as HF or hybrid DFT, an exception is thrown. Additionally, if the `J_algo+K_algo` `SCF_TYPE` specification for CompositeJK is used in conjunction with a non-hybrid functional, a note is given to the user, letting them know that the K algorithm won't be used. ## User API & Changelog headlines; - [X] Adds a new `SCF_TYPE` option, `DFDIRJ`, for usage in non-hybrid DFT calculations. ## Dev notes & details; - [X] Adjusts the CompositeJK class so that it can be called and used with _only_ the J algorithm as the `SCF_TYPE` keyword. This can be useful in non-hybrid DFT calculations, where the K matrix is unnecessary.; - [X] If only a J algorithm is specified in cases where a K matrix is required, the code throws an exception.; - [x] If the old CompositeJK `SCF_TYPE` notation is used when the K matrix is not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001:510,optimiz,optimized,510,https://psicode.org,https://github.com/psi4/psi4/pull/3001,1,['optimiz'],['optimized']
Performance,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1988:319,optimiz,optimized,319,https://psicode.org,https://github.com/psi4/psi4/pull/1988,1,['optimiz'],['optimized']
Performance,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:91,optimiz,optimize,91,https://psicode.org,https://github.com/psi4/psi4/pull/1001,1,['optimiz'],['optimize']
Performance,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['optimiz'],['optimization']
Performance,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:430,Optimiz,Optimization,430,https://psicode.org,https://github.com/psi4/psi4/pull/2043,1,['Optimiz'],['Optimization']
Performance,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:139,perform,perform,139,https://psicode.org,https://github.com/psi4/psi4/pull/1855,1,['perform'],['perform']
Performance,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757:621,optimiz,optimization,621,https://psicode.org,https://github.com/psi4/psi4/pull/757,1,['optimiz'],['optimization']
Performance,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:44,perform,performance,44,https://psicode.org,https://github.com/psi4/psi4/pull/1671,2,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:1465,optimiz,optimizations,1465,https://psicode.org,https://github.com/psi4/psi4/pull/1499,1,['optimiz'],['optimizations']
Performance,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:578,optimiz,optimizations,578,https://psicode.org,https://github.com/psi4/psi4/pull/2039,1,['optimiz'],['optimizations']
Performance,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:248,Optimiz,Optimization,248,https://psicode.org,https://github.com/psi4/psi4/pull/2336,2,"['Optimiz', 'perform']","['Optimization', 'performance']"
Performance,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:925,perform,perform,925,https://psicode.org,https://github.com/psi4/psi4/pull/2935,1,['perform'],['perform']
Performance,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:68,cache,cache,68,https://psicode.org,https://github.com/psi4/psi4/pull/1233,3,"['Cache', 'bottleneck', 'cache']","['Cache', 'bottleneck', 'cache']"
Performance,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:837,perform,performs,837,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['performs']
Performance,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:902,perform,performing,902,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['perform'],['performing']
Performance,"## Description; This PR is the start of a two-part mini-project regarding the two DFJK algorithms present in Psi4 - MemDFJK and DiskDFJK. This first PR handles some changes to MemDFJK, while the next PR in this project will handle the same changes to DiskDFJK. So, what are the changes? MemDFJK and DiskDFJK hold a rather interesting property. Each of them is actually a combination of two sub-algorithms - one sub-algorithm which is optimized for storing ERIs in memory, and the other sub-algorithm which is optimized for storing ERIs on disk. This, in total, leads to a potential combination of 4 algorithms that can be utilized when one sets SCF_TYPE to DF. Now, one can set SCF_TYPE to either MEM_DF to DISK_DF to use MemDFJK or DIskDFJK, respectively. However, one cannot explicitly use a keyword to control whether MemDFJK or DiskDFJK uses its corresponding in-core or out-of-core sub-algorithm. Which sub-algorithm is used, is entirely dictated by the amount of memory allocated to Psi4 compared to the amount of memory needed to store ERIs. This PR project seeks to remedy the aforementioned issue by implementing exactly such a keyword for both MemDFJK and DiskDFJK, to control whether they use their in-core or out-of-core sub-algorithms. The new keyword is FORCE_MEM, which can take three options. FORCE_MEM=AUTO (the default) maintains the previous behavior, in which a sub-algorithm is selected based on user-supplied memory. FORCE_MEM=NO_INCORE forces the DF algorithm to use its out-of-core sub-algorithm, even if enough memory is given to run the calculation in-core. Finally, FORCE_MEM=FORCE_INCORE forces the DF algorithm to run its in-core sub-algorithm, and causes the calculation to throw an exception if not enough memory is given to Psi4 to utilize the in-core sub-algorithm. So why, exactly, do we want this? In truth, this is mostly a debug and expert option. The entire reason I started this PR project is actually because the lack of control over in-core vs. out-of-core DF ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2848:434,optimiz,optimized,434,https://psicode.org,https://github.com/psi4/psi4/pull/2848,2,['optimiz'],['optimized']
Performance,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:782,perform,performance,782,https://psicode.org,https://github.com/psi4/psi4/pull/2529,1,['perform'],['performance']
Performance,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:771,perform,performance,771,https://psicode.org,https://github.com/psi4/psi4/pull/2079,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:349,load,loaded,349,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['load'],['loaded']
Performance,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:874,optimiz,optimized,874,https://psicode.org,https://github.com/psi4/psi4/pull/2381,2,['optimiz'],['optimized']
Performance,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221:377,perform,performed,377,https://psicode.org,https://github.com/psi4/psi4/pull/2221,1,['perform'],['performed']
Performance,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:1051,perform,performance,1051,https://psicode.org,https://github.com/psi4/psi4/pull/1946,2,['perform'],['performance']
Performance,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:124,perform,performance,124,https://psicode.org,https://github.com/psi4/psi4/pull/1922,1,['perform'],['performance']
Performance,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:225,perform,performed,225,https://psicode.org,https://github.com/psi4/psi4/pull/3183,1,['perform'],['performed']
Performance,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:477,perform,performance,477,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['perform'],['performance']
Performance,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:111,optimiz,optimized,111,https://psicode.org,https://github.com/psi4/psi4/pull/1539,3,['optimiz'],['optimized']
Performance,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:241,queue,queue,241,https://psicode.org,https://github.com/psi4/psi4/pull/1527,1,['queue'],['queue']
Performance,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:467,optimiz,optimization,467,https://psicode.org,https://github.com/psi4/psi4/pull/591,1,['optimiz'],['optimization']
Performance,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:967,perform,perform,967,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['perform'],['perform']
Performance,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312:366,perform,perform,366,https://psicode.org,https://github.com/psi4/psi4/pull/1312,1,['perform'],['perform']
Performance,"## Description; This is it. It's here. This PR is the initial implementation of the CompositeJK framework, the culmination of many, MANY of the JK-related PRs that are either in progress, or have been added to Psi4 already. Many methods have been added to Psi4's JK class which enable utilization of algorithms that build J or K separately to improve performance. The ones in Psi4 as of now are the JK subclasses DFJLinK and DFJCOSK, which, between the two, contain integral-direct density-fitted J construction, the Linear Exchange method (LinK), and the Chain-of-Spheres Exchange method (COSX). Further ones, such as the Continuous Fast Multipole Method (CFMM), are planned for the future, and even more (e.g., J-Engine, Local DF methods) exist beyond the work done in Psi4 for the past year. The problem is, Psi4's JK class does not have a framework that truly supports the existence of these separate J and K algorithms. DFJLinK and DFJCOSK work for now, given the low number of separate J and K algorithms current in Psi4. But, as more separate J and K algorithms are added to Psi4, the number of JK subclasses will skyrocket, assuming every combination of separate J and separate K algorithm is stored in its own JK subclass. This will lead to a nasty problem with code duplication, not even discussing the pollution of the JK hierarchy that would result. Thus, for continued research into separate J and K construction algorithms, a proper framework for supporting such algorithms is paramount. CompositeJK is that framework. CompositeJK is a single JK subclass which enables the combination and execution of any separate J and K build algorithm available in Psi4. CompositeJK can enable this without duplication of separate build algorithms across different subclasses. Additionally, CompositeJK is designed to enable simple expansion of itself, enabling the easy addition of new separate J and K builds to Psi4 with minimal programming issues. The current PR is the first implementation of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:351,perform,performance,351,https://psicode.org,https://github.com/psi4/psi4/pull/2833,1,['perform'],['performance']
Performance,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:475,optimiz,optimized,475,https://psicode.org,https://github.com/psi4/psi4/pull/1648,1,['optimiz'],['optimized']
Performance,"## Description; This is part of *Psi4* porting to Windows (#933). A templated class declaration and implementation has to be in the same translation unit. That is not a case for `psi::MaxIterationsExceeded` and `psi::ConvergenceError`. It is hacked by using template specialisation: `template <> ConvergenceError<int>`. However, it does not work with `MSVC` linker for optimized builds:; ```; [1262/1262] Linking CXX shared library src\core.cp36-win_amd64.pyd; FAILED: src/core.cp36-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && C:\tools\miniconda3\Library\bin\cmake.exe -E vs_link_dll --intdir=src\CMakeFiles\core.dir --manifests -- C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj src\CMakeFiles\core.dir\python_data_type.cc.obj src\CMakeFiles\core.dir\core.cc.obj /out:src\core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1419:369,optimiz,optimized,369,https://psicode.org,https://github.com/psi4/psi4/pull/1419,1,['optimiz'],['optimized']
Performance,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:151,perform,performance,151,https://psicode.org,https://github.com/psi4/psi4/pull/2504,1,['perform'],['performance']
Performance,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:411,queue,queue,411,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['queue'],['queue']
Performance,"## Description; This pull request replaces the `DFERI` class with `DF_Helper` in DFEP2, MCSCF, SAPT-DFT, FSAPT, and USAPT. . Update 08/16/17: This pull request demolishes all traces of libthce. * **Developer Interest**; - [x] Sparsity utilization in 3-index integral transforms; - [x] Workflows optimized to fit procedure contexts; - [x] Intermediate recycling; - [x] Excellent parallel scaling; - [x] Simple UI including pythonic tensor indexing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742:295,optimiz,optimized,295,https://psicode.org,https://github.com/psi4/psi4/pull/742,1,['optimiz'],['optimized']
Performance,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:265,perform,performance,265,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['perform'],['performance']
Performance,"## Description; Through tests of the `COSX` code, we have discovered numerical instabilities in larger systems, leading to slow convergence for later iterations. We discovered that the version of incremental Fock currently in `COSX` performs `incfock` every iteration, and does not include stability features included in the Incremental Fock PR from #2155 (i.e. Shutting it off every few iterations (resets) as well as shutting it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:233,perform,performs,233,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['perform'],['performs']
Performance,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1889:162,load,loader,162,https://psicode.org,https://github.com/psi4/psi4/pull/1889,1,['load'],['loader']
Performance,## Description; Trying out a different strategy to get the cache working. Supposedly this gets the cache warmed up for all the build lanes before they start. See https://docs.travis-ci.com/user/build-stages/warm-cache/. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1538:59,cache,cache,59,https://psicode.org,https://github.com/psi4/psi4/pull/1538,3,['cache'],['cache']
Performance,"## Description; Two bug fixes. First is wrong projected energy change in P-RFO transition state optimization.; Second, is an i/o error that occured because the file1 was not always deleted when the ""dynamic level"" changed. Default behavior should be unaffected.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; Should resolve issue #789 ; ; ## Questions; None; ## Status; Should be ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798:96,optimiz,optimization,96,https://psicode.org,https://github.com/psi4/psi4/pull/798,1,['optimiz'],['optimization']
Performance,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359:701,perform,perform,701,https://psicode.org,https://github.com/psi4/psi4/pull/2359,1,['perform'],['perform']
Performance,"## Description; Updates PCMSolver to its latest released version `v1.2.1`. Documentation and tests have been updated too. All ERI algorithms are now tested with PCM. Plus there is a geometry optimization test (with finite differences) against analytical results obtained with DALTON. ~This is _provisional_ meaning that I am pointing to a specific commit off of PCMSolver `master` rather than a specific tag. I am having a bit of trouble with tagging an official `v1.2.0`, but the code has been tested separately by @loriab already. Officially tagged `v1.2.0` of the library.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psi4 uses the latest version of PCMSolver. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review.; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988:191,optimiz,optimization,191,https://psicode.org,https://github.com/psi4/psi4/pull/988,1,['optimiz'],['optimization']
Performance,"## Description; We often have PRs held up because CI needs fixing. Then all the ""broken"" PRs have to rebase or hit the update button (which means their remotes are out-of-sync with the local branches). The beta GH merge queue might help this, since PRs are built on top of their predecessor, so a CI fix PR can be inserted at the head of the queue. This PR does hopefully the prep work needed and described in:; Following directions at https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:220,queue,queue,220,https://psicode.org,https://github.com/psi4/psi4/pull/2922,3,['queue'],['queue']
Performance,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092:92,load,load,92,https://psicode.org,https://github.com/psi4/psi4/pull/2092,2,['load'],"['load', 'loading']"
Performance,"## Description; `BlockOPoints` performs additional pruning but the result is never checked. We recently hit a case where this pruning resulted in a `BlockOPoints` object with zero points. This would cause a segfault here: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L262 because `ncols` would be zero. Adds a check to `OctreeGridBlocker` where the list of `BlockOPoints` is populated, if the number of points is zero then don't add it to the list. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) All DFT test cases pass on my machine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1525:31,perform,performs,31,https://psicode.org,https://github.com/psi4/psi4/pull/1525,1,['perform'],['performs']
Performance,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1449:59,load,load,59,https://psicode.org,https://github.com/psi4/psi4/pull/1449,1,['load'],['load']
Performance,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034:650,optimiz,optimizer,650,https://psicode.org,https://github.com/psi4/psi4/pull/2034,1,['optimiz'],['optimizer']
Performance,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003:565,perform,performance,565,https://psicode.org,https://github.com/psi4/psi4/pull/2003,1,['perform'],['performance']
Performance,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:433,Perform,Performing,433,https://psicode.org,https://github.com/psi4/psi4/pull/1567,1,['Perform'],['Performing']
Performance,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:506,load,loading,506,https://psicode.org,https://github.com/psi4/psi4/pull/726,1,['load'],['loading']
Performance,"## Small benchmark. The following timings were obtained for H2O from 3 ""takes"", where in each take, the; integral is repeatedly evaluated 15x. The result shown here is that of the fastest take, divided by the number of repeats (i.e., 15 here). The performance of M-D is actually quite nice -- of course one could tweak it a little bit here and there, but that's not needed right now IMHO. The code snippet from my benchmark script looks sth like:; ```Python; takes = 3; repeat = 15; for b in bas:; for m in [1, 4, 8, 16, 24, 36]:; basis = psi4.core.BasisSet.build(mol, 'orbital', b); mints = psi4.core.MintsHelper(basis); key = f""{b}/m = {m}""; keys.append(key); print(key); for _ in tqdm(range(takes)):; with timer.record(key):; for i in range(repeat):; M = mints.ao_multipoles(order=m, origin=[1.0, 2.0, 3.0]); for k in keys:; best = timer.best(k) / repeat; print(f""{k:<15} | {best * 1000:8.2f} ms""); ```. ### Results. | basis set | order | M-D | OS |; |-----------|-------|------------|------------|; | cc-pvdz | 1 | 0.11 ms | 0.20 ms |; | | 4 | 0.46 ms | 0.73 ms |; | | 8 | 1.87 ms | 2.19 ms |; | | 16 | 11.25 ms | 10.88 ms |; | | 24 | 47.11 ms | 43.30 ms |; | | 36 | 193.20 ms | 177.40 ms |; | cc-pvtz | 1 | 0.27 ms | 0.52 ms |; | | 4 | 1.34 ms | 2.19 ms |; | | 8 | 5.97 ms | 7.36 ms |; | | 16 | 46.39 ms | 47.05 ms |; | | 24 | 172.76 ms | 170.22 ms |; | | 36 | 742.18 ms | 725.64 ms |; | cc-pvqz | 1 | 0.81 ms | 1.53 ms |; | | 4 | 4.16 ms | 7.12 ms |; | | 8 | 20.47 ms | 26.56 ms |; | | 16 | 153.60 ms | 168.69 ms |; | | 24 | 543.86 ms | 579.47 ms |; | | 36 | 2327.06 ms | 2436.51 ms |; | cc-pv5z | 1 | 2.09 ms | 4.37 ms |; | | 4 | 12.59 ms | 22.29 ms |; | | 8 | 63.34 ms | 84.20 ms |; | | 16 | 457.24 ms | 522.29 ms |; | | 24 | 1634.66 ms | 1807.03 ms |; | | 36 | 6654.10 ms | 7198.05 ms |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272:248,perform,performance,248,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272,1,['perform'],['performance']
Performance,"## Small benchmark; The performance issues are resolved. :tada: As in #2496, only for small basis set angular momentum, the old code is faster than M-D, but for larger basis set/angmom, M-D outperforms the OS code. Performed as in #2496. Here, the molecule is para-nitroaniline (typical example for EFP/PE :smile:). ### Results; | basis | order | M-D [ms] | OS [ms] | ratio M-D/OS |; |----------------------|-------|----------|---------|-------------|; | cc-pvdz (nbf = 170) | 0 | 5.75 | 5.45 | 1.05 |; | | 1 | 9.55 | 7.72 | 1.24 |; | | 2 | 17.69 | 12.06 | 1.47 |; | | 3 | 30.41 | 19.61 | 1.55 |; | cc-pvtz (nbf = 384) | 0 | 14.2 | 14.02 | 1.01 |; | | 1 | 27.75 | 25.62 | 1.08 |; | | 2 | 55.37 | 50.41 | 1.1 |; | | 3 | 99.74 | 89.52 | 1.1 |; | cc-pvqz (nbf = 730) | 0 | 43.66 | 45.69 | 0.96 |; | | 1 | 94.84 | 101.92 | 0.93 |; | | 2 | 197.61 | 222.04 | 0.89 |; | | 3 | 366.13 | 428.15 | 0.85 |; | cc-pv5z (nbf = 1240) | 0 | 132.84 | 160.85 | 0.83 |; | | 1 | 323.07 | 406.33 | 0.8 |; | | 2 | 694.14 | 942.28 | 0.74 |; | | 3 | 1291.59 | 2011.75 | 0.64 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908:24,perform,performance,24,https://psicode.org,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908,2,"['Perform', 'perform']","['Performed', 'performance']"
Performance,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980:129,optimiz,optimized,129,https://psicode.org,https://github.com/psi4/psi4/pull/1980,1,['optimiz'],['optimized']
Performance,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:123,perform,performs,123,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['perform'],['performs']
Performance,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug disabling non-orbital optimized DCT with spin restriction. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] l. 55 keeps the alpha and beta orbitals pointing to the same object.; - [x] l. 142 is the central bugfix. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2860:207,optimiz,optimized,207,https://psicode.org,https://github.com/psi4/psi4/pull/2860,1,['optimiz'],['optimized']
Performance,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:394,perform,performs,394,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,1,['perform'],['performs']
Performance,"### System Specs:; ```; OS: MacOS Monterey 12.5.1; 2,6 GHz 6-Core Intel Core i7; 32 GB 2667 MHz DDR4; IDE: PyCharm 2022.3.2 (Community Edition); ```. ### Software Specs:; ```; Virtual Env: Conda env ; Conda version: 23.1.0; Python version: 3.6.13 and 3.7.16 (same error on both versions); PSI4 version: 1.5+e9f4d6d ; PSI4 build: py37ha809fef_0 ; Installed PSI4 using: conda install -c psi4 psi4; ```. ### Minimum reproducible example script:; ```; import psi4; psi4.set_memory('500 MB'); h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); print(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:935,Load,Loading,935,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['Load'],['Loading']
Performance,"##; ########################## Don't Edit Below This Line ##########################; ################################################################################. # Some general Psi4 settings; set {; freeze_core True # only treat valence electrons in expensive correlated calculations; scf_type df # Use density fitting with the HF part of the calculation; mp2_type df # Use density fitting with the MP2 part of the calculation; cc_type df # for coupled cluster calculations, use the fast density fitted code; pcg_convergence 9 # helps w/ coupled cluster accuracy; e_convergence 11 # Set the energy convergence a little more stringent; }. gradient(geom_opt_method); ```; ------------------. The last handful of lines for the failing output file are included below. The difference between a failed and a successful output file appears to be the last two lines that are bolded (the ones with DFHelper and in-core AOs):. ------------------; ```; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (AUG-CC-PV(Q+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry O line 332 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 2, 9, 11, 14, 16-19, 22-23 entry H line 30 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 3-8, 10, 12-13, 15, 20-21 entry C line 184 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; RMP2 Wavefunction, 8 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. => Auxiliary Basis Set <=. Basis Set: (AUG-CC-PV(Q+D)Z AUX); Blend: AUG-CC-PVQZ-RI; Number of shells: 668; Number of basis functions: 2984; Number of Cart",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3030:3006,Load,Loading,3006,https://psicode.org,https://github.com/psi4/psi4/issues/3030,1,['Load'],['Loading']
Performance,#1096 fixes the gradients. optimization should follow.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094#issuecomment-405747170:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/1094#issuecomment-405747170,1,['optimiz'],['optimization']
Performance,"(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on broken tests, and confirm the test suite is clean. Pinging the usual suspects: @loriab, especially @dgasmith for PCG, and @jturney. I think Jet is sick today, so a different third reviewer would be welcome. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Debugged HF MO hessian based orbital step; - [x] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:1406,optimiz,optimized,1406,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['optimiz'],['optimized']
Performance,"(1) do other conda packages like NumPy work for you?; Yes, I just opened pycharm using conda as the interpreter, import numpy and converted a list to a np array. (2) can/did you do the Windows equivalent of log out then log back in?; I just restarted my computer, error still persists . (3) what exactly was your ""added the directory to my path"" command?; I went system properties --> environment manager --> Path ; then added the following code in ""C:\Users\erikc\psi4conda"". (4) what does psi4 --version say?; C:\Users\erikc>psi4 --version; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088:706,load,load,706,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088,2,['load'],['load']
Performance,(from http://forum.psicode.org/t/scaled-opposite-spin-sos-not-changing-orbital-optimized-mp2-omp2/1596); It appears that the spin-scaled OMP2 methods like `sos-omp2` do not apply spin-scaling to the MP-L functional. Instead spin-scaling is done in a post-scf fashion on the `omp2` results.; This is not necessarily what one would expect from the method name. Pinging both @bozkaya and @JonathonMisiewicz ; Could you have a look please? What is suppose to happen?. Test input:; [test.txt](https://github.com/psi4/psi4/files/3825609/test.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751:79,optimiz,optimized-,79,https://psicode.org,https://github.com/psi4/psi4/issues/1751,1,['optimiz'],['optimized-']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79717,optimiz,optimized,79717,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34670,optimiz,optimized,34670,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57928,optimiz,optimized,57928,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70783,optimiz,optimized,70783,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:504,optimiz,optimization,504,https://psicode.org,https://github.com/psi4/psi4/issues/1768,3,"['Optimiz', 'Perform', 'optimiz']","['Optimizations', 'Performance', 'optimization']"
Performance,") = 3.122888	 178.928328; 	 D(75,73,72,81) = -0.019333	 -1.107720; 	 D(75,77,79,80) = 3.131087	 179.398052; 	 D(75,77,79,81) = -0.015352	 -0.879608; 	 D(76,75,77,78) = -0.007210	 -0.413100; 	 D(76,75,77,79) = 3.133177	 179.517791; 	 D(77,79,81,82) = 3.133788	 179.552810; 	 D(78,77,79,80) = -0.011717	 -0.671362; 	 D(78,77,79,81) = 3.125029	 179.050978; 	 D(80,79,81,82) = -0.012627	 -0.723483; 	 R(1,57) = 8.611430	 4.556972; 	 R(1,59) = 8.002134	 4.234547; 	 R(1,61) = 9.891833	 5.234532; 	 R(3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.335710 0.090136 63.980301 66.316011; 	 2 R(1,3) = 2.326476 0.109678 63.375593 65.702069; 	 3 R(1,4)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:18209,optimiz,optimization,18209,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['optimiz'],['optimization']
Performance,") at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69607,optimiz,optimized,69607,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"* Case A, the MKL trio; * NumPy from defaults linked to the MKL trio; * Psi4 forced to linked to MKL trio dynamically; * Result: n before p threads, p before n doesn't thread. p before n never loads libmkl_avx2.so. ```; (p4dev36) objdir-conda >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so (0x00007f1379f68000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so (0x00007f1378503000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_core.so (0x00007f1376a0b000). (p4dev36) >>> ldd ~/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/multiarray.cpython-36m-x86_64-linux-gnu.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_lp64.so (0x00007fb96e623000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_thread.so (0x00007fb96cbbe000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_core.so (0x00007fb96b0c5000). (p4dev36) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (p4dev36) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-conda/stage/usr/local/psi4/lib python thread.py; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000772 NumPy: 0.000621; Time for threads 1, size 500: Psi4: 0.008650 NumPy: 0.009042; Time for threads 1, size 2000: Psi4: 0.839143 NumPy: 0.508247; Time for threads 1, size 4000: Psi4: 3.970799 NumPy: 4.251713; Threads set to 20 by Python driver.; Time for threads 20, size 200: Psi4: 0.000180 NumPy: 0.000201; Time for threads 20, size 500: Psi4: 0.001111 NumPy: 0.001470; Time for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:193,load,loads,193,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['loads']
Performance,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:443,load,loaded,443,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['load'],['loaded']
Performance,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:550,perform,performance,550,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['perform'],['performance']
Performance,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:247,Optimiz,Optimization,247,https://psicode.org,https://github.com/psi4/psi4/issues/800,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,*Psi4* debugging is almost finished on *Windows*!. The remaining tasks:; - [x] Streamline testing. A specific *Azure* pipeline can be triggered to run all the tests before release and after significant changes. -- #1527 ; - [x] Production level builds. A specific *Azure* pipeline can be triggered to build optimized binaries with a big `MAX_AM_ERI`. -- #1539 ; - [x] Conda package. A specific *Azure* pipeline can be triggered to create a conda package and publish it on *Azure* artefacts. -- #1560,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-461430448:307,optimiz,optimized,307,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-461430448,1,['optimiz'],['optimized']
Performance,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-200900928:827,Optimiz,Optimization,827,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:17488,optimiz,optimized,17488,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,", CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2435,optimiz,optimizer,2435,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimizer']
Performance,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM dis",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2244,Load,Loading,2244,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['Load'],['Loading']
Performance,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algori",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2065,Load,Loading,2065,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Load'],['Loading']
Performance,", M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1\u20135 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon., J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0000E+00; VV10 C = 1.0000E-02. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:6480,Load,Loading,6480,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Load'],['Loading']
Performance,", argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10739,optimiz,optimized,10739,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19693,optimiz,optimized,19693,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1572,load,load,1572,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,", constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2755,optimiz,optimize,2755,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,", haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13413,optimiz,optimized,13413,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,", kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86143,optimiz,optimized,86143,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,", so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. Composite JK algorithms commonly implemented a density-based screening within them, as part of their formulation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:1203,perform,performing,1203,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['perform'],['performing']
Performance,", trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38947,optimiz,optimized,38947,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43870,optimiz,optimized,43870,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59531,optimiz,optimized,59531,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75060,optimiz,optimized,75060,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:18091,optimiz,optimized,18091,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1923,load,load,1923,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,2,['load'],['load']
Performance,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:360,optimiz,optimized,360,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['optimiz'],['optimized']
Performance,"- Look at the procedures dictionary https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L45 . These are the things you can stick into `energy(name)`, `gradient`, etc.; - Look at the docstring tables https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/driver.py#L264 in the energy, optimize, and frequency functions. Those tables aren't so neatly formatted because I'm picky. They're neatly formatted because Sphinx is picky.; - Look at the nice docs those docstrings turn into http://psicode.org/psi4manual/master/opt.html#table-grad-gen . Each line has links to the manual section where you can find more info on the theory.; - Note that there are now a lot fewer entries in the procedures dictionary than there are in the docstring table. The procedures dict is right, and the docstring table is out of date.; - Your mission is to update the docstring tables and the manual links in them to be consistent with the procedures dict and with the table at http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations; - If you're at GaTech, there's Sphinx at `/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv/bin/sphinx-build`. Otherwise, find a sphinx-build >=1.1 and <1.4 .; - [ ] eliminate from the reST tables in driver.py any methods that aren't in the procedures dict. This will mostly be df- and cd- methods; - [ ] for methods in http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations table, add ""[details]"" refs to the approriate part of the table. ""mp2"" is already done, as an example.; - [ ] for all methods, check that the ""[manual]"" link is pointing to the best part of the docs. You can add a `.. _`sec:seclabel`:` anywhere you need in the rst docs to make a more-specific link.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/249:337,optimiz,optimize,337,https://psicode.org,https://github.com/psi4/psi4/issues/249,1,['optimiz'],['optimize']
Performance,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5032,Perform,Performing,5032,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETEC,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3062,Perform,Performing,3062,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4991,Perform,Performing,4991,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3021,Perform,Performing,3021,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"- [ ] API-like loading of basis sets. If one has the coef and the exp, shouldn't have to write them out to a .gbs, should be a constructor to take them directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-286672049:15,load,loading,15,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-286672049,1,['load'],['loading']
Performance,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:100,optimiz,optimization,100,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965,3,"['optimiz', 'perform']","['optimization', 'optimizations', 'performance']"
Performance,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:503,optimiz,optimization-failure,503,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['optimiz'],['optimization-failure']
Performance,"- [ ] Implement O2 method, i.e. orbital-optimized scaled opposite-spin MP2 [R. C. Lochan and M. Head-Gordon, J. Chem. Phys. 126, 164101 (2007)]. (Looks like there is a scaled opposite-spin MP2 method in dfocc?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-304083131:40,optimiz,optimized,40,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-304083131,1,['optimiz'],['optimized']
Performance,- [ ] Matt Schieber has info on KMP affinity and thread binding schemes that hurt and help performance. See if the one that helps can be encoded at runtime (knowing some /proc/cpuinfo) or otherwise advise in docs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-301541037:91,perform,performance,91,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-301541037,1,['perform'],['performance']
Performance,- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2697,Perform,Performing,2697,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,-- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2571,Perform,Performing,2571,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"--------------------------------------------------------- ~. # Second system, a not-right by eye but still plausible geometry, oddz. molecule oddz {; C; H 1 1.792; H 1 1.792 2 59.4; H 1 1.089 2 136.7 3 -127.3; F 1 2.089 2 101.7 4 -135.9; }. # reference start NRE, E, G for this geometry. odd_nre_start = 25.7790014493 # Q-Chem; odd_e_start = -139.1749807824 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6219,optimiz,optimized,6219,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimized']
Performance,"---------------------------------------------; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:19:36 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3-8 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 2, 9-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:17889,Load,Loading,17889,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance,"------------------------------------------; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:17:28 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 9 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 7-8, 10-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full poin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:5486,Load,Loading,5486,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Load'],['Loading']
Performance,"-----------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1986,perform,perform,1986,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['perform'],['perform']
Performance,"-----------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtran",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:1517,optimiz,optimization,1517,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,"------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Options <==. Computational Basis: ANO-RCC; X2C Basis: (ANO-RCC AUX); The X2C Hamiltonian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5079,Perform,Performing,5079,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Perform'],['Performing']
Performance,"-------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:6329,Load,Loading,6329,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Load'],['Loading']
Performance,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:2733,optimiz,optimized,2733,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,['optimiz'],"['optimize', 'optimized']"
Performance,"---. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3468,Load,Loading,3468,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Load'],['Loading']
Performance,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4933,optimiz,optimization,4933,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,2,['optimiz'],['optimization']
Performance,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:2516,optimiz,optimization,2516,https://psicode.org,https://github.com/psi4/psi4/issues/1947,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,-86.44756575789327 -9.86193e+00 1.45852e+00; total time = 5 seconds = 0.08 minutes		 |	 @DF-RHF iter 55: -76.67102843314724 9.77654e+00 6.54797e+00; Constructing Basis Sets for SAPT...					 |	 @DF-RHF iter 56: -76.14089910093142 5.30129e-01 9.61054e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 57: -86.01797407418083 -9.87707e+00 3.32711e+00; Name: DEF2-QZVPP-RI							 |	 @DF-RHF iter 58: -85.08445334159371 9.33521e-01 4.87812e+00; Role: RIFIT								 |	 @DF-RHF iter 59: -73.84912066572218 1.12353e+01 7.38988e+00; Keyword: DF_BASIS_SAPT						 |	 @DF-RHF iter 60: -73.64413189685598 2.04989e-01 9.80522e+00; atoms 1-2 entry H line 24 file /Users/runner/work/psi4	 |	 @DF-RHF iter 61: -86.70368775982897 -1.30596e+01 2.11859e+00; atoms 3 entry O line 406 file /Users/runner/work/psi4	 |	 @DF-RHF iter 62: -58.03773298700472 2.86660e+01 1.34869e+01; atoms 4 entry CA line 1382 file /Users/runner/work/psi4	 |	 @DF-RHF iter 63: -70.60093508339824 -1.25632e+01 5.80309e+00; => Loading Basis Set <=						 |	 @DF-RHF iter 64: -73.83035588197933 -3.22942e+00 5.03538e+00; Name: (LANL2DZ AUX)							 |	 @DF-RHF iter 65: -81.54129188728777 -7.71094e+00 5.28840e+00; Role: JKFIT								 |	 @DF-RHF iter 66: -85.99899600012829 -4.45770e+00 1.45148e+00; Keyword: DF_BASIS_ELST						 |	 @DF-RHF iter 67: -87.65325888962984 -1.65426e+00 1.75144e+00; atoms 1-2 entry H line 18 file /Users/runner/work/psi4	 |	 @DF-RHF iter 68: -77.01444051749257 1.06388e+01 8.05869e+00; atoms 3 entry O line 318 file /Users/runner/work/psi4	 |	 @DF-RHF iter 69: 25.43262340423360 1.02447e+02 5.73340e+01; atoms 4 entry CA line 1250 file /Users/runner/work/psi4	 |	 @DF-RHF iter 70: -65.40682466091306 -9.08394e+01 1.77666e+01; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//				 |	 @DF-RHF iter 71: -79.84391768105031 -1.44371e+01 6.15679e+00; // SAPT0 //				 |	 @DF-RHF iter 72: -78.19401202879601 1.64991e+00 3.40911e+00; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//				 |	 @DF-RHF iter 73: -86.93062720559368 -8.73662e+00 1.81546e+00,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:13724,Load,Loading,13724,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Load'],['Loading']
Performance,"-; Psi4Error; Memory Usage: 4008.0703125 MB; --; memory use before geom opt; Memory Usage: 4008.0859375 MB; memory use after geom opt; Memory Usage: 4008.0859375 MB; --; memory use before E wfn; Memory Usage: 4008.09765625 MB; --; memory use after E wfn; Memory Usage: 4141.6328125 MB; --; memory use before geom opt; Memory Usage: 4038.51953125 MB; memory use after geom opt; Memory Usage: 4038.51953125 MB; --; memory use before E wfn; Memory Usage: 4038.5390625 MB; --; memory use after E wfn; Memory Usage: 4223.07421875 MB; --; Psi4Error; Memory Usage: 4168.16015625 MB; --; memory use before geom opt; Memory Usage: 4168.171875 MB; memory use after geom opt; Memory Usage: 4168.171875 MB; --; ````. At the last point the calculation then hangs indefinitely, with 5gb memory set on the whole node. Although the memory usage does not completely go up at every step, the memory accumulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:4425,optimiz,optimize,4425,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['optimiz'],['optimize']
Performance,-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2023,cache,cachetools,2023,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['cache'],['cachetools']
Performance,". Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2722,Load,Loading,2722,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,... the huge thing being that both ADIIS and GDM are especially useful for density functional theory. You get very good convergence without the complications of true second-order optimization. You only need Fock matrices to implement it; this means the method works also for meta-GGA functionals etc for which the second-order machinery is very involved.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874480678:179,optimiz,optimization,179,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874480678,1,['optimiz'],['optimization']
Performance,".........PASSED; int value: 10 2.3283823492e-01...............................................PASSED; float value: 10 2.3283823492e-01.............................................PASSED; int value: 11 2.8055889891e-01...............................................PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:7809,Load,Loading,7809,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['Load'],['Loading']
Performance,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:16801,Cache,Cache,16801,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,2,['Cache'],['Cache']
Performance,".000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5597,Load,Loading,5597,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance,.129476941194 15.994914619560; 401: H 0.000000000000 -1.494187339480 1.027446507924 1.007825032070; 401: H -0.000000000000 1.494187339480 1.027446507924 1.007825032070; 401: ; 401: Running in c2v symmetry.; 401: ; 401: Rotational constants: A = 25.12553 B = 13.37732 C = 8.72954 [cm^-1]; 401: Rotational constants: A = 753244.47204 B = 401041.84791 C = 261705.04646 [MHz]; 401: Nuclear repulsion = 8.801462060629429; 401: ; 401: Charge = 0; 401: Multiplicity = 1; 401: Electrons = 10; 401: Nalpha = 5; 401: Nbeta = 5; 401: ; 401: ==> Algorithm <==; 401: ; 401: SCF Algorithm Type is DF.; 401: DIIS enabled.; 401: MOM disabled.; 401: Fractional occupation disabled.; 401: Guess Type is SAD.; 401: Energy threshold = 1.00e-06; 401: Density threshold = 1.00e-06; 401: Integral threshold = 0.00e+00; 401: ; 401: ==> Primary Basis <==; 401: ; 401: Basis Set: 6-31G; 401: Blend: 6-31G; 401: Number of shells: 9; 401: Number of basis function: 13; 401: Number of Cartesian functions: 13; 401: Spherical Harmonics?: false; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401: ; 401: -------------------------------------------------------; 401: Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; 401: -------------------------------------------------------; 401: A1 7 7 0 0 0 0; 401: A2 0 0 0 0 0 0; 401: B1 2 2 0 0 0 0; 401: B2 4 4 0 0 0 0; 401: -------------------------------------------------------; 401: Total 13 13 5 5 5 0; 401: -------------------------------------------------------; 401: ; 401: ==> Integral Setup <==; 401: ; 401: ==> DiskDFJK: Density-Fitted J/K Matrices <==; 401: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:3452,Load,Loading,3452,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Load'],['Loading']
Performance,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11021,CACHE,CACHE,11021,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['CACHE'],['CACHE']
Performance,".398322700000 -0.532419600000 -1.585326900000; H 3.622375400000 -0.006874700000 -3.674767900000; H 3.573575400000 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:5362,load,loads,5362,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['load'],['loads']
Performance,".3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in `-c psi4/label/dev` for now, not `-c psi4`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:3227,optimiz,optimizing,3227,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['optimiz'],['optimizing']
Performance,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14412,optimiz,optimized,14412,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,".Any constrained optimization example where ""no_com"" and/or ""no_reorient""; isn't in the molecule input section and the geometry isn't in the standard; nuclear orientation. The job won't fail, but the constrained coordinates; will not be identical to their original values in the final output. -Trent. On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; wrote:. > @tparker36 https://github.com/tparker36 Can I get test case where this; > dies horribly?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/179#issuecomment-212570814. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212574454:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212574454,1,['optimiz'],['optimization']
Performance,".html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Tuesday, 26 September 2023 11:04AM. Process ID: 419; Host: ...; PSIDATADIR: ...; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); --------------------------------------------------------------------------. Scratch directory: /tmp/. *** tstart() called on ...; *** at Tue Sep 26 11:04:21 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1, 4, 6 entry O line 218 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 2-3, 9-13 entry H line 14 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 5, 7-8 entry C line 144 file .../share/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(O) -2.901500000000 2.033900000000 4.065300000000 15.994914619570; Gh(H) -3.022280000000 2.578500000000 4.875900000000 1.007825032230; Gh(H) -2.166320000000 1.418620000000 4.287130000000 1.007825032230; O 0.000000000000 0.000000000000 0.0000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:3089,Load,Loading,3089,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Load'],['Loading']
Performance,".lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1179,Load,Loading,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4498,perform,performance,4498,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['perform'],['performance']
Performance,"/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3589,optimiz,optimized,3589,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,"/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51105,optimiz,optimized,51105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65429,optimiz,optimized,65429,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:8294,perform,perform,8294,https://psicode.org,https://github.com/psi4/psi4/issues/1897,2,['perform'],['perform']
Performance,"/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (STO-3G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 318 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-3 entry H line 18 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I add `mp.set_start_method('spawn', force=True)`, I can get this to work - or I can run this script on macOS, for which `mp` uses `spawn` by default. This code also runs if I uncomment `proc.run()`, which runs the function in the same process instead of creating a new process. . Any advice here?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:2427,Load,Loading,2427,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Load'],['Loading']
Performance,"/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70104,optimiz,optimized,70104,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70220,optimiz,optimized,70220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT mod",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1223,Perform,Performace,1223,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Perform'],['Performace']
Performance,"0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5994,optimiz,optimized,5994,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,3,['optimiz'],['optimized']
Performance,"0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bce",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:9056,optimiz,optimized,9056,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13384,optimiz,optimized,13384,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14714,optimiz,optimized,14714,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16044,optimiz,optimized,16044,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23668,optimiz,optimized,23668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20942,optimiz,optimized,20942,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0. The current issue is that COSX does not work with certain grid configurations - specifically, it does not work with grids that have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can now be used with a wider variety of grids, as a bug preventing COSX to be used with specific grid configurations has been fixed.; ## Dev notes & details; - [X] The COSX implementation has been ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:1154,perform,performed,1154,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['perform'],['performed']
Performance,"0.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27068,optimiz,optimized,27068,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50392,optimiz,optimized,50392,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"00 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 103, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/damasj02/softwa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:3523,optimiz,optimize,3523,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['optimiz'],['optimize']
Performance,"00 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261000; alpha6 = 14.000000; sr8 = 1.000000. ---------------------------------------------------------; SCF; by Justin Tu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:9126,Load,Loading,9126,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Load'],['Loading']
Performance,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 1 0 7 0; B2u 8 0 1 0 7 0; B3u 8 0 1 0 7 0. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -99.45080702230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:9591,Cache,Cache,9591,https://psicode.org,https://github.com/psi4/psi4/issues/204,2,['Cache'],['Cache']
Performance,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:8774,Cache,Cache,8774,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,2,['Cache'],['Cache']
Performance,"000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3641,Optimiz,Optimizer,3641,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Optimiz'],['Optimizer']
Performance,"00000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/pyt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:1755,optimiz,optimized,1755,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"00005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2928,optimiz,optimized,2928,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,"00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; core id : 7; cpu cores : 8; apicid : 46; initial apicid : 46; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d; bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit; bogomips : 5194.34; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ```. </details>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:13427,cache,cache,13427,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['cache'],['cache']
Performance,"00082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, thi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:2119,optimiz,optimized,2119,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0225E-02; VV10 C = 7.4505E-01. => Molecular Quadrature <=. Radial Scheme = EM; Pruning Scheme = ROBUST; Pruning Type = REGION; Nuclear Scheme = SBECKE. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:10225,Cache,Cache,10225,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Cache'],['Cache']
Performance,"0012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2564,optimiz,optimized,2564,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"00554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3020,optimiz,optimized,3020,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"00; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1123,optimiz,optimized,1123,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,"['optimiz', 'queue']","['optimized', 'queue']"
Performance,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:6361,load,loads,6361,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['load'],['loads']
Performance,"02aaaad0dd557 in py_psi_optking () at /home/laz/build/psi4/psi4/psi4/src/core.cc:239; #8 0x00002aaaad118e95 in pybind11::detail::argument_loader<>::call_impl<int, int (*&)()>(int (*&)(), pybind11::detail::index_sequence<>) (this=0x7fffffffc667, f=@0x5555560adc28: 0x2aaaad0dd4f4 <py_psi_optking()>); ... [Pythony bits snipped]; ```; In v3d_axpy(const double a, const double *X, const double *Y, double *Z), X and Y are undefined in my case and cause the seg fault. I've not dug into this in any depth yet but it looked like the linear bends of Frag 2 were added to Frag 1, so that it dies when the internal coordinates of Frag 1 are printed to the output because the internal coords refer to atoms not in that fragment. Or something along those lines. This job gives a seg fault with current git:; ```; molecule dimer {; C 0.824239 0.890517 1.696513; C 1.957325 0.070553 1.693001; C 1.813738 -1.320699 1.693796; C 0.537119 -1.892037 1.698103; C -0.595966 -1.072073 1.701616; C -0.452379 0.319180 1.700821; H 2.954752 0.516900 1.689636; H 0.424971 -2.979016 1.698724; H -1.593394 -1.518419 1.704981; H -1.337645 0.959804 1.703565; H 0.936388 1.977496 1.695892; C 2.947914 -2.141449 1.690280; N 3.874050 -2.836596 1.687416; --; C 0.717503 0.537187 -1.697308; C 0.049935 -0.691858 -1.697308; C -1.348233 -0.728319 -1.697309; C -2.078861 0.464332 -1.697309; C -1.411293 1.693378 -1.697308; C -0.013127 1.729838 -1.697308; H 1.809881 0.565636 -1.697308; H 0.620767 -1.623659 -1.697309; H -1.869768 -1.688580 -1.697309; H -3.171240 0.435884 -1.697309; H 0.508409 2.690100 -1.697308; C -2.142628 2.887174 -1.697308; N -2.730222 3.885021 -1.697308; symmetry c1; }. set optking {; frag_mode multi; }; set basis cc-pVDZ; optimize('blyp-d3bj'); ```; Running the same job with ""frag_mode single"", or with ""frag_mode multi"" with ""opt_coordinates cartesian"", ran for multiple opt steps (until I killed it) without giving a seg fault. I'll dig further but suspect others might have more of an idea of where to look.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680:3394,optimiz,optimize,3394,https://psicode.org,https://github.com/psi4/psi4/issues/680,1,['optimiz'],['optimize']
Performance,"04 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our corre",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2455,load,load,2455,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,04 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this prob,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2011,load,load,2011,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094:1755,optimiz,optimize,1755,https://psicode.org,https://github.com/psi4/psi4/issues/1094,3,['optimiz'],['optimize']
Performance,"05 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_inf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:26695,optimiz,optimized,26695,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"06.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 9 10:48:21 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 232. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986820. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:15334,Cache,Cache,15334,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['Cache'],['Cache']
Performance,"074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56752,optimiz,optimized,56752,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1318,Perform,Performing,1318,https://psicode.org,https://github.com/psi4/psi4/issues/36,4,['Perform'],['Performing']
Performance,"0>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7018,optimiz,optimized,7018,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,4,['optimiz'],['optimized']
Performance,"0e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050244575 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973838037 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227745933 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925370471 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208625948809 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139866705314 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682110801427 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:5175,Cache,Cache,5175,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Cache'],['Cache']
Performance,"0e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483788",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:6548,Cache,Cache,6548,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Cache'],['Cache']
Performance,"0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue withou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68544,optimiz,optimized,68544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwfla",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:26873,optimiz,optimized,26873,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50197,optimiz,optimized,50197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45584,optimiz,optimized,45584,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44247,optimiz,optimized,44247,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30324,optimiz,optimized,30324,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28987,optimiz,optimized,28987,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35247,optimiz,optimized,35247,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48258,optimiz,optimized,48258,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39324,optimiz,optimized,39324,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62582,optimiz,optimized,62582,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36584,optimiz,optimized,36584,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46921,optimiz,optimized,46921,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58505,optimiz,optimized,58505,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61245,optimiz,optimized,61245,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52245,optimiz,optimized,52245,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74034,optimiz,optimized,74034,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71360,optimiz,optimized,71360,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81697,optimiz,optimized,81697,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53582,optimiz,optimized,53582,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84371,optimiz,optimized,84371,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66569,optimiz,optimized,66569,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83034,optimiz,optimized,83034,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72697,optimiz,optimized,72697,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:36,optimiz,optimization,36,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056,3,['optimiz'],['optimization']
Performance,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1916,Optimiz,Optimization,1916,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"1.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pytho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7554,optimiz,optimized,7554,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"12 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible change was made in response to; CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>_.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:1371,load,load,1371,https://psicode.org,https://github.com/psi4/psi4/issues/1610,5,['load'],"['load', 'loaded', 'loading']"
Performance,"148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5111,optimiz,optimized,5111,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"14; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25760,optimiz,optimized,25760,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29747,optimiz,optimized,29747,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:31084,optimiz,optimized,31084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36007,optimiz,optimized,36007,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37344,optimiz,optimized,37344,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:40084,optimiz,optimized,40084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45007,optimiz,optimized,45007,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46344,optimiz,optimized,46344,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47681,optimiz,optimized,47681,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53005,optimiz,optimized,53005,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60668,optimiz,optimized,60668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62005,optimiz,optimized,62005,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:63342,optimiz,optimized,63342,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:67329,optimiz,optimized,67329,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72120,optimiz,optimized,72120,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73457,optimiz,optimized,73457,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:76197,optimiz,optimized,76197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81120,optimiz,optimized,81120,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82457,optimiz,optimized,82457,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83794,optimiz,optimized,83794,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:85131,optimiz,optimized,85131,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78541,optimiz,optimized,78541,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1285,perform,performance,1285,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['perform'],['performance']
Performance,"1937559 -1.4112107502 0.6628195511; N	2.3821384470 -0.8016830488 0.6668723530; S	4.2544548310 -1.9352085140 0.7141164692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1222,optimiz,optimize,1222,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimize']
Performance,"2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; files_list,master_in,master_out= sowList(first_output); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 31, in sowList; master_in=the_tag+""-master.in""; UnboundLocalError: local variable 'the_tag' referenced before assignment; Performing finite difference calculations; 5 displacements needed ...Exit Status: infile ( 0 ); autotest ( None ); sowreap ( 1 ); overall ( 1 ); <end of output>; Test time = 0.90 sec; ----------------------------------------------------------; Test Failed.; ""pywrap-opt-sowreap"" end time: Feb 15 13:13 CET; ""pywrap-opt-sowreap"" time elapsed: 00:00:00; ----------------------------------------------------------; ```. I've saved the output of `sapt4` and `opt10` to https://gist.github.com/wpoely86/60885c5adec8dcc8b63b. Furthermore, `opt2` is flaky. It doesn't always pass. Most of the time but not always.; These tests where run on a dual socket Xeon E5-2660v3 (20 cores in total without HT) with icc/icpc 2016.1.150 + MKL 11.3.1.150.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:4500,Perform,Performing,4500,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['Perform'],['Performing']
Performance,"2.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:9181,optimiz,optimized,9181,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:3350,Load,Loading,3350,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['Load'],['Loading']
Performance,"24 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1234,Optimiz,Optimizations,1234,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Optimiz'],['Optimizations']
Performance,"25 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50019,optimiz,optimized,50019,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"274847835639 -3.351496142704; C 1.013099808976 -0.096716453452 -2.640334263532; C 1.529504298267 0.292928191105 -1.409192139229; C 2.494126536754 -0.467080983006 -0.560933641235; C 3.003582432090 -1.737924160834 -0.783889065036; C 2.769133637687 -2.598542901279 -1.856952991548; C 1.277514575629 1.516518268211 -0.750473230890; C 2.043031766314 1.530064287276 0.429834437874; C 2.781071200241 0.346831462421 0.547222303270; C 0.331279128018 2.597569873302 -1.170283396618; C -1.055809083241 2.619579374400 -0.505102826064; C -3.007822478580 1.467887750457 0.346313567353; C -2.737441971995 1.210386860246 1.823863198791; C -1.771682755626 -0.377549950855 3.288385929391; C -0.725219293291 -1.470001880969 3.265198353103; O -2.011738101654 -0.000473360001 1.946048595534; N -1.814457990750 1.476521947835 -0.495974028017; O -1.486124528571 3.658969974773 -0.022977929056; H 1.983643665259 -3.200384618921 -3.705961229953; H 0.718461117324 -1.345849367127 -4.303825324337; H 0.350907237427 0.616950149147 -3.119075116214; H 3.676140620880 -2.109282391465 -0.017487285463; H 3.272531113987 -3.555754086369 -1.807900216108; H 2.058943071980 2.349266204546 1.134368500502; H 3.472739721386 0.097519945506 1.336731400325; H 0.168474080806 2.547179744292 -2.248127020046; H 0.756093357555 3.571701649289 -0.937344979453; H -3.473888529556 2.443761502993 0.233969033713; H -3.678528703972 0.693841954810 -0.023021795736; H -3.683424826831 1.122758821689 2.369341272280; H -2.158587217937 2.040718408406 2.239661235900; H -1.397654842931 0.478282649094 3.862936033974; H -2.689164190718 -0.745525653670 3.760362229725; H -0.522908742059 -1.829437030547 4.270707232296; H -1.335460161411 0.599637097912 -0.637487324770; H 0.191838379615 -1.070755100110 2.832096282140; N -1.176303107524 -2.652929380092 2.505563226321; N -1.350778086421 -2.531724211116 1.296707152615; N -1.541968166301 -2.578278885168 0.192089082738; }; set_num_threads(12); set_memory(int(10.0e9)); set basis 6-311ppg_d_p_; optimize(""b3lyp"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32:2380,optimiz,optimize,2380,https://psicode.org,https://github.com/psi4/psi4/issues/32,1,['optimiz'],['optimize']
Performance,"2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4961,optimiz,optimized,4961,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,3,['optimiz'],['optimized']
Performance,"3 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5423,optimiz,optimized,5423,https://psicode.org,https://github.com/psi4/psi4/issues/12,2,['optimiz'],['optimized']
Performance,"3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33494,optimiz,optimized,33494,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:1979,load,loading,1979,https://psicode.org,https://github.com/psi4/psi4/issues/1588,3,"['cache', 'load']","['cache', 'cache-Release', 'loading']"
Performance,"3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIRECT # An out-of-core, presorted algorithm using exact ERIs. # MOLDEN_WRITE true. }. optimize('scf', dertype='energy'). psi4 is installed through miniconda:. [root@titan3 2]# find /app/ -name psi4 -type f; /app/miniconda/pkgs/psi4-0.2.54-py27_gf997694/bin/psi4; /app/miniconda/bin/psi4; [root@titan3 2]# /app/miniconda/bin/psi4 --version; 0.2.54",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:5047,optimiz,optimize,5047,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimize']
Performance,"35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT + DEF2-UNIVERSAL-JKFIT; Number of shells: 2894; Number of basis functions: 10676; Number of Cartesian functions: 10676; Spherical Harmonics?: false; Max angular momentum: 4. Cached 10.0% of DFT collocation blocks in 1.635 [GiB]. Minimum eigenvalue in the overlap matrix is 6.3023278892E-05.; Reciprocal condition number of the overlap matrix is 6.1027737192E-06.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 1058 1058 ; -------------------------; Total 1058 1058; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -20768.03616751698792 -2.07680e+04 0.00000e+00 ; @DF-RKS iter 1: -20765.62327420015208 2.41289e+00 1.93665e-03 DIIS/ADIIS; @DF-RKS iter 2: -20391.34084894250191 3.74282e+02 9.02715e-03 DIIS/ADIIS; @DF-RKS iter 3: -20544.66036200033341 -1.53320e+02 8.84587e-03 DIIS/ADIIS; @DF-RKS iter 4: -20767.63349150712747 -2.22973e+02 9.76048e-04 DIIS/ADIIS; @DF-RKS iter 5: -20703.21493143097177 6.44186e+01 3.04393e-03 DIIS/ADIIS; @DF-RKS ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:20105,Cache,Cached,20105,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Cache'],['Cached']
Performance,"360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19797,optimiz,optimized,19797,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2309,cache,cache,2309,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,8,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1747,optimiz,optimization,1747,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,3,['optimiz'],['optimization']
Performance,"4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2510,load,loading,2510,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['loading']
Performance,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1404,Optimiz,Optimize,1404,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Optimiz'],['Optimize']
Performance,"48052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083916 -0.015328 3.771054 4.854970; 	 9 R(4,6) = 1.083782 -0.014647 3.771929 4.855711; 	 10 B(1,2,3) = 125",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:4818,optimiz,optimization,4818,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439734, -108.48734528435165, -108.487544082862,; -108.4875574827616, -108.48757248264921, -108.48758858252856, -108.48760498240567, -108.48762118228429, -108.48763708216514, -108.48765208205275, -108.4876661819471, ; -108.48767918184969, -108.48769108176053, -108.4877016816811, -108.48771108161066, -108.48771918154995, -108.48772618149751, -108.48773188145479, -108.48773658141958, ; -108.48774018139261, -108.48774268137387, -108.48774438136114, -108.48774518135515, -108.48774518135515, -108.48774438136114, -108.48774298137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); --------------------------------------------------------------------------. Memory set to 1.863 GiB by Python driver. Performing a fit to 85 data points. Optimizing geometry based on current surface:. E = -108.48763191189867, x = 3.2252941, grad = 0.00224788400003; E = -108.48738990806602, x = 3.3996397, grad = 0.00068618041148; E = -108.48734508016932, x = 3.4996883, grad = 0.00016321285348; E = -108.48733918433076, x = 3.5300091, grad = 0.00004224053808; E = -108.48733835624454, x = 3.5376957, grad = -0.00000455763475; E = -108.48733841386600, x = 3.5368732, grad = 0.00000047690618; E = -108.48733840748675, x = 3.5369593, grad = -0.00000005153221; E = -108.48733840817202, x = 3.5369500, grad = 0.00000000555231; E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873; Final E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873. Equilibrium Energy -108.48733840809817 Hartrees; Gradient -0.00000000059873; Quadratic Force Constant -0.0241494 MDYNE/A; Cubic Force Constant 0.0817885 MDYNE/A**2; Quartic Force Constant -0.1482087 MDYNE/A**3. Traceback (most recent call last):; File ""/home/martin/miniconda/bin/psi4"", line 287, in <module>; exec(c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:9042,Optimiz,Optimizing,9042,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['Optimiz'],['Optimizing']
Performance,"50835 -3.209375; --; C 1.762137 -1.702272 3.907327; N 1.008514 -0.826933 3.073959; C -0.255272 -1.171286 2.659701; O -0.889107 -2.139983 3.059359; C -0.900138 -0.137125 1.727920; C -1.956427 0.697535 2.386933; C -1.122652 1.840978 2.981496; C -0.096631 2.090501 1.911054; N 0.182391 0.804731 1.237639; C 0.606984 0.675148 -0.082718; O 0.481731 -0.301961 -0.785930; C 1.235157 1.958654 -0.650979; H 1.353383 -1.743533 4.930961; H 2.767495 -1.250368 3.947910; H 1.854613 -2.732246 3.523648; H 1.430423 0.082809 2.871745; H -1.239078 -0.581913 0.770233; H -2.471298 0.066853 3.136998; H -2.719629 1.061761 1.672573; H -0.610350 1.606676 3.934438; H -1.798872 2.698054 3.164789; H -0.408884 2.958700 1.299354; H 0.836907 2.367926 2.437353; H 0.405581 2.645117 -0.890106; H 1.847741 1.817925 -1.557370; H 1.862150 2.422724 0.128846; no_reorient; no_com; symmetry c1; """"""); psi4.set_module_options(""optking"", {""frag_mode"": ""multi"", ""freeze_intrafrag"": True}); psi4.optimize('SCF/STO-3G', molecule=dimer, bsse_type='cp', freeze_intrafrag=True); ```. I get the following backtrace:; ```; #0 0x00007fffe074edf3 in opt::INTERFRAG::orient_fragment () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #1 0x00007fffe06ec4e1 in opt::MOLECULE::rfo_step () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #2 0x00007fffe064e7f7 in opt::optking(psi::Options&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #3 0x00007fffdf472f9f in py_psi_optking() () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:1560,optimiz,optimize,1560,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,1,['optimiz'],['optimize']
Performance,54 0.996968 1.2925792; O -1.0786533 -2.3831691 -2.1082181; O -4.5550423 -0.3852824 0; O -0.5151061 0.4216645 -2.3608946; O -0.5151061 0.4216645 2.3608946; O -0.5222264 4.2956077 0; C -0.1082324 0.2374533 0; O -1.0786533 -2.3831691 2.1082181; O 2.3952343 2.1158161 0; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; }. mol.update_geometry(); mol.print_out(). set basis cc-pvtz. optimize('b3lyp-d3'). print_variables(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158:2854,optimiz,optimize,2854,https://psicode.org,https://github.com/psi4/psi4/issues/158,1,['optimiz'],['optimize']
Performance,"568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIREC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3981,optimiz,optimized,3981,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,"59600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:2431,optimiz,optimize,2431,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"6 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.84014",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:2266,optimiz,optimization,2266,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,"602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:2623,optimiz,optimized,2623,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimized']
Performance,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1451,Perform,Performing,1451,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,6,['Perform'],['Performing']
Performance,"663418; S 1 1.00; 1.04455407 1.0000000; S 1 1.00; 0.30382295 1.0000000; S 1 1.00; 0.07271795 1.0000000; P 4 1.00; 34.75998468 0.0199871; 7.80757529 0.1258380; 2.29096903 0.3939784; 0.71677956 0.6260029; P 1 1.00; 0.21323853 1.0000000; P 1 1.00; 0.05887653 1.0000000; D 1 1.00; 1.25011953 1.0000000; D 1 1.00; 0.34100653 1.0000000; ****; I 0; S 8 1.00; 5464702.08060097 0.0001093; 849942.52168504 0.0007913; 207458.86762606 0.0036900; 64929.86485391 0.0131833; 23909.80880875 0.0395406; 9850.71275593 0.1040723; 4222.34623514 0.2741166; 1781.76403452 0.6488818; S 2 1.00; 749.21394356 -0.5595941; 318.75246448 -0.4728234; S 1 1.00; 118.02205930 -1.0000000; S 2 1.00; 59.88344918 -0.7200351; 29.50227605 -0.2987074; S 2 1.00; 12.24593624 -0.5061450; 6.20345391 -0.5148945; S 2 1.00; 2.43764323 0.5412411; 1.14985168 0.4841938; S 1 1.00; 0.30638210 -1.0000000; S 1 1.00; 0.11926836 -1.0000000; S 1 1.00; 0.03719760 1.0000000; P 7 1.00; 20182.20166081 0.0004988; 4999.21100888 0.0038641; 1768.53795847 0.0174910; 734.77528080 0.0632147; 317.51165410 0.1951982; 139.60118455 0.4117047; 63.12833732 0.4496355; P 1 1.00; 28.34086632 1.0000000; P 2 1.00; 13.45203045 -0.6861431; 6.52579989 -0.3486363; P 3 1.00; 3.02467901 0.5601269; 1.38040546 0.4313665; 0.52669045 0.0821826; P 1 1.00; 0.22217820 1.0000000; P 1 1.00; 0.08328104 1.0000000; P 1 1.00; 0.04062406 1.0000000; D 6 1.00; 565.98837950 0.0067496; 168.69681731 0.0529920; 63.14306896 0.2071444; 26.10306850 0.4270744; 11.24530421 0.4189456; 4.63907320 0.1167256; D 1 1.00; 1.91572411 1.0000000; D 1 1.00; 0.72024616 1.0000000; D 1 1.00; 0.07663996 1.0000000; F 1 1.00; 2.20029999 1.0000000; F 1 1.00; 0.52320000 1.0000000; ****; }. set basis jorge; set {; 	memory 16GB; 	freeze_core false; 	reference RHF; 	scf_type PK; 	ints_tolerance 1.0E-14; 	E_CONVERGENCE 1.0E-10; 	D_CONVERGENCE 1.0E-10; 	#maxiter 250; #STABILITY_ANALYSIS check; 	#FAIL_ON_MAXITER False; 	#cachelevel 0; }; #scf_e, scf_wfn = energy('scf', return_wfn=True); energy('BCCD'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293:3282,cache,cachelevel,3282,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293,1,['cache'],['cachelevel']
Performance,"692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1340,optimiz,optimizations,1340,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimizations']
Performance,"6hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib 1.2.11 ha838bed_2; ```. Our input is:. ```; set_num_threads(4); set_memory('16000 MB'). set { scf_mem_safety_factor 0.7 }. set { reference rks }; set { basis 6-311++G** }. molecule MOL {; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:2921,optimiz,optimize,2921,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['optimiz'],['optimize']
Performance,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2448,load,loading,2448,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,4,['load'],"['load', 'loading']"
Performance,"73000-7efc99c74000 r--p 0081f000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c74000-7efc99c85000 rw-p 00820000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c8b000-7efc9b367000 r-xp 00000000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b367000-7efc9b566000 ---p 016dc000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b566000-7efc9b569000 r--p 016db000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b569000-7efc9b749000 rw-p 016de000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b750000-7efc9d003000 r-xp 00000000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d003000-7efc9d202000 ---p 018b3000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d202000-7efc9d20a000 r--p 018b2000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d20a000-7efc9d22b000 rw-p 018ba000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efca5e25000-7efca621d000 r-xp 00000000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca621d000-7efca641d000 ---p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca641d000-7efca6423000 r--p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca6423000-7efca6424000 rw-p 003fe000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; ```. * Conclusions; * If we don't want to enforce a loading order of numpy and psi4, must use intel channel numpy; * When I was only using MKL headers from intel channel, lack of py36 didn't matter. But NumPy has to be compiled for a certain py version; * Ordinary psi4 core.so 37 MB. One compiled for avx2, avx, w/default sse4.1 is 53 MB. Not bad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:14809,load,loading,14809,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['loading']
Performance,"74 1.007825032230; H -2.751482207601 3.525725481575 0.978750254628 1.007825032230; H -5.041124717719 0.143747881126 2.985491874213 1.007825032230; H -1.897047410743 -1.511749253062 -0.052863913919 1.007825032230; H -0.075772329213 1.770882773042 -0.598697666704 1.007825032230; Gh(C) 0.474241568549 -1.806355440989 -3.081314925013 12.000000000000; Gh(C) 0.648397096782 -0.635430651446 -4.412834530975 12.000000000000; Gh(O) 1.808983940470 0.135808630731 -4.689016685298 15.994914619570; Gh(O) -0.601792270472 -0.580730799038 -5.346002144161 15.994914619570; Gh(C) 1.842013051412 -1.750538066582 -1.877436731479 12.000000000000; Gh(C) 1.748380277776 -3.125392178990 -0.682540886187 12.000000000000; Gh(C) 0.551428575668 -3.079126453237 0.382902937848 12.000000000000; Gh(O) -0.772123362553 -3.017893882098 0.005326940643 15.994914619570; Gh(O) 1.164188263699 -2.773183751061 1.753201347751 15.994914619570; Gh(C) 1.956475179932 -0.293321161210 -1.099031580479 12.000000000000; Gh(O) 0.992725973388 0.559110742214 -1.297006473496 15.994914619570; Gh(O) 3.130049422860 -0.154233046346 -0.072768016824 15.994914619570; Gh(O) 3.196147367497 -1.811177694362 -2.579148566611 15.994914619570; Gh(H) 0.331210026589 -2.880972115219 -3.515800481502 1.007825032230; Gh(H) -0.568593016142 -1.679247170680 -2.603980470596 1.007825032230; Gh(H) -0.337129028344 0.137702882174 -6.101596488384 1.007825032230; Gh(H) 2.839165670708 -3.170793868693 -0.034525947893 1.007825032230; Gh(H) 1.503523685805 -4.153371056510 -1.238801035107 1.007825032230; Gh(H) 0.381496756170 -2.300443540051 2.173560639006 1.007825032230; Gh(H) 2.908852211708 0.661916839703 0.492311211561 1.007825032230; Gh(H) 3.261181481570 -0.956120691787 -3.343640597980 1.007825032230. Running in c1 symmetry. Rotational constants: A = 0.00767 B = 0.00407 C = 0.00370 [cm^-1]; Rotational constants: A = 230.03247 B = 122.05678 C = 110.97094 [MHz]; ```; I misunderstood you on my first reply, this is the geometry prior to the final failed optimization",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437:3648,optimiz,optimization,3648,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437,1,['optimiz'],['optimization']
Performance,"7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3455,optimiz,optimization,3455,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11269,optimiz,optimized,11269,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79917,optimiz,optimized,79917,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"7m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3912,optimiz,optimized,3912,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"8291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; # 3 -139.282037341604 -0.044783590572 0.06072927 0.03180855 0.57480436 0.30215430 ~; # 4 -139.291415380240 -0.009378038636",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:7292,Optimiz,Optimizer,7292,https://psicode.org,https://github.com/psi4/psi4/issues/310,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11589,optimiz,optimized,11589,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"8771 0.8345349 2.4380471; H 3.4723294 0.2985395 2.1138258; C 4.8833315 0.8242594 3.8339865; H 4.2106066 0.7640545 4.7169315; C 5.1352600 1.7388308 0.2154605; C 5.9367201 2.7180065 -0.4070459; H 6.5906010 3.3693857 0.1542320; C 5.8968481 2.8895370 -1.7876785; H 6.5102956 3.6525267 -2.2492787; C 5.0705595 2.0801358 -2.5660919; H 5.0459052 2.2150282 -3.6371008; C 4.2801843 1.0988215 -1.9619599; H 3.6456490 0.4646484 -2.5633688; C 4.3069360 0.9308698 -0.5777838; H 3.6946764 0.1590780 -0.1340784; Pd 4.9767091 -2.9156010 -0.8306564; Cl 3.4192488 -2.6431143 0.8822123; Cl 6.4966175 -3.2589661 -2.5675971; N 6.4035839 -3.3735495 0.5030511; N 6.1871875 -3.2211030 1.8618602; H 5.4954819 -2.5263042 2.2125460; N 3.5021334 -2.4381912 -2.1211903; N 3.5243915 -2.9396423 -3.4027689; H 4.3679055 -3.2478427 -3.8957127; C 7.4771967 -3.3701598 2.4264557; C 8.4189802 -3.8527379 1.4233890; H 9.4577596 -4.1288843 1.5525635; C 7.7219966 -3.8195570 0.2409887; H 8.1357666 -4.0945974 -0.7185031; C 7.7241254 -3.1038209 3.8339410; C 7.0325411 -2.0594134 4.4713758; H 6.3311040 -1.4377552 3.9310874; C 7.2755769 -1.7799172 5.8117697; H 6.7608347 -0.9578992 6.2880679; C 8.1817498 -2.5631263 6.5292546; H 8.3679609 -2.3509248 7.5705948; C 8.8458639 -3.6232926 5.9024611; H 9.5290436 -4.2449953 6.4602769; C 8.6312106 -3.8829756 4.5501667; H 9.1416492 -4.7076088 4.0686112; C 2.3148570 -2.6412247 -4.0406367; C 1.4430496 -2.1324266 -3.1729914; H 0.4299045 -1.8152948 -3.3765456; C 2.0956876 -2.1771295 -1.8399026; H 1.6924807 -1.8147056 -0.8735104; C 2.0987775 -2.8804341 -5.4680291; C 2.8176217 -3.9063691 -6.1045465; H 3.5215126 -4.5219624 -5.5560126; C 2.6007752 -4.1791261 -7.4518988; H 3.1399962 -4.9858220 -7.9301448; C 1.6833592 -3.4165632 -8.1761041; H 1.5175424 -3.6305460 -9.2208342; C 0.9806544 -2.3809082 -7.5519679; H 0.2780607 -1.7849973 -8.1154290; C 1.1799022 -2.1166497 -6.1970657; H 0.6369442 -1.3079212 -5.7230613; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640050708:3211,optimiz,optimize,3211,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640050708,1,['optimiz'],['optimize']
Performance,"8783928065005, -108.48769318174477, -108.48758038259001, ; -108.48749538322693, -108.48743328369225, -108.48738988401745, -108.4873615842295, -108.4873453843509, -108.48733858440185, -108.48733918439734, -108.48734528435165, -108.487544082862,; -108.4875574827616, -108.48757248264921, -108.48758858252856, -108.48760498240567, -108.48762118228429, -108.48763708216514, -108.48765208205275, -108.4876661819471, ; -108.48767918184969, -108.48769108176053, -108.4877016816811, -108.48771108161066, -108.48771918154995, -108.48772618149751, -108.48773188145479, -108.48773658141958, ; -108.48774018139261, -108.48774268137387, -108.48774438136114, -108.48774518135515, -108.48774518135515, -108.48774438136114, -108.48774298137162, -108.48774098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); --------------------------------------------------------------------------. Memory set to 1.863 GiB by Python driver. Performing a fit to 85 data points. Optimizing geometry based on current surface:. E = -108.48763191189867, x = 3.2252941, grad = 0.00224788400003; E = -108.48738990806602, x = 3.3996397, grad = 0.00068618041148; E = -108.48734508016932, x = 3.4996883, grad = 0.00016321285348; E = -108.48733918433076, x = 3.5300091, grad = 0.00004224053808; E = -108.48733835624454, x = 3.5376957, grad = -0.00000455763475; E = -108.48733841386600, x = 3.5368732, grad = 0.00000047690618; E = -108.48733840748675, x = 3.5369593, grad = -0.00000005153221; E = -108.48733840817202, x = 3.5369500, grad = 0.00000000555231; E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873; Final E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873. Equilibrium Energy -108.48733840809817 Hartrees; Gradient -0.00000000059873; Quadratic Force Constant -0.0241494 MDYNE/A; Cubic Force Constant 0.0817885 MDYNE/A**2; Quartic Force Constant -0.1482087 MDYNE/A**3. Traceback (most recent call last):; File ""/home/martin/minicond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:9006,Perform,Performing,9006,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['Perform'],['Performing']
Performance,8_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1929,cache,cached-property,1929,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['cache'],['cached-property']
Performance,"8ed1ab_0 conda-forge; pytest 7.1.2 py38haa244fe_0 conda-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; qcengine 0.19.0 pyhd8ed1ab_0 psi4; scipy 1.8.1 py38h9bf8e03_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:2785,cache,cachedir,2785,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['cache'],['cachedir']
Performance,": Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; -- The CXX compiler identification is GNU 5.2.0; -- The C compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/lib64/libblas.so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:3283,Perform,Performing,3283,https://psicode.org,https://github.com/psi4/psi4/issues/312,6,['Perform'],['Performing']
Performance,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2699,Perform,Performing,2699,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,2,['Perform'],['Performing']
Performance,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2325,load,loading,2325,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597,1,['load'],['loading']
Performance,":1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #34 0x000056022",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7251,optimiz,optimized,7251,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1842,optimiz,optimized,1842,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],['optimized']
Performance,"::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14868,Load,Loading,14868,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Load'],['Loading']
Performance,"::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7139,optimiz,optimized,7139,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3542,optimiz,optimized,3542,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,":function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5346,optimiz,optimized,5346,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,":function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2791,optimiz,optimized,2791,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2667,perform,performing,2667,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['perform'],['performing']
Performance,"; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:1016,cache,cache,1016,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['cache'],['cache']
Performance,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6889,optimiz,optimized,6889,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,5,['optimiz'],['optimized']
Performance,"; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1570,Optimiz,Optimized,1570,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['Optimiz'],['Optimized']
Performance,"; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Rela",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1366,optimiz,optimize,1366,https://psicode.org,https://github.com/psi4/psi4/issues/647,2,['optimiz'],"['optimization', 'optimize']"
Performance,"; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1266,optimiz,optimization,1266,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['optimiz'],['optimization']
Performance,"<=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-D3BJ <= . wB97M-V with D3(BJ) instead of VV10 dispersion . A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018; N. Mardirossian, M. Head-Gordon, J. Chem. Phys. 144, 214110, 2016. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange <=. 0.8500 HF,LR [omega = 0.3000]; 0.1500 HF . => LibXC Density Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:11573,Load,Loading,11573,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Load'],['Loading']
Performance,"<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:3079,optimiz,optimized,3079,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"= 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequences of this all are, as I seem to be getting sensible energies (though I suppose I haven't compared to a known good literature benchmark calculated without psi4). I don't think I'm the first person to run into concerns in this part of the code, though, given this comment:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L3812. Here's a minimal file to just check that `initialize_lebedev` is ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:2269,perform,performance,2269,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['perform'],['performance']
Performance,= NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: Core (One-Electron) Hamiltonian. -------------------------------------------------------						 -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc						 Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------						 -------------------------------------------------------; Ag 5 5 2 2 2 0						 Ag 5 5 2 2 2 0; B1g 1 1 0 0 0 0						 B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0						 B2g 1 1 0 0 0 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6847,Cache,Cached,6847,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Cache'],['Cached']
Performance,= TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: Core (One-Electron) Hamiltonian. -------------------------------------------------------						 -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc						 Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------						 -------------------------------------------------------; Ag 5 5 2 2 2 0						 Ag 5 5 2 2 2 0; B1g 1 1 0 0 0 0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6783,Cache,Cached,6783,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Cache'],['Cached']
Performance,"='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13837,optimiz,optimized,13837,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10433,CACHE,CACHE,10433,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,3,['CACHE'],['CACHE']
Performance,"=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:2610,optimiz,optimized,2610,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,6,['optimiz'],['optimized']
Performance,"=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2464,optimiz,optimized,2464,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12574,optimiz,optimized,12574,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19019,optimiz,optimized,19019,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22858,optimiz,optimized,22858,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); at Python/pythonrun.c:1914; #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); from /usr/lib/libboost_python3.so.1.54.0; #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; ```. Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:6536,optimiz,optimized,6536,https://psicode.org,https://github.com/psi4/psi4/issues/12,5,['optimiz'],['optimized']
Performance,== Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) :,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:1851,optimiz,optimized,1851,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimized']
Performance,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:98,optimiz,optimization,98,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:1116,optimiz,optimized,1116,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231,2,['optimiz'],['optimized']
Performance,> 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. I am in no way qualified to comment on the C++ pointer stuff. But I had a Intel VTune setup for this PR and [the profiling](https://github.com/psi4/psi4/files/4687387/result.txt) looks sufficiently clean.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634505041:102,perform,performance,102,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634505041,1,['perform'],['performance']
Performance,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:492,perform,performance-review,492,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455,2,"['bottleneck', 'perform']","['bottleneck', 'performance-review']"
Performance,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:327,load,loading,327,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,2,['load'],"['load', 'loading']"
Performance,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:1377,perform,perform,1377,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876,1,['perform'],['perform']
Performance,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:107,optimiz,optimizer,107,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"> ; > This conventional HF example is also a kind of worst-case scenario, since integral calculation is not the rate-limiting step in most Psi4 calculations (like anything with DF). I think it wouldn't hurt to tighten (or completely turn off) primitive screening, although there could be other systems or basis sets for which primitive screening leads to larger performance gains. Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783409559:362,perform,performance,362,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783409559,1,['perform'],['performance']
Performance,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:689,optimiz,optimized,689,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,1,['optimiz'],['optimized']
Performance,"> > > An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?; > ; > > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.; > ; > I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. OK, you changed my hasty mind on that. What concerns me is that the user may, in some instances, not realize that the default active molecule is the one that optking is acting on and changing. But the upside convenience wins, I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584:120,optimiz,optimization,120,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584,2,['optimiz'],['optimization']
Performance,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:498,cache,cache,498,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,5,['cache'],['cache']
Performance,"> > So now that this PR and #2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc.; > ; > Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow. Yeah, I don't think we've had an actual merge conflict from the merge queue yet (at least not that I have seen), so it can be an experiment to see what happens in that case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839:82,queue,queue,82,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839,3,['queue'],['queue']
Performance,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:146,perform,perform,146,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129,3,['perform'],"['perform', 'performance', 'performed']"
Performance,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:311,cache,cached,311,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,3,['cache'],['cached']
Performance,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:489,cache,cache,489,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,5,['cache'],['cache']
Performance,"> Added Cholesky-decomposition MP2 and optimized-orbital MP2. That should be ""orbital-optimized MP2"" instead I think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-221834969:39,optimiz,optimized-orbital,39,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221834969,2,['optimiz'],"['optimized', 'optimized-orbital']"
Performance,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:61,optimiz,optimization,61,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['optimiz'],['optimization']
Performance,"> Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now. Not trying to derail this conversation, but I am not convinced that is true, at least if one plans to run close to 100% utilization for extended periods of time.; Something like a c7gd.12xlarge (48 vCPU, 96 GiB RAM, NVME SSD in the node) costs 590 USD per month, if the cheapest Amazon region (Mumbai, India) is used and 1 year is paid for in advance.; From a different provider one can rent a bare metal Ampere Altra Q80-30 server (80 cores, 128 GiB RAM, NVME SSD in the node), for 185 USD per month + $85 setup fee.; Even a 48 core latest-gen AMD EPYC, which will quite likely be faster than the Graviton 3 instance, costs only $218/month, and it comes with 256 GiB of RAM. Both of these options are cheaper per hour than Amazon's spot pricing (!!) for c7gd.12xlarge. So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263:159,perform,performance,159,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263,1,['perform'],['performance']
Performance,"> Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?. I poorly worded my explanation. I was attempting to say that the geometries are virtually the same but not numerically, they are both well converged. I assumed the discrepancy was just a numeric difference and there have been various tweaks as well over the last few years to the algorithm. There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. > Is .log where all the optking detailed output goes now? I guess we ought to start collecting them. output.log, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR. Yes optking's detailed output goes to `.log` but it isn't strictly speaking necessary for the user to see the detailed logs I would say. However, if the test is failing it might be nice to have a more detailed optimization record to compare against if the optimizer is at fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435:1236,optimiz,optimization,1236,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:166,perform,performance,166,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354,2,"['bottleneck', 'perform']","['bottlenecks', 'performance']"
Performance,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288896856:403,optimiz,optimizations,403,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856,2,['optimiz'],"['optimizations', 'optimized']"
Performance,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. It sort of sounds like the code should do a Gram-Schmidt to reorthogonalize the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869301276:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869301276,1,['optimiz'],['optimizations']
Performance,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. That also means that the first energy is non-variational...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869305662:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305662,1,['optimiz'],['optimizations']
Performance,"> Have you thought about emitting a warning for cases which converge to within `1e-3` but not within `1e-6`?. In my experience, it's not worth warning about. > Also, if `1e-3` is deemed good enough to go on, why bother converging to `1e-6` in the first place?. My reasons are primarily aesthetic. This is a very cheap optimization, so while there's no practical benefit, there is also no practical cost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522:318,optimiz,optimization,318,https://psicode.org,https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522,1,['optimiz'],['optimization']
Performance,"> Hey all, I have updated the code to account for the two density matrices present in UHF.; > ; > I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance.; > ; > I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz). Link to my tests:. https://docs.google.com/spreadsheets/d/1PDt8LPHo_kWV-ukY3Zm24qJUc-QLf5Cv7CXCKkYzFvs/edit?usp=sharing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847:214,perform,performance,214,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847,1,['perform'],['performance']
Performance,"> Hi Yi,; > ; > Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:236,optimiz,optimization,236,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['optimiz'],['optimization']
Performance,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-289561812:333,optimiz,optimization,333,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812,1,['optimiz'],['optimization']
Performance,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1091,optimiz,optimization,1091,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,1,['optimiz'],['optimization']
Performance,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:542,perform,performant,542,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,3,"['optimiz', 'perform']","['optimized', 'performant']"
Performance,"> I looked into this. I believe that this method is responsible for the lack of scaling:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 66; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > void PCMPotentialInt::compute(PCMPotentialIntFunctor &functor) { ; > ; > ; > ; > ; > ; > Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 147; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > potential_recur_->compute(PA, PB, PC, gamma, am1, am2); ; > ; > ; > ; > ; > ; > The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance).; > I can think of two possible solutions to this problem:; > ; > Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; > Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory.; > ; > I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions. I tried to add openmp parallelism by the first method. Although it did run faster, it consum much more memory. so sad...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993:869,perform,performance,869,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993,1,['perform'],['performance']
Performance,"> I may not be following this right. I'd say the state of the psi4 active mol during an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on should be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. I want to make sure that the active molecule behavior is as expected. Whatever molecule the driver uses will be updated. This will be either the active molecule OR the passed molecule. If the molecule is passed the active molecule is not updated in any way. All the asserts pass here. ```python; import math. molecule h2o {; pubchem:water; }. molecule h2o2 {; pubchem:hydrogen peroxide; }. # quick comparison. h2o2 is active molecule; h2o2_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_nre, active_nre). # optimize h2o2 (active molecule) expect repulsion energy to match; E = optimize(""scf/sto-3g""); h2o2_opt_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre). # optimize h2o. nuclear repulsion does not match. active molecule is still h2o2; # Currently (next commit will fix) h2o2 would be optimized by this call. (optking side issue); E = optimize(""scf/sto-3g"", molecule=h2o); h2o_opt_nre = h2o.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre); ```; The whole wrong molecule being optimized thing is an optking side issue that is fixed on optking/master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555:88,optimiz,optimization,88,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555,7,['optimiz'],"['optimization', 'optimize', 'optimized']"
Performance,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:641,perform,performance,641,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,2,"['load', 'perform']","['loaded', 'performance']"
Performance,"> I think it adds `-g` currently, but allows the compiler to use its default optimization (usually `-O2`), which often trips up debuggers. I can confirm this. I've been passing the `-O0` flag manually when trying to figure this bug out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822605460:77,optimiz,optimization,77,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822605460,1,['optimiz'],['optimization']
Performance,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:523,perform,performed,523,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:884,perform,performs,884,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['perform'],['performs']
Performance,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:830,optimiz,optimization,830,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966,1,['optimiz'],['optimization']
Performance,"> IIRC speedups of seminumerical methods increase with larger basis sets, so you may want to benchmark those as well... You’re totally right. I have DZ timings, which agree with your statement. I need to run QZ eventually. Side note: the integral bound used in this PR is looser for higher angular momentum. I expect future improvements to this integral bound to make the performance of higher angular momentum basis sets even better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065:372,perform,performance,372,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065,1,['perform'],['performance']
Performance,"> In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:544,optimiz,optimized,544,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,2,['optimiz'],"['optimized', 'optimizer']"
Performance,> Interesting idea to drop the duplicate shells. We generally consider that the total drop is pretty small and haven't worried about optimizing for this case much. For example coronene aug-cc-pVTZ duplication is only about 15% which is a pretty extreme case. Do you have example where very large numbers of AO's are dropped?. See the paper on arXiv. I think the usual use case would be multiply augmented basis sets that are needed for special applications. But the current implementation will go a long way to make sure the program works even for these pathological cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-562826868:133,optimiz,optimizing,133,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-562826868,1,['optimiz'],['optimizing']
Performance,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738003:64,load,loading,64,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003,2,['load'],"['loaded', 'loading']"
Performance,"> One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?. But that's only true for small basis sets. If you run small to moderate sized molecules with triple-zeta basis sets, DF is very fast.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937512242:126,optimiz,optimized,126,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937512242,1,['optimiz'],['optimized']
Performance,"> One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?. The only way you will convince me is with a thorough timings benchmark across a variety of system sizes. _That said_, such a change is outside the scope of this PR anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887:126,optimiz,optimized,126,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887,1,['optimiz'],['optimized']
Performance,"> So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc. Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847:113,queue,queue,113,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847,2,['queue'],['queue']
Performance,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:740,Perform,Performing,740,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,1,['Perform'],['Performing']
Performance,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:146,perform,perform,146,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381,1,['perform'],['perform']
Performance,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:941,optimiz,optimization,941,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718,1,['optimiz'],['optimization']
Performance,"> The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule.; > ; > This is the call. `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`; > ; > optking takes the molecule here in the driver and uses a default fallback instead: ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`; > ; > The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655:333,optimiz,optimize,333,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655,2,['optimiz'],"['optimization', 'optimize']"
Performance,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:358,perform,performance,358,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,1,['perform'],['performance']
Performance,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344762514:79,optimiz,optimization,79,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514,2,['optimiz'],['optimization']
Performance,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347904720:744,optimiz,optimization,744,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720,1,['optimiz'],['optimization']
Performance,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:979,perform,perform,979,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908,2,['perform'],"['perform', 'performance']"
Performance,"> Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Please update `.ref` files. Probably not worth adding `.log` files, but that's a @loriab question. > There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. . Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318:637,optimiz,optimizers,637,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318,1,['optimiz'],['optimizers']
Performance,"> Yeah, for larger / more diffuse basis functions, it's often hard to converge w/ incremental fock. I've already mentioned this in the [docs](https://psicode.org/psi4manual/master/scf.html#cosx-exchange).; > ; > In general, incremental fock gets you only a very small speedup with COSX. This is because the last SCF iteration (performed on a large grid) is much more expensive than the other iterations (performed on a small grid), and the last iteration can't be done with a difference density matrix. For this reason, I generally set the `COSX_INCFOCK` option to `FALSE` when I use the JK algorithm, and I had meant to make this the default behavior. In his timings of `COSX`, @davpoolechem found discrepancies between timings (on larger systems) for doing incfock every iteration (current policy in COSX) and not doing incfock every iteration (this PR), so I believe that `incfock` being ON vs OFF would lead to significant speedups, at least for larger systems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1215706579:327,perform,performed,327,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1215706579,2,['perform'],['performed']
Performance,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:297,cache,cached,297,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,3,['cache'],['cached']
Performance,"> should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference?. I just implemented these suggested changes. Makes the code a bit nicer since calls; to `mints.ao_efp_multipole_potential` can be left as they are at the moment, and the re-mapping is not spilled over to EFP code. The following files could be removed now:; - `efpmultipolepotential.hh`; - `efpmultipolepotential.cc`. These files are used in:; - `integral.cc`. Before proceeding, I need an OK/suggestions from you guys, @loriab, @andysim, @jturney.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-500113924:102,perform,performs,102,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500113924,1,['perform'],['performs']
Performance,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:984,queue,queue,984,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,1,['queue'],['queue']
Performance,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:200,load,load,200,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['load'],['load']
Performance,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:63,perform,perform,63,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826,2,['perform'],"['perform', 'performed']"
Performance,">> An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way. I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808:117,optimiz,optimization,117,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808,2,['optimiz'],['optimization']
Performance,">> the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). > Is this going to be a long-term state of affairs? I'd love to add more analytic hessians. It's likely to be semi-permanent for Windows. (Resolution would involve partitioning the 2nd deriv ERIs to a separate build group with lower optimization (as JMT does) and some good luck that they still compile quicker. Or petitioning to upload a hand-built package instead of relying on their CI build services, and I wouldn't like to do that before the L2 code is properly upstream.). But none of this is a block to new analytic hessians. Linux and Mac or anyone building L2 from source (with proper settings) is able to take adv of anal. H. And any new ones won't need extra work-around code, only a label for their tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150:480,optimiz,optimization,480,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150,1,['optimiz'],['optimization']
Performance,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:681,optimiz,optimized,681,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,1,['optimiz'],['optimized']
Performance,"@JonathonMisiewicz After successfully completing one step, it appears to be switching from using SAD, to using previous orbitals despite my having set guess to sad. ```; Successfully symmetrized geometry. ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria o 4.50e-04 * 3.00e-04 * 1.80e-03 * 1.20e-03 * ~; --------------------------------------------------------------------------------------------- ~; 1 -1520.83247764 -1.52e+03 o 2.87e-02 6.52e-03 1.12e+00 2.74e-01 ~; ---------------------------------------------------------------------------------------------. Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.3082647324 2.3190588090 2.4662144199; C 1.2994401676 1.9841371839 2.6252591212; O 1.9613330035 1.5293126579 1.6982686350; O 1.9487730658 2.2253118158 3.9589994443; C -1.2637575308 1.7972383826 1.0887300503; C -2.8394127991 2.3213315802 1.0116494590; C -3.7509980721 1.6807278062 2.2931752326; O -3.8504096207 2.3153516037 3.3633546508; O -4.5178176253 0.3904174599 2.0757387449; C -1.3759292896 0.0921611935 1.1005734307; O -0.8241227821 -0.7339800728 2.0937447856; O -2.0658921497 -0.3998131349 -0.1385874282; O -0.6219920417 2.4852394292 -0.1951904942; H -0.3231747331 3.5031540765 2.4416857576; H -0.7901754068 1.8479833570 3.4773721250; H 2.9672568222 1.9953691785 3.9096102485; H -3.4471447933 2.0212696600 -0.0256899111; H -2.7529115441 3.5237308050 0.9794914513; H -5.0374668500 0.1438676436 2.9887272170; H -1.8948356360 -1.5118861166 -0.0506847242; H -0.0777476573 1.7695454328 -0.5991466202; C 0.4741700051 -1.8080097129 -3.0796",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:963,optimiz,optimization,963,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['optimiz'],['optimization']
Performance,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:346,Perform,Performing,346,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,2,['Perform'],['Performing']
Performance,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:830,optimiz,optimize,830,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262,2,['optimiz'],"['optimize', 'optimized']"
Performance,"@JonathonMisiewicz can you send an example input?. Also, you might want to run a valence-only orbital optimization followed by a full single-point calculation, since it's well known that OO-CC does not reproduce full CI, and the optimization should be much better conditioned within the valence space in analogy to MRCI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-441470665:102,optimiz,optimization,102,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-441470665,2,['optimiz'],['optimization']
Performance,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:282,optimiz,optimization,282,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,5,['optimiz'],"['optimization', 'optimizations', 'optimize', 'optimizer']"
Performance,"@TermeHansen so you are furthermore running a geometry optimization, not just SCF..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432294556:55,optimiz,optimization,55,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432294556,1,['optimiz'],['optimization']
Performance,"@TiborGY That's a good idea! False sharing is a reasonable thing to think about. From what I've just now read, it sounds like false sharing occurs when two threads repeatedly write to nearby array elements, invalidating cached values of those elements. In this minimal test case, the threads aren't writing to any shared data, so I don't think false sharing applies here. However, it's something I'll look out for in the actual semi-numerical exchange implementation. @jturney I haven't gotten desperate enough to learn VTune yet, but I'm getting close. @hokru Thank you! The changelog entry would perfectly explain this strange behavior. I'll wait for #2413 before doing any more investigation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869:220,cache,cached,220,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869,1,['cache'],['cached']
Performance,"@amjames Is this ""smaller"" dimension by dimension?. I'm lost on what ""shared state"" has to do with this problem. Because the relevant codes are orbital-optimized, the integrals in file61 when the bug occurs are transformed into the orbitals optimal for MP2. The DCT code starts from a different set of orbitals. (The NSOs of MP2, as I recall?) The orbital state of OMP2 is not supposed to be shared. As for Lori's comment, _is_ there a row/column convention? I had assumed there was.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435206500:152,optimiz,optimized,152,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435206500,1,['optimiz'],['optimized']
Performance,"@andysim I have add the print statement and made *Azure* to run the test. It produces, the following output:; ```; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; DIMENSIONS 2 4; ```. The same output I get on *Linux* with GCC 7.3.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310:115,Perform,Performing,115,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310,1,['Perform'],['Performing']
Performance,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-349813447:241,perform,performance,241,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447,1,['perform'],['performance']
Performance,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198786718:472,optimiz,optimization,472,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718,1,['optimiz'],['optimization']
Performance,"@bennybp I used this [gist](https://gist.github.com/dgasmith/876687198a62d1af417ab7f0622b48fb) to time the integrals. . If you have the output for a large `ao_potential` I would be curious to see what is taking time in `compute_shell` for 4+ threads. Im guessing its an IOPS thing as well. Well, at least we should have the dcopy bottleneck removed in Psi4 1.2. Before then we could write you a dense DFJK if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276106444:330,bottleneck,bottleneck,330,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276106444,1,['bottleneck'],['bottleneck']
Performance,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:32,optimiz,optimizations,32,https://psicode.org,https://github.com/psi4/psi4/issues/893,2,['optimiz'],['optimizations']
Performance,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192822036:845,Perform,Performing,845,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036,3,['Perform'],['Performing']
Performance,"@dgasmith a proper implementation of double hybrid functionals would also consider the MP2 contribution in the orbital optimization like OO-MP2, but nobody does this in practice. So, I think that double hybrid densities are given just by the KS part i.e. they don't include the MP2 response density. Because this method is inconsistent, weird things can be expected to happen if you push the theory too far. For instance, Hait and Head-Gordon have demonstrated dipole moments and polarizabilities of double hybrid functionals going haywire at non-chemical geometries, since MP2 goes unstable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1333#issuecomment-436044159:119,optimiz,optimization,119,https://psicode.org,https://github.com/psi4/psi4/issues/1333#issuecomment-436044159,1,['optimiz'],['optimization']
Performance,"@dgasmith: psimrcc does not compute NOs or change orbitals/integrals/etc so I am fine with both solutions. I prefer to pass back the RHF wfn or whatever alternative solution that does not to break the ability to do numerical optimization, since we actually use this feature. I'll be glad to work on psimrcc once we settle on a solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-192482520:225,optimiz,optimization,225,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-192482520,1,['optimiz'],['optimization']
Performance,"@fevangelista reports another variation. `Weird symmetry issue (Unrecognized point group bits: 118)`; ```; import psi4; psi4.geometry(""""""; C 0.0000000338 -0.0000000615 0.0000000000; H 0.5543428106 0.3093570276 0.8977720468; H 0.5543428106 0.3093570276 -0.8977720468; H -0.9918391174 0.4746024041 0.0000000000; H -0.1168469058 -1.0933157267 0.0000000000; symmetry c1; """"""); psi4.optimize('scf/def2-SVP'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-948069284:378,optimiz,optimize,378,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-948069284,1,['optimiz'],['optimize']
Performance,"@hokru, thanks for the reference. It would seem based on that paper that we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:931,perform,perform,931,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['perform']
Performance,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:247,queue,queue,247,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,2,['queue'],['queue']
Performance,"@jturney, @andysim, should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference? That `mints.ao_efp_multipole_potential` call is in psi4numpy, the pylibefp tests as well as here in the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732:120,perform,performs,120,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732,1,['perform'],['performs']
Performance,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:662,perform,performing,662,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975,2,"['optimiz', 'perform']","['optimize', 'performing']"
Performance,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:319,optimiz,optimize,319,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,1,['optimiz'],['optimize']
Performance,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:781,queue,queue,781,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214,1,['queue'],['queue']
Performance,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170844312:513,cache,cache,513,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312,1,['cache'],['cache']
Performance,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:551,perform,performance,551,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['perform'],['performance']
Performance,"@loriab Correct: I believe there's a symmetrization step missing. I forget exactly where it was done before, but things like benzene are commonly retrieved with coords that are effectively C1. There's (molecule?) member function somewhere that allows symmetrization to a given tolerance (something really sleazy like 0.01A is needed, IIRC) so it's just a case of calling that. A simple STO-3G optimization could be a good followup step, but that's not essential.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382854005:393,optimiz,optimization,393,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382854005,1,['optimiz'],['optimization']
Performance,"@loriab I am pretty sure that switching OpenBLAS to OMP threading does squash the built in pthreads mechanism, BUT that may be acceptable. I think the OMP version can do everything the pthreads version can, but it is slower. So AFAIK, there is a performance impact, but not a functionality impact. So it probably would not break other projects, but some people might get pissed due to the performance hit.; My suggestion would be to create a separate OpenBLAS_OMP conda package, and just make a new numpy package as well, compiled with OpenBLAS_OMP. I am not familiar with how conda works, so that might not be feasible, but that would probably be the cleanest and most consistent solution. @martin-frbg any comments regarding this situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390266813:246,perform,performance,246,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390266813,2,['perform'],['performance']
Performance,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249681177:205,load,loading,205,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177,1,['load'],['loading']
Performance,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:654,perform,performing,654,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045,2,"['optimiz', 'perform']","['optimize', 'performing']"
Performance,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:201,load,loaded,201,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,1,['load'],['loaded']
Performance,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:612,Perform,Performing,612,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:678,optimiz,optimization,678,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,1,['optimiz'],['optimization']
Performance,"@loriab Travis is running on a few branches, so we have topped our 5 (free!) concurrent tasks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-260035077:77,concurren,concurrent,77,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-260035077,1,['concurren'],['concurrent']
Performance,"@loriab `v1.2.1` tagged. With all necessary fixes this time, at least from my testing. I've updated docs and tests. The DALTON inputs and output files for the geometry optimization test are also included.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-386082337:168,optimiz,optimization,168,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-386082337,1,['optimiz'],['optimization']
Performance,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708:352,load,load,352,https://psicode.org,https://github.com/psi4/psi4/issues/708,1,['load'],['load']
Performance,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:530,optimiz,optimized,530,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,1,['optimiz'],['optimized']
Performance,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:38,perform,performance,38,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,7,"['bottleneck', 'latency', 'perform']","['bottleneck', 'latency', 'performance']"
Performance,"@loriab the problem with the pytests, that when they run concurrently, they share the same directory and create/delete the same files, which cause problems. Last your commit just hides that. So for the moment the pytests on Windows will be serial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445765918:57,concurren,concurrently,57,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445765918,1,['concurren'],['concurrently']
Performance,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:591,optimiz,optimized,591,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,1,['optimiz'],['optimized']
Performance,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:608,cache,cache,608,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,4,['cache'],"['cache', 'cachelevel']"
Performance,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344761262:1101,optimiz,optimization,1101,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262,1,['optimiz'],['optimization']
Performance,@psi-rking @AlexHeide . The following input file is killed after the first gradient:; ```; memory 500 mb; set basis 6-31g**; set optking { opt_coordinates = cartesian }. molecule chcl {; Cl 0.7796000000 0.2288000000 0.1645000000; C 0.9471000000 0.9465000000 0.3434000000; C 0.4471000000 0.5535000000 0.6566000000; C 0.0529000000 0.4465000000 0.1566000000; C 0.5529000000 0.0535000000 0.8434000000; C 0.9001000000 0.0666000000 0.6727000000; H 0.8700000000 0.8890000000 0.4120000000; H 0.3700000000 0.6110000000 0.5880000000; H 0.1300000000 0.3890000000 0.0880000000; H 0.6300000000 0.1110000000 0.9120000000; H 0.0120000000 0.8880000000 0.2660000000; H 0.5120000000 0.6120000000 0.7340000000; H 0.9880000000 0.3880000000 0.2340000000; H 0.4880000000 0.1120000000 0.7660000000; H 0.9160000000 0.0180000000 0.2470000000; H 0.4160000000 0.4820000000 0.7530000000; H 0.0840000000 0.5180000000 0.2530000000; H 0.5840000000 0.9820000000 0.7470000000; H 0.8180000000 0.0080000000 0.6950000000; H 0.3180000000 0.4920000000 0.3050000000; N 0.9955000000 0.9963000000 0.5575000000; O 0.1222000000 0.1085000000 0.1167000000; }. optimize('blyp'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627:1115,optimiz,optimize,1115,https://psicode.org,https://github.com/psi4/psi4/issues/2627,1,['optimiz'],['optimize']
Performance,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:49,load,loaded,49,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783,4,"['load', 'optimiz', 'perform']","['loaded', 'optimize', 'optimizer', 'performs']"
Performance,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:915,optimiz,optimizations,915,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['optimiz'],['optimizations']
Performance,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203491619:118,optimiz,optimization,118,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619,1,['optimiz'],['optimization']
Performance,"@psi-rking, why is my gradient non-zero at the end of a successful geometry optimization, please? Below is runable input file with details of problem. ```; # these are the conditions, a purely conventional (we're going to be; # comparing to Q-Chem) MP2/cc-pVTZ optimization. set basis cc-pvtz; set g_convergence gau_verytight; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core false. # the gradient that any fully optimized molecule should match, more or less. zerograd = psi4.Matrix(5,3); refgrad = [; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:76,optimiz,optimization,76,https://psicode.org,https://github.com/psi4/psi4/issues/310,3,['optimiz'],"['optimization', 'optimized']"
Performance,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:781,tune,tune,781,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['tune'],['tune']
Performance,"@raimis I think you are correct about this, although I suspect the performance tradeoff is likely trivial compared to other things. I believe this switch would be better practice in Psi4, but let @dgasmith decide on this one. Good catch!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-419107766:67,perform,performance,67,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-419107766,1,['perform'],['performance']
Performance,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:218,load,loaded,218,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,1,['load'],['loaded']
Performance,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311739442:80,load,loading,80,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442,1,['load'],['loading']
Performance,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:85,optimiz,optimize,85,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559,1,['optimiz'],['optimize']
Performance,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-178215766:508,perform,perform,508,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766,1,['perform'],['perform']
Performance,"@sunqm; @dgasmith . Perhaps one last comment:. There are advantages with the irrep ordering of psi4, chemps2 and pyscf, which Qiming told me. You can use bitwise XOR for performing the group operation. So I thoroughly agree that the convention is better. I guess that trying to amend the FCIDUMP format, also in openMolcas and Molpro, will yield significant compatibility and backwards compatibility issues, so this is not an option. But perhaps it wouldn't be bad to establish an own integral dump standard anno 2019, some 30 years of development having occurred since the FCIDUMP file (Comp. Phys. Commun. 54 75 (1989)). I know that openMolcas is also investing time and effort in hdf5, so perhaps something can be done in that direction? Perhaps reach out to them? It doesn't make sense to represent one double with some 20-ish 8-bit characters in a text format. The best arguments in favor of FCIDUMP are readability and manual adjustment, at least the former of which seems not to hold up against hdf5. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449622007:170,perform,performing,170,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449622007,1,['perform'],['performing']
Performance,"@susilehtola ; You're talking about a different orbital-optimization algorithm. I can organize the code so that it's relatively easy to reuse the ""key pieces"", including DIIS, for different algorithms, but new OCC algorithms are outside the scope of this project. Maybe after I get frozen core energies/gradients working.; I'll also add that the orbital-optimization code isn't centralized, so active space calculations aren't handled by OCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496:56,optimiz,optimization,56,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496,2,['optimiz'],['optimization']
Performance,"@susilehtola You should not have to explicitly provide the function template in the example you gave. In roberto's example, the function call will deduce that `T` is double from the arguments, and the return value will be cast to `float`. In your example the template parameter is not needed as with the arguments `1.0f`, and `2.0f` the compiler will deduce that `T` is float. . If you wanted to be able to mix types, the function template would have two parameters, and you would either need to use some template-fu to decide if the return type should be one or the other, or if any of the arguments should be cast. Or you could just let the compiler do all of it for you with a lambda (c++14+ only). . ```c++; auto add = [](auto a, auto b) {return a+b;};; ```. Class templates on the other hand would *always* need to have their template arguments fully specified even if instantiations of the template have been declared. Prior to c++17, there is no template parameter deduction performed on class templates, only function templates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-433140820:982,perform,performed,982,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-433140820,1,['perform'],['performed']
Performance,@xiexr151e you should install the BLAS/LAPACK development package using your linux distribution's package manager. (Note that you should install an optimized implementation such as ATLAS or OpenBLAS instead of the reference BLAS/LAPACK implementation.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380550429:148,optimiz,optimized,148,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380550429,1,['optimiz'],['optimized']
Performance,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:204,perform,performance,204,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,1,['perform'],['performance']
Performance,"A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > * 5 0.015212 ( 1, 1) 7AX 9AX; >; > * 6 0.000000 ( 1, 0) 7AX 8AB 9AA; >; > * 7 0.000000 ( 0, 1) 7AX 8AA 9AB; >; > * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX; >; > * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX; >; >; > ------------------------------; > ------------------------------; >; > As you can see, there is typically the same kind of sign for some; > determinants sharing a similar coefficient. For example, for the; > groundstate we have : -0.691216 ( 0, 1) 7AX 8AA 9AB and -0.691216 ( 1, 0); > 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these; > determinants should present opposite signs. To check this, I used a; > personal code to build up from scratch the frozen core Hamiltonian; > associated to the (4,3) active space. I used for this the resulting; > Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this; > Hamiltonian gives the following two lowest states expressed in the active; > space :; > | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; > | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩; > - 0.887|111100⟩; > (NB : the HF determinant is |111100⟩ ); >; > With this diagonalization, we clearly find same coefficients but with; > opposite signs. As a double check, I also computed the energy of these; > states and obtained :; > E_0 = -93.93144865003578 Ha; > E_1 = -93.90255033754423 Ha; >; > Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do; > you have a clue why such a pb arises in the Psi4 output ?; >; > Thanks a lot for you answer; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2008>, or unsubscribe; > <https://github.com/notificati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:3891,Optimiz,Optimized,3891,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['Optimiz'],['Optimized']
Performance,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:712,throughput,throughput,712,https://psicode.org,https://github.com/psi4/psi4/issues/2825,1,['throughput'],['throughput']
Performance,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:79,optimiz,optimization,79,https://psicode.org,https://github.com/psi4/psi4/issues/1298,3,['optimiz'],"['optimization', 'optimize']"
Performance,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311869326:120,load,loaded,120,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326,6,['load'],['loaded']
Performance,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124775223:34,optimiz,optimization,34,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223,2,['optimiz'],['optimization']
Performance,"A fresh compile of psi4 1.9.1 on Fedora (yay, finally updating from 1.3.2!) fails to run; all the tests fail with the error; ```; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Exit Status: overall (1); ```; which suggests that there is critical path code that is accessing a `std::vector` out-of-bounds. All Fedora packages are compiled with the following default optimization flags; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214:592,optimiz,optimization,592,https://psicode.org,https://github.com/psi4/psi4/issues/3214,1,['optimiz'],['optimization']
Performance,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:853,Perform,Performing,853,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Perform'],['Performing']
Performance,"A recent [forum post](http://forum.psicode.org/t/how-to-read-multiple-external-geometry-files-improve-documentation/2044) has brought to light more holes in the Psi4 documentation. 1. The [advanced python](https://psicode.org/psi4manual/master/psithonmol.html?highlight=xyz#advanced-python) section refers to `init_with_xyz`. Thanks to Lori, this method no longer exists. All references to this method should be replaced.; 2. Because Psi4 input files are parsed as Python, it's possible to include valid Python in a Psi files, and it just runs. While we mention this in the [Psithon tutorial](https://psicode.org/psi4manual/master/tutorial.html) (first light bulb), that section is billed as the difference between Psithon and PsiAPI. Somewhere in there, we should explicitly make the point that for use beyond molecule specification and top-level driver function call, writing Python code in the Psithon file is likely the way to go.; 3. Particular application: We should demonstrate how to read in a geometry from xyz file. This is a very important use case if we want to bill Psi4 as ""for high-throughput quantum chemistry.""; 4. Particular application: Not directly related to molecule reading, but we should also document how to read in an SCF guess. This has recently caused some vexation even here at UGA, and is another reasonably common use case. [This forum post](http://forum.psicode.org/t/custom-guess-for-hartree-fock/2026/6?u=jmisiewicz) of mine should explain how it's done, but whoever works on this should confirm it works. I'm also open to this being a cookbook example.; 5. `Molecule.from_string` is not [properly documented](https://psicode.org/psi4manual/master/psi4api.html?highlight=from_string#psi4.core.Molecule.from_string). We should document the Python function, so the Sphinx knows about it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2105:1097,throughput,throughput,1097,https://psicode.org,https://github.com/psi4/psi4/issues/2105,1,['throughput'],['throughput']
Performance,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:461,load,load,461,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,1,['load'],['load']
Performance,"A single service is nice. But Azure is both much faster and provides more concurrent resources. We originally didn't dive too much into Azure due to its relative complexity, but switching over only took an afternoon of trying.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776#issuecomment-572037458:74,concurren,concurrent,74,https://psicode.org,https://github.com/psi4/psi4/pull/1776#issuecomment-572037458,1,['concurren'],['concurrent']
Performance,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-157541405:422,Perform,Performing,422,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405,2,['Perform'],['Performing']
Performance,AG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Looking for include file dlfcn.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2692,Perform,Performing,2692,https://psicode.org,https://github.com/psi4/psi4/issues/36,14,['Perform'],['Performing']
Performance,"ALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11414,optimiz,optimized,11414,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20368,optimiz,optimized,20368,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5149,CACHE,CACHE,5149,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,1,['CACHE'],['CACHE']
Performance,"ARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PRO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1644,optimiz,optimizes,1644,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,1,['optimiz'],['optimizes']
Performance,"According to the docs (https://psicode.org/psi4manual/master/autodir_options_c/module__ccenergy.html#cachelevel), the maximum value of cachelevel is 6. This is wrong, trying to use a cachelevel of 6 or 5 results in an invalid cachelevel error message. The largest cachelevel that appears to work is 4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:101,cache,cachelevel,101,https://psicode.org,https://github.com/psi4/psi4/issues/2701,5,['cache'],['cachelevel']
Performance,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:603,optimiz,optimizer,603,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961,1,['optimiz'],['optimizer']
Performance,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:94,optimiz,optimized,94,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,6,['optimiz'],['optimized']
Performance,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307928747:127,optimiz,optimized,127,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747,1,['optimiz'],['optimized']
Performance,"After each exit of any run the following crash happens:. ``` bash; Program received signal SIGSEGV, Segmentation fault.; subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:686,optimiz,optimized,686,https://psicode.org,https://github.com/psi4/psi4/issues/8,4,['optimiz'],['optimized']
Performance,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:689,optimiz,optimization,689,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,1,['optimiz'],['optimization']
Performance,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:146,optimiz,optimizer,146,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,1,['optimiz'],['optimizer']
Performance,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:69,optimiz,optimization,69,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,1,['optimiz'],['optimization']
Performance,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196005999:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999,3,['optimiz'],"['optimize', 'optimized', 'optimizer']"
Performance,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:60,perform,performance,60,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124,1,['perform'],['performance']
Performance,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184220315:335,perform,performing,335,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"Ah, I see, you're running out of time in the queue. If there is more demand for this, we can revisit the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-37977917:45,queue,queue,45,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37977917,1,['queue'],['queue']
Performance,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:1053,load,loads,1053,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,1,['load'],['loads']
Performance,"All converge in about 8 iterations with `set guess sad`. SAD is generally the best guess. Were it not for awkward performance issues with really large basis sets, it would be the default. Someday we'll fix those performance issues and make it the default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340#issuecomment-209218271:114,perform,performance,114,https://psicode.org,https://github.com/psi4/psi4/issues/340#issuecomment-209218271,2,['perform'],['performance']
Performance,"All the symmetry detection in the Molecule class is through `tol` arguments for individual methods. For the Molecule as a whole, this is controlled by `DEFAULT_SYM_TOL`, which is compiled in. This means one can't just dial down the symmetry tolerance for an entire optimization. For this ticket, make the `tol` parameter not a preprocessor option but a bit of member data. Make a set function for this. Export it to python.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232:265,optimiz,optimization,265,https://psicode.org,https://github.com/psi4/psi4/issues/232,1,['optimiz'],['optimization']
Performance,"Allenes, yeah, 'too linear' and like to make trouble.; The backtransform broke the molecule, look at most of the `Change` values. They are huge!. I tried a few things and typical solutions like `set DYNAMIC_LEVEL 1` or `opt_coordinates delocalized` do not work well.; Also geomeTRIC is behaving oddly. Tested with pw6b95 instead of pwpb95. If you want something more reliable I can recommend cartesian coordinates and a computed initial hessian.; Optimisation with cartesian coordinates is usually slow, but actually OK with a decent initial hessian.; `set opt_coordinates cartesian `. Automatic initial hessian at a different (cheaper) level is easily done:; ```; set FULL_HESS_EVERY 0; optimize('pwpb95-d3bj',hessian_with='pbe0-d3bj/def2-SV(P)'); ```; usually no need to go beyond the above level, even PBE would be OK I think. Also this hessian will be numerical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091:688,optimiz,optimize,688,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091,1,['optimiz'],['optimize']
Performance,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:176,queue,queue,176,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,1,['queue'],['queue']
Performance,"Alrighty, I've figured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:573,optimiz,optimize,573,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914,1,['optimiz'],['optimize']
Performance,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:16,cache,cache,16,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734,1,['cache'],['cache']
Performance,"Ambitious to hand-format read_options :-). What's wrong with the c-f of it, though? I can see that things like the below might need adjustment, but at a glance, it looked pretty respectful. line-break formatting isn't conveyed to the manual anyways. ```; options.add_str(""CFOUR_BASIS"", ""SPECIAL"",; ""STO-3G 3-21G 4-31G 6-31G 6-31G* 6-31G** 6-311G 6-311G* 6-311G** DZ DZP TZ TZP TZ2P PVDZ PVTZ ""; ""PVQZ PV5Z PV6Z PCVDZ PCVTZ PCVQZ PCV5Z PCV6Z AUG-PVDZ AUG-PVTZ AUG-PVTZ AUG-PVQZ AUG-PV5Z ""; ""AUG-PV6Z D-AUG-PVDZ D-AUG-PVTZ D-AUG-PVQZ D-AUG-PV5Z D-AUG-PV6Z cc-pVDZ cc-pVTZ cc-pVQZ ""; ""cc-pV5Z cc-pV6Z cc-pCVDZ cc-pCVTZ cc-pCVQZ cc-pCV5Z cc-pCV6Z PWCVDZ PWCVTZ PWCVQZ PWCV5Z ""; ""PWCV6Z PwCVDZ PwCVTZ PwCVQZ PwCV5Z PwCV6Z svp dzp tzp tzp2p qz2p pz3d2f 13s9p4d3f WMR ANO0 ""; ""ANO1 ANO2 EVEN_TEMPERED SPECIAL"");; ```. ```; if (name == ""FINDIF"" || options.read_globals()) {; /*- MODULEDESCRIPTION Performs finite difference computations of energy derivative, with respect to nuclear; displacements; for geometry optimizations and vibrational frequency analyses, where the required analytical derivatives are; not; available. -*/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812:889,Perform,Performs,889,https://psicode.org,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812,2,"['Perform', 'optimiz']","['Performs', 'optimizations']"
Performance,"An input deck would be nice. I'm sure Ed Hohenstein could probably answer; in more detail, but the SAPT codes in PSI4 are designed for SMP parallelism; on a single node, using a mix of OpenMP and threaded BLAS. Moreover, with; high-level SAPT jobs (2+3, etc), there is a non-trivial amount of I/O to be; performed (certainly much less than without DF, but still non-trivial).; Using a build with icpc/MKL, a dedicated scratch array, 64 GB of memory,; and 6 or 8 cores (a single i7 or two quad-core Xeons), we are able to run; SAPT2+3(CCD) jobs with up to 1100 nbf/30 atoms (in an aTZ basis) in about a; week of wall time. Much larger than this and the memory will certainly; become rate limiting. Are you guys trying to run this over a pNFS or something? What BLAS are you; linking against?. -Rob. On Mon, Apr 28, 2014 at 8:03 PM, rxk900 notifications@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:304,perform,performed,304,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['perform'],['performed']
Performance,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:88,optimiz,optimized,88,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,1,['optimiz'],['optimized']
Performance,Another geometry optimization crash,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/2213,1,['optimiz'],['optimization']
Performance,"Another, presumably similar, case from @fevangelista . ```; molecule {; O 0.611390115614 -0.000006716468 0.000000000000; C -0.613209884386 -0.000006716468 0.000000000000; H -1.200909884386 0.242593283532 -0.899800000000; H -1.200909884386 -0.242406716468 0.899800000000; symmetry c1; }; optimize('b3lyp/def2-SVP'); ```. ""fixed"" by using `opt_coordinates both`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-689488825:287,optimiz,optimize,287,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-689488825,1,['optimiz'],['optimize']
Performance,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152804235:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235,1,['optimiz'],['optimization']
Performance,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1266:787,TUNE,TUNED-CAM-,787,https://psicode.org,https://github.com/psi4/psi4/issues/1266,1,['TUNE'],['TUNED-CAM-']
Performance,"As Lori mentioned an alternate way with qcengine, psi4, torsiondrive and geometric combo is as follows: . ```; from qcelemental.models import Molecule, DriverEnum; from qcelemental.models.common_models import Model; from qcelemental.models.procedures import OptimizationSpecification, QCInputSpecification, TDKeywords, TorsionDriveInput; from qcengine import compute_procedure; from matplotlib import pyplot as plt. def return_td_result(qcmol, dihedrals, method, program, basis):; result = compute_procedure(; input_data=TorsionDriveInput(; keywords={; ""dihedrals"": [dihedrals],; ""grid_spacing"": [20]; },; input_specification=QCInputSpecification(; driver=DriverEnum.gradient,; model=Model(method=method, basis=basis); ),; initial_molecule=[qcmol,],; optimization_spec=OptimizationSpecification(; procedure=""geomeTRIC"",; keywords={; ""coordsys"": ""dlc"",; ""maxiter"": 300,; ""program"": program,; }; ); ),; local_options={""ncores"": 8, ""jobs_per_node"":1, ""scratch_directory"":""/tmp/""},; procedure=""torsiondrive""; ); energies = list(result.final_energies.values()); min_ener = min(energies); energies = [(it-min_ener) * 627.5094740630558 for it in energies]; angles = list(result.final_energies.keys()); angles = [int(it) for it in angles]; angles, energies = zip(*sorted(zip(angles, energies))); return result, angles, energies. def main():; qcmol = Molecule.from_data(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """"""). print(qcmol); dihedrals = [0,1,2,3]; result, angles, energies = return_td_result(method='SCF', qcmol=qcmol, dihedrals=dihedrals, program='psi4', basis='cc-pvdz'). plt.figure(figsize=(12,8)); plt.plot(angles, energies, label=""SCF""); plt.xlabel(""Angles in degrees""); plt.ylabel(""energies in kcal/mol""); plt.legend(); plt.title('TD profile'); plt.savefig(f'torsion_profile.png', bbox_inches='tight'); #plt.show(). if __name_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478:258,Optimiz,OptimizationSpecification,258,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478,2,['Optimiz'],['OptimizationSpecification']
Performance,"As suggested by @andysim on slack, the 2D array of ShellPair objects initialized in eribase.cc (linked below) could be optimized by screening out negligibly small terms. ; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L1905; The two ideas he proposed are:; 1) Shell pair (block) screening: ignore entire shell pairs only when all of their primitive pairs have small enough overlap, otherwise keep the entire shell pair; 2) Primitive pair (fine-grained) screening: individually ignore primitive pairs with small enough overlap, allowing part (or all) of a shell pair to be discarded. For both approaches, I counted how many primitive pairs would be removed in this function over a range of systems/basis sets:; ![image](https://user-images.githubusercontent.com/16376046/48686241-ee3f3700-eb88-11e8-8e69-04ffabca9b39.png); Note that this considers a pair of primitives negligible if the overlap term (shown below) is less than a cutoff of 10e-10, which will likely have to be tuned; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L2026. Block screening would definitely be easier to implement, but it doesn't remove as many primitive pairs as the fine-grained screening. However, the discrepancy between the two methods becomes smaller with both the size of the system and basis set. . Is this discrepancy small enough to justify block screening, or should we go with fine-grained screening? (Also, should I change up the overlap-cutoff / basis sets / test molecules?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1362:119,optimiz,optimized,119,https://psicode.org,https://github.com/psi4/psi4/issues/1362,2,"['optimiz', 'tune']","['optimized', 'tuned']"
Performance,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:31,perform,perform,31,https://psicode.org,https://github.com/psi4/psi4/issues/2291,1,['perform'],['perform']
Performance,"As written on psi4 forum, me and other users experience bad scaling of Pcm calculations. http://forum.psicode.org/t/pcmsolver-parallelisation/817/4. I agree that the actual calculation by pcm solver is only a small fraction of the total time used by psi4, so I currently believe the bottleneck must be on psi4 side. example input and logs and timer for acetic acid with pbe/def2-tzvppd (named pcm and scf accordingly):; [acetic_acid.zip](https://github.com/psi4/psi4/files/2451532/acetic_acid.zip). pcm_4thr:; ```; Total time:; 	user time = 205.49 seconds = 3.42 minutes; 	system time = 1.18 seconds = 0.02 minutes; 	total time = 150 seconds = 2.50 minutes; ```; pcm_1thr:; ```; Total time:; 	user time = 157.73 seconds = 2.63 minutes; 	system time = 0.41 seconds = 0.01 minutes; 	total time = 158 seconds = 2.63 minutes; ```; scf_4thr:; ```; Total time:; 	user time = 66.19 seconds = 1.10 minutes; 	system time = 0.58 seconds = 0.01 minutes; 	total time = 18 seconds = 0.30 minutes; ```; scf_1thr:; ```; Total time:; 	user time = 28.61 seconds = 0.48 minutes; 	system time = 0.25 seconds = 0.00 minutes; 	total time = 29 seconds = 0.48 minutes; ```; standalone pcmsolver call for same pcm input (yes done 10 times in the scf iteration, but no where near of being the bottleneck):; ```; real	0m0.462s; user	0m0.190s; sys	0m0.097s; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280:283,bottleneck,bottleneck,283,https://psicode.org,https://github.com/psi4/psi4/issues/1280,2,['bottleneck'],['bottleneck']
Performance,"At first read-through, that looks reasonable. What are your goals, though? I ask because all the `hessian` ... `print_vibs` section can accomplished by replacing the `hessian()` call with a `frequency()` call. IR intensities are absent because `dipole_derivatives=None`. `frequency()` will pass the data around behind the scenes. Also, there's good physical reasons to do the optimization and frequency at exactly the same level of theory (mtd + basis). Hessian is more expensive than opt, so if anything, the freq is the cheaper level of theory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226646111:376,optimiz,optimization,376,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226646111,1,['optimiz'],['optimization']
Performance,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:343,optimiz,optimized,343,https://psicode.org,https://github.com/psi4/psi4/pull/2788,1,['optimiz'],['optimized']
Performance,"Attempting to run a geometry optimization on molecule at the B3LYP-D/cc-pVTZ level results in the job crashing whenever native symmetry is left on, but the job runs whenever a symmetry of C1 is specified. Further digging resulted in finding out that the job is failing because of a core dump. . Successful input file:. memory 16000 mb. molecule mol {; units Angstrom; symmetry c1 ; N 2.8186748 -1.9320605 0; C 3.9682155 -1.1155139 0; N 3.7348961 0.253345 0; C 2.4718715 0.8928656 0; C 1.3801963 -0.021916 0; C 1.6020129 -1.3565857 0; O 5.0789142 -1.6090969 0; C -1.4704537 -1.662531 1.2276603; C -0.6314352 -1.2778143 0; C -1.4704537 -1.662531 -1.2276603; N -2.7456834 -1.1146331 -1.1876558; N -2.7456834 -1.1146331 1.1876558; C -3.4215193 -0.8181518 0; C -0.4410954 0.996968 -1.2925792; N -0.5390482 2.3631797 -1.1910976; C -0.5061096 3.0855781 0; N -0.5390482 2.3631797 1.1910976; C -0.4410954 0.996968 1.2925792; O -1.0786533 -2.3831691 -2.1082181; O -4.5550423 -0.3852824 0; O -0.5151061 0.4216645 -2.3608946; O -0.5151061 0.4216645 2.3608946; O -0.5222264 4.2956077 0; C -0.1082324 0.2374533 0; O -1.0786533 -2.3831691 2.1082181; O 2.3952343 2.1158161 0; O 0.5199028 -2.1266114 0; C 4.896284 1.1381514 0; H 5.7890291 0.519171 0; H 4.8706699 1.7767416 0.8844252; H 4.8706699 1.7767416 -0.8844252; C 2.9639859 -3.3851463 0; H 4.0304645 -3.5950568 0; H 2.4931226 -3.8054526 -0.8904149; H 2.4931226 -3.8054526 0.8904149; C -3.5099766 -1.1109136 -2.4322518; H -2.8479461 -0.7898524 -3.2353438; H -4.3402724 -0.4197278 -2.3122369; H -3.8914406 -2.1102241 -2.6557968; C -0.593268 3.1660794 2.4125448; H 0.3134452 3.7675492 2.490953; H -0.6696566 2.4797628 3.2512268; H -1.4561479 3.8307515 2.3767475; C -0.593268 3.1660794 -2.4125448; H 0.3134452 3.7675492 -2.490953; H -1.4561479 3.8307515 -2.3767475; H -0.6696566 2.4797628 -3.2512268; C -3.5099766 -1.1109136 2.4322518; H -2.8479461 -0.7898524 3.2353438; H -3.8914406 -2.1102241 2.6557968; H -4.3402724 -0.4197278 2.3122369; O 0.5199028 -2.1266114 0;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/158:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/158,1,['optimiz'],['optimization']
Performance,Awesome. Does turning off XHOST and compiler optimization help?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198592985:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198592985,1,['optimiz'],['optimization']
Performance,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:713,optimiz,optimize,713,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['optimiz'],['optimize']
Performance,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:846,queue,queue,846,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['queue'],['queue']
Performance,"Because this would be a very lengthy digression in the eventual PR, I'll include this here:; One of the hard parts of implementing this PR is accounting for reorientation. Consider the following input:; ```; molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 180 ; }. set {; basis cc-pvdz; reference uhf ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 178 ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a2 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; a2 = 118 ; d1 = 180 ; }. energy('scf'); ```. Although these molecules only differ by two degrees, Psi puts them in different coordinate systems. Molecule 2 swaps the y and z axes compared to Molecule 1. The y axis of Molecule 1 becomes the -x axis of Molecule 3. Accordingly, correlation tables will fail to correlate the point groups properly. Both molecules have reflection across the z-axis as a symmetry element. Those correlate to y-reflection and x-reflection respectively for Molecule 1, which has no z-reflection. Findif displacements preserve orientation because `fix_orientation` is applied to a clone of the reference molecule in `driver.py` before the displaced geometry is loaded, and the geometries loaded are Cartesian. ZMAT geometries are automatically reoriented in `reinterpret_coordinates`. So in the easily forseeable cases that a user wants to use a displaced ZMAT, or the molecule reading orbitals isn't a geometry-shifted clone of the molecule the guess came from, reorientation must be explicitly accounted for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950:1347,load,loaded,1347,https://psicode.org,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950,2,['load'],['loaded']
Performance,Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12								 Number of atomic orbitals: 12; Number of basis functions: 12								 Number of basis functions: 12. Integral cutoff 1.00e-12								 Integral cutoff 1.00e-12; Number of threads: 1								 Number of threads: 1. Performing in-core PK											 Performing in-core PK; Using 6162 doubles for integral storage.								 Using 6162 doubles for integral storage.; We computed 666 shell quartets total.									 We computed 666 shell quartets total.; Whereas there are 666 unique shell quartets.								 Whereas there are 666 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==								 ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: Yes									 K tasked: Yes; wK tasked: No									 wK tasked: No; Memory [MiB]: 375									 Memory [MiB]: 375; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. OpenMP threads: 1									 OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.						 Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Ite,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:11798,Perform,Performing,11798,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['Perform'],['Performing']
Performance,"Btw, is there concurrence on killing of `property()` in favor of `properties()`? I like the former better, but using a python syntax word makes me nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-371658386:14,concurren,concurrence,14,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-371658386,1,['concurren'],['concurrence']
Performance,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:108,optimiz,optimized,108,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['optimiz'],['optimized']
Performance,"Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now, and being able to run Psi4 here would be very useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2285238805:157,perform,performance,157,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2285238805,1,['perform'],['performance']
Performance,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:31,perform,performance,31,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,4,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3652,Optimiz,Optimization,3652,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Optimiz'],['Optimization']
Performance,"CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:. ```; molecule f { ; f 0.00 0.00 0.00; }; set basis cc-pVTZ; set scf reference uhf ; energy('ccsd'); ```. (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. Full backtrace from gdb:. ```; (gdb) where; #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:954,optimiz,optimized,954,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1694,Perform,Performing,1694,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"C_build (name=..., unpolarized=<optimized out>, tweakers_=...); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/basic_string.tcc:242; #3 0x00007fac0b82e3cf in pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call_impl<std::shared_ptr<psi::SuperFunctional>, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), 0ul, 1ul, 2ul, pybind11::detail::void_type>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>, pybind11::detail::void_type&&) && (f=<optimized out>, this=0x7fff11285af0); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/char_traits.h:350; #4 pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:2283,optimiz,optimized,2283,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I think the trouble is in predicting the next geom step, so may be of interest to @psi-rking . ```; molecule { ; 0 1; C -0.167039 -0.712374 -0.022325; O 0.119573 0.677072 0.056530; H -0.453842 -0.989160 -1.036819; H -0.997038 -0.962046 0.638968; H 0.691232 -1.312038 0.284396; H 0.775814 0.817745 0.757350; }. set optking { ; frozen_dihedral = (""; 5 1 2 6; 4 1 2 6; 3 1 2 6; ""); }; #set {; # geom_maxiter 2; # g_convergence GAU_LOOSE; #}; #memory 6GB; #set_num_threads(6); #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); #for _ in range(1):; # try:; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # break; # else:; # try:; # set opt_coordinates cartesian; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # pass; #clean(). optimize(""hf/3-21G"") # segfaults; #optimize(""hf/cc-pvdz"") # 4 iter; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679:680,optimiz,optimize,680,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679,6,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"Can confirm `qcengine` uses the number of physical cores on a machine by default, as seen [here](https://github.com/MolSSI/QCEngine/blob/c171e80c51afc5bc08ac8a84971b526fd33671d3/qcengine/config.py#L43-L46). Running psi4 with `8` threads (I have 8 logical CPU cores) produces similar performance:. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json ; qcengine run psi4 caffeine.json > qcng_out.json 45.94s user 1.78s system 578% cpu 8.249 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 67.32s user 1.73s system 680% cpu 10.142 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 53.52s user 1.06s system 701% cpu 7.781 total; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475:283,perform,performance,283,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475,1,['perform'],['performance']
Performance,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267189874:285,cache,cache,285,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:525,optimiz,optimize,525,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['optimiz'],['optimize']
Performance,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:359,optimiz,optimize,359,https://psicode.org,https://github.com/psi4/psi4/issues/1924,1,['optimiz'],['optimize']
Performance,Cartesian-constraint optimization test cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/208:21,optimiz,optimization,21,https://psicode.org,https://github.com/psi4/psi4/pull/208,1,['optimiz'],['optimization']
Performance,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196021110:33,optimiz,optimizer,33,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110,2,['optimiz'],"['optimization', 'optimizer']"
Performance,Changed opt10 TS-optimization test case to a 6-31G basis. Updated the associated test files. This runs in ~20 minutes on one core with only 1gb of memory. It's ready to go.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/255:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/pull/255,1,['optimiz'],['optimization']
Performance,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6754,Perform,Performing,6754,https://psicode.org,https://github.com/psi4/psi4/issues/629,10,['Perform'],['Performing']
Performance,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:90,optimiz,optimized,90,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['optimiz'],['optimized']
Performance,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:185,optimiz,optimization,185,https://psicode.org,https://github.com/psi4/psi4/issues/923,3,['optimiz'],['optimization']
Performance,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:339,perform,perform,339,https://psicode.org,https://github.com/psi4/psi4/issues/867,1,['perform'],['perform']
Performance,Concurrent `detci` Test Fail,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2618:0,Concurren,Concurrent,0,https://psicode.org,https://github.com/psi4/psi4/issues/2618,1,['Concurren'],['Concurrent']
Performance,Confirmed on current master. Obligatory @psi-rking and @AlexHeide notification. The geometry optimizer is [being rewritten](https://github.com/psi-rking/optking). A fix for this will _probably_ wait until then.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655838181:93,optimiz,optimizer,93,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655838181,1,['optimiz'],['optimizer']
Performance,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2457:186,cache,cachelevel,186,https://psicode.org,https://github.com/psi4/psi4/issues/2457,2,['cache'],['cachelevel']
Performance,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899031:12,optimiz,optimizations,12,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031,3,['optimiz'],"['optimizations', 'optimized']"
Performance,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230565713:83,optimiz,optimizations,83,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713,1,['optimiz'],['optimizations']
Performance,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1062:63,Optimiz,OptimizationConvergenceError,63,https://psicode.org,https://github.com/psi4/psi4/issues/1062,3,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,Could you upload the full output? Best to know which modules are really called.; The optimizations were also done with ROHF?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632703873:85,optimiz,optimizations,85,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632703873,1,['optimiz'],['optimizations']
Performance,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:374,perform,performance,374,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,1,['perform'],['performance']
Performance,"Currently the OCC/DFOCC page of the docs makes no mention of frozen core.; DFOCC seems to default to all-electron, but _does_ seem to run with `set freeze_core true`.; OCC throws a RuntimeError, and claims that ""Frozen core/virtual not implemented in Orbital-optimized methods"". I can see two issues here:. 1. The error message from OCC suggests that none of the orbital-optimized methods in Psi4 support FC. This is either wrong and misleading (if DFOCC really does support FC) or DFOCC should also throw the same error.; 2. Regardless of the answer to 1, [the relevant doc page](http://www.psicode.org/psi4manual/master/occ.html) ought to have a few words about FC support or the lack thereof.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863:259,optimiz,optimized,259,https://psicode.org,https://github.com/psi4/psi4/issues/1863,2,['optimiz'],['optimized']
Performance,"Currently the optking binary data is not saved correctly during complex operations like `cbs`, `database`, etc. At present, optimizations will proceed; however, since all previous iteration data is lost the convergence will be very slow.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/303:124,optimiz,optimizations,124,https://psicode.org,https://github.com/psi4/psi4/issues/303,1,['optimiz'],['optimizations']
Performance,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:2184,perform,perform,2184,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['perform'],['perform']
Performance,"DEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:1882,cache,cache-Release,1882,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['cache'],['cache-Release']
Performance,DFT Grid Cache and VV10 Gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:9,Cache,Cache,9,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['Cache'],['Cache']
Performance,"DFT overhaul, ECPs, SAPT(DFT), EP2, performance enhancements",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:36,perform,performance,36,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['perform'],['performance']
Performance,DLPNO-MP2 Performance Improvement,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:10,Perform,Performance,10,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['Perform'],['Performance']
Performance,"DZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 221 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs ; atoms 2-3 entry H line 51 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs . Process finished with exit code 139 (interrupted by signal 11: SIGSEGV); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:2582,Load,Loading,2582,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['Load'],['Loading']
Performance,"Dear @dgasmith: currently, optimisations with VV10, LC-VV10 and B97M-V fail due to the lack of the analytical gradients for VV10. This can be, of course, circumvented by passing `dertype=""energy""` to the optimize command. However, it's not necessary to do this for wB97M-V and wB97M-X - they do numerical gradients automatically. I was wondering if it's possible to set the default for VV10 etc. in the meantime?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897#issuecomment-361602213:204,optimiz,optimize,204,https://psicode.org,https://github.com/psi4/psi4/pull/897#issuecomment-361602213,1,['optimiz'],['optimize']
Performance,"Dear Alfred,. Yeah, the problem is, as the code says, ""Fatal Error: There are no occupied; orbitals with beta spin."" In our program, you can't run an MP2 calculation; on an atom or molecule that doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:424,optimiz,optimize,424,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,['optimiz'],['optimize']
Performance,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1167,perform,performed,1167,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342,1,['perform'],['performed']
Performance,"Dear Developers, . I like to know (before doing a full installation of the code) whether the new PSI4 for generation of FCIDUMP file for a subsequent dmrg calculation takes advantage of density fitting or not ?. I remember it performed a full 2-electron integral calculation in serial before entering dmrg calculation in the older version of the code. . Bests; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/458:226,perform,performed,226,https://psicode.org,https://github.com/psi4/psi4/issues/458,1,['perform'],['performed']
Performance,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:34,perform,perform,34,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['perform'],['perform']
Performance,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:51,optimiz,optimized,51,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532,1,['optimiz'],['optimized']
Performance,"Dear Psi4 developers,. The 'full_hess_every N' functionality, used to compute the full Hessian; every N steps in an optimization, does not work as expected for N > 0:; the Hessian is always recalculated on the initial structure instead of; the current one. This can be tested as follows. First, we only calculate the Hessian initially (full_hess_every 0). The; minimization converges in 7 steps to an R=0.95, B=104.6 geometry. The; frequencies obtained are 1776, 4112, 4211. #input: hess0.in; molecule h2o {; symmetry c1; O; H 1 R; H 1 R 2 B; R = 1.2; B = 120; }; set basis cc-pVDZ; set full_hess_every 0; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.933505",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1282:116,optimiz,optimization,116,https://psicode.org,https://github.com/psi4/psi4/issues/1282,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:430,perform,performing,430,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,1,['perform'],['performing']
Performance,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105341330:1092,perform,performed,1092,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330,1,['perform'],['performed']
Performance,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:872,perform,performs,872,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['perform'],['performs']
Performance,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186#issuecomment-152699151:44,optimiz,optimized,44,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151,1,['optimiz'],['optimized']
Performance,"Dear all, . Does any one know why psi4 performs a 2 electron integral calculation just before dmrg calculation starts, although one has activated density fitting keyword ?. Bests; Luca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194:39,perform,performs,39,https://psicode.org,https://github.com/psi4/psi4/issues/194,1,['perform'],['performs']
Performance,"Dear developers,; I am doing optimization of geometry, but I got this error. ""ERROR: ERI - Libint cannot handle angular momentum this high (6) for first derivatives.; Rebuild Libint with MAX_AM_ERI at least 7."". Could you please show me how to fix it? PSI4 1.1 was installed from miniconda. Thank you. Kind regards,. Hassenky",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/744:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/744,1,['optimiz'],['optimization']
Performance,"Dear devs,. I've been running some dihedral-constrained optimizations on capped dipeptides, and a small percentage of them fail. Examples are attached. In the first example, the optimizer takes a huge step and ends up in a crazy geometry. I worked around it by setting `intrafrag_step_limit 0.1`. Unfortunately I lost the .intco file, but the output file shows that two dihedrals have been constrained. https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.xyz. In the second example, the energy oscillates with periodicity 3. . https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.xyz; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.THR.intco. I'll try to work around this by using `step_type nr`, but thought it was worth reporting nonetheless. Thanks,; - Lee-Ping Wang (Postdoc, Stanford)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:56,optimiz,optimizations,56,https://psicode.org,https://github.com/psi4/psi4/issues/18,9,['optimiz'],"['optimizations', 'optimize', 'optimize-', 'optimizer']"
Performance,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2195:299,optimiz,optimize,299,https://psicode.org,https://github.com/psi4/psi4/issues/2195,5,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,"Default (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8884,optimiz,optimized,8884,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13212,optimiz,optimized,13212,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14542,optimiz,optimized,14542,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15872,optimiz,optimized,15872,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24827,optimiz,optimized,24827,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23496,optimiz,optimized,23496,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20770,optimiz,optimized,20770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22100,optimiz,optimized,22100,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1762,Perform,Performing,1762,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Perform'],['Performing']
Performance,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235903234:53,perform,performed,53,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234,1,['perform'],['performed']
Performance,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504:742,optimiz,optimizations,742,https://psicode.org,https://github.com/psi4/psi4/issues/1504,1,['optimiz'],['optimizations']
Performance,"Disilylether with scf_type=pk is fine. Without it, the gradients are only c2v-symmetric to 9 decimal places, and after some geometry steps an optimization will fail due to change in point group. Is this noise an inevitable consequence of density-fitting or some other approximation? If so, can we symmetrize the gradient after it is produced? I haven't confirmed this result yet with the very latest psi4. ``` python; memory 2 gb; set {; basis 6-31G*; reference RHF; guess gwh; }. molecule {; 0 1; SI 0.0 -3.03636189 0.1503967744; SI 0.0 3.03636189 0.1503967744; O 0.0 0.00000000 -0.6720662056; H 0.0 -4.54756839 -1.9795468656; H 0.0 4.54756839 -1.9795468656; H 2.12290049 -3.58475023 1.5688329144; H -2.12290049 -3.58475023 1.5688329144; H 2.12290049 3.58475023 1.5688329144; H -2.12290049 3.58475023 1.5688329144; }; gradient('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298:142,optimiz,optimization,142,https://psicode.org,https://github.com/psi4/psi4/issues/298,1,['optimiz'],['optimization']
Performance,Docs incorrect for maximum value of CACHELEVEL (CCENERGY),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:36,CACHE,CACHELEVEL,36,https://psicode.org,https://github.com/psi4/psi4/issues/2701,1,['CACHE'],['CACHELEVEL']
Performance,"Does `/home/jacobson/bin/psi4_wb97xd3_def2tzvp.py` contain a `qcng.compute()` call? May I see that file?. I don't run much through queues, so I don't have a feel for what qcng/config.py can/should pick up from the environment or host setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399:131,queue,queues,131,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399,1,['queue'],['queues']
Performance,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:712,Optimiz,Optimizer,712,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,Don't Cache `nmo_`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2875:6,Cache,Cache,6,https://psicode.org,https://github.com/psi4/psi4/issues/2875,1,['Cache'],['Cache']
Performance,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1309:10,optimiz,optimization,10,https://psicode.org,https://github.com/psi4/psi4/issues/1309,3,['optimiz'],"['optimization', 'optimize', 'optimizer']"
Performance,"ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2574,Perform,Performance,2574,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance,"ET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7726,optimiz,optimized,7726,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,Easy to add a print statement stating which necessary criteria for convergence were met. This isn't the only case where something that looks like this can occur. Will add to the new optimizer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655841532:182,optimiz,optimizer,182,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841532,1,['optimiz'],['optimizer']
Performance,Enable optimized builds on Azure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:7,optimiz,optimized,7,https://psicode.org,https://github.com/psi4/psi4/pull/1539,1,['optimiz'],['optimized']
Performance,"Everything tests clean except the ft97 on neon atom at the end of dft-custom-gga, which I can't persuade to converge with normal SCF devices, even with docc set. below is behavior of p4 master + xc 4.3.4 on the left and this PR + xc 5.1hotfix on the right. ""LibXC Density Thresholds"" is very different, and SCF convergence behavior is awful. Do I need to tighten libxc density thresholds from psi4? Or could there be a problem with the fctl?. ```; 												 >; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Tue Jan 5 23:59:27 2021									 |	*** at Wed Jan 6 00:14:26 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: CC-PVDZ											 Name: CC-PVDZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry NE line 258 file /psi/gits/hrw-tag/objdir39/stage/share/psi4/basis/c |	 atoms 1 entry NE line 258 file /psi/gits/hrw-demo/objdir39/stage/share/psi4/basis/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; RKS Reference								 RKS Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: d2h										 Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:						 Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:671,Load,Loading,671,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,2,['Load'],['Loading']
Performance,"Ex (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6269,optimiz,optimized,6269,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"Example attached. Thanks,. -Trent. On Wed, Apr 20, 2016 at 3:41 PM, Trent Parker <; trent.michael.parker@gmail.com> wrote:. > .Any constrained optimization example where ""no_com"" and/or ""no_reorient""; > isn't in the molecule input section and the geometry isn't in the standard; > nuclear orientation. The job won't fail, but the constrained coordinates; > will not be identical to their original values in the final output.; > ; > -Trent; > ; > On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > @tparker36 https://github.com/tparker36 Can I get test case where this; > > dies horribly?; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/179#issuecomment-212570814; > ; > ## ; > ; > Trent Parker; > Sherrill Research Group; > Georgia Institute of Technology; > ; > Center for Computational Molecular Science and Technology; > School of Chemistry and Biochemistry; > 4201 Molecular Science and Engineering Building; > ; > 901 Atlantic Drive NW; > Atlanta, GA 30332. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212579530:143,optimiz,optimization,143,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212579530,1,['optimiz'],['optimization']
Performance,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973:347,load,loaded,347,https://psicode.org,https://github.com/psi4/psi4/issues/1973,2,['load'],"['loaded', 'loading']"
Performance,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:824,optimiz,optimized,824,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,1,['optimiz'],['optimized']
Performance,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202622738:484,optimiz,optimizations,484,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738,3,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,Excited State Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106:14,Optimiz,Optimization,14,https://psicode.org,https://github.com/psi4/psi4/issues/3106,1,['Optimiz'],['Optimization']
Performance,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4049,Perform,Performing,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Perform'],['Performing']
Performance,"FYI I tried 64 GB but still the same issue. I guess I will have to stick with a CAS(16,14) as my reference energy (without orbital optimization).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557,1,['optimiz'],['optimization']
Performance,"Fails on methyl chloride, succeeds on diatomic chlorine.; Did not test larger alkyl groups.; CH3Cl was pre-optimized at HF/6-31G(d). ; Attempted RHF single point energy failed to converge with these basis sets:. > 6-311g(3df); > 6-311g(3df,p); > 6-311g(3df,2p); > 6-311g(3df,2pd); > 6-311g(3df,3pd); > aug-cc-pV(D+d)Z; > aug-cc-pV(Q+d)Z; > aug-cc-pV(T+d)Z; > g3mp2large. They all have at least 3df polarization, some more. Not all heavily polarized 6-311G(*) basis sets contain both C, Cl so these basis sets are only 5 of the 51 6-311?G(etc) sets. Doubtless, the other 10 sets with diffuse functions (e.g., 6-311++G(3df)) will fail but take longer at it. Though large, the 7152 Mb memory allocation requirement did not exhaust available shared memory. G3(MP2) method requires the g3mp2large basis set and the Wilson Group's cc-CA methods require the aug-cc-pV([DQT]+d)Z basis sets. Minimal test case attached.; [CH3Cl-3df-fail.zip](https://github.com/psi4/psi4/files/214171/CH3Cl-3df-fail.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340:107,optimiz,optimized,107,https://psicode.org,https://github.com/psi4/psi4/issues/340,1,['optimiz'],['optimized']
Performance,File 1 Retained After full_hess_every Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1306:38,Optimiz,Optimization,38,https://psicode.org,https://github.com/psi4/psi4/issues/1306,1,['Optimiz'],['Optimization']
Performance,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1306:31,optimiz,optimization,31,https://psicode.org,https://github.com/psi4/psi4/issues/1306,4,['optimiz'],"['optimization', 'optimizations', 'optimize']"
Performance,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:439,perform,perform,439,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148,2,['perform'],"['perform', 'performed']"
Performance,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:252,optimiz,optimized,252,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,3,['optimiz'],['optimized']
Performance,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:183,optimiz,optimized,183,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['optimiz'],['optimized']
Performance,Fix #2875: remove cached `nmo_` var,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:18,cache,cached,18,https://psicode.org,https://github.com/psi4/psi4/pull/2980,1,['cache'],['cached']
Performance,Fix energy return value of optimize() for IRC jobs.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:27,optimiz,optimize,27,https://psicode.org,https://github.com/psi4/psi4/pull/292,1,['optimiz'],['optimize']
Performance,Fix performance issue in DF SCF Hessians,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805:4,perform,performance,4,https://psicode.org,https://github.com/psi4/psi4/pull/1805,1,['perform'],['performance']
Performance,Fix race condition in maximum orbital gradient of parallel ODCT.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1435:4,race condition,race condition,4,https://psicode.org,https://github.com/psi4/psi4/pull/1435,1,['race condition'],['race condition']
Performance,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:504,optimiz,optimize,504,https://psicode.org,https://github.com/psi4/psi4/issues/1054,2,['optimiz'],['optimize']
Performance,"For cacheing, keeping “ miniconda/packages” dir around is what I expect to be the key part. So long as the mkl dir or tarball is in there, making the conda env is trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444495440:4,cache,cacheing,4,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444495440,1,['cache'],['cacheing']
Performance,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-275186110:253,Optimiz,OptimizeForArchitecture,253,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110,1,['Optimiz'],['OptimizeForArchitecture']
Performance,"For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869295505:72,optimiz,optimizations,72,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869295505,1,['optimiz'],['optimizations']
Performance,"For the long-term we have the required Hessian-vector products. We need #886 would allow us to optimize them, planned for 1.3 when Python-SCF iterations go live. Please do make a PR for 1) and 2) as they are quite needed before 1.2 is released.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973#issuecomment-383228055:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/973#issuecomment-383228055,1,['optimiz'],['optimize']
Performance,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-289809443:237,perform,performance,237,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:236,perform,performance,236,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,1,['perform'],['performance']
Performance,"G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; set scf_type direct. for func, val in ggaval.items():; edft = energy(func); label=func.upper(); compare_values(val, edft, 4, 'Ne: '+label) #TEST; clean(). # special flower BP86; low accuracy; # #G09 LDA-PW86; edft = energy('bp86'); compare_values(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:3592,Load,Loading,3592,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,GHA docs concurrency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2172:9,concurren,concurrency,9,https://psicode.org,https://github.com/psi4/psi4/pull/2172,1,['concurren'],['concurrency']
Performance,"Geom looks reasonable, and the calculation performed with the ghost atoms as *real* atoms goes just fine. Just this portion of the counterpoise-corrected intene goes off the rails. I've tested in both 1.6.x and 1.7.x; I don't have 1.8.x installed but if someone else does it's a very light weight calc to try. . Input:; ```set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); ```. Output:. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (inplace). Git: Rev (inplace). D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:43,perform,performed,43,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['perform'],['performed']
Performance,Geometry optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['optimiz'],['optimization']
Performance,Geometry optimization crashes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/2208,1,['optimiz'],['optimization']
Performance,Geometry optimization failures,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['optimiz'],['optimization']
Performance,Get useful info back after optimizer errors,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:27,optimiz,optimizer,27,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['optimiz'],['optimizer']
Performance,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:334,optimiz,optimize,334,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['optimiz'],['optimize']
Performance,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:91,optimiz,optimize,91,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,1,['optimiz'],['optimize']
Performance,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:150,optimiz,optimizations,150,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['optimiz'],['optimizations']
Performance,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:303,optimiz,optimized,303,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249,6,['optimiz'],['optimized']
Performance,"Good catch. Although there could be multiple suggestions, one that I found the most effective is to choose a different set of starting (guess) orbitals. This can be done by either setting odc_guess to true or by feeding in other (non-HF) orbitals. Either one is fine with me. If you choose to go with the first option, the second line can be modified as ""If this does not converge, try ODC_GUESS=TRUE"" (this obviously only makes sense for orbital-optimized methods).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354#issuecomment-437644132:447,optimiz,optimized,447,https://psicode.org,https://github.com/psi4/psi4/issues/1354#issuecomment-437644132,1,['optimiz'],['optimized']
Performance,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:298,perform,performance,298,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819,1,['perform'],['performance']
Performance,"Guess I'll heed the aggressive `DeprecationWarning`. Anyways, confirmed that your conda setup looks good. Input also segfaults for me locally with a compiled copy, so it's a general psi issue and not isolated to the binary. Your trouble is that the input geometry isn't symmetric enough, so it's optimizing near-linear angles, which the optimizer DoesNotLike. When you clean up the geometry, it optimizes cleanly. ```; >>> cat i1265.in ; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }. PCl5.update_geometry(); PCl5.symmetrize(0.05). set basis def2-tzvp. optimize(""b3lyp""); ```. ```; >>> grep '~' i1265.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -2642.57856550 -2.64e+03 8.58e-03 4.73e-03 o 3.65e-02 1.72e-02 o ~; 2 -2642.57939174 -8.26e-04 2.66e-03 1.41e-03 o 1.48e-02 7.24e-03 o ~; 3 -2642.57947730 -8.56e-05 4.34e-04 1.79e-04 o 1.87e-03 8.01e-04 o ~; 4 -2642.57947965 -2.35e-06 3.44e-04 1.27e-04 o 4.29e-03 1.56e-03 o ~; 5 -2642.57948325 -3.60e-06 1.41e-04 * 5.08e-05 o 2.69e-03 9.60e-04 o ~; 6 -2642.57948452 -1.27e-06 2.69e-05 * 1.27e-05 o 1.57e-04 * 6.33e-05 o ~; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -2642.578565499663 -2642.578565499663 0.00857526 0.00473269 0.03653776 0.0172",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851:296,optimiz,optimizing,296,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851,4,['optimiz'],"['optimize', 'optimizer', 'optimizes', 'optimizing']"
Performance,"H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; > G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant line",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:2645,optimiz,optimize,2645,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['optimiz'],['optimize']
Performance,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:263,load,loading,263,https://psicode.org,https://github.com/psi4/psi4/issues/565,3,"['cache', 'load']","['cache', 'loading']"
Performance,"Hello PSI4 developers. [CASINO](https://en.wikipedia.org/wiki/CASINO) is well known program for performing quantum Monte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:96,perform,performing,96,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['perform'],['performing']
Performance,"Hello Psi4!; First of all, thank you for your hard work on improving the Psi.; This is not a bug report but rather a possible enhancement: we have recently developed a wave function format called [TREXIO](https://github.com/TREX-CoE/trexio) with the focus on self-consistence and I/O performance. The format comes with a C library and an API to interact with the data: it has a text (ASCII-based) and HDF5 (binary) back ends for I/O. Bindings in Python, Fortran and OCaml are available. Sparse data like 2e integrals or CI coefficients are stored in a sparse data representation (similar to FCIDUMP) which significarntly improved the performance of the I/O (especially in the HDF5 case). The source code can be found [here](https://github.com/TREX-CoE/trexio) and a detailed description of the format and an API can be found [here](https://trex-coe.github.io/trexio/trex.html). Would it be interesting to have TREXIO as an alternative I/O back end in Psi4? The library is packaged for both PyPI and conda (via conda-forge). I am one of the core developers and can help/contribute.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:284,perform,performance,284,https://psicode.org,https://github.com/psi4/psi4/issues/2847,2,['perform'],['performance']
Performance,"Hello Psi4,. I am running a geometry optimisation for a small molecule with a chlorium atom (see the Psi4 input at the bottom of this page) and get the following error. It comes from the fact that the atomic symbols are uppercased by Psi4 (e.g. `CL` for chlorium) while `geometric` engine expects them capitalized (e.g. `Cl`). I have a one-liner fix for this which should go in the `driver.py` module. I can open a PR or communicate the fix here, whatever you prefer. ```; Traceback (most recent call last):; File ""/opt/conda/envs/psi4-env/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 50, in <module>; File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 1152, in optimize; return optimize_geometric(name, **kwargs); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/psi4/driver/driver.py"", line 918, in optimize_geometric; optimizer.prepareFirstStep(); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/optimize.py"", line 376, in prepareFirstStep; self.H0 = self.IC.guess_hessian(self.coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 3457, in guess_hessian; Hprim = self.Prims.guess_hessian(coords); File ""/opt/conda/envs/psi4-env/lib//python3.9/site-packages/geometric/internal.py"", line 2730, in guess_hessian; elem1 = min(Elements.index(self.elem[ic.a]), Elements.index(self.elem[ic.b])). ValueError: 'CL' is not in list. Printing out the relevant lines from the Psithon --> Python processed input file:; 'coordsys' : 'tric',; 'convergence_set' : 'GAU_LOOSE',; 'convergence_energy' : 1e-4,; }; core.set_global_option(""GEOM_MAXITER"", 5); --> optimize('mp2', engine='geometric', optimizer_keywords=geometric_keywords); ```. Versions:; - geometric 1.0; - psi4 1.7+6ce35a5; - python 3.9. Psi4 input file:; ```; memory 14000 MB; molecule ligand {; 0 1; Cl -1.0833 -0.2140 0.0000 ; O -0.3456 1.2535 0.0000 ; O 1.0833 1.2535 0.0000 ; N 1.0362 -0.4689 0.0000 ; N -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:726,optimiz,optimize,726,https://psicode.org,https://github.com/psi4/psi4/issues/2871,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"Hello Psi4. I have been doing some `oeprop` calculations and noticed that the `oeprop` module is case-sensitive, meaning some properties are not computed if requested from `oeprop` in lower case. Perhaps it is a common knowledge, but since this was not mentioned in the `oeprop` documentation - I bring it here. However, my issue is related to `MBIS_VOLUME_RATIOS`. When given in lower case to `oeprop` - Psi4 performs free-atom calculations for each atom type in the molecule (confirmed by `.log` file contents too), but does not perform (or at least does not print) the MBIS volume ratios. Thus, it seems like it does some premilinary MBIS calculations to get free-atom volumes, which is a bit surprising since I would expect it to ignore the `mbis_volume_ratios` option whatsoever (since it's lower-case). When given in upper case - Psi4 runs and prints as expected. The issue is really when the option is given in lower case. Observed with both Psi4 v.1.8 and 1.8.2 installed via `conda-forge`. Code to reproduce:. ```python; molecule lig {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. set basis def2-TZVPPD; set print 2. grad, wfn = gradient('wb97m-d3bj', return_wfn=True); oeprop(wfn, 'dipole', 'quadrupole', 'mbis_volume_ratios'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3085:410,perform,performs,410,https://psicode.org,https://github.com/psi4/psi4/issues/3085,2,['perform'],"['perform', 'performs']"
Performance,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:25,load,load,25,https://psicode.org,https://github.com/psi4/psi4/issues/804,1,['load'],['load']
Performance,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:28,perform,perform,28,https://psicode.org,https://github.com/psi4/psi4/issues/2244,1,['perform'],['perform']
Performance,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:38,optimiz,optimize,38,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"Hello,. Currently, there is the feature:; ```; set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; ```. Since one might start from a very reasonable conformer, there are some use cases; where you want to optimize the geometry, but keep the dihedral angles (from rotatable bonds); as close as possible to their initial values. The current interface makes it quite painful to setup this for one molecule.; And I need to do this for many molecules... Regards,; F.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:205,optimiz,optimize,205,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['optimiz'],['optimize']
Performance,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:50,perform,perform,50,https://psicode.org,https://github.com/psi4/psi4/issues/2747,3,"['load', 'perform']","['loads', 'perform', 'performance']"
Performance,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:131,perform,performance,131,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['perform'],['performance']
Performance,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:1074,load,load,1074,https://psicode.org,https://github.com/psi4/psi4/issues/57,2,"['load', 'perform']","['load', 'performance']"
Performance,Hello. is it possible for excited state optimization in psi4 and search for a transition in the excited state?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106:40,optimiz,optimization,40,https://psicode.org,https://github.com/psi4/psi4/issues/3106,1,['optimiz'],['optimization']
Performance,"Here is `psi4 --test`:; (p4env) [henrique@dhcppc3 ~] $ psi4 --test; ================================================================ test session starts =================================================================; platform linux -- Python 3.6.6, pytest-3.8.0, py-1.6.0, pluggy-0.7.1 -- /home/henrique/bin/anaconda3/envs/p4env/bin/python; cachedir: .pytest_cache; rootdir: /home/henrique, inifile:; collected 22 items . bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 SKIPPED [ 18%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED [ 22%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_ad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:344,cache,cachedir,344,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['cache'],['cachedir']
Performance,"Here's a minimal reproducible example (`mp_test.py`):. ```python; import multiprocessing as mp; import psi4. def run_psi4():; print(""start""); psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy(""scf/sto-3g""); print(""done""); return. if __name__ == ""__main__"":; proc = mp.Process(target=run_psi4); # proc.run(); proc.start(); proc.join(); ```. This script doesn't run successfully on an Ubuntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:866,Load,Loading,866,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Load'],['Loading']
Performance,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/2213,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Here's same job with more ""normal"" input. ```; memory 2500 mb. molecule struct {; units angstrom; 0 1; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set basis 6-31G*; optimize('scf'); ```. and output. ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126177998:564,optimiz,optimize,564,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998,1,['optimiz'],['optimize']
Performance,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:63,optimiz,optimization,63,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995,1,['optimiz'],['optimization']
Performance,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:744,Perform,Perform,744,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['Perform'],['Perform']
Performance,"Hey all, I have updated the code to account for the two density matrices present in UHF. I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance. I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713:205,perform,performance,205,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713,1,['perform'],['performance']
Performance,"Hi @JonathonMisiewicz ; Thank you for your response. > Let us know if there are addons that you need but don't know how to get. (Examples: dftd4 for DFT dispersion corrections, cct3 for some exotic coupled cluster variants, cppe for polarizable embedding.). I am using psi4 through geomeTRIC to minimize the structures of small molecules.; The other dependencies which I had mentioned earlier was to generate the input file (.in file) for the minimization; `geometric-optimize --psi4 <input.in>`. I am able to do this as long as I provide the `input.in` file, i.e. psi4 is working just fine for me. So thanks a lot @loriab and @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714:468,optimiz,optimize,468,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714,1,['optimiz'],['optimize']
Performance,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:208,load,loaded,208,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,3,"['cache', 'load']","['cache', 'cachedir', 'loaded']"
Performance,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1014,optimiz,optimize,1014,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169,2,['optimiz'],['optimize']
Performance,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:788,perform,performance,788,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496,2,"['load', 'perform']","['load', 'performance']"
Performance,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:550,optimiz,optimized,550,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352,2,"['optimiz', 'perform']","['optimized', 'performs']"
Performance,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:143,perform,performing,143,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['perform'],['performing']
Performance,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:189,perform,perform,189,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,1,['perform'],['perform']
Performance,"Hi PSI4 developers.; I want to do OMP2 (OMP3/OCEPA) run and dump out optimized orbitals into molden file like ""molden_write true"" does.; Is it possible at the moment?. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185:69,optimiz,optimized,69,https://psicode.org,https://github.com/psi4/psi4/issues/185,1,['optimiz'],['optimized']
Performance,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:57,optimiz,optimizations,57,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152814498:487,optimiz,optimized,487,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498,1,['optimiz'],['optimized']
Performance,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:228,optimiz,optimization,228,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['optimiz'],['optimization']
Performance,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:984,perform,performant,984,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327,1,['perform'],['performant']
Performance,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:49,perform,perform,49,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,1,['perform'],['perform']
Performance,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:252,perform,performing,252,https://psicode.org,https://github.com/psi4/psi4/issues/915,1,['perform'],['performing']
Performance,"Hi all,. The following PSIO error occurs for identical geometry optimizations on two separate machines, when OPTKING attempts to write opt data to binary file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.88503929615",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:64,optimiz,optimizations,64,https://psicode.org,https://github.com/psi4/psi4/issues/789,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi chaps,; I've been trying to get Psi4 (1.0.54 Git: Rev {master} 8d4cec3 dirty) to accept user-defined mid-bond sets. To do this I have placed a set of mid-bond definitions in mb-set.gbs and used the heavier rare-gas atoms (Kr, Xe, Rn) to label the mid-bond sets. Using the commands. basis {; assign aug-cc-pVDZ; assign Rn mb-set # gets the basis set for the ghost Rn atoms from mb-set.gbs; }. Psi4 is able to perform standard (non-DF) MP2 and CC calculations using mid-bond functions. However I have encountered problems getting this to work using the DF variants of these methods. As I understand it, to get the DF-MP2, DF-CC etc to work I need to do the following:. 1. Create a set of auxiliary functions for these mid-bond sets. This I have done (mb-set-ri.gbs); 2. Specify the auxiliary basis set using; assign <aux basis> df_basis_scf/mp2. The only source of information I was able to find on the latter was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:411,perform,perform,411,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['perform'],['perform']
Performance,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:257,optimiz,optimization,257,https://psicode.org,https://github.com/psi4/psi4/issues/905,1,['optimiz'],['optimization']
Performance,"Hi guys,. I have been experimenting with symlinks to conda distributions. They have been working generally fine, but I am facing some issues with psi4. I've started with the tests. Running: `pytest -v /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/miniconda3` is a real/physical path, works fine:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: .cache; rootdir: /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests, inifile:; collected 20 items . test_aaa_profiling.py::test_threaded_blas XPASS; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:597,cache,cachedir,597,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['cache'],"['cache', 'cachedir']"
Performance,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:71,optimiz,optimization,71,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi!; I am also a developer of TREXIO, and of the quantum package software. In quantum package, we have the ability to import/export data from TREXIO files, and we use it to export wave functions for QMC codes, one- and two-body RDMs to send them to the GammCor code to perform SAPT calculations, and we export integrals in TREXIO to perform FCIQMC calculations with NECI. It would be nice for us to also be able to exchange data with Psi4 (in the two directions).; I am also willing to help if needed!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044:269,perform,perform,269,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044,2,['perform'],['perform']
Performance,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:749,optimiz,optimize,749,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864,1,['optimiz'],['optimize']
Performance,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:445,perform,performance,445,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['perform'],['performance']
Performance,"Hi, Ugur; I've been doing Quantum Monte Calro calculations in CASINO program https://vallico.net/casinoqmc/; It uses Diffusion Monte Carlo (DMC) method for solving for the ground state of the many-body Schrödinger equation. In principle for bosonic state the DMC method is exact, but fermionic system has nodes and consequently regions of positive and negative sign, thus several well-controlled approximations must be introduced for calculations to remain tractable.; The fixed-node approximation, is the simplest of them ; http://web.ornl.gov/~pk7/thesis/pkthnode21.html#SECTION00844000000000000000; CASINO program takes initial MO from external MOLDEN file usually from HF calculation (if single reference WFN is suitable). But I found that Orbital Optimized MO turns out better in this case.; I usually doing calculations in large bases up to cc-pV6Z and pV7Z.; I do not know whether it is possible to do such a calculation in psi4. with respect, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152818239:752,Optimiz,Optimized,752,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152818239,1,['Optimiz'],['Optimized']
Performance,"Hi, this is more of a question than an issue (almost certainly due to user error), but I haven't been able to get too far by reading the documentation. . I am trying to achieve the following using the Psi4 Python API: generate a basis set for a molecule, import a predefined grid into Psi4, and evaluate all the basis functions in a basis set on all grid points. Here's a minimal example of that (`wts.npy` and `pts.npy` are in the attached zip file). ```; def minimal_repro():; basis_set = 'cc-pv5z-jkfit'; mol_desc = '''; C 1.54012679 -1.01667266 0.93163498; C 4.07235980 -0.09826576 -0.02267671; H 1.37950007 -0.71809593 2.97064947; H 0.00000000 0.00000000 0.00000000; H 1.31146993 -3.03678988 0.54991030; H 5.61248659 -1.11682814 0.90706854; H 4.30290639 1.92185147 0.36093769; H 4.23298652 -0.39684249 -2.06169120; '''; p4mol = psi4.geometry(mol_desc). # not sure what this parameter should be set to; delta = 0.1. wts = np.load('wts.npy'); pts = np.load('pts.npy'). basis_set = psi4.core.BasisSet.build(p4mol, 'ORBITAL', basis_set); basis_extents = psi4.core.BasisExtents(basis_set, delta). xs = psi4.core.Vector.from_array(pts[:, 0]); ys = psi4.core.Vector.from_array(pts[:, 1]); zs = psi4.core.Vector.from_array(pts[:, 2]); ws = psi4.core.Vector.from_array(wts). blockopoints = psi4.core.BlockOPoints(xs, ys, zs, ws, basis_extents); max_points = blockopoints.npoints(); max_functions = basis_set.nbf(); funcs = psi4.core.BasisFunctions(basis_set, max_points, max_functions); funcs.compute_functions(blockopoints). vals = np.array(funcs.basis_values()['PHI']). all_zeros = []; for col_idx in range(vals.shape[1]):; if np.allclose(vals[:, col_idx], 0.0):; all_zeros.append(col_idx). print('basis fcns that are all zeros', all_zeros); ```. My question is regarding the `delta` parameter to the `BasisExtents` object. Modulating this parameter seems to change the number of basis functions that evaluate to zero at all grid points. For example, at delta = 0.01, I get:. ```; ('basis fcns that are ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051:929,load,load,929,https://psicode.org,https://github.com/psi4/psi4/issues/1051,2,['load'],['load']
Performance,"Hi,. Anyone noticed that programs like _gcp_ and _xcfour_ are getting loaded when psi4 is starting? Or is it just me? I only noticed because psi4 will stop/crash if e.g. xfcour does not find all libraries (mpi, mkl, etc.). gcp will print an error about its missing input file and be ""defunc"" in my bash. Note that it happens even when none of the programs will actually be used according to the input. I am at a loss what to look at in my psi4 installation. version: 1.1a2.dev309, gnu+mkl build",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656:70,load,loaded,70,https://psicode.org,https://github.com/psi4/psi4/issues/656,1,['load'],['loaded']
Performance,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1936:805,load,loaded,805,https://psicode.org,https://github.com/psi4/psi4/issues/1936,1,['load'],['loaded']
Performance,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:150,optimiz,optimizing,150,https://psicode.org,https://github.com/psi4/psi4/issues/3154,2,['optimiz'],"['optimize', 'optimizing']"
Performance,"Hi,. I am wondering if it is possible to run a torsion scan from the python API using cartesian coordinates. . For example, can the following be executed solely from python?; (copying code from here : https://psicode.org/psi4manual/master/optking.html?highlight=torsion+scan#constrained-optimizations). ```; molecule hooh {; 0 1; H; O 1 0.95; O 2 1.39 1 103; H 3 0.95 2 103 1 D. D = 99. units ang; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])); ```. Thanks,; Erik",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910:287,optimiz,optimizations,287,https://psicode.org,https://github.com/psi4/psi4/issues/2910,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"Hi,. I have a molecule that has Gallium ion approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:129,perform,perform,129,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['perform'],['perform']
Performance,"Hi,. I have been comparing the basis sets _aug-cc-pVTZ_ and _aug-cc-pVQZ_. While I was running frequency calculations on a large set of molecules, I found out that some of my molecules never converged. This is not surprising, as there will always be complex geometries that will have a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016:454,optimiz,optimization,454,https://psicode.org,https://github.com/psi4/psi4/issues/2016,1,['optimiz'],['optimization']
Performance,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:200,optimiz,optimize,200,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['optimiz'],['optimize']
Performance,"Hi,. I was running an optimzation followed by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:715,optimiz,optimize,715,https://psicode.org,https://github.com/psi4/psi4/issues/2020,2,['optimiz'],['optimize']
Performance,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:415,optimiz,optimize,415,https://psicode.org,https://github.com/psi4/psi4/issues/1995,3,"['Load', 'optimiz']","['Loading', 'optimize']"
Performance,"Hi,. The input file for the problem described below:. ```; molecule C6H6 {; 0 1; C 0.0 1.855 0.0; C 0.0 -1.855 0.0; C 1.6064771240201337 0.9275 0.0; C 1.6064771240201337 -0.9275 0.0; C -1.6064771240201337 0.9275 0.0; C -1.6064771240201337 -0.9275 0.0; H 0.0 3.289 0.0; H 0.0 -3.289 0.0; H 2.848357553047019 1.6445 0.0; H 2.848357553047019 -1.6445 0.0; H -2.848357553047019 1.6445 0.0; H -2.848357553047019 -1.6445 0.0; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:544,optimiz,optimize,544,https://psicode.org,https://github.com/psi4/psi4/issues/66,2,['optimiz'],"['optimization', 'optimize']"
Performance,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:612,optimiz,optimize,612,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['optimiz'],['optimize']
Performance,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:157,optimiz,optimize,157,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687,1,['optimiz'],['optimize']
Performance,Hi; I am interested to run a QM optimization on some small molecules and I am not sure how to add a solvent model during the optimization process. I am not wanting to do the calculation in vaccum. What keywords should I use?; Thanks,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3178:32,optimiz,optimization,32,https://psicode.org,https://github.com/psi4/psi4/issues/3178,2,['optimiz'],['optimization']
Performance,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:983,cache,cache,983,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,1,['cache'],['cache']
Performance,"Hmm, Fransesco recently made some changes that rotate the MCSCF orbitals to a standard frame (either semicanonical or NO’s). The CI determinants are optimized and printed in this basis however. A quick pass shows that the MOLDEN writer should be picking everything up correctly; however, this doesn’t rule out something subtle. One check could be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331891537:149,optimiz,optimized,149,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537,1,['optimiz'],['optimized']
Performance,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:176,load,loads,176,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,1,['load'],['loads']
Performance,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:535,Perform,Performing,535,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Perform'],['Performing']
Performance,"Hmm, do you think we would see anything else for another compiler like `clang`? Might be good to document this, get it in, and have it be disabled incase Ninja can find more optimizations in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-335230588:174,optimiz,optimizations,174,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-335230588,1,['optimiz'],['optimizations']
Performance,"Holy cow. I wonder if there's some problem with the passing of character; references between C++ and Fortran in the new compilers that could explain; why some DGEMM cases work and others don't. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Fri, Mar 18, 2016 at 8:26 PM, Daniel Smith notifications@github.com; wrote:. > Awesome. Does turning off XHOST and compiler optimization help?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198592985",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198595581:374,optimiz,optimization,374,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198595581,1,['optimiz'],['optimization']
Performance,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:34,Perform,Perform,34,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,1,['Perform'],['Perform']
Performance,"I added a whole load of printfs and compared the output produced on a couple of different processors. I put a fair bit about it on the [forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/9?u=laz). The Iq matrix obtains these ""nearly zero"" off diagonals at ca. line 3400 of cubature.cc in OrientationMgr::OrientationMgr() where the summation involves products of x, y, and z coordinates. For some processors ""-a + a = 0"" but for others, not quite by the looks of it. Some of the cartesian coordinates are things like 10-17, so products become extremely small. I've not looked into whether they've already been transformed form the input coordinates or not but they must have been processed in some way to get that sort of value. Also, the value of center was essentially ""0.0, 0.0, 1e-17"" on one machine but ""1e-17, 1e-17, 1e-16"" on an i7-5960x. When this gets subtracted off (line 3414), it either has no effect or adds to the non-zero-ness of the matrix elements (although, subtraction from elements with a significant value, such as the diagonals, has a negligible effect). Should coordinates have values as small as 1e-17? How close to zero is zero?! That's something I don't really have a feel for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292620152:16,load,load,16,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292620152,1,['load'],['load']
Performance,"I added some experimental changes to `electricfield.{cc,h}` in order to compute; field integrals (for the induction operator) and electric field expectation values (needed to solve for induced moments) for multiple sites/coordinates at once. Even though I don't like the code I implemented, it gives massive performance improvements.; In my tests (Python code is uploaded [here](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade)), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. EFP would also benefit from these performance improvements. Since the code is rather ugly at the moment, I'm thankful for any suggestions on how to proceed from here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555:308,perform,performance,308,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555,2,['perform'],['performance']
Performance,"I agree @susilehtola , the problematic code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L308-L310) and [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L883-L888). What's happening is this: the JKGrad code creates a `TwoBodyAOInt` object per thread, in serial. The extra overhead in creating 8 vs 1 of these objects far outweighs any parallelism gained in the use of additional threads. I suspect this performance issue was introduced by the libint2 ERI overhaul, which happened in psi4 v1.4. If I recall correctly, as part of the overhaul, the `TwoBodyAOInt` constructor was changed to automatically perform Schwarz/CSAM screening and store a list of significant shell pairs. Before the overhaul, such a list of significant shell pairs was determined outside of the `TwoBodyAOInt` object, using an `ERISieve` object. As a consequence of this overhaul, the `TwoBodyAOInt` constructor is now very expensive (because it computes all `(mn|mn)` shell quartets to do the screening), and `TwoBodyAOInt` objects should be initialized sparingly. When many identical `TwoBodyAOInt` objects are needed, we should instead construct a single object and clone the rest, as is done [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dlpno/mp2.cc#L635-L638) for example. Hopefully @andysim can confirm this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2559#issuecomment-1111277619:474,perform,performance,474,https://psicode.org,https://github.com/psi4/psi4/issues/2559#issuecomment-1111277619,2,['perform'],"['perform', 'performance']"
Performance,"I agree we should allow the user to drop the computation of monomer-basis calculation. However, total counterpoise-corrected energies are sometimes needed, e.g. when doing geometry optimization, and so they should be computed when needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-519261214:181,optimiz,optimization,181,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519261214,1,['optimiz'],['optimization']
Performance,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:623,optimiz,optimization,623,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,1,['optimiz'],['optimization']
Performance,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:336,optimiz,optimize,336,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,1,['optimiz'],['optimize']
Performance,"I also don't know exactly where the error array is coming from. The numbers in the README seem very few compared to the length of the error matrix. The ASCII way is still possible. But Rob was no fool when it came to optimizing the right parts. It only gets run once per SAPT, so I don't see the block of a text file, but I'm ready to believe he had a reason to go binary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357:217,optimiz,optimizing,217,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357,1,['optimiz'],['optimizing']
Performance,"I also tried reinstalling via executing the .exe file in my downloads directory and the same error pops up . ""C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721:301,load,load,301,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721,2,['load'],['load']
Performance,"I am actually more looking for advice than complaining or reporting a bug here. It's indeed more of a qcengine thing, but I was wondering whether psi4 had a way to perform the conversion. I spotted `psi4.schema_wrapper.driver._convert_wavefunction()` (https://github.com/psi4/psi4/blob/6260856e4002a8398cdba67c2ce2254d47c49d37/psi4/driver/schema_wrapper.py#L493) that can convert a `psi4_wfn` to a `qcschema_wfn` and I was wondering whether a function to perform the inverse operation exists somewhere (doing the `qcschema_wfn` to `psi4_wfn` conversion). I totally understand this is not strictly a psi4 issue here so I'll close if you think it's irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378:164,perform,perform,164,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378,2,['perform'],['perform']
Performance,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:14,perform,performing,14,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,2,"['bottleneck', 'perform']","['bottleneck', 'performing']"
Performance,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:406,load,loaded,406,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,4,['load'],"['load', 'loaded']"
Performance,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:111,optimiz,optimization,111,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,"['load', 'optimiz']","['load-missing-', 'loader-in-google-col', 'optimization']"
Performance,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:31,throughput,throughput,31,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['throughput'],['throughput']
Performance,"I am currently testing out the ddx solvent model implementation (https://psicode.org/psi4manual/master/ddx.html) in my high throughput script. However, currently the DDX_SOLVENT_EPSILON option being ignored in favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:124,throughput,throughput,124,https://psicode.org,https://github.com/psi4/psi4/issues/3119,2,['throughput'],['throughput']
Performance,"I am running expensive SAPT calculations and psi4 dies due to time limit.; My calculations reached upto "" CHF Iterations converged "" and then killed due to teh ; time limit of my queue system. It is possible to add restart option to sapt ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-174418021:179,queue,queue,179,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-174418021,1,['queue'],['queue']
Performance,"I am running expensive SAPT calculations and psi4 dies due to time limit.; My calculations reached upto "" CHF Iterations converged "" and then killed due to the ; time limit of my queue system. It is possible to add restart option to sapt ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/226:179,queue,queue,179,https://psicode.org,https://github.com/psi4/psi4/issues/226,1,['queue'],['queue']
Performance,"I am trying to do constrained geometry optimizations using the PsiAPI, however this results in a segmentation fault. Here's an example:; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""). psi4.set_options({""frozen_distance"": ""0 1""}); psi4.optimize(""HF/6-31G"", molecule=h2o); ```; I am using psi4 1.2a1.dev1159 installed from source with Anaconda Python 3.6 on macOS 10.13.4.; Thanks for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989:39,optimiz,optimizations,39,https://psicode.org,https://github.com/psi4/psi4/issues/989,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:242,optimiz,optimization,242,https://psicode.org,https://github.com/psi4/psi4/issues/2117,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37134034:314,optimiz,optimization,314,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034,1,['optimiz'],['optimization']
Performance,"I can add this to my reviewing queue, but it will be behind the DLPNO PR, since I've already started on that one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2151#issuecomment-916174986:31,queue,queue,31,https://psicode.org,https://github.com/psi4/psi4/pull/2151#issuecomment-916174986,1,['queue'],['queue']
Performance,"I can certainly try it. The crash seems to be related to the LRU caching mechanism, and it fails when it tries to lseek() on a file that is not open. Maybe the logic that would open the file sees that there is enough memory to hold everything in RAM and skips the file open, but then later the the sort assumes that file has been opened.; This is also supported by the `cachelevel 0` workaround working fine, just slowly. The fact that an LRU caching related function is getting called is unexpected by itself, as the [CC docs](https://psicode.org/psi4manual/master/cc.html) claim that LRU is not the default caching algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451:370,cache,cachelevel,370,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451,1,['cache'],['cachelevel']
Performance,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:665,Perform,Performing,665,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479,1,['Perform'],['Performing']
Performance,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:18,optimiz,optimization,18,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519#issuecomment-260985515:123,optimiz,optimize,123,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515,1,['optimiz'],['optimize']
Performance,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53036550:41,load,loading,41,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550,1,['load'],['loading']
Performance,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:151,Optimiz,Optimization,151,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866,2,['Optimiz'],['Optimization']
Performance,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:195,optimiz,optimization,195,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,3,['optimiz'],['optimization']
Performance,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346373530:416,optimiz,optimizer,416,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"I don't think I understand what the difference in the program behavior would be if you chose one solution over the other, so I'm not sure. Unless the optimizer needs to get handed the total energies and gradients via a return of the N-body function that happens when return_total_data=True, in which case the first solution would seem to be easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869913964:150,optimiz,optimizer,150,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869913964,1,['optimiz'],['optimizer']
Performance,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:706,perform,performance,706,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020,1,['perform'],['performance']
Performance,"I followed your installation instructions for [Linux](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line). The machine I'm installing this on is CentOS 7.2 kernel 3.10.0-327.36.1.el7.x86_64 GNU/Linux; Running `psi4 --test` gives the following error traceback:. <details>. ```; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf FAILED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:424,load,loaded,424,https://psicode.org,https://github.com/psi4/psi4/issues/710,3,"['cache', 'load']","['cache', 'cachedir', 'loaded']"
Performance,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:146,Perform,Performing,146,https://psicode.org,https://github.com/psi4/psi4/issues/199,2,['Perform'],['Performing']
Performance,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53050174:250,load,loaded,250,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174,1,['load'],['loaded']
Performance,"I guess it's an issue with the occupation code, but I think it gets corrected as the optimization proceeds (which changes dimensioning, which causes the psio problems we were observing). In the long term we should do a check for the occupation within the optimizer, and issue a `psiclean()` if it changes, so that DPD doesn't choke, but that's beyond the scope of what I have time for right now sadly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/538#issuecomment-265318359:85,optimiz,optimization,85,https://psicode.org,https://github.com/psi4/psi4/pull/538#issuecomment-265318359,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"I guess the problem is related to the bond very close to 180deg. Maybe some small perturbation of the central atom could be done in these case before giving up?. When I repeated with the coordinates after some Cartesian steps it worked fine to generate internal coordinates, so another approach could be to start with Cartesian only optimization for the first 5-10 steps and then try again to generate internal and so forth until reaching maxiter",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703#issuecomment-523825418:333,optimiz,optimization,333,https://psicode.org,https://github.com/psi4/psi4/issues/1703#issuecomment-523825418,1,['optimiz'],['optimization']
Performance,"I had a bit more of a look and here's what I'd propose:. 1) Introduce a new handler into `psi4.driver.dft_funcs.build_superfunctional` at line 175, that returns `sup = (func, False)` for non-dispersion funcs and `sup = (func, (""custom"", dispersion_type, dispersion_params))`. 2) The new handler should apply default parameters (alpha, beta, omega, references) from LibXC, unless overridden in the functional definition:; ```; func_dict[""PBE0""] = {; ""name"": ""PBE0"",; ""xc_functionals"": {""HYB_GGA_XC_PBEH"": {}}, # XC functional defined - all parameters should be in LibXC; }; func_dict[""MN15""] = {; ""name"": ""MN15"",; ""c_functionals"": {""MGGA_C_MN15"": {}},; ""x_functionals"": {""HYB_MGGA_X_MN15"": {}}, # HYB without alpha, parameter sourced from LibXC; }; func_dict[""B2PLYP""] = {; ""name"": ""B2PLYP"",; ""c_functionals"": {""GGA_C_LYP"": {""alpha"": 0.73}}, # C alpha implies C_MP2 = 1 - C_GGA; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.47}}, # X alpha implies X_HF = 1 - X_GGA; ""citation"": ""..."",; }; func_dict[""DSD-BLYP-D2""] = {; ""name"": ""DSD-BLYP-D2"",; ""c_functionals"": {; ""GGA_C_LYP"": {""alpha"": 0.55}, ; ""C_MP2"": {""alpha"": 1.0, ""ss"": 0.43, ""os"": 0.46}, # SS and OS tuned for -D2; },; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.29}},; ""citation"": ""..."",; ""dispersion"": {; ""type"": ""-D2"", ; ""params"": {""s6"": 0.35},; ""citation"": ""..."", ; },; }; ```; 3) The class `EmpiricalDispersion` will need to be adjusted to process the provided parameters accordingly. All possible parameters for the `dispersion_type` should be passed into `EmpiricalDispersion` from the handler above, so that `self.dash_params = dispersion_params`, with defaults already filled into `dispersion_params` for missing parameters (eg. `""s6"": 1.0, ""alpha6"": 14.0` for `-d3zero`). Perhaps using a switch (such as `alias == ""custom""` suggested above)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-365856686:1153,tune,tuned,1153,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-365856686,1,['tune'],['tuned']
Performance,"I had a crash for a geometry optimization, this is the stack track:. Reading symbols from /app/miniconda/bin/psi4...(no debugging symbols found)...done.; [New LWP 7474]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Core was generated by `psi4'.; Program terminated with signal SIGABRT, Aborted.; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimization']
Performance,"I have a system, where I'm interested in running sapt2+/aug-cc-pVDZ calculation. However, it quits after the start of SAPT2+. ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT2+ //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on cnode3005; *** at Sat Feb 29 03:11:38 2020. SAPT2+ ; Ed Hohenstein; 6 June 2009. Orbital Information; --------------------------; NSO = 1061; NMO = 1061; NRI = 3161; NOCC A = 69; NOCC B = 56; FOCC A = 19; FOCC B = 15; NVIR A = 992; NVIR B = 1005. Estimated memory usage: 140951.0 MB. Natural Orbital Cutoff: 1.000E-06; Disp(T3) Truncation: Yes; CCD (vv|vv) Truncation: Yes; MBPT T2 Truncation: Yes. Monomer A: 486 virtual orbitals dropped; Monomer B: 598 virtual orbitals dropped; ```; This the end of the log file.; ```; /home/XXX/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00007F6CEC755A15 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC753637 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BF32 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BD86 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63A38D Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63D75D Unknown Unknown Unknown; libpthread.so.0 00000034CF00F710 Unknown Unknown Unknown; core.so 00007F6CF40872D2 Unknown Unknown Unknown; core.so 00007F6CF4087EDA Unknown Unknown Unknown; core.so 00007F6CF408927E Unknown Unknown Unknown; core.so 00007F6CF404A1F0 Unknown Unknown Unknown; core.so 00007F6CF3F6CDF7 Unknown Unknown Unknown; core.so 00007F6CF33B0027 Unknown Unknown Unknown; core.so 00007F6CF33F983F Unknown Unknown Unknown; core.so 00007F6CF33C3CEA Unknown Unknown Unknown; core.so 00007F6CF33C3BB4 Unknown Unknown Unknown; core.so 00007F6CF304A32C Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FDD1 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:849,load,loaded,849,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['load'],['loaded']
Performance,"I have compiled psi4 on Linux (Centos) then I got the following run time error . ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so."". I have already sourced MKL and intel compilers as usual, with the following lines. ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/bin/compilervars.sh intel64; source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_libraries_2016/linux/mkl/bin/mklvars.sh intel64"". In old versions of psi4 I never encounter such a problem with the same intel package. Thanks,. @loriab @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552:112,load,load,112,https://psicode.org,https://github.com/psi4/psi4/issues/552,1,['load'],['load']
Performance,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:653,cache,cachelevel,653,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,2,['cache'],['cachelevel']
Performance,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:674,optimiz,optimizer,674,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"I have fixed the problem. it is a little bit weird to me why the following breaks the gradient code. I just try to save optimized MOs to wfn. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; CmoA->to_shared_matrix(Ca);; SharedMatrix moA = Process::environment.wavefunction()->Ca();; moA->copy(Ca);; ```. where CmoA is the my MO coeff. matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-121683761:120,optimiz,optimized,120,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121683761,2,['optimiz'],['optimized']
Performance,"I have found a few cases (Cr2) where DF kills CD. For the most part, I found that CD takes more time (3-4x) compared to conventional integrals. For the most part, if you are dealing with transition metals, computing the integrals seems to take a large amount of time and CD requires you to randomly compute different integrals, so the code becomes pretty slow. If anybody has any ideas of how to speed up this process please tell me. Right now, I am trying to run a system with 340 basis functions and the cholesky procedure has been running for 70 hours already. There exists very few DF basis sets with large enough AM for Chromium so I am forced to use Cholesky. . I have a branch in my fork where I am trying to figure out the major bottlenecks of cholesky and speed it up. The simplest idea, which is already done, is to compute the cholesky integrals only once and read them from disk. I basically allow cholesky to read the df_ints_io keyword. Previously, the CDJK and lib3index do not interact with this keyword, so it would compute the cholesky integrals if choleskify was ever called. . I agree with @dgasmith to use conventional integrals for the SAD guess. Cholesky seems to slower than conventional integrals. Generation of the cholesky integrals is known to be a slow process as shown by Lindh and Aquilante in many of their papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224376772:737,bottleneck,bottlenecks,737,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224376772,1,['bottleneck'],['bottlenecks']
Performance,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:440,optimiz,optimize,440,https://psicode.org,https://github.com/psi4/psi4/issues/1265,2,['optimiz'],"['optimizations', 'optimize']"
Performance,"I have no idea if this is the cause here, but there is a somewhat obscure effect called ""false sharing"" where CPU cache interference between threads can wreck parallel scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075511627:114,cache,cache,114,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075511627,1,['cache'],['cache']
Performance,"I have no problem with this, but there should be more distinction in the nocc setting. For example, frozen_docc in CHEMPS2 means that the orbitals are optimized in the CASSCF procedure and are correlated in CASPT2. This corresponds to restricted_docc through psi4 lingo. frozen_docc (in psi4) typically means that the orbitals are ""frozen"" and are taken to be RHF orbitals. . In all, I would say that CHEMPS2 should use nocc -> restricted_docc rather than frozen_core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223876187:151,optimiz,optimized,151,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223876187,1,['optimiz'],['optimized']
Performance,"I have now run almost the _entire_ test suite with 100% pass rate. (DFT benchmarks and fsapt-1 excluded as they always time out and are not relevant to these changes.) If there are still concerns about the metadata, tell me sooner rather than later. Next step is documenting the metadata. Also, am I correct in assuming that we want the optimization sow/reap code ripped up as well? I assume that wouldn't be very useful, without the sow/reap code in hessian and gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345:337,optimiz,optimization,337,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345,1,['optimiz'],['optimization']
Performance,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157864804:401,optimiz,optimize,401,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804,1,['optimiz'],['optimize']
Performance,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:1736,optimiz,optimization,1736,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['optimiz'],['optimization']
Performance,"I just checked and the Molden program does not impose a specific format for the floating point numbers. The attached molden file loads correctly. [molden_test.zip](https://github.com/psi4/psi4/files/2780369/molden_test.zip). Given this freedom, it would even be better to write all orbital coefficients, energies and occupation numbers in scientific notation with 15 digits after the comma.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1486#issuecomment-456186613:129,load,loads,129,https://psicode.org,https://github.com/psi4/psi4/issues/1486#issuecomment-456186613,1,['load'],['loads']
Performance,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:179,optimiz,optimize,179,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270,1,['optimiz'],['optimize']
Performance,"I just tested the code in this PR and works well for my purposes, i.e. loading the FCHK file into HORTON to perform a density partitioning. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882:71,load,loading,71,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882,2,"['load', 'perform']","['loading', 'perform']"
Performance,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:773,optimiz,optimize,773,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704,4,"['optimiz', 'perform']","['optimization', 'optimize', 'optimizer', 'performing']"
Performance,"I looked into this. I believe that this method is responsible for the lack of scaling:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L66; Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L147; The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance). I can think of two possible solutions to this problem:. 1. Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; 2. Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory. I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175:686,perform,performance,686,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175,1,['perform'],['performance']
Performance,"I officially opened up a PR for v2rdm_casscf, at https://github.com/loriab/v2rdm_casscf/pull/5, which removes ERISieve from v2rdm_casscf and replaces it with TwoBodyAOInt. Once that is added in, we can progress with this PR, as that is the current bottleneck preventing this PR from passing CI testing. Ideally, there's no fun surprises after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862:248,bottleneck,bottleneck,248,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862,1,['bottleneck'],['bottleneck']
Performance,"I opted to use std::string and ostringstream instead of just increasing the size of the static arrays, because this is not bottleneck code. I'm not sure why they were used in the original code, but that seemed to be over 20 years old, i.e. originally C code?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607#issuecomment-277851446:123,bottleneck,bottleneck,123,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277851446,1,['bottleneck'],['bottleneck']
Performance,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:436,optimiz,optimization,436,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['optimiz'],['optimization']
Performance,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:579,Load,Loading,579,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['Load'],['Loading']
Performance,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:578,cache,cachedir,578,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['cache'],['cachedir']
Performance,"I ran a HF/aTZ calculation on decane with `scf_type direct` and `df_scf_guess false` (meaning the majority of the calculation is spent computing integrals). Here's the walltime (in seconds) of the JK step for different values of `engine_precision`:. | 0.0 <br /> (no screening) | ε * (max_nprim ^ -4.0) * 1.e-3 <br /> (proposed change) | ε * (max_nprim ^ -4.0) * 1.e-2 <br /> (current value) | ε <br /> (libint2 default) |; |:------------------:|-----------------------------------------------------------|------------------------------------------------------|-----------------------------|; | 3107 | 3031 | 3041 | 2843 |. Looks like there'd be a small but non-negligible performance hit if we used 0.0. The current precision setting already performs close to 0.0 (relative to the libint2 default). There's basically no change in performance if we tighten the current setting by a factor of 10. This conventional HF example is also a kind of worst-case scenario, since integral calculation is not the rate-limiting step in most Psi4 calculations (like anything with DF). I think it wouldn't hurt to tighten (or completely turn off) primitive screening, although there could be other systems or basis sets for which primitive screening leads to larger performance gains.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783404337:673,perform,performance,673,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783404337,4,['perform'],"['performance', 'performs']"
Performance,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/1947,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I ran some tests to try to reproduce the error, and I found that the point where the error started _differed_ between runs. Sometimes, it ended after printing B(2, 1, 3), sometimes it printed *R(0,1) as infinity and said the optimization failed, sometimes it said it was generating an empirical Hessian for each fragment and failed after that... Is this what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385065247:225,optimiz,optimization,225,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385065247,1,['optimiz'],['optimization']
Performance,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297:209,optimiz,optimization,209,https://psicode.org,https://github.com/psi4/psi4/issues/2297,2,['optimiz'],"['optimization', 'optimization-complete-obliterated-annihilated']"
Performance,"I successfully ran a large optimization (CC2, C1, 200GB, 322 bf) and runs fine now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2027#issuecomment-721901212:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/pull/2027#issuecomment-721901212,1,['optimiz'],['optimization']
Performance,"I suppose if anyone wants to check the merged `SCF_SUBTYPE` docstring, they can; else, I'll add this to the merge queue by the time I finish up today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147:114,queue,queue,114,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147,1,['queue'],['queue']
Performance,"I suspect there is something problematic in python with the use of the bash dot to specify a directory, or the use of a non-global path location. I know it is problematic with psi4+cfour. These will **not** work for me for cfour optimizations:; `psi4 -s . opt.in` [here the gradient is not parsed]; `psi4 -s ./localdir opt.in` [does not find the (correctly created) directory]. This works:; `psi4 -s /scratch/ opt.in`. If you want to force users to always use a global path, I would be fine with it. [ Psi4 1.1a2.dev375 (af8133b)]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/669:229,optimiz,optimizations,229,https://psicode.org,https://github.com/psi4/psi4/issues/669,1,['optimiz'],['optimizations']
Performance,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:114,perform,performed,114,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938,1,['perform'],['performed']
Performance,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:165,load,loaded,165,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,['load'],['loaded']
Performance,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:27,Optimiz,OptimizationResult,27,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['Optimiz'],['OptimizationResult']
Performance,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:51,throughput,throughput,51,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,2,"['Optimiz', 'throughput']","['OptimizationResult', 'throughput']"
Performance,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:44,optimiz,optimizer,44,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391,2,['optimiz'],"['optimizer', 'optimizers']"
Performance,"I think it's worth mentioning that #1235 also adds the unique feature of doing composite calculations using arbitrary options (frozen core, relativistic effects) or basis sets - it's not just a developer interest PR. For performance, the grid work @zachglick in #1291 and obviously your DFT grid cache in #1233 (which you mention in the top section) are pretty huge. I don't know if you're planning to do any benchmarking, especially wrt. the discussion we had at PsiCon - even if it's just Psi4 1.2.1 vs Psi4 1.3a1 vs Psi4 1.3rc, it would be good to show how much improvement there actually is, especially on > 8 threaded jobs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768:221,perform,performance,221,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:403,perform,performed,403,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,1,['perform'],['performed']
Performance,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:117,optimiz,optimize,117,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965,1,['optimiz'],['optimize']
Performance,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344476280:312,optimiz,optimization,312,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280,4,['optimiz'],['optimization']
Performance,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344630452:91,optimiz,optimization,91,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452,3,['optimiz'],"['optimization', 'optimize', 'optimizing']"
Performance,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293473618:224,optimiz,optimization-with,224,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618,1,['optimiz'],['optimization-with']
Performance,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344334581:221,optimiz,optimization,221,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581,2,['optimiz'],['optimization']
Performance,"I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; 1gb of memory. Is that short enough? If so, I'll commit the change. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; wrote:. > I just removed opt10 from all ctest labels. Its still present, but will; > not run unless you specifically request it.; > ; > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > ; > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > that's what @dgasmith https://github.com/dgasmith has already done.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184413127:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184413127,1,['optimiz'],['optimization']
Performance,"I tried to run a geometry optimization on (H_2)+. A segfault occurs. Input file:. memory 250 mb. molecule h2 {; 1 2; H; H 1 1.5; }. set reference uhf; set basis aug-cc-pVDZ; optimize('scf'). Valgrind trace; ==12400== Invalid read of size 8; ==12400== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (in /usr/bin/psi4); ==12400== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (in /usr/bin/psi4); ==12400== by 0x67BD9E: py_psi_scfgrad() (in /usr/bin/psi4); ==12400== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (in /usr/bin/psi4); ==12400== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12400== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12400== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0); ==12400== Address 0x0 is not stack'd, malloc'd or (recently) free'd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6:26,optimiz,optimization,26,https://psicode.org,https://github.com/psi4/psi4/issues/6,2,['optimiz'],"['optimization', 'optimize']"
Performance,I typed conda list into my Ubuntu terminal and got the following return(s):. ```; # packages in environment at /home/emkal/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; adcc 0.15.17 py310hc6cd4ac_2 conda-forge; annotated-types 0.6.0 pyhd8ed1ab_0 conda-forge; archspec 0.2.3 pyhd8ed1ab_0 conda-forge; boltons 23.1.1 pyhd8ed1ab_0 conda-forge; brotli-python 1.1.0 py310hc6cd4ac_1 conda-forge; bzip2 1.0.8 hd590300_5 conda-forge; c-ares 1.26.0 hd590300_0 conda-forge; ca-certificates 2024.6.2 hbcca054_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; certifi 2024.6.2 pyhd8ed1ab_0 conda-forge; cffi 1.16.0 py310h2fee648_0 conda-forge; charset-normalizer 3.3.2 pyhd8ed1ab_0 conda-forge; colorama 0.4.6 pyhd8ed1ab_0 conda-forge; conda 24.5.0 py310hff52083_0 conda-forge; conda-libmamba-solver 24.1.0 pyhd8ed1ab_0 conda-forge; conda-package-handling 2.2.0 pyh38be061_0 conda-forge; conda-package-streaming 0.9.0 pyhd8ed1ab_0 conda-forge; cppe 0.3.1 py310h7c63755_9 conda-forge; dftd3-python 1.0.0 py310hdbe52f6_2 conda-forge; dftd4 3.6.0 hf49bc11_0 conda-forge; dftd4-python 3.6.0 py310hc409063_1 conda-forge; distro 1.9.0 pyhd8ed1ab_0 conda-forge; dkh 1.2 hd59d2e7_0 conda-forge; exceptiongroup 1.2.0 pyhd8ed1ab_2 conda-forge; execnet 2.0.2 pyhd8ed1ab_0 conda-forge; fmt 10.2.1 h00ab1b0_0 conda-forge; frozendict 2.4.4 py310hc51659f_0 conda-forge; gau2grid 2.0.7 h0b41bf4_2 conda-forge; gcp-correction 2.3.1 h1990efc_2 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gtest 1.14.0 h00ab1b0_1 conda-forge; h5py 3.11.0 nompi_py310hf054cd7_102 conda-forge; hdf5 1.14.3 nompi_h4f84152_100 conda-forge; icu 73.2 h59595ed_0 conda-forge; idna 3.6 pyhd8ed1ab_0 conda-forge; iniconfig 2.0.0 pyhd8ed1ab_0 conda-forge; jsonpatch 1.33 pyhd8ed1ab_0 conda-forge; jsonpointer 3.0.0 py310hff52083_0 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.21.3 h659f571_0 c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098:597,cache,cached-property,597,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098,1,['cache'],['cached-property']
Performance,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:19,perform,perform,19,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['perform'],['perform']
Performance,"I usually find their packages to be of excellent quality. Which is your bug report? I remember a lightning talk, I think, at a recent SciPy about efforts to bring openblas up to snuff. Apparently even all their internal tests (or maybe it was numpy's tests) weren't passing for a long time. I agree that runtime processor detection is a build dimension to which conda has not expanded. That's why psi uses Intel compilers to add some multiarch optimizations. But why should cpu detection affect the numerical results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709:444,optimiz,optimizations,444,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709,1,['optimiz'],['optimizations']
Performance,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:10,optimiz,optimize,10,https://psicode.org,https://github.com/psi4/psi4/issues/1095,6,['optimiz'],"['optimization', 'optimize', 'optimizer']"
Performance,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:23,optimiz,optimization,23,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608,3,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:79,load,loaded,79,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262,2,['load'],['loaded']
Performance,"I was running a constrained geometry optimization but the optimizer failed with this error:; ```; Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is 0. **** Optimization has failed! (in 3 steps) ****; ```. Here's the [input file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and the [output file](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out). I ran it again with `dynamic_level = 1` but this time I got the following error:; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); 7447,46 99%; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/issues/858,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimizer']"
Performance,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:628,load,load,628,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,1,['load'],['load']
Performance,"I will stick to the SCF issue and report the results once the B3LYP-D3/def2-tzvp geom opt is done. . I was noting that it seemed odd that one optimization did 50 iterations and petered out(using B3LYP/6-31G*), but upon restarting, it converged in one step. Different wavefunctions though, the SCF in the ""restart"" started from SAD guess, the 50th iteration of the first try was using previous orbitals as initial guesses, I turned off permanent SAD guess for it. In short, my apologies for muddying the water, I think just ignore, and I will report the results for the initial optimization problem once they finish. I have both `opt_coordinates both` as well as `opt_coordinates both` and `guess sad`; `guess_persist true` running.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163:142,optimiz,optimization,142,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163,2,['optimiz'],['optimization']
Performance,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:64,optimiz,optimize,64,https://psicode.org,https://github.com/psi4/psi4/issues/1296,2,['optimiz'],['optimize']
Performance,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1079:313,optimiz,optimization-with-additional-harmonic-constraints,313,https://psicode.org,https://github.com/psi4/psi4/issues/1079,1,['optimiz'],['optimization-with-additional-harmonic-constraints']
Performance,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:321,perform,performing,321,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['perform'],['performing']
Performance,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:778,cache,cached,778,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,1,['cache'],['cached']
Performance,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:459,perform,performs,459,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,2,['perform'],['performs']
Performance,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089484:123,perform,performs,123,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484,1,['perform'],['performs']
Performance,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:406,optimiz,optimized,406,https://psicode.org,https://github.com/psi4/psi4/issues/1354,1,['optimiz'],['optimized']
Performance,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:53,queue,queue,53,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269,1,['queue'],['queue']
Performance,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:134,optimiz,optimization,134,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,1,['optimiz'],['optimization']
Performance,"I'm in the process of implementing forces in my own code, ERKALE. Related; to this, I was looking at the nuclear attraction integral derivative code; in PSI. Interestingly, it would seem that there is a bug in PSI: the loop limits; are the same in the derivative code as in the normal attraction integral; code. The relevant code in src/lib/libmints/osrecur.cc is. ```; int mmax = am1 + am2;. double *F = new double[mmax+1];. // Form Fm(U) from A20; calculate_f(F, mmax, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; for (m=0; m<=mmax-1; ++m) {; vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; }; ```. Table X in the Obara-Saika paper states that; (s | Au | s)^(0) = 2 zeta ( Pu - Cu ) (s | A0 | s)^(1). If you look at what the code above does, it gives a plain zero for this; integral. Furthermore, if you look at the recursion formulas for the integral derivatives A(mu), you see that they are equivalent to the case A(0) with an additional term depending on A(mu-1i). However, in the initializations and the recursions the derivatives only go to mmax-1, not mmax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3:479,Perform,Perform,479,https://psicode.org,https://github.com/psi4/psi4/issues/3,1,['Perform'],['Perform']
Performance,"I'm looking for anharmonic modes of vibration of complexes. Good point on the optimization and frequency, for testing purposes I bring the level of theory down to hartree-fock just to make it go faster. On production code runs, the level of theory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:78,optimiz,optimization,78,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['optimiz'],['optimization']
Performance,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:1041,perform,perform,1041,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['perform'],['perform']
Performance,"I'm not sure what the problem is but this works fine, I'm happy to say :). set optking {. frozen_dihedral = ("". 5 1 2 6. 4 1 2 6. 3 1 2 6. ""). }. #optimize(""hf/3-21G""). import optking. set basis 3-21g. optking.optimize_psi4('hf'). On Fri, Jan 15, 2021 at 6:42 PM Lori A. Burns <notifications@github.com>; wrote:. > Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I; > think the trouble is in predicting the next geom step, so may be of; > interest to @psi-rking <https://github.com/psi-rking>; >; > molecule {; > 0 1; > C -0.167039 -0.712374 -0.022325; > O 0.119573 0.677072 0.056530; > H -0.453842 -0.989160 -1.036819; > H -0.997038 -0.962046 0.638968; > H 0.691232 -1.312038 0.284396; > H 0.775814 0.817745 0.757350; > }; >; > set optking {; > frozen_dihedral = (""; > 5 1 2 6; > 4 1 2 6; > 3 1 2 6; > ""); > }; > #set {; > # geom_maxiter 2; > # g_convergence GAU_LOOSE; > #}; > #memory 6GB; > #set_num_threads(6); > #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); > #for _ in range(1):; > # try:; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # break; > # else:; > # try:; > # set opt_coordinates cartesian; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # pass; > #clean(); >; > optimize(""hf/3-21G"") # segfaults; > #optimize(""hf/cc-pvdz"") # 4 iter; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2084#issuecomment-761275679>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAEFTYTU5HYJQMMSDS2DOHPANCNFSM4WETR7OA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278:147,optimiz,optimize,147,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278,7,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"I'm now resuming work on this. Something I had overlooked previously was that most of the memory being managed were of containers of numeric types. Lots of `int *`, `double **`, `double ***`, and so on. What's the ""right"" way to modernize those? I haven't seen smart pointers being used for this before. I'm inclined to convert to `std::vector` for things that are obviously not performance critical, but leave raw pointers otherwise. (_Especially_ for things that need to call BLAS.) Is this the right decision, or should I modernize differently?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-632730022:379,perform,performance,379,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-632730022,1,['perform'],['performance']
Performance,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893146:80,concurren,concurrent,80,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146,1,['concurren'],['concurrent']
Performance,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:522,Perform,Performing,522,https://psicode.org,https://github.com/psi4/psi4/issues/1426,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287:14,optimiz,optimize,14,https://psicode.org,https://github.com/psi4/psi4/issues/2287,2,['optimiz'],"['optimization', 'optimize']"
Performance,"I'm trying to perform SAPT calculations with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:14,perform,perform,14,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['perform'],['perform']
Performance,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:431,optimiz,optimization,431,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,2,['optimiz'],['optimization']
Performance,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:65,perform,performing,65,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223,1,['perform'],['performing']
Performance,"I've been investigating orbital convergence problems in the `occ` module, such as in [this test case](https://github.com/psi4/psi4/blob/master/tests/omp2-3/input.dat). I find that convergence massively improves when I turn level shifting _off_, as it is [on by default](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L2695). `grep -inr 'level_shift' .` indicates that the level shifting is currently being used exclusively [to scale the diagonal elements of the B matrix in the orbital optimization step of DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/diis.cc#L74-L77). @bozkaya, I know this is old code, but can you comment on why you did the level shifting this way? This doesn't seem similar to any level shifting scheme I've ever seen. My quick numerical tests indicate that this makes convergence _much worse_, and getting rid of this heals some tests that @loriab is currently concerned about. Comments from @susilehtola are also welcome for this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777:505,optimiz,optimization,505,https://psicode.org,https://github.com/psi4/psi4/issues/1777,1,['optimiz'],['optimization']
Performance,"I've just checked, and all the orbital and fitting basis sets have boron. Could you run with `set print 3`? That should trigger printing of exactly what basis sets are loaded and from where in lines like. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: STO-3G; atoms 1 entry O line 80 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; atoms 2-3 entry H line 18 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225937045:168,load,loaded,168,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225937045,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202577523:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523,3,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,"I've linked the Fedora package to a separately compiled libint package (also in the official Fedora repository) for which LIBINT_MAX_AM = 11, LIBINT_OPT_AM = 7, and it would seem that at least MP2 geometry optimization works with cc-pV6Z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139103808:206,optimiz,optimization,206,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139103808,1,['optimiz'],['optimization']
Performance,"I've made changes and then had only the opt-irc-2 test case fail. Now I notice that others are having problems: https://testboard.org/cdash/testSummary.php?project=3&name=opt-irc-2&date=2016-02-27 . This is only a slight discrepancies at the end of a long IRC. In my case, at least, the number of IRC steps is the same. Do convergence keyword need tightening to preserve the reference progress of the IRC? Or does the compare_values check just need loosening to account for variance after many many optimization cycles? @avcopan, could you investigate?. Energy of last IRC point: computed value (-92.869134) does not match (-92.868907) to 5 decimal places.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290:499,optimiz,optimization,499,https://psicode.org,https://github.com/psi4/psi4/issues/290,1,['optimiz'],['optimization']
Performance,I've reuploaded a tarball that should have the fix. Hopefully it should work now. You may need to delete any cached versions of `simint-v0.7.tar.bz2` that you have in your build directory (or just delete your build directory and start from scratch).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-357065803:109,cache,cached,109,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-357065803,1,['cache'],['cached']
Performance,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:473,perform,performance,473,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945,1,['perform'],['performance']
Performance,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:3846,Perform,Performing,3846,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,2,['Perform'],['Performing']
Performance,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4145,Perform,Performing,4145,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['Perform'],['Performing']
Performance,"Ideally, you should know what kind of basis set you're using, as you're presumably going to cite it in your work; the details about the number of core `e-`'s treated as effective potentials will be included there. There are also all-electron basis sets available for almost any element; some of them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP in the `=> Loading Basis Set <=` section, and the details are printed later on under `==> Primary Basis <==`. As for the question of 28 vs 36 electrons: the first 28 electrons are the 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell. The additional 8 electrons you're thinking about are from the 4th period shells, where the 4d10 part is in your 5th valence shell - so you don't really want to replace any of those with a potential. (At least that's my rather limited understanding.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178:382,Load,Loading,382,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178,1,['Load'],['Loading']
Performance,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:258,perform,performance,258,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836,1,['perform'],['performance']
Performance,"If I do a Yahoo search, I get redirected if I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:849,load,loaded,849,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['loaded']
Performance,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145:87,load,load,87,https://psicode.org,https://github.com/psi4/psi4/issues/1145,3,"['load', 'optimiz']","['load', 'optimization', 'optimize']"
Performance,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:1196,load,loadtxt,1196,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699,1,['load'],['loadtxt']
Performance,"If I have time this weekend, I'm going to try making a small little pair of Python extension modules that are each linked to a separate copy of MKL and see if I can reproduce anything like this. I _think_ that must be the relevant difference between my test and yours. Weirdness about two simultaneous copies of BLAS libraries being loaded + threads seems to be involved in #748 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312399904:333,load,loaded,333,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312399904,1,['load'],['loaded']
Performance,"If I'm remembering where I left off and performing the diffs correctly, there's no more changes to be made to those 4 array/tensor files in the dfocc saga. And none of the yet-to-be-PRd code uses `davidson`, `cdsyev`, `cdgesv`, `lineq_flin`, or `lineq_pople`. There is new code with `diagonalize`, though, listed below. If the changes in this PR don't interfere with the calls below, or we can work around them, I think we can release the hold and merge this. Thanks for your patience, @TiborGY. ```; # HciA is Tensor2d (or sharedptr to it); cis.cc: HciA->diagonalize(CciA, EciA, cutoff);. # G is Tensor2d; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);. # Gamma* and Fock* are Tensor2d; fno.cc: Gamma_->diagonalize(Tvv_, diag_n_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: GammaA_->diagonalize(TvvA_, diag_nA_, cutoff_, false);; fno.cc: GammaB_->diagonalize(TvvB_, diag_nB_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: FockfvB->diagonalize(UfvB, eigfvB, cutoff_);; fno.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff_);. # a_opdm, etc. are Matrix; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: b_opdm->diagonalize(bevecs, bevals, descending);. # FockooA, etc. are Tensor2d; semi_canonic.cc: FockooA->diagonalize(UooA, eigooA, cutoff);; semi_canonic.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff);; semi_canonic.cc: FockooB->diagonalize(UooB, eigooB, cutoff);; semi_canonic.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138:40,perform,performing,40,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138,1,['perform'],['performing']
Performance,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052:60,perform,perform,60,https://psicode.org,https://github.com/psi4/psi4/issues/1052,1,['perform'],['perform']
Performance,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:94,optimiz,optimize-function-cbs-extrapolation-and-cfour,94,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['optimiz'],['optimize-function-cbs-extrapolation-and-cfour']
Performance,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:396,CACHE,CACHE,396,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['CACHE'],['CACHE']
Performance,"If it's generated code, would something like the libint ExternalProject w/i ExternalProject work? Or is it processor-tuned generated code? But we should probably just talk in person someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-263735026:117,tune,tuned,117,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-263735026,1,['tune'],['tuned']
Performance,"If psi4 calls OpenBLAS from several concurrent threads, even with OpenMP you may be running into a problem that was (hopefully) fixed only two weeks ago on the ""develop"" branch. (https://github.com/xianyi/OpenBLAS/pull/1536).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391028478:36,concurren,concurrent,36,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391028478,1,['concurren'],['concurrent']
Performance,"If the table from @loriab is how the program is behaving, then yes, it would seem to be ok if optimize() defaulted to return_total_data True. However, shouldn't we also make this the default behavior with gradient(), just in case anyone did call it with cp? (or is that somehow not possible)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869935780:94,optimiz,optimize,94,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869935780,1,['optimiz'],['optimize']
Performance,"If this is only affecting CC wfn's then a full deep copy could be avoided. Instead, just deep copy the density in `ccdensity` before overwriting with the correlated density. . Note that the signature `psi::ccdensity::ccdensity(std::shared_ptr<Wavefunction> ref_wfn,...)` is misleading because at this point that function is passed the `psi::ccenergy::CCEnergyWavefunction`. That should work for a short term fix, however I agree that we have to come up with a better way to cache the SCF wavefunction quantities long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318:474,cache,cache,474,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318,1,['cache'],['cache']
Performance,"If we don't print the number of implied core electrons in the output; somewhere when using an ECP basis, it wouldn't be a bad idea to do so. On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; wrote:. > Ideally, you should know what kind of basis set you're using, as you're; > presumably going to cite it in your work; the details about the number of; > core e-'s treated as effective potentials will be included there. There; > are also all-electron basis sets available for almost any element; some of; > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP; > in the => Loading Basis Set <= section, and the details are printed later; > on under ==> Primary Basis <==.; >; > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > The additional 8 electrons you're thinking about are from the 4th period; > shells, where the 4d10 part is in your 5th valence shell - so you don't; > really want to replace any of those with a potential. (At least that's my; > rather limited understanding.); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311:617,Load,Loading,617,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311,1,['Load'],['Loading']
Performance,"If you do end up working on it, we would love to incorporate your codes; however, for the time being we are going to close this issue as our resident SAPT code expert will not have a chance to improve the load balancing anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-170066558:205,load,load,205,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-170066558,1,['load'],['load']
Performance,"If you use the new optking feature that allows freezing of individual Cartesian coordinates _without_ also setting `no_reorient` and `no_com`, the molecule reportedly turns into a ""high-speed car wreck"". It is requested that the driver turn those molecule options on when performing such optimizations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179:272,perform,performing,272,https://psicode.org,https://github.com/psi4/psi4/issues/179,2,"['optimiz', 'perform']","['optimizations', 'performing']"
Performance,"Improved fixed-coordinate optimizations, PES scans.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:26,optimiz,optimizations,26,https://psicode.org,https://github.com/psi4/psi4/pull/328,1,['optimiz'],['optimizations']
Performance,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:220,optimiz,optimized,220,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592,1,['optimiz'],['optimized']
Performance,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-183702993:152,optimiz,optimized,152,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993,2,['optimiz'],"['optimize', 'optimized']"
Performance,"In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828:719,optimiz,optimizers,719,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828,2,['optimiz'],['optimizers']
Performance,"In general, I don't think this is broken for all Wavefunctions. It appears the specific issue is CCSD at the moment. Short term this can be fixed by creating deep copying the reference function rather than shallow copy. However, there is some thought that we would remove this entirely and we can cache the SCF wavefunction in other ways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454804317:297,cache,cache,297,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454804317,1,['cache'],['cache']
Performance,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:167,optimiz,optimizer,167,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157884587:289,optimiz,optimizations,289,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"Input below gives error below. Should this happen, @psi-rking?. ```. molecule innocentlookingwater {; O 0.00000000 0.00000000 0.00000000; H 0.16863830 0.60275550 -0.70533100; H -0.76265500 0.37866910 0.40513500; O -0.18467200 2.33422480 0.31265570; H 0.48244850 1.84992580 0.77377280; H -0.08271400 3.22838610 0.58596930; }. set basis 6-31g. optimize('scf'); ```. ```; TORS::compute_val: unable to compute torsion value; Optimizer: Optimization failed!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/231:342,optimiz,optimize,342,https://psicode.org,https://github.com/psi4/psi4/issues/231,3,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:244,optimiz,optimization,244,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,1,['optimiz'],['optimization']
Performance,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:11,perform,performance,11,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584,1,['perform'],['performance']
Performance,Is there a performance handicap in using `0.0`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783069692:11,perform,performance,11,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783069692,1,['perform'],['performance']
Performance,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:284,load,loading,284,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,1,['load'],['loading']
Performance,"Is there any way to compute analytical nuclear gradients with solvent models? If none, any future plan to implement it?. It would be great if I could optimize a molecular geometry in a solvent by psi4 which has lots of excellent methods available.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2862:150,optimiz,optimize,150,https://psicode.org,https://github.com/psi4/psi4/issues/2862,1,['optimiz'],['optimize']
Performance,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:210,perform,performed,210,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['perform'],['performed']
Performance,"It can a bit, Psi's startup time is ~0.4 seconds or so with all of Python loading in. In general QC will dwarf this time so it isn't much of an issue. Your right though with XTB and DFTB it gets more interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615224465:74,load,loading,74,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615224465,1,['load'],['loading']
Performance,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:26,optimiz,optimization,26,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,2,['optimiz'],['optimization']
Performance,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['optimiz'],['optimization']
Performance,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:277,optimiz,optimization,277,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,1,['optimiz'],['optimization']
Performance,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:890,Load,Loading,890,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['Load'],['Loading']
Performance,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126509903:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903,1,['optimiz'],['optimization']
Performance,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:49,optimiz,optimized,49,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,3,"['optimiz', 'perform']","['optimization', 'optimized', 'performance']"
Performance,"It seems that were it counts the correct python is used. Main CMake; ```; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:761,Perform,Performing,761,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"It shouldn't: the JK object and HF object should have similar performance. I haven't benchmarked at all, but this is needed for DFT hessians",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856:62,perform,performance,62,https://psicode.org,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856,1,['perform'],['performance']
Performance,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343303520:149,CACHE,CACHE,149,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520,2,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"It took me getting flu to find the time to look into this, and here's my initial finding. If I optimize the geometry and dump it into an input file; ```; molecule h2o {; O 0.000000000000 -0.000000000000 0.063771204693; H -0.000000000000 0.748825894352 -0.506047648051; H 0.000000000000 -0.748825894352 -0.506047648051; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; I get ; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.945 2519.217; 2 4142.103 5959.555; 3 4237.372 6096.625; ```; If I permute the first two rows of the geometry, per the bug report, I get:; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; This is clearly wrong, but it does at least mean that the hessian code is for the most part correct. I'm trying to figure out where the atom and/or basis function ordering issue is introduced and hope to have a patch soon. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-360894371:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-360894371,1,['optimiz'],['optimize']
Performance,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335970314:196,load,loaded,196,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314,1,['load'],['loaded']
Performance,JK Memory estimates and tighter bounds on DFT cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:46,cache,cache,46,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['cache'],['cache']
Performance,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:543,Optimiz,Optimization,543,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,2,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:377,optimiz,optimizer,377,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:317,load,loading,317,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624,1,['load'],['loading']
Performance,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259569411:101,load,loads,101,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411,1,['load'],['loads']
Performance,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288900538:22,optimiz,optimizer,22,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538,4,['optimiz'],"['optimization', 'optimizations', 'optimizer']"
Performance,Left it overnight and still same place with full cpu load. Started H by G and yes finished soon after...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145#issuecomment-414829587:53,load,load,53,https://psicode.org,https://github.com/psi4/psi4/issues/1145#issuecomment-414829587,1,['load'],['load']
Performance,"Let me be more explicit about why I find the ""multi-fragment optimizations"" section confusing. * The first sentence talks about ""the metric for connecting atoms"" without explaining what ""connecting atoms"" means. Even worse, the first sentence is not obviously about dimers.; * It isn't clear to me what a ""reference point"" signifies. While I can tell whether something is an acceptable reference point, what are these used for? It looks like these are atoms used to define intermolecular internal coordinates.; * I don't know what it means to talk about a linear combination of atoms, or how to interpret `[[3], [1], [2]], [[1, 2, 3, 4, 5, 6], [2], [6]]` in your first example. The third point is crucial - I can't follow your examples. I won't insist on a figure, but I do insist on examples I can understand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107:61,optimiz,optimizations,61,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107,1,['optimiz'],['optimizations']
Performance,Locally working optking 3.0 call through psi4.optimize(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:46,optimiz,optimize,46,https://psicode.org,https://github.com/psi4/psi4/pull/1120,1,['optimiz'],['optimize']
Performance,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307915395:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395,1,['optimiz'],['optimization']
Performance,Looks good to me. I'll let someone else perform the actual merge after they look it over again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444628214:40,perform,perform,40,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444628214,1,['perform'],['perform']
Performance,"Looks ok. > Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?. The final results are not affected by the lower theory Hessian[*].; In fact, the default initial Hessian is based on an extremely simple force-field so a DFT hessian is certainly an improvement. :-). [* For most practical purposes. For large and flexible molecules with many close-lying minima one could, in principle, find different minima with different settings for the optimizer.]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778:569,optimiz,optimizer,569,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778,1,['optimiz'],['optimizer']
Performance,MP2.5 and MP3 geometry optimizations crash for 2 electron systems,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:23,optimiz,optimizations,23,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['optimiz'],['optimizations']
Performance,Many thanks to @JonathonMisiewicz and some very diligent forum members for pointing out the performance problem :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805#issuecomment-583022833:92,perform,performance,92,https://psicode.org,https://github.com/psi4/psi4/pull/1805#issuecomment-583022833,1,['perform'],['performance']
Performance,"Many thanx Ugur, all works fine but sum of orbitals occupation in molden file is twice of electrons in RHF case.; Is there any plans to implement ""molden_write"" in Orbital optimized DCFT case?. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152722428:172,optimiz,optimized,172,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152722428,1,['optimiz'],['optimized']
Performance,"Memory usage seems to climb upon repeating calculations in the same process. Here's my test script:. ```; import os; import psi4; import psutil. def check_resources():; process = psutil.Process(os.getpid()); return f""Memory used by process: {process.memory_info().rss / (1024 ** 2):.2f} MB"". cyanamide = psi4.geometry(""""""; C 0.000 0.239 0.000; N -0.044 1.395 0.000; N 0.134 -1.155 0.000; H -0.315 -1.556 0.837; H -0.315 -1.556 -0.837; """"""). for n in range(21):; psi4.energy(""r2scan-3c""); psi4.core.clean(). with open(""psi4.log"", ""a"") as f2:; f2.write(f""{n}: {check_resources()}\n""); ```. Here's what I get:. ```; 0: Memory used by process: 498.48 MB; 1: Memory used by process: 463.73 MB; 2: Memory used by process: 538.73 MB; 3: Memory used by process: 610.47 MB; 4: Memory used by process: 726.72 MB; 5: Memory used by process: 788.34 MB; 6: Memory used by process: 848.44 MB; 7: Memory used by process: 904.81 MB; 8: Memory used by process: 912.50 MB; 9: Memory used by process: 912.62 MB; 10: Memory used by process: 1016.02 MB; 11: Memory used by process: 1022.06 MB; 12: Memory used by process: 1037.52 MB; 13: Memory used by process: 1037.52 MB; 14: Memory used by process: 1036.77 MB; 15: Memory used by process: 1039.41 MB; 16: Memory used by process: 1039.16 MB; 17: Memory used by process: 1039.16 MB; 18: Memory used by process: 1039.16 MB; 19: Memory used by process: 1092.38 MB; 20: Memory used by process: 1094.72 MB; ```. After the first call, only about 500 MB of memory have been claimed; after 10 calls, this has crept up to over 1 GB. This could cause issues e.g. in an *ab initio* MD context, or simply in a lengthy optimization...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207:1637,optimiz,optimization,1637,https://psicode.org,https://github.com/psi4/psi4/issues/3207,1,['optimiz'],['optimization']
Performance,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182581290:339,concurren,concurrent,339,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290,1,['concurren'],['concurrent']
Performance,"Mostly. Holger also was unconvinced the `nan` checks were performance-negligible, so I need to check that as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1179307181:58,perform,performance-negligible,58,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1179307181,1,['perform'],['performance-negligible']
Performance,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:118,optimiz,optimization,118,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['optimiz'],['optimization']
Performance,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504:568,load,loaded,568,https://psicode.org,https://github.com/psi4/psi4/issues/504,1,['load'],['loaded']
Performance,"My compilations pass the ion-test, but I too get no psiapi speedup. But after using (another) of my openblas binaries for a bit I am not exactly happy. The FNO-DF-CCSD iterations do not seem to thread correctly, or very poorly. (visually checking with `top`). The conda `1.2rc2` binary I just tried is sooo much faster and puts good load on all 16 cores. At this point I don't feel like pursuing an OpenBLAS solution anymore. Maybe if our lab buys AMD servers...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390898246:333,load,load,333,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390898246,1,['load'],['load']
Performance,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178826938:40,load,loads,40,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938,1,['load'],['loads']
Performance,"My guess is that the performance would be better with fewer threads, since too much parallellization can hurt performance. The 50 Hartree difference in energy suggests that the compilation on Summit is not good. Did you run the Psi4 test suite?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965:21,perform,performance,21,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965,2,['perform'],['performance']
Performance,"My guess is that you are only allowing contributions when both basis functions are on the same center which removes the density where basis functions are on different centers. ```; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""cc-pVDZ"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-14}). method = ""PBE""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). # Grab objects; basis = wfn.basisset(); Vpot = wfn.V_potential(); points_func = Vpot.properties()[0]. center = 2. for center in range(3):; # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()); nlocal_basis = lpos.shape[0]. oncenter = np.array([basis.function_to_center(x) == center for x in lpos]); lpos = lpos[oncenter]. # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :nlocal_basis]; phi = phi[:, oncenter]. # Build a local density; localDa = Da[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(center, nelectrons); ```. ```; 0 7.59001168019781; 1 0.5717653447775689; 2 0.5717641193430182; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963:1467,optimiz,optimize,1467,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963,1,['optimiz'],['optimize']
Performance,"My input file basically just has the molecule definition and then:. ```; dih_string = ""17 4 2 5 0.001""; set optking fixed_dihedral = $dih_string. optimize('B3LYP/3-21G'); ```. ...so I don't think it should be doing anything fancy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347905172:146,optimiz,optimize,146,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347905172,1,['optimiz'],['optimize']
Performance,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:10611,optimiz,optimized,10611,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,"NTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1077,load,loaded,1077,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loaded']
Performance,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271932154:412,cache,cache,412,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154,16,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:339,Perform,Performing,339,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"No transition-state optimization algorithm always converges to the desired TS. This case is so expensive it is unwieldy to debug. I wonder what the issue is to be solved here. Is there a TS nearby to the input geometry, and is it known to be in Cs symmetry?. If the P-RFO eigenvector is asymmetric, do we want to follow it or not? If yes, then there is clearly a geometry symmetrization that will have to be omitted. If no, then it is hard to see how the algorithm could choose the best, nearest TS in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203056297:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203056297,1,['optimiz'],['optimization']
Performance,"No, I have to refactor the code such that the PE stuff is Python-side only (see ToDo list above).; In the meantime, I'll hopefully a) have a first ""release"" of `cppe` ready that can be pinned in the `ExternalProject` and b) have the PR with performance improvements for electric field integrals done. Is there a deadline for the Psi4 1.4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769:241,perform,performance,241,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769,1,['perform'],['performance']
Performance,"No, guess=read is specifically disabled https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L451 . As to how to run the calc, there's ways to deposit and collect scratch files in a qcng.compute run, and that could be done with the npy file and the optimize() fn or the optking qcng procedure. Ultimately, the optking qcng procedure should set the orbitals protocol so that it collects orbitals from gradients and can reseed them for the next gradient. The barrier to that right now is that psi4 can write the QCSchema Wavefunction, but it can't reinitialize a psi4.Wfn from it. (It's a BasisSet coeff issue I noticed last summer but haven't been able to follow up on.). So this input is something we don't want to prevent, but it would need some hacking at the present, and it might hit some other problem along the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037:274,optimiz,optimize,274,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037,1,['optimiz'],['optimize']
Performance,"Not sure whether the group concerned are still working on this. I haven't looked at this since. However, I do remember it isn't IO as we took it through Darshan which is an IO profiler.; It did have a feel of load balancing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-122122695:209,load,load,209,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-122122695,1,['load'],['load']
Performance,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089575:560,perform,performs,560,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575,1,['perform'],['performs']
Performance,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235927654:140,tune,tuned,140,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654,1,['tune'],['tuned']
Performance,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:14,Optimiz,Optimizations,14,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,2,"['Optimiz', 'optimiz']","['Optimizations', 'optimizations']"
Performance,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:25,optimiz,optimized,25,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000,2,"['Queue', 'optimiz']","['Queue', 'optimized']"
Performance,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:230,perform,perform,230,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772,1,['perform'],['perform']
Performance,"OK, now it's; ```; DFHelper Memory: AOs need 4.030 GiB; user supplied 4.030 GiB. Using in-core AOs.; Cached 50.0% of DFT collocation blocks in 6.225 [GiB].; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819#issuecomment-593636343:101,Cache,Cached,101,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593636343,1,['Cache'],['Cached']
Performance,"OK, the results are here:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. The ""missing"" field are all non-dispersion corrected functionals currently in Psi4 master without a reference value. The ones in the ""skip"" array fail to run. I can not do much about some of them, as I don't have access to many other QC packages. The good part is, that with the exception of SOGGA (which fails against old Psi4), all other functionals currently pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280:750,TUNE,TUNED-CAM-,750,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280,1,['TUNE'],['TUNED-CAM-']
Performance,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:631,load,load,631,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['load'],['load']
Performance,OMP2 optimized orbitals dump to molden file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185:5,optimiz,optimized,5,https://psicode.org,https://github.com/psi4/psi4/issues/185,1,['optimiz'],['optimized']
Performance,OPTKING PSIO error: optimization data write failure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimization']
Performance,OPTKING: Optimization failure not throwing PsiException,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:9,Optimiz,Optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/800,1,['Optimiz'],['Optimization']
Performance,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236:586,load,load,586,https://psicode.org,https://github.com/psi4/psi4/issues/2236,2,['load'],['load']
Performance,"O](https://en.wikipedia.org/wiki/CASINO) is well known program for performing quantum Monte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1028,optimiz,optimization,1028,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8246,optimiz,optimized,8246,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13904,optimiz,optimized,13904,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15234,optimiz,optimized,15234,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24188,optimiz,optimized,24188,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
